{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/views/entries/SimpleEntryTemplate.vue?c0d2","webpack:///./src/views/entries/custom/2020/TicketTranslationView.vue?b6e5","webpack:///./src/components/CalendarEntry.vue?df60","webpack:///./src/components/Navbar.vue?9493","webpack:///./src/components/Graph.vue?a3c7","webpack:///./src/views/Home.vue?df99","webpack:///./src/views/entries/custom/2021/PassagePathing.vue?e51c","webpack:///./src/views/entries/EntryWithPauseAndRun.vue?e59c","webpack:///./data lazy ^\\.\\/.*\\.txt$ namespace object","webpack:///./src/App.vue?32ef","webpack:///./src/components/EntryTitle.vue?1a19","webpack:///./src/entries/single-entries/2021/amphipod/example.ts","webpack:///./src/components/EntrySimpleOutput.vue?853b","webpack:///./src/views/entries/custom/2023/ScratchCards.vue?1097","webpack:///./src/views/entries/custom/2020/ConwayCubesView.vue?01d5","webpack:///./src/components/EntryFileInput.vue?cd28","webpack:///./src/components/EntryInput.vue?35e0","webpack:///./src/components/Hamburger.vue?4120","webpack:///./src/components/EntryChoice.vue?4632","webpack:///./src/components/EntryTemplate.vue?3620","webpack:///./src/views/entries/custom/BaseMessageTemplate.vue?4793","webpack:///./src/views/entries/custom/2020/LobbyLayout.vue?410e","webpack:///./src/App.vue","webpack:///./src/components/Navbar.vue","webpack:///./src/components/Hamburger.vue","webpack:///./src/components/Hamburger.vue?5d04","webpack:///./src/components/Hamburger.vue?ce43","webpack:///./src/components/Hamburger.vue?0a41","webpack:///./src/components/Year.vue","webpack:///./src/components/Year.vue?3be5","webpack:///./src/components/Year.vue?82b7","webpack:///./src/components/Year.vue?8a9b","webpack:///./src/state/state.ts","webpack:///./src/components/Navbar.vue?1a8f","webpack:///./src/constants/choice.ts","webpack:///./src/components/Navbar.vue?8621","webpack:///./src/components/Navbar.vue?76b8","webpack:///./src/entries/entry.ts","webpack:///./src/entries/single-entries/2015/not-quite-lisp.ts","webpack:///./src/entries/single-entries/2015/i-was-told-there-would-be-no-math.ts","webpack:///./src/support/best.ts","webpack:///./src/support/data-structure.ts","webpack:///./src/support/geometry.ts","webpack:///./src/entries/single-entries/2015/perfect-spherical-houses-in-a-vacuum.ts","webpack:///./src/entries/single-entries/2015/the-ideal-stocking-stuffer.ts","webpack:///./src/entries/single-entries/2015/intern-elves.ts","webpack:///./src/support/async.ts","webpack:///./src/support/matrix.ts","webpack:///./src/entries/single-entries/2015/probably-a-fire-hazard.ts","webpack:///./src/entries/single-entries/2015/some-assembly-required.ts","webpack:///./src/entries/single-entries/2015/matchsticks.ts","webpack:///./src/support/sequences.ts","webpack:///./src/entries/single-entries/2015/all-in-a-single-night.ts","webpack:///./src/entries/single-entries/2015/elves-look-elves-say.ts","webpack:///./src/entries/single-entries/2015/corporate-policy.ts","webpack:///./src/entries/single-entries/2015/abacus-framework.ts","webpack:///./src/entries/single-entries/2015/knights-of-the-dinner-table.ts","webpack:///./src/entries/single-entries/2015/reindeer-olympics.ts","webpack:///./src/entries/single-entries/2015/science-for-hungry-people.ts","webpack:///./src/entries/single-entries/2015/aunt-sue.ts","webpack:///./src/entries/single-entries/2015/no-such-thing-as-too-much.ts","webpack:///./src/entries/single-entries/2015/like-a-gif-for-your-yard.ts","webpack:///./src/entries/single-entries/2015/turing-lock.ts","webpack:///./src/entries/single-entries/2015/medicine-for-rudolph.ts","webpack:///./src/entries/single-entries/2015/infinite-elves-and-infinite-houses.ts","webpack:///./src/entries/single-entries/2015/rpg-simulator-20xx.ts","webpack:///./src/entries/single-entries/2015/wizard-simulator-20xx.ts","webpack:///./src/support/time.ts","webpack:///./src/entries/single-entries/2015/it-hangs-in-the-balance.ts","webpack:///./src/support/algebra.ts","webpack:///./src/entries/single-entries/2015/let-it-snow.ts","webpack:///./src/entries/single-entries/2015/index.ts","webpack:///./src/entries/single-entries/2016/no-time-for-a-taxicab.ts","webpack:///./src/entries/single-entries/2016/bathroom-security.ts","webpack:///./src/entries/single-entries/2016/squares-with-three-sides.ts","webpack:///./src/entries/single-entries/2016/security-through-obscurity.ts","webpack:///./src/support/random.ts","webpack:///./src/entries/single-entries/2016/how-about-a-nice-game-of-chess.ts","webpack:///./src/entries/single-entries/2016/signals-and-noise.ts","webpack:///./src/entries/single-entries/2016/internet-protocol-version-7.ts","webpack:///./src/entries/single-entries/2016/two-factor-authentication.ts","webpack:///./src/entries/single-entries/2016/explosives-in-cyberspace.ts","webpack:///./src/entries/single-entries/2016/balance-bots.ts","webpack:///./src/entries/single-entries/2016/radioisotope-thermoelectric-generators.ts","webpack:///./src/entries/single-entries/2016/common/assembunny.ts","webpack:///./src/entries/single-entries/2016/leonardos-monorail.ts","webpack:///./src/support/labyrinth.ts","webpack:///./src/entries/single-entries/2016/a-maze-of-twisty-little-cubicles.ts","webpack:///./src/entries/single-entries/2016/one-time-pad.ts","webpack:///./src/entries/single-entries/2016/timing-is-everything.ts","webpack:///./src/entries/single-entries/2016/dragon-checksum.ts","webpack:///./src/entries/single-entries/2016/two-steps-forward.ts","webpack:///./src/entries/single-entries/2016/like-a-rogue.ts","webpack:///./src/entries/single-entries/2016/an-elephant-named-joseph.ts","webpack:///./src/entries/single-entries/2016/firewall-rules.ts","webpack:///./src/entries/single-entries/2016/scrambled-letters-and-hash.ts","webpack:///./src/entries/single-entries/2016/grid-computing.ts","webpack:///./src/entries/single-entries/2016/safe-cracking.ts","webpack:///./src/entries/single-entries/2016/air-duct-spelunking.ts","webpack:///./src/entries/single-entries/2016/clock-signal.ts","webpack:///./src/entries/single-entries/2016/index.ts","webpack:///./src/entries/single-entries/2017/a-maze-of-twisty-trampolines-all-alike.ts","webpack:///./src/entries/single-entries/2017/a-series-of-tubes.ts","webpack:///./src/entries/single-entries/2017/coprocessor-conflagration.ts","webpack:///./src/entries/single-entries/2017/corruption-checksum.ts","webpack:///./src/entries/single-entries/2017/digital-plumber.ts","webpack:///./src/entries/single-entries/2017/knot-hash.ts","webpack:///./src/entries/single-entries/2017/disk-defragmentation.ts","webpack:///./src/entries/single-entries/2017/dueling-generators.ts","webpack:///./src/entries/single-entries/2017/duet.ts","webpack:///./src/entries/single-entries/2017/electromagnetic-moat.ts","webpack:///./src/entries/single-entries/2017/fractal-art.ts","webpack:///./src/entries/single-entries/2017/heard-you-like-registers.ts","webpack:///./src/support/hex-geometry.ts","webpack:///./src/entries/single-entries/2017/hex-ed.ts","webpack:///./src/entries/single-entries/2017/high-entropy-passhprases.ts","webpack:///./src/entries/single-entries/2017/inverse-captcha.ts","webpack:///./src/entries/single-entries/2017/memory-reallocation.ts","webpack:///./src/entries/single-entries/2017/packet-scanners.ts","webpack:///./src/entries/single-entries/2017/particle-swarm.ts","webpack:///./src/entries/single-entries/2017/permutation-promenade.ts","webpack:///./src/entries/single-entries/2017/recursive-circus.ts","webpack:///./src/entries/single-entries/2017/spinlock.ts","webpack:///./src/support/ulam.ts","webpack:///./src/support/field.ts","webpack:///./src/entries/single-entries/2017/spiral-memory.ts","webpack:///./src/entries/single-entries/2017/sporifica-virus.ts","webpack:///./src/entries/single-entries/2017/stream-processing.ts","webpack:///./src/entries/single-entries/2017/the-halting-problem.ts","webpack:///./src/entries/single-entries/2017/index.ts","webpack:///./src/entries/single-entries/2018/frequency.ts","webpack:///./src/entries/single-entries/2018/inventory.ts","webpack:///./src/entries/single-entries/2018/no-matter-how-you-slice-it.ts","webpack:///./src/support/log.ts","webpack:///./src/entries/single-entries/2018/repose-record.ts","webpack:///./src/entries/single-entries/2018/alchemical-reduction.ts","webpack:///./src/entries/single-entries/2018/chronal-coordinates.ts","webpack:///./src/entries/single-entries/2018/the-sum-of-its-parts.ts","webpack:///./src/entries/single-entries/2018/memory-maneuver.ts","webpack:///./src/entries/single-entries/2018/marble-mania.ts","webpack:///./src/entries/single-entries/2018/the-stars-align.ts","webpack:///./src/entries/single-entries/2018/chronal-charge.ts","webpack:///./src/entries/single-entries/2018/subterranean.ts","webpack:///./src/entries/single-entries/2018/mine-cart-madness.ts","webpack:///./src/entries/single-entries/2018/chocolate-charts.ts","webpack:///./src/entries/single-entries/2018/beverage-bandits.ts","webpack:///./src/entries/single-entries/2018/chronal-classification.ts","webpack:///./src/entries/single-entries/2018/reservoir-research.ts","webpack:///./src/entries/single-entries/2018/settlers-of-the-north-pole.ts","webpack:///./src/entries/single-entries/2018/go-with-the-flow.ts","webpack:///./src/entries/single-entries/2018/a-regular-map.ts","webpack:///./src/entries/single-entries/2018/chronal-conversion.ts","webpack:///./src/entries/single-entries/2018/mode-maze.ts","webpack:///./src/entries/single-entries/2018/experimental-emergency-transportation.ts","webpack:///./src/entries/single-entries/2018/immune-system-simulator-20xx.ts","webpack:///./src/entries/single-entries/2018/four-dimensional-adventure.ts","webpack:///./src/entries/single-entries/2018/index.ts","webpack:///./src/entries/single-entries/2019/rocket-tyranny.ts","webpack:///./src/entries/single-entries/2019/program-alarm.ts","webpack:///./src/entries/single-entries/2019/crossed-wires.ts","webpack:///./src/entries/single-entries/2019/secure-container.ts","webpack:///./src/support/intcode.ts","webpack:///./src/entries/single-entries/2019/sunny-asteroids.ts","webpack:///./src/entries/single-entries/2019/universal-orbit-map.ts","webpack:///./src/entries/single-entries/2019/amplification-circuit.ts","webpack:///./src/entries/single-entries/2019/space-image-format.ts","webpack:///./src/entries/single-entries/2019/sensor-boost.ts","webpack:///./src/entries/single-entries/2019/monitoring-station.ts","webpack:///./src/entries/single-entries/2019/space-police.ts","webpack:///./src/entries/single-entries/2019/n-body-problem.ts","webpack:///./src/entries/single-entries/2019/care-package.ts","webpack:///./src/entries/single-entries/2019/space-stoichiometry.ts","webpack:///./src/entries/single-entries/2019/oxygen-system.ts","webpack:///./src/entries/single-entries/2019/flawed-frequency-transmission.ts","webpack:///./src/entries/single-entries/2019/set-and-forget.ts","webpack:///./src/entries/single-entries/2019/many-worlds-interpretation.ts","webpack:///./src/entries/single-entries/2019/tractor-beam.ts","webpack:///./src/entries/single-entries/2019/donut-maze.ts","webpack:///./src/entries/single-entries/2019/springroid-adventure.ts","webpack:///./src/entries/single-entries/2019/slam-shuffle.ts","webpack:///./src/entries/single-entries/2019/category-six.ts","webpack:///./src/entries/single-entries/2019/planet-of-discord.ts","webpack:///./src/entries/single-entries/2019/cryostasis.ts","webpack:///./src/entries/single-entries/2019/index.ts","webpack:///./src/entries/single-entries/2020/binary-boarding/visualizer.ts","webpack:///./src/entries/single-entries/2020/binary-boarding/index.ts","webpack:///./src/entries/single-entries/2020/passport-processing/visualizer.ts","webpack:///./src/entries/single-entries/2020/passport-processing/index.ts","webpack:///./src/entries/single-entries/2020/password-philosophy/visualizer.ts","webpack:///./src/entries/single-entries/2020/password-philosophy/index.ts","webpack:///./src/entries/single-entries/2020/custom-customs/visualizer.ts","webpack:///./src/entries/single-entries/2020/custom-customs/index.ts","webpack:///./src/entries/single-entries/2020/report-repair/visualizer.ts","webpack:///./src/entries/single-entries/2020/report-repair/index.ts","webpack:///./src/entries/single-entries/2020/toboggan-trajectory/visualizer.ts","webpack:///./src/entries/single-entries/2020/toboggan-trajectory/index.ts","webpack:///./src/entries/single-entries/2020/handy-haversacks/index.ts","webpack:///./src/entries/single-entries/2020/support/handheld.ts","webpack:///./src/entries/single-entries/2020/handheld-halting/visualizer.ts","webpack:///./src/entries/single-entries/2020/handheld-halting/index.ts","webpack:///./src/entries/single-entries/2020/encoding-error/visualizer.ts","webpack:///./src/entries/single-entries/2020/encoding-error/index.ts","webpack:///./src/entries/single-entries/2020/adapter-array/index.ts","webpack:///./src/entries/single-entries/2020/seating-system/visualizer.ts","webpack:///./src/entries/single-entries/2020/seating-system/index.ts","webpack:///./src/entries/single-entries/2020/rain-risk/index.ts","webpack:///./src/entries/single-entries/2020/shuttle-search/index.ts","webpack:///./src/entries/single-entries/2020/docking-data/index.ts","webpack:///./src/entries/single-entries/2020/rambunctious-recitation/index.ts","webpack:///./src/entries/single-entries/2020/ticket-translation/communication.ts","webpack:///./src/entries/single-entries/2020/ticket-translation/index.ts","webpack:///./src/entries/single-entries/2020/conway-cubes/communication.ts","webpack:///./src/entries/single-entries/2020/conway-cubes/index.ts","webpack:///./src/entries/single-entries/2020/operation-order/index.ts","webpack:///./src/entries/single-entries/2020/monster-messages/index.ts","webpack:///./src/entries/single-entries/2020/jurassic-jigsaw/index.ts","webpack:///./src/entries/single-entries/2020/crab-cups/index.ts","webpack:///./src/entries/single-entries/2020/allergen-assessment/index.ts","webpack:///./src/entries/single-entries/2020/crab-combat/index.ts","webpack:///./src/entries/single-entries/2020/lobby-layout/index.ts","webpack:///./src/entries/single-entries/2020/combo-breaker/index.ts","webpack:///./src/entries/single-entries/2020/index.ts","webpack:///./src/entries/single-entries/2021/support/submarine.ts","webpack:///./src/entries/single-entries/2021/sonar-sweep/visualizer.ts","webpack:///./src/entries/single-entries/2021/sonar-sweep/index.ts","webpack:///./src/entries/single-entries/2021/dive/visualizer.ts","webpack:///./src/entries/single-entries/2021/dive/index.ts","webpack:///./src/entries/single-entries/2021/binary-diagnostic/visualizer.ts","webpack:///./src/entries/single-entries/2021/binary-diagnostic/index.ts","webpack:///./src/entries/single-entries/2021/giant-squid/visualizer.ts","webpack:///./src/entries/single-entries/2021/giant-squid/index.ts","webpack:///./src/entries/single-entries/2021/hydrothermal-venture/visualizer.ts","webpack:///./src/entries/single-entries/2021/hydrothermal-venture/index.ts","webpack:///./src/entries/single-entries/2021/lanternfish/visualizer.ts","webpack:///./src/entries/single-entries/2021/lanternfish/index.ts","webpack:///./src/entries/single-entries/2021/the-treachery-of-whales/index.ts","webpack:///./src/entries/single-entries/2021/seven-segment-search/bruteVisualizer.ts","webpack:///./src/entries/single-entries/2021/seven-segment-search/bruteVariant.ts","webpack:///./src/entries/single-entries/2021/seven-segment-search/index.ts","webpack:///./src/entries/single-entries/2021/smoke-basin/visualizer.ts","webpack:///./src/entries/single-entries/2021/smoke-basin/index.ts","webpack:///./src/entries/single-entries/2021/syntax-scoring/unstacked.ts","webpack:///./src/entries/single-entries/2021/syntax-scoring/index.ts","webpack:///./src/entries/single-entries/2021/dumbo-octopus/visualizer.ts","webpack:///./src/entries/single-entries/2021/dumbo-octopus/index.ts","webpack:///./src/entries/single-entries/2021/passage-pathing/communication.ts","webpack:///./src/entries/single-entries/2021/passage-pathing/index.ts","webpack:///./src/entries/single-entries/2021/transparent-origami/visualizer.ts","webpack:///./src/entries/single-entries/2021/transparent-origami/index.ts","webpack:///./src/entries/single-entries/2021/extended-polymerization/index.ts","webpack:///./src/support/serialization.ts","webpack:///./src/entries/single-entries/2021/chiton/index.ts","webpack:///./src/entries/graphCommunication.ts","webpack:///./src/entries/single-entries/2021/packet-decoder/communicator.ts","webpack:///./src/entries/single-entries/2021/packet-decoder/index.ts","webpack:///./src/entries/single-entries/2021/trick-shot/visualizer.ts","webpack:///./src/entries/single-entries/2021/trick-shot/index.ts","webpack:///./src/entries/single-entries/2021/snailfish/index.ts","webpack:///./src/entries/single-entries/2021/beacon-scanner/index.ts","webpack:///./src/entries/single-entries/2021/trench-map/visualizer.ts","webpack:///./src/entries/single-entries/2021/trench-map/index.ts","webpack:///./src/entries/single-entries/2021/dirac-dice/index.ts","webpack:///./src/entries/single-entries/2021/reactor-reboot/index.ts","webpack:///./src/entries/single-entries/2021/amphipod/visualizer.ts","webpack:///./src/entries/single-entries/2021/amphipod/index.ts","webpack:///./src/entries/single-entries/2021/arithmetic-logic-unit/index.ts","webpack:///./src/support/error.ts","webpack:///./src/entries/single-entries/2021/sea-cucumber/visualizer.ts","webpack:///./src/entries/single-entries/2021/sea-cucumber/index.ts","webpack:///./src/entries/single-entries/2021/index.ts","webpack:///./src/support/parser.ts","webpack:///./src/entries/single-entries/2022/beacon-exclusion-zone/index.ts","webpack:///./src/entries/single-entries/2022/blizzard-basin/index.ts","webpack:///./src/entries/single-entries/2022/boiling-boulders/index.ts","webpack:///./src/entries/single-entries/2022/calorie-counting/visualizer.ts","webpack:///./src/entries/single-entries/2022/calorie-counting/index.ts","webpack:///./src/entries/single-entries/2022/camp-cleanup/visualizer.ts","webpack:///./src/entries/single-entries/2022/camp-cleanup/index.ts","webpack:///./src/entries/single-entries/2022/cathode-ray-tube/index.ts","webpack:///./src/entries/single-entries/2022/distress-signal/index.ts","webpack:///./src/entries/single-entries/2022/full-of-hot-air/index.ts","webpack:///./src/entries/single-entries/2022/grove-positioning-system/index.ts","webpack:///./src/entries/single-entries/2022/hill-climbing-algorithm/index.ts","webpack:///./src/entries/single-entries/2022/monkey-in-the-middle/index.ts","webpack:///./src/entries/single-entries/2022/monkey-map/index.ts","webpack:///./src/entries/single-entries/2022/monkey-math/index.ts","webpack:///./src/entries/single-entries/2022/no-space-left-on-device/index.ts","webpack:///./src/entries/single-entries/2022/proboscidea-volcanium/index.ts","webpack:///./src/entries/single-entries/2022/pyroclastic-flow/index.ts","webpack:///./src/entries/single-entries/2022/regolith-reservoir/index.ts","webpack:///./src/entries/single-entries/2022/rock-paper-scissors/index.ts","webpack:///./src/entries/single-entries/2022/rope-bridge/index.ts","webpack:///./src/entries/single-entries/2022/rucksack-reorganization/index.ts","webpack:///./src/entries/single-entries/2022/supply-stacks/index.ts","webpack:///./src/entries/single-entries/2022/treetop-tree-house/index.ts","webpack:///./src/entries/single-entries/2022/tuning-trouble/index.ts","webpack:///./src/entries/single-entries/2022/unstable-diffusion/index.ts","webpack:///./src/entries/single-entries/2022/index.ts","webpack:///./src/entries/single-entries/2023/trebuchet/communication.ts","webpack:///./src/entries/single-entries/2023/trebuchet/example.ts","webpack:///./src/entries/single-entries/2023/trebuchet/index.ts","webpack:///./src/entries/single-entries/2023/cube-conundrum/visualizer.ts","webpack:///./src/entries/single-entries/2023/cube-conundrum/index.ts","webpack:///./src/entries/single-entries/2023/gear-ratios/example.ts","webpack:///./src/entries/single-entries/2023/gear-ratios/index.ts","webpack:///./src/entries/single-entries/2023/scratch-cards/communicator.ts","webpack:///./src/entries/single-entries/2023/scratch-cards/index.ts","webpack:///./src/entries/single-entries/2023/if-you-give-a-seed-a-fertilizer/example.ts","webpack:///./src/entries/single-entries/2023/if-you-give-a-seed-a-fertilizer/index.ts","webpack:///./src/entries/single-entries/2023/wait-for-it/index.ts","webpack:///./src/entries/single-entries/2023/camel-cards/index.ts","webpack:///./src/entries/single-entries/2023/haunted-wasteland/index.ts","webpack:///./src/entries/single-entries/2023/mirage-maintenance/index.ts","webpack:///./src/entries/single-entries/2023/pipe-maze/index.ts","webpack:///./src/entries/single-entries/2023/cosmic-expansion/index.ts","webpack:///./src/support/optimization.ts","webpack:///./src/entries/single-entries/2023/hot-springs/index.ts","webpack:///./src/entries/single-entries/2023/point-of-incidence/index.ts","webpack:///./src/entries/single-entries/2023/parabolic-reflector-dish/index.ts","webpack:///./src/entries/single-entries/2023/lens-library/index.ts","webpack:///./src/entries/single-entries/2023/the-floor-will-be-lava/index.ts","webpack:///./src/entries/single-entries/2023/clumsy-crucible/index.ts","webpack:///./src/entries/single-entries/2023/index.ts","webpack:///./src/entries/entryList.ts","webpack:///./src/App.vue?dad8","webpack:///./src/App.vue?0e28","webpack:///./src/App.vue?3746","webpack:///./src/views/Home.vue","webpack:///./src/views/Home.vue?88c7","webpack:///./src/views/Home.vue?7bc5","webpack:///./src/views/Home.vue?86b4","webpack:///./src/views/Entries.vue","webpack:///./src/components/CalendarEntry.vue","webpack:///./src/support/string.ts","webpack:///./src/components/CalendarEntry.vue?5e64","webpack:///./src/components/CalendarEntry.vue?1521","webpack:///./src/components/CalendarEntry.vue?eae4","webpack:///./src/views/Entries.vue?20ef","webpack:///./src/views/Entries.vue?1aec","webpack:///./src/views/Entries.vue?0dd6","webpack:///./src/views/entries/SimpleEntryTemplate.vue","webpack:///./src/components/EntryTemplate.vue","webpack:///./src/components/EntryTitle.vue","webpack:///./src/components/EntryTitle.vue?a713","webpack:///./src/components/EntryTitle.vue?3f73","webpack:///./src/components/EntryTitle.vue?4ed8","webpack:///./src/components/EntryInput.vue","webpack:///./src/components/EntryFileInput.vue","webpack:///./src/support/file-reader.ts","webpack:///./src/components/EntryFileInput.vue?6315","webpack:///./src/components/EntryFileInput.vue?4b62","webpack:///./src/components/EntryFileInput.vue?ebd7","webpack:///./src/components/EntryChoice.vue","webpack:///./src/components/EntryChoice.vue?4dd3","webpack:///./src/components/EntryChoice.vue?0cc5","webpack:///./src/components/EntryChoice.vue?57e1","webpack:///./src/entries/embeddedData.ts","webpack:///./src/components/EntryInput.vue?af69","webpack:///./src/components/EntryInput.vue?6140","webpack:///./src/components/EntryInput.vue?ccea","webpack:///./src/components/EntryTemplate.vue?13c1","webpack:///./src/components/EntryTemplate.vue?7b52","webpack:///./src/components/EntryTemplate.vue?56aa","webpack:///./src/components/EntrySimpleOutput.vue","webpack:///./src/components/EntrySimpleOutput.vue?5c61","webpack:///./src/components/EntrySimpleOutput.vue?71d6","webpack:///./src/components/EntrySimpleOutput.vue?0190","webpack:///./src/support/browser/mediaQuery.ts","webpack:///./src/support/browser/index.ts","webpack:///./src/views/entries/SimpleEntryTemplate.vue?1b9f","webpack:///./src/views/entries/SimpleEntryTemplate.vue?291c","webpack:///./src/views/entries/SimpleEntryTemplate.vue?91ee","webpack:///./src/views/entries/custom/2020/TicketTranslationView.vue","webpack:///./src/views/entries/custom/BaseMessageTemplate.vue","webpack:///./src/views/entries/custom/BaseMessageTemplate.vue?ba52","webpack:///./src/views/entries/custom/BaseMessageTemplate.vue?5d09","webpack:///./src/views/entries/custom/BaseMessageTemplate.vue?7e0b","webpack:///./src/views/entries/custom/2020/TicketTranslationView.vue?eeb5","webpack:///./src/views/entries/custom/2020/TicketTranslationView.vue?ceba","webpack:///./src/views/entries/custom/2020/TicketTranslationView.vue?2741","webpack:///./src/views/entries/custom/2020/ConwayCubesView.vue","webpack:///./src/views/entries/custom/2020/ConwayCubesView.vue?ec49","webpack:///./src/views/entries/custom/2020/ConwayCubesView.vue?0295","webpack:///./src/views/entries/custom/2020/ConwayCubesView.vue?42cf","webpack:///./src/views/entries/custom/2020/LobbyLayout.vue","webpack:///./src/views/entries/custom/2020/LobbyLayout.vue?bf3c","webpack:///./src/views/entries/custom/2020/LobbyLayout.vue?0d7f","webpack:///./src/views/entries/custom/2020/LobbyLayout.vue?08b1","webpack:///./src/views/entries/EntryWithPauseAndRun.vue","webpack:///./src/views/entries/EntryWithPauseAndRun.vue?7b5e","webpack:///./src/views/entries/EntryWithPauseAndRun.vue?052d","webpack:///./src/views/entries/EntryWithPauseAndRun.vue?c17b","webpack:///./src/views/entries/EntryWithGraph.vue","webpack:///./src/components/Graph.vue","webpack:///./src/components/Graph.vue?32f6","webpack:///./src/components/Graph.vue?fe82","webpack:///./src/components/Graph.vue?4f5b","webpack:///./src/views/entries/EntryWithGraph.vue?20f6","webpack:///./src/views/entries/EntryWithGraph.vue?6eed","webpack:///./src/views/entries/EntryWithGraph.vue?901f","webpack:///./src/views/entries/custom/2021/PassagePathing.vue","webpack:///./src/views/entries/custom/2021/PassagePathing.vue?231d","webpack:///./src/views/entries/custom/2021/PassagePathing.vue?d566","webpack:///./src/views/entries/custom/2021/PassagePathing.vue?5223","webpack:///./src/views/entries/custom/2023/Trebuchet.vue","webpack:///./src/views/entries/custom/2023/Trebuchet.vue?1239","webpack:///./src/views/entries/custom/2023/Trebuchet.vue?0df3","webpack:///./src/views/entries/custom/2023/Trebuchet.vue?ebe1","webpack:///./src/views/entries/custom/2023/ScratchCards.vue","webpack:///./src/views/entries/custom/2023/ScratchCards.vue?0033","webpack:///./src/views/entries/custom/2023/ScratchCards.vue?fa59","webpack:///./src/views/entries/custom/2023/ScratchCards.vue?5f3b","webpack:///./src/entries/entryMap.ts","webpack:///./src/router.ts","webpack:///./src/main.ts","webpack:///./src/views/entries/EntryWithGraph.vue?c092","webpack:///./src/views/Entries.vue?d8fb","webpack:///./src/views/entries/custom/2023/Trebuchet.vue?69d2"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","jsonpScriptSrc","p","exports","module","l","e","promises","installedChunkData","promise","Promise","resolve","reject","onScriptComplete","script","document","createElement","charset","timeout","nc","setAttribute","src","error","Error","event","onerror","onload","clearTimeout","chunk","errorType","type","realSrc","target","message","name","request","undefined","setTimeout","head","appendChild","all","m","c","d","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","oe","err","console","jsonpArray","window","oldJsonpFunction","slice","map","webpackAsyncContext","req","then","code","ids","id","keys","exampleInput","render","_vm","this","_c","_self","_setupProxy","attrs","entryByYears","staticRenderFns","staticClass","on","toggleNavbar","_v","style","navbarStyle","_l","years","year","selectedYear","$event","selectYear","shouldTruncateList","_e","entryList","entry","_s","title","lastEntryName","$emit","lineStyle","Vue","extend","props","size","Number","computed","width","concat","height","margin","selected","Boolean","baseState","dates","updateYear","parseInt","Choice","components","Year","Hamburger","watch","$route","to","from","navbarActivated","methods","list","fullEntryList","reducedList","Math","max","left","ensureEmebedded","embedAll","entries","metadata","_objectSpread","embeddedData","entryForFile","first","second","simpleOutputCallbackFactory","output","avoidOutput","outputLine","shouldClear","Array","isArray","join","JSON","stringify","StopException","_Error","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","_key","_defineProperty","_assertThisInitialized","_createClass","_wrapNativeSuper","executeEntry","_x","_executeEntry","_asyncToGenerator","regeneratorRuntime","mark","_callee4","_ref","choice","lines","outputCallback","isCancelled","pause","additionalInputReader","screen","isQuickRunning","stopTimer","sendMessage","mediaQuery","isExample","callback","basePause","shouldAutoStop","wrappedPause","resultOutput","wrap","_context4","prev","next","_ref2","_callee","times","_context","abrupt","stop","_x2","_callee2","_context2","resultOutputCallback","_ref4","_callee3","line","_context3","_x3","_x4","setAutoStop","t0","isStop","log","notQuiteLisp","count","split","reduce","acc","_ref3","position","stars","iWasToldThereWouldBeNoMath","sizes","areas","minArea","min","totalArea","biggest","smallestPerimeter","volume","a","maxNumber","b","minNumber","ascending","CustomBest","comparator","currentBest","Best","_CustomBest","SimpleBest","_Symbol$iterator","iterator","LinkedList","element","startNode","append","DoubleLinkedNode","current","remove","removeNext","removePrev","Heap","heap","BinaryHeap","pop","toArray","forEach","Queue","firstNode","isEmpty","node","res","lastNode","_size","add","newFirst","toReturn","Counter","_data","values","_step","_iterator","_createForOfIteratorHelper","done","x","incr","f","DefaultListDictionaryString","ensureKey","dictionary","maxLength","item","oldNext","newNext","oldPrev","newPrev","Tree","_toConsumableArray","subNodes","CircularDoubleLinkedNode","_next","_prev","toRemove","removePrevious","SerializableSet","ser","_this2","set","Set","serialize","has","delete","_step2","_iterator2","_this3","deserialize","_this4","_iterator3","_step3","_value3","finish","_step4","_iterator4","other","_step5","_iterator5","SerializableDictionary","serializer","dict","_this5","k","_step6","_iterator6","_f","_Symbol$iterator2","DefaultDict","defaultValue","options","Map","isDataSerializable","iterableKeys","v","setOnGet","_iterator7","_step7","_iterator8","_step8","_entry","t1","_iterator9","_step9","DefaultNumberDict","_DefaultDict","update","is4d","w","is3d","z","is2d","isBounds","CCoordinate","y","isInBounds","topLeft","manhattanDistance","sumCoordinate","scalarCoordinates","isLiteralDirection","includes","mapLiteralToDirection","directions","down","right","up","upLeft","upRight","downLeft","downRight","drawStraightLine","toIncluded","sign","directionList","rotate","coordinate","direction","fillWithZero","CoordinateSet","_SerializableSet","serialization","ascendingCompare","bounds","getCorners","joinBoundaries","currentCorners","nextCorners","getBoundaries","points","_getRanges","getRanges","maxX","minX","maxY","minY","getTopLeftBottomRight","boundsIntersect","r1","r2","boundsContain","outer","inner","oppositeCoordinate","diffCoordinate","abs","isSameCoordinate","getSurrounding","sum","getFullSurrounding","filter","deltas","_i","_deltas","neighbour","_i2","_deltas3","minComparator","maxComparator","getCoordinateForGrid","index","rows","floor","els","deserialize4d","RangeError","deserialize3d","multiplyCoordinate","floatRotateRadians","center","point","angle","cx","cy","cos","sin","nx","ny","perfectSphericalHousesInAVacuum","visited","startPosition","directionMapper","currentPosition","currentPositions","hasLeadingZeros","theIdealStockingStuffer","hashed","trim","Md5","hashAsciiStr","calculateHasDuplicates","buildGroups","isNice","vowels","howManyVowels","indexOf","hasDuplicates","hasForbidden","conditions","hasNicePairs","pairs","lastIndexOf","hasNiceTrios","trios","trio","internElves","niceLines","forEachAsync","_forEachAsync","action","mapAsync","_mapAsync","sent","t2","setTimeoutAsync","voidIsPromise","casted","isPromise","FixedSizeMatrix","_delta","mapper","coordinateCalculator","delta","fillValue","fillValueFactory","opposite","indexCalculator","startAccumulator","cell","predicate","findOneWithCoordinate","_onEveryCell","awaited","onEveryCell","getUnsafe","lc","newMatrix","overRows","rowIndex","startIndex","endIndex","stringifier","serialized","wu","row","stringified","customComparer","thisFlatData","otherFlatData","zip","tuple","parser","fromPlain","matrix","probablyAFireHazard","field","startsWith","_","tokens","_tokens$delta$split$m","_tokens$delta$split$m2","_slicedToArray","top","_tokens$split$map","_tokens$split$map2","bottom","fill","_tokens$delta$split$m3","_tokens$delta$split$m4","_tokens$split$map3","_tokens$split$map4","parseInput","parsed","_line$split","_line$split2","destination","operation","operator","input","parseNumberOrString","amount","isNumber","toString","calculate","wire","state","_input$filter","_input$filter2","rule","handleOperation","isNaN","someAssemblyRequired","newInput","newValue","countRealLetters","isEscaped","skip","sliced","realCount","countEncoded","matchsticks","overhead","encoded","_marked6","range","_marked7","subsequenceGenerator","_marked8","permutationGenerator","_marked9","buildGroupsFromSeparator","allowArrayLike","it","_unsupportedIterableToArray","F","TypeError","normalCompletion","didErr","step","_e2","return","minLen","_arrayLikeToArray","constructor","test","arr","len","arr2","_asyncIterator","asyncIterator","AsyncFromSyncIterator","AsyncFromSyncIteratorContinuation","throw","howManySameAtEnd","sequence","counter","lastElement","_Symbol$asyncIterator","MyAsyncIterable","_wrapAsyncGenerator","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_awaitAsyncGenerator","that","_inner","thisIterator","otherIterator","_inner2","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_inner3","windows","_iteratorAbruptCompletion3","_didIteratorError3","_iteratorError3","_loop","_context5","delegateYield","_count","_callee5","_iteratorAbruptCompletion4","_didIteratorError4","_iteratorError4","_context6","_inner4","_callee6","_iteratorAbruptCompletion5","_didIteratorError5","_iteratorError5","_context7","_reduce","_callee7","reducer","_iteratorAbruptCompletion6","_didIteratorError6","_iteratorError6","_context8","_simpleReduce","_callee8","_context9","simpleReduce","generator","_generator","_callee9","_context10","MyIterable","_context11","_marked","_loop2","_context13","_context12","_marked2","_context14","_marked3","_iterator10","_step10","_context15","_step11","_iterator11","_marked4","_iterator12","_step12","_context16","_step13","_iterator13","groupBy","_step14","_iterator14","areArraysEqual","check","_step15","_iterator15","_context18","array","start","end","_context19","subsetGenerator","howMany","_callee10","_iterator16","_step16","sub","_iterator17","_step17","_sub","_iterator18","_step18","_sub2","_context20","startElement","otherElements","_iterator19","_step19","perm","_context21","_callee11","_context22","isSeparator","hadItems","_iterator20","_step20","_context23","median","sort","half","allInASingleNight","edges","nodes","bestResult","path","cost","distance","places","flatMap","stepCost","edge","_line$split3","_line$split4","sayNumber","findSequenceLength","elvesLookElvesSay","transformed","limit","charCodeAt","base","increment","reverse","carry","String","fromCharCode","testPairs","allEqual","testIncreasing","testPassword","corporatePolicy","startPassword","password","countNumbers","skipReds","abacusFramework","numbers","parse","parseRules","participants","rules","adjacents","calculateValue","assignment","assignees","matchingRules","knightsOfTheDinnerTable","_parseRules","bestValue","NEGATIVE_INFINITY","_parseRules2","participant","parseReindeers","rest","movement","speed","duration","calculateDistance","reindeer","time","period","baseDistance","restOfTime","lastMovementTime","lastDistance","reindeerOlympics","reindeers","distances","maxTime","_distances","winner","generateRecipes","parseIngredients","endsWith","ingredient","capacity","durability","flavor","texture","calories","ingredients","total","_ingredients","otherIngredients","permutation","calculateSingleTotal","single","characteristic","calculateScore","recipe","totals","calculateCalories","scienceForHungryPeople","score","targetCalories","ticket","children","cats","samoyeds","pomeranians","akitas","vizslas","goldfish","trees","cars","perfumes","parseSues","firstSeparator","checkSue","sue","argTicket","_Object$keys","checkSueRanges","_Object$keys2","auntSue","sues","findCombinations","quantities","noSuchThingAsTooMuch","parseField","setFlatData","iterateGame","leaveCornersOn","newField","copy","onNeigbours","likeAGifForYourYard","iteration","steps","createStartState","ir","instr","instruction","arg","executeInstruction","newIr","execute","program","turingLock","createCandidates","serializeRule","parseMolecule","flatTo","toUpperCase","parseLines","separator","findIndex","molecule","medicineForRudolph","candidate","appearsInHowManyRules","bottomRules","noFromAtoms","unique","tos","noFrom","isBottom","_require","require","infiniteElvesAndInfiniteHouses","primalityTest","_ref5","flatData","ceil","_x5","_ref7","_ref6","_x6","shop","weapons","damage","armor","rings","parseState","_lines$map","_lines$map2","hitPoints","fight","player","monster","fPlayer","fMonster","rpgSimulator20xx","bossState","minExpense","weapon","chosenRings","expense","hasWon","POSITIVE_INFINITY","maxExpense","spellCost","spell","paySpell","mana","spentMana","launchSpell","playerState","poison","recharge","shield","applyEffects","newPlayerState","newBossState","bossDamageTurn","hurtPlayer","spells","canLaunchSpell","playTurn","playerHpLoss","afterStart","hasLost","afterEffects","afterSpell","afterSecondEffects","afterBoss","bfsPruned","startGameState","hardMode","states","bestWinState","updateBestState","cast","initGameState","wizardSimulator20xx","gameState","_ref8","TimeCalculator","startTime","Date","getTime","ratio","getDelta","serializeTime","getExpected","ms","seconds","minutes","hours","days","padStart","itHangsInTheBalance","packages","totalWeight","subsets","expectedTotal","interestingSubsets","timeCalculator","sorted","_ret","pow","getExpectedSerialized","_ret2","_loop3","_ret3","trunkCandidates","modInverse","mod","_calculateExtended","calculateExtended","modPow","expo","BigInt","exp","factorial","aP","bP","q","factor","gcd","lcm","fromRowColumn","column","firstOfRow","increments","rightDelta","words","columnIndex","letItSnow","coordinates","noTimeForATaxicab","currentDirection","currentCoordinates","dirMap","coordinateToNumber","coordinateToStrange","bathroomSecurity","parseSecondLines","started","squaresWithThreeSides","isValid","dashIndex","squareIndex","sectorID","checksum","encryptedName","decrypt","room","newName","verifyChecksum","frequency","letter","localeCompare","calculated","securityThroughObscurity","candidates","randrange","random","randomCharacter","getCharacter","hash","getHashIfRelevant","getCharacterAndPosition","fillPasswordWithRandom","howAboutANiceGameOfChess","lastTime","signalsAndNoise","section","hypernet","sections","hypernets","isHypernet","hasABBA","supportsTLS","ip","hyper","supportsSSL","babs","bab","internetProtocolVersion7","ips","matching","empty","rect","rectangle","rotateRow","by","rotateColumn","_tokens$1$split$map","_tokens$1$split$map2","el","twoFactorAuthentication","countExpandedLength","markerEnd","marker","_marker$split$map","_marker$split$map2","repeat","toRepeat","nestedLength","expand","_marker$split$map3","_marker$split$map4","explosivesInCyberspace","bot","high","low","Machine","canExecute","doExecute","executePending","toExecute","outputState","botState","chips","getState","giveTo","chip","bin","createBot","balanceBots","instructions","machine","executeBeforeEveryInstruction","_machine$getOutput","_machine$getOutput2","getOutput","match","Building","floors","_state","floorId","items","_this$_state$map$filt","_this$_state$map$filt2","currentFloor","newFloorIndex","newFloor","newBuilding","clone","generators","isSubsetValid","toColumn","elementMap","nextMapped","out","columns","serializedFloor","cleaned","replace","floorOrdinal","parseOrdinal","generatorIndexes","microchipIndexes","generatorIndex","microchipIndex","building","setFloors","ordinal","valid","toLowerCase","bringEverythingToFourth","queue","visitedStates","serializeToEquivalent","candidateItems","currentFloorItems","candidatesToBring","_arr","moved","move","newSteps","isAllOnLastFloor","radioisotopeThermoelectricGenerators","additionalElements","types","addToFloor","isRegister","isSingleArgument","parseArgument","argumentToValue","registers","shouldIncreaseCurrentInstruction","currentInstruction","instructionToChange","prettyPrint","register","maxOutLength","simpleLine","_output","executionCallback","programExecution","parseProgram","emptyState","leonardosMonorail","calculateDistancesGenericCoordinates","fieldGetter","distanceCalculator","stopAt","distanceMap","visitQueue","startCell","parent","forceStop","surrounding","withDistance","sWithDistance","pathTo","calculateDistances","countParity","parity","calculatorBuilder","secretNumber","aMazeOfTwistyLittleCubicles","calculator","maze","tile","baseHashGenerator","salt","stretchHashGenerator","incrementHashes","howManyToAdd","nextIndex","newLength","findTriplet","hasQuintuplet","rawTarget","hashes","triplet","targetIndex","oneTimePad","hashCalculator","currentIndex","level","moveDisc","disc","GameState","discs","addNewBall","_time","moveDiscs","moveBalls","findWinner","removeInvalidBalls","debug","balls","ball","launchedAt","find","matchingDisc","timingIsEverything","passTime","dragonStep","fillDisk","calculateChecksum","dragonEverything","diskSize","dragonChecksum","isString","hashFactory","secret","isValidCharacter","isDirectionAvailable","is","serializeDirection","twoStepsForward","spreads","MIN_VALUE","getSafe","mapCell","traps","evolve","buildMap","startLine","prettify","cells","countSafe","likeARogue","lastLine","integerLogarithm","isLower","anElephantNamedJoseph","howManyElves","elves","stealFrom","presents","lastSteal","elvesCount","logarithm","Ranges","_ranges","mergeRanges","ranges","addRanges","_line$split$map","_line$split$map2","firewallRules","firstRange","minValue","maxValue","nextCandidate","parseLine","applyRule","tokenized","rindex","rotateOf","reverseIndex","scrambledLettersAndHash","parseCoordinates","token","startFrom","_token$substr$split$m","substr","_token$substr$split$m2","parseSize","used","available","createMatrix","fullField","original","fromNode","toNode","isViable","getValidMoves","onEveryCellSync","neighbours","coords","canMove","isTarget","mapInput","command","gridComputing","myPosition","oldCommands","oldStates","rawInput","old","_i3","findOne","read","hasAdditionalInput","safeCracking","executingProgram","executingState","getValue","ln","customComponent","targets","serializeState","reachedTargets","airDuctSpelunking","_parseLines","outputField","bestReached","nextCell","newReached","matchingTarget","queueElement","_parseLines2","clockSignal","addition","last","aMazeOfTwistyTrampolinesAllAlike","axisFromDirection","expectedFromDirection","axis","isLine","travel","letterCallback","currentCell","nextCoordinate","rotations","candidateDirections","rotation","resultStates","aSeriesOfTubes","maxLineSize","flat","startingPoint","foundLetters","trimEnd","padEnd","lastPosition","registerFactory","getConstantOrRegister","callbacks","increasedIndex","gcr","mulCallback","coprocessorConflagration","mulCount","_executeInstruction","_executeInstruction2","isPrime","h","corruptionChecksum","internalChecksum","small","big","sourceToken","targetToken","source","Graph","ensureLink","pipeDefinition","addLink","pipeDefinitions","definition","addDefinition","_map","stack","Stack","toVisit","linked","getLinked","adjacency","digitalPlumber","definitions","graph","addDefinitions","dfs","getNodes","reverseWrap","elements","startPortionLength","reversePortion","reverseSimple","skipSize","circleGenerator","knotHash","lengths","_circleGenerator","_circleGenerator2","circle","_reverse","_reverse2","calculateKnotHash","baseSequence","decodedInput","_circleGenerator3","_circleGenerator4","_reverse3","_reverse4","group","hexStringToBits","diskDefragmentation","bits","setBitsCount","generateDisk","disk","diskMatrix","regionCount","emptyRegion","generatedLines","Generator","seed","_lines$map$filter$map","_lines$map$filter$map2","duelingGenerators","seedA","seedB","factorA","factorB","mapped","same","getNext","_parseLines3","_parseLines4","isReceive","receive","recoverCallback","soundCallback","duet","lastSound","hasRecovered","sound","aIndex","bIndex","aRegisters","bRegisters","a2bPipe","b2aPipe","isAWaiting","isBWaiting","hasAEnded","hasBEnded","_executeInstruction3","_executeInstruction4","_executeInstruction5","_executeInstruction6","ports","findStrongestBridge","nextPort","component","remainingComponents","freePort","createAllBridges","bridge","recursiveBridges","tail","electromagneticMoat","bridges","interestingBridges","bridgesWithCounts","bestBridge","flipHorizontal","newGrid","generateAllSymmetries","transpose","matches","symmetries","symmetry","isSameAs","extractGrid","grid","offset","gridResult","cOffset","splitWithDelta","fullGrid","subGrid","joinDeltas","subSize","resultGrid","setCoordinate","_line$trim$split","_line$trim$split2","leftFlat","rightFlat","leftSize","sqrt","rightSize","baseRuleMatch","rightGrid","iterate","splitGrids","mappedGrids","fractalArt","startGrid","RegisterState","calc","existing","currentMax","checkCondition","condition","leftValue","updateState","heardYouLikeRegisters","parseInstructions","executeInstructions","getValues","sumHexCoordinates","getHexSurrounding","pointyHexDirections","_s$split$map","_s$split$map2","flatHexDirections","northWest","southEast","northEast","southWest","north","south","west","east","hexManhattanDistance","applyDirections","hexEd","maxDistance","highEntropyPasshprases","uniqueLines","uniqueWords","word","findMatching","lastDigit","previous","inverseCaptcha","circular","matchingSequence","shiftIndex","distribute","maxIndex","newState","toDistribute","memoryReallocation","createdStates","lastSerialization","Scanner","depth","tick","cloneField","sparseField","maxDepth","scanner","tickField","packetScanners","collisions","currentScanner","delay","baseField","hasCollided","parseTuple","parseParticles","rawPos","rawSpeed","rawAcc","acceleration","updateParticle","particle","newSpeed","newPosition","serializeCoordinate","createCollided","particles","collision","particleSwarm","accelerations","lowestAcceleration","vs","lastCollision","currentStep","oldLength","permutationPromenade","programs","reordered","programListGenerator","dance","dances","currentRatio","requiredIndex","identifier","_instruction$slice$sp","_instruction$slice$sp2","swap","_instruction$slice$sp3","_instruction$slice$sp4","temp","_split$0$split","_split$0$split2","weightToParse","weight","buildTree","startTree","tree","subTrees","child","subTree","appendTree","isUnbalanced","findUnbalancedIndex","weights","isMinUnbalanced","checkWeight","headWeight","childrenResults","unbalancedResults","balancedResults","childrenWeights","unbalancedIndex","otherIndex","requiredWeight","recursiveCircus","bottomValue","findBottom","checkResult","withRightSide","onlyRightHand","rightHandValues","leftValues","spinlock","buffer","lastAdd","UlamCalculator","vArg","findSquareSize","sideDistance","sideCalculators","middle","_sideCalculators","middlePoint","findSideMiddlePoint","root","UnknownSizeField","getPoints","deserializeCoordinate","setDelta","fromCoordinate","spiralMemory","squareValue","getCoordinatesFromValue","toDo","nextIteration","directionOrder","sizeY","lineLengths","sizeX","sporificaVirus","startSize","midX","midY","virus","infectionCount","toMatrix","parseGarbage","parseGroup","_parseGroup","_parseGroup2","suggestedIndex","_parseGarbage","_parseGarbage2","garbage","isGarbage","baseScore","localScore","additionalScore","countGarbage","streamProcessing","getTape","turingData","tape","mainTape","negativeTape","getCell","setCell","calculateStep","nextState","instance","matchingState","matchingRule","write","getLastWord","lastToken","getLastNumber","getLastCell","number","parseRule","startState","0","1","haltingProblem","currentFrequency","trimmed","firstRoundOfFrequencies","foundFrequencies","found","some","createWordCounter","hasNLetters","checksumCounter","amountOfTwoLetters","amountOfThreeLetters","currentCount","hasTwoLetters","hasThreeLetters","stringLength","spliced","duplicates","hasFoundDuplicate","isFirstTime","parseRectangle","noSpaces","normalizedDelimiters","fromCoupleToCoordinate","argSplit","mapCreator","rectangles","isCandidate","executeOnMap","argMap","warn","GuardSleep","guardID","minute","LogDate","dateLastIndex","dateText","LogEntry","dateToken","wakes","fallsAsleep","idStartIndex","idEndIndex","post","compare","guardSleeps","guardIDKey","nestedGuardID","sleeps","totalSleep","bestMinute","mostSleepingMinute","parseSleeps","howMuch","curr","howManyIntervals","interval","isSleepingInMinute","totalMaxSleep","maxSleep","isAsleep","currentGuardSleep","polymerText","explodePolymer","unitList","unit","cleanPolymer","RegExp","exploded","_getBoundaries","territoryPoints","offsets","status","bestArea","parsePoints","numberOffsets","nextElement","newCoordinate","newDistance","gridStatus","newElement","manhattan","_getBoundaries2","distanceSum","couple","dependency","nodeName","ensureNode","dependentFrom","wip","isDone","hasDependencies","Node","dependencies","getNextNode","howManyWorkers","workers","currentSecond","nextNode","workerIndex","targetTime","subValue","getTree","numberOfChildren","numberOfMetadata","parsedMetadata","_getTree","_getTree2","newStart","calcMetadataSum","printMetadata","_printMetadata","_getTree3","_getTree4","argTree","_getTree5","_getTree6","Game","numberOfPlayers","lastMarble","scores","playerID","lastPlayer","marble","nextMarble","marbleNodes","currentScore","currentHead","players","game","addMarble","switchPlayer","highestScores","MovablePoint","firstPart","secondPart","coordinateTokens","speedTokens","lastBoundaries","lastPoints","getArea","newPoints","boundaries","mappedPoints","dataMatrix","_dataMatrix","FromLine","iterationCounter","FuelGrid","table","originalTable","originalLine","currentValue","bigInt","getFuelStatus","lesser","countNegative","greater","countPositive","currentSum","subtract","sumTable","area","getRackID","powerLevel","main","_main","cellSizes","serial","bestPoint","populate","toJSNumber","cellSize","getAreaSum","PlantStatus","toPlantStatus","full","Greenhouse","initialStatus","patterns","fixEmptyPots","visitToRight","filled","newStatus","nextFive","foundDifferent","pattern","newGreenhouse","emptyBufferSize","consecutiveEmptyPots","prepend","greenhouse","passGeneration","lastSum","diffs","generations","todo","initialState","inputMatrix","Field","isInputCart","inputToDirection","Cart","inputGetter","crashed","handleTurn","handleIntersection","intersectionRotations","intersectionsPassed","turn","getRotation","cartDirection","carts","hideCart","crashList","internalTicks","isCrashed","moveCarts","incrementTicks","skipCarts","matchingCarts","cart","squareSize","padding","baseCoordinates","color","isVertical","isHorizontal","cartList","getOrderedCarts","handleInput","checkCollision","colliding","crash","mineCartMadness","printer","requireScreen","toDrawable","hasCrashes","crashes","remainingCarts","moveElf","recipes","interestingRecipes","numberOfSteps","currentFirst","targetPattern","memory","checkIfSame","addMemory","nestedMemory","EditableField","units","isAlive","isFieldType","isUnit","unitType","adjacentOffsets","adjacentCoordinates","inputLines","defaultPower","Units","u","powerGenerator","Unit","attackPower","hitpoints","_calculateScore","attackInRange","editableField","rangePositions","enemiesInRange","enemyToAttack","suffersAttack","newEditable","outputLines","gameScore","positionsToVisit","foundAt","interestingPositions","targetPosition","interestingFirstSteps","stepQueue","_loop4","moveTo","inRangeCoordinates","nextStep","nextStepValue","inRange","wrapOutputToClean","cleanEveryNOutput","forceShouldClear","_yield$calculateScore","_yield$calculateScore2","round","fromLines","_x7","startingElves","_yield$calculateScore3","_yield$calculateScore4","survivors","_x8","codeList","Instruction","lineNumber","setCode","mapping","g","MutableMachine","instructionPointerRegister","instructionRange","newI","nextInstructionAddress","calculatedValue","registerAddress","newRegisters","_ns","rab","ra","isTokenValid","before","sameAs","after","testMachineFactory","testCreator","tests","_tests","calibrationTokens","opCode","parseCalibrationTokens","validCodes","allCodes","puzzleLines","ins","toBeMapped","calibrationLines","groupped","getList","encodedInstruction","complete","splitLine","scanLineToClay","_line$split$sort$map$","rangeToValues","_line$split$sort$map$2","xs","ys","World","clayCells","diff","waterCoordinate","interestingCoordinates","takeTurn","oldWaterState","downer","downerCell","fillTowards","isStable","fillWith","isClosedOn","_exp$split$map","_exp$split$map2","starts","ends","clayCoordinates","world","addWater","reachedCells","dryCells","isCell","worldStates","worldStateList","worldStateMap","worldStateLoop","lumberTally","treeTally","loopBaseIndex","newWorld","adjacent","oldCell","calculateNew","takeTurns","resourceValue","pointer","iterations","oldMachine","modVal","isExecutable","print","iterationBatch","groups","currentGroup","openCount","currentChar","isGroup","bfsVisit","dirs","visitCallback","argState","areStateEqual","firstElement","resultState","deduplicateStates","t3","t4","t5","t6","t7","areStatesEqual","toKeep","toRoomCoordinates","buildRoom","doors","baseMatrix","resultMatrix","door","dx","dy","aRegularMap","newCellCount","alreadyVisited","nullTokens","resultRoom","_x14","_x15","_x13","_ref9","interestingDistances","_ref10","_x17","_x18","_x16","chronalConversion","uniques","lastFour","fourValue","_lines$1$split$1$spli","_lines$1$split$1$spli2","buildMatrix","nDelta","fillMatrix","erode","createErosionMatrix","serializeNode","tool","getValidTools","erosionLevel","matrixSerializer","modeMaze","erosionMatrix","createErosionMatrixFromInput","resultPath","calculatePath","weightedGraph","validTools","neighbourNodes","nCoord","nErosion","nTools","otherTool","addNode","posToken","rToken","_posToken$split$1$sli","_posToken$split$1$sli2","radius","experimentalEmergencyTransportation","nanobotInfo","bestNanobot","nanobotsInRange","nanobot","distanceRanges","segments","maxCount","bestPos","bestEnd","updateBestEnd","pos","fillWithTarget","targetable","army","getDamage","getFightOrder","armies","chooseOrder","effectivePower","getEffectivePower","initiative","withTarget","immunities","abilities","damageType","basePower","weaknesses","fightRound","fightOrder","hp","parseAbilities","singleSections","damageTypes","parseGroups","damageWordIndex","initiativeIndex","abilitySection","rawArmy","armyLines","boostArmy","countUnits","immuneSystemSimulator20XX","winningArmy","hasImmuneWon","immuneSystemArmyName","boostingBy","isDraw","clonedArmies","lastUnits","newUnits","deserializeNode","_line$trim$split$map","_line$trim$split$map2","nodeMap","addDirectEdge","allNodes","constellations","constellation","visit","nodeList","getNodeList","fourDimensionalAdventure","addEdge","findConstellations","frequencyEntry","inventoryEntry","matterSliceEntry","reposeRecordEntry","alchemicalReduction","chronalCoordinates","sumParts","memoryManeuver","marbleMania","starsAlign","chronalCharge","subterranean","chocolateCharts","beverageBandits","chronalClassification","reservoirResearch","settlers","flow","fuelCalculator","mass","intelligentFuelCalculator","requirement","joined","handleSum","instructionPointer","handleCode","handleMult","aggregator","firstParameter","secondParameter","storageAddress","programAlarm","_iterate","_iterate2","_iterate3","_iterate4","mapDirection","updatePosition","directionCoordinate","parseWire","getIntersection","comparer","comparison","crossedWires","firstWire","secondWire","firstCoordinates","secondCoordinates","intersection","minDistance","getCoordinates","sortedFirst","sortedSecond","movements","positions","isValidPassword","maxRepeating","stringed","hasSame","repeating","secureContainer","_calculate","parameterMap","2","3","4","5","6","7","8","9","parseOperation","op","parameters","modes","parameterModes","missing","newPointer","getMemoryAddress","operationExecutorMap","inputGenerator","inputList","memoryDump","address","_execute","_callee12","close","_yield$executeInstruc","_yield$executeInstruc2","closeResult","relativeBase","isStopExecution","StopExecution","flag","stopExecution","parseMemory","InterpreterError","getParameter","parameterMode","_Error2","_super2","errorCode","getOperationParameter","getParameters","params","writeMemory","parameterNumber","_2","_getParameters","_getParameters2","_x9","_x10","_x11","_x12","_3","_getParameters3","_getParameters4","_4","_x19","_x20","_x21","_x22","_x23","_x24","_5","_getParameters5","_getParameters6","parameter","_x25","_x26","_x27","_x28","_x29","_x30","_6","_getParameters7","_getParameters8","ret","_x31","_x32","_x33","_x34","_x35","_x36","_7","_getParameters9","_getParameters10","_x37","_x38","_x39","_x40","_x41","_x42","_8","_getParameters11","_getParameters12","_x43","_x44","_x45","_x46","_x47","_x48","_9","_getParameters13","_getParameters14","_x49","_x50","_x51","_x52","_x53","_x54","_10","_getParameters15","_getParameters16","_x55","_x56","_x57","_x58","_x59","_x60","sunnyAsteroids","isFirst","_output2","orbiting","fillDistance","parentCode","parentNode","getChain","currentNode","getFirstIntersection","otherSet","planet","universalObritMap","orbit","mine","santa","mineChain","santaChain","firstIntersection","generateConnector","startingInput","additionalOutput","outputBuffer","nextReadIndex","resolver","rejector","isClosed","generatePermutations","subs","amplificationCircuit","baseMemory","permutations","signal","connector","loopConnector","phase","isLast","hasExecuted","inConnector","outConnector","spaceImageFormat","inputSize","layerSize","layers","newLayer","smallestLayer","ones","twos","layer","zeros","currentLayer","sensorBoost","_input","_input2","rawCells","fillVisibilities","asteroids","asteroid","fillVisibility","asteroidsWithVisibility","isHidden","otherAsteroid","mainVector","candidateVector","coeff","xCoeff","yCoeff","canSee","monitoringStation","maxVisibility","getVisibilities","station","topVisible","howManyKilled","howManyToKill","visible","killList","getAsteroids","polar","atan2","PI","toKill","killedCoordinate","deserializeRotation","serializeColor","deserializeColor","spacePolice","currentPos","isPaint","distinct","geometry","filtered","_close","stepComparer","outRows","_close2","addCoordinate","emptyCoordinate","parsePlanets","velocity","updater","extractor","toUpdate","pExtracted","oExtracted","baseUpdaters","positionExtractor","velocityExtractor","gravityStep","planets","updaters","outputPlanets","getSum","getEnergy","serializeCoordinates","serializePlanet","serializeTuple","getLcm","nBodyProblem","repetitions","lcmRepetition","currentPlanets","tileList","tileDeserializer","tileVisualize","tileColor","carePackage","tiles","blocks","visualization","_visualization","parseTiels","screenMapTiles","visualizeTiles","currentPaddleX","currentBallX","_yield$updateTileFeed","updateTileFeedback","_output3","_yield$updateTileFeed2","_updateTileFeedback","maxPadding","drawableSize","serializeElement","serializeChain","needs","serializeChains","parseElement","raw","_raw$trim$split","_raw$trim$split2","targetName","baseName","Remaining","ensure","remainingMap","howManyCanTake","oreRequirement","_oreRequirement","closed","howManyRequired","chain","howManyNeedToBuild","prices","finalResult","intLog","toCreate","youNeed","_remainingMap","askFor","price","spaceStoichiometry","chains","remain","targetAmount","storageOres","newTarget","under","over","guess","_newTarget","needed","commands","getCandidates","cellGetter","getEmptySurrounded","startingCells","coordinateToKey","getDistances","nearest","findNearestToDiscover","findCommandsForUnkown","lastKnown","unknown","localCommands","getCommand","canGo","List","where","firstOrDefault","cellMap","startingCell","visitingQueue","fromCell","toCell","lineIndex","cellIndex","oxygenSystem","movingTo","suggestedCommands","oxygenPosition","currentIteration","answer","_suggestedCommands$po","_suggestedCommands$po2","suggestion","_suggestedCommands$po3","_suggestedCommands$po4","_command","_position","findCommandsToNearestUnkown","getDistance","_suggestedCommands$po5","_suggestedCommands$po6","_suggestedCommands$po7","_suggestedCommands$po8","_command2","_position2","suggestedDelay","basePattern","applyPattern","applyPatternIteratively","_applyPatternIteratively","howManyTimes","Pattern","localBasePattern","realIndex","flawedFrequencyTransmission","default","take","repeatedInput","interestingDigits","startIterationTime","_d","getRobotDirection","_getIntersections","intersections","isIntersection","getIntersections","_getAlignment","alignment","getAlignment","_getMovements","shouldDebug","currentSteps","forward","isNextIntersection","moveForward","tryRight","tryLeft","getMovements","every","context","newCellPosition","fieldLines","setAndForget","fromBuffer","_callee14","serializedMovements","functions","toSend","nextSend","findCompressed","replaced","aCandidate","bCandidate","cCandidate","_input3","_callee13","_findCompressed","_callee15","totalIterations","aReplaced","bReplaced","cReplaced","isCandidateTooLong","replaceCandidate","candidateName","serializedCandidate","re","newMovements","xSize","ySize","isFixedCell","isRawKey","manyWorldInterpretation","matrixStart","expectedOpenDoors","traverseMatrix","matrixStarts","openDoors","cs","_traverseMatrix","cache","serializedState","cachedValue","reachableKeys","nestedTotals","bestNestedTotal","origin","reachable","newOpenDoors","nestedDistance","serializePoint","tractorBeam","howManyPulled","toServe","nextToServe","startPoint","rowData","expectedSize","rowStart","lastRowInfo","interestingTopRow","topRowInfo","deltaX","isPulled","setRowData","rowLength","topStart","topLength","rowDataEntry","getPortalCoordinateAndClean","firstLetter","firstNeighbours","ci","isLetter","secondLetter","floorNeighbour","analyzeMatrix","portals","_getPortalCoordinateA","getBorder","bottomRight","isInBorder","donutMaze","_analyzeMatrix","portalMap","createPortalMap","portaled","_analyzeMatrix2","border","endDistance","depthIncrement","newDepth","portalNameMap","portal","ls","springdroidAdventure","executeAscii","program5","_executeAscii","nextInput","calculateCoefficients","normalize","calculateInverseCoefficients","inverse","compose","compow","slamShuffle","targetCard","iterationCoefficients","maxIterations","operands","currentCoeff","finalOperand","supportsQuickRunning","isPacket","ClosingDown","categorySix","sentPackets","receivedPackets","shouldClose","emptyPromise","inputQueue","nextPacket","packetSender","packet","otherResolver","FLAG","natPacket","lastNatY","isIdle","isFromNat","_next2","getInnerAdjacentPositions","innerSize","getCenter","isDir","getOuterAdjacentPositions","outerSize","bugCounter","countExternal","adjacentCellPositions","adjacentCells","adjacentCellPosition","countInternal","countNeighbourBugs","isExternalBorderCoordinate","isInternalBorderCoordinate","passDepthTime","ps","extendDepths","nBugs","handleCellTimePass","passPlanetTime","newPlanet","emptyPlanetGenerator","getAdditionalDepths","externalBorderBugs","internalBorderBugs","sortDepths","additional","planetOfDiscord","simpleSerialize","basePlanet","depths","cryostasis","inputBuffer","exploration","inventory","hacking","possibleMovements","autoTake","movementMap","handleCustomCommand","executeCommand","exploringLocation","exploreResult","explored","autoMovements","isPopulating","isHacking","dropping","lastDrop","fullInventory","currentInventory","toRecover","isTooMuch","populating","enable","toTake","createMap","drop","_length","_drop","toDrop","subset","hasDropped","wouldDrop","rocketTyranny","buildVisualizer","screenBuilder","RealVisualizer","DummyVisualizer","_setup","seats","setup","_setSeatOwned","seat","setSeatOwned","constants","seatSize","internalSpacing","seatOffset","expected","screenSize","_setup2","drawable","setManualRender","buildDrawable","drawables","forceRender","_setSeatOwned2","_this$buildDrawable","viewCoordinates","binaryBoarding","visualizer","boards","PassportProcessingVisualizer","_setValid","passportIndex","setValid","_setupPassports","passports","setupPassports","_setWrongFields","fields","setWrongFields","fieldFullSize","fieldColumns","fieldRows","externalSpacing","passportSize","passportOffset","fieldOffset","screenWidth","heightCalculator","_setValid2","passportDrawables","screenPrinter","_setupPassports2","validFields","fieldCoordinates","_setWrongFields2","passport","currentPassport","_step2$value","getMissingFields","expectedKeys","getInvalidFields","invalid","isValidField","hasFourDigits","intValue","suffix","expectedEyes","passportProcessing","validPassports","constantsBuilder","expectedPasswords","spacing","lineHeight","passwordsPerColumn","indicatorSize","columnLength","lineMaxLength","PasswordPhilosophyVisualizer","DummyPasswordPhilosophyVisualizer","_setupPasswords","passwords","buildScreen","letterSize","indicators","setupPasswords","_colorPassword","passwordIndex","indexes","drawablePassword","selectedLetters","colorPassword","_buildScreen","_setupPasswords2","_colorPassword2","header","_header$split","_header$split2","_repetitions$split$ma","_repetitions$split$ma2","minRepetitions","maxRepetitions","isLineValid","passwordLine","isLineReallyValid","targetIndexes","passwordPhilosophy","runEntry","_runEntry","passwordChecker","passwordLines","satisfied","_passwordChecker","_passwordChecker2","letterColumns","letterRows","letterSpacing","letterOffset","groupSpacing","groupSize","groupOffset","screenSizeBuilder","clear","ok","_setLetters","letters","clearLetters","getGroupIndex","getIndex","setLetters","_startGroup","clearPreviousLetters","startGroup","_endGroup","endGroup","totalDrawables","iLetter","letterCoordinates","letterViewCoordinates","_addLetter","addLetter","_setLetters2","_startGroup2","_endGroup2","_addLetter2","intersect","buildAnswers","customCustoms","answers","updateVisualizerFound","_updateVisualizerFound","updateVisualizerCurrent","_updateVisualizerCurrent","visualizerIndex","maxOrMin","seedVisualizer","_seedVisualizer","seedInstructions","_buildVisualizer","cellWidth","maxHeight","indicatorHeight","screenHeight","xCalculator","mapColor","minCurrent","maxCurrent","candidateCoordinates","newX","_args4","updateDeadCandidateVisualizer","_updateDeadCandidateVisualizer","toVisualize","findProd","_args","reportRepair","TobogganVisualizer","fullCellSize","_setupField","setupField","_resetField","_Object$values","resetField","_moveToboggan","collides","moveToboggan","_setupField2","_moveToboggan2","_resetField2","tobogganTrajectory","slope","currentCoordinate","candidateSlopes","parseContainingBags","bags","quantity","splitIndex","mainColor","contains","handyHaversacks","resultOutputcallback","reverseRules","results","mainTarget","toExplore","newCandidates","directRules","hasToHave","nested","nestedQuantity","HandheldProgram","interceptor","changeInstruction","instructionChanger","nextInstructionIndex","nextInstruction","shouldContinue","_shouldContinue","shouldChangeInstruction","programSize","indicatorSpacing","programSpacing","programOffset","_setStatus","programNumber","updateSize","setStatus","instances","expectedFill","toDraw","drawableProgram","indicator","_args2","sizeIncrement","instructionsToDraw","_setExecuted","setExecuted","_setStatus2","_setExecuted2","handheldHalting","executed","setInterceptor","beforeOrAfter","executions","inst","executionIndex","execution","setInstructionChanger","numberSize","numberSpacing","numberOffset","bagColumns","bagRows","bagSize","bag","hasBag","baseSize","bigBagSizeBuilder","weaknessScreenSizeBuilder","bs","MAX_VALUE","_setupWeakness","maxLog","log2","bagItems","drawableNumbers","calculateNumberSize","setupWeakness","_addBagItem","newIndex","newItem","addBagItem","_updateBagSize","newSize","updateBagSize","_setWrongBag","setWrongBag","_setInvalid","setInvalid","_setWinnerBag","setWinnerBag","_setCalculatedBag","setCalculatedBag","_changeBag","preamble","changeBag","_setCurrent","setCurrent","_setupInvalidFinder","setupInvalidFinder","_setupWeakness2","_addBagItem2","_updateBagSize2","_setWrongBag2","_setInvalid2","_setCalculatedBag2","_callee16","_setWinnerBag2","_callee17","_context17","_changeBag2","_callee18","_setCurrent2","_callee19","_setupInvalidFinder2","_callee20","findInvalid","lookingFor","encodingError","sums","adapterArray","differences","factors","isOnStreak","fillFactory","mapState","getFlatData","_update","_update2","occupied","findFirstSeat","realIterate","iterationCallback","seatingSystem","validDirections","isValidDirection","magnitude","updateWaypointState","waypointCoordinate","shipCoordinate","rainRisk","getBusIDs","parseEquations","shuttleSearch","ts","equations","mainMod","toSolve","equation","isMask","mask","emptyMemory","updateMemory","createAddress","remaining","updateMemory2","binaryAddress","addresses","dockingData","rambunctiousRecitation","startList","lastSpoken","lastAge","newSpoken","buildCommunicator","messageSender","RealMessageSender","DummyMessageSender","buildMessage","kind","isTicketTranslationMessage","_foundLabel","label","foundLabel","_foundLabel2","checkInvalidValues","ticketRules","foundValid","validity","myTicket","nearbyTickets","checkIfRuleCanBe","tickets","isTicketOK","buildIndex","validTickets","communicator","allRules","rulesToFind","takenIndexes","availableIndexes","possibleIndexes","ticketTranslation","ticketIndex","hasBuilt","interestingRules","isConwayCubesMessage","_send3dData","activeCubes","timedCubes","allCubes","cube","mainData","cubes","minDepth","send3dData","_send4dData","maxHyper","minHyper","send4dData","_send3dData2","_send4dData2","activeSurrounding","isActive","conwayCubes","affected","getNumber","getOperation","getExpressionParenth","evaluateFlatExpression","getFlatExpression","currentToken","startEnd","expression","evaluateExpression","currentOperation","replaceAll","operationOrder","isMatchTerminal","isMatchList","clean","buildAll","toConcat","combine","elems","isBuiltFromStart","pool","isBuiltFromStartEnd","startPool","endPool","startCandidate","endCandidate","monsterMessages","built","lookup","as","col","colIndex","verticalMatch","horizontalMatch","easyMatch","inverted","makeMatch","rot","flipped","flippedB","flip","horizontalFlip","isPlaced","adjust","fixed","movable","matcher","jurassicJigsaw","isMatching","corners","matchesWith","operations","tileIndex","topLeftCorner","currentLine","lastIndex","_lastIndex","_current","_candidates","_target","_tile","maxiTile","currentMaxiLine","tileSize","innerY","seaMonsterPattern","seaMonsterSize","clearSeaMonster","seaMonsterMatch","countMonsters","bestTile","_current2","currentFlipped","_y4","corner","nestedTileSize","seaMonsterCount","cups","getAllElements","currentCupLabel","pickedUp","destinationCup","toPut","startCup","createResult","cup","fillUp","upTo","crabCups","moves","clearIntersection","allergen","allergenCandidates","aIngredients","bIngredients","hasUpdated","allergens","updateAllergens","currentRecipeCandidates","checkCandidate","allergenIndex","createMatching","allAllergens","allergenAssessment","_createMatching","allIngredients","safeIngredients","interesting","_createMatching2","canonical","decks","winRecursiveRound","memo","playRecursiveRound","firstA","firstB","nestedState","playRound","deck","crabCombat","winnerDeck","modifier","lobbyLayout","reference","black","newBlack","blackNeighbours","isBlack","subjectNumber","hack","publicKey","loopSize","bigSubject","comboBreaker","card","doorLoopSize","encryptionKey","Submarine","translationPoints","rotationCenter","targetPoint","magnifiedDelta","newPoint","translate","addForeground","invalidate","seaBackground","deepSea","submarineSize","fullSize","leftMargin","maxSize","isMobile","setManualInvalidate","magnify","increasing","previousDrawables","nextItem","visualizerIncreasing","fromIterable","isIncreasing","simpleIncreasing","sonarSweep","canvasBackground","yFactor","submarine","giveSomeMargin","aim","atan","dive","_step$value","firstFactory","gamma","power","c0","secondFactory","oxygen","co2","countMostCommon","onIteration","counter0","replaceArray","Infinity","parseBinary","binaryDiagnostic","visualizerFactory","mostCommon","_iterations","nextBit","boardPadding","boardSize","boardMargin","boardDelta","boardsPerLine","cellDelta","board","_hasWon","mainItem","_highlight","highlight","currentColumn","mainBoard","_hasWon2","_highlight2","extraction","fillBoard","checkIfWon","foundFalse","calculateBoardScore","unmarked","giantSquid","lastWon","wonBoards","zoom","_show","colorCalculator","baseColor","alpha","show","_show2","_line$match$map","_line$match$map2","fromX","fromY","toX","toY","hydrothermalVenture","internalMargin","heightPerCell","delayed","logFactor","startY","lastDelta","basePoints","arrow","draw","logarithmic","currentX","arrowPosition","drawableState","currentDay","lanternfish","day","increases","theTreacheryOfWhales","costs","bestCost","currentCost","lineThickness","lineLength","digitPadding","digitInterspace","separatorMargin","digitWidth","digitHeight","turnedOnColor","turnedOffColor","winColor","maxLines","lastPrint","_finishLine","nextLine","finishLine","_addLine","toClearIndexes","_toClearIndexes","toClear","buildDigit","allDrawables","digit","_i4","_Object$keys3","_i5","_digit","_i6","_Object$keys4","_k","digitStart","addLine","_setCurrentLineState","currentDigit","_i7","_Object$keys5","_i8","_currentDigit","_i9","_Object$keys6","_key2","setCurrentLineState","_addLine2","_setCurrentLineState2","_finishLine2","brute","_buildSetupData","segmentNumMapper","targetSerialization","allSegments","hasFound","buildSetupData","candidateMapper","candidateDigits","candidateOutput","candidateSerialization","segment","serializeDigits","mapOutputToNumber","rawNumber","digits","numSegments","segmentsNum","sevenSegmentSearch","segmentNumberMapper","buildSegmentNumberMapper","buildMapper","variants","frequencyCounter","buildFrequencyCounter","aOrC","gOrD","rule4","_aOrC$filter","_aOrC$filter2","_gOrD$filter","_gOrD$filter2","co","fullZoom","smallZoom","scale","getLowPoints","lowPoints","hasFoundAsLow","smokeBasin","basinCounts","lowPoint","basinSize","sValue","firstThree","_tokens$filter","isClosing","_tokens$filter2","invalidCharacter","invalidToken","missingTokens","opening","unstackedSyntaxScoring","parseResult","corruptedScore","lineScore","incompleteScore","isOpening","syntaxScoring","dumboOctopus","totalFlashed","flashed","fromSingleDigitInput","flash","isPassagePathingMessage","nodeQueueCount","animateCallback","should","shouldAnimate","_queue","_visited","_queue2","_visited2","isSmallCave","cave","passagePathing","com","_parseInput","connectedTo","paths","newNode","_parseInput2","smallVisited","isSmall","shown","_getText","blob","createWorker","worker","_yield$worker$recogni","text","getImage","load","loadLanguage","initialize","recognize","tessedit_char_blacklist","getText","transparentOrigami","folds","foldedPoints","applyFolds","mapToMatrix","foldsToExecute","fold","sameTypeMap","_token$split","_token$split2","rawValue","extendedPolymerization","frequencies","countCharacters","newPairs","getFrequencies","_step4$value","_l$split","_l$split2","defaultSerializers","coordinate2d","MyPriorityQueue","_BinaryHeap","getBestCost","xFactor","risk","modifiedRisk","chiton","buildGraphCommunicator","isGraphCommunicatorMessage","_send","send","startId","colorGenerator","rootId","version","isLiteral","visitResult","subEdges","subRoot","subStart","graphCommunicator","_showPacketTreeVersions","_visit","showPacketTreeVersions","_showPacketTreeFull","_visit2","showPacketTreeFull","_showPacketTreeVersions2","_showPacketTreeFull2","toNumber","parseHeader","parseOperator","lengthType","packets","targetStart","_createPacket","createPacket","_createPacket2","_createPacket3","_createPacket4","parseLiteral","_parseHeader","_parseLiteral","_parseOperator","countVersions","_subs","packetDecoder","_createPacket5","_createPacket6","_createPacket7","_createPacket8","basePoint","_showPoints","shouldStroke","showPoints","scaled","_showPoints2","trickShot","_tokens$2$slice$split","_tokens$2$slice$split2","xFrom","xTo","_tokens$3$slice$split","_tokens$3$slice$split2","yFrom","yTo","reallyBestY","bestY","_tokens$2$slice$split3","_tokens$2$slice$split4","_tokens$3$slice$split3","_tokens$3$slice$split4","parseList","setParents","isValue","addTo","upExtractor","downExtractor","toAdd","findExplode","findSplit","explode","didSomething","toExplode","toSplit","snailfish","allMappings","brutePermutations","order","ordered","deserializePoint","beaconScanner","absolutePoints","toMatch","candidatePoints","candidateBeacon","rawBeacon","existingBeacon","translated","overlap","scannerPositions","bestDistance","_scannerPositions","marginCell","transform","trenchMap","emptyCell","_iterateField","iterateField","countLights","_iterateField2","drow","_arr2","dcol","newCell","space","missingRolls","sumWins","findWinning","playerToRoll","tk","aSpace","bSpace","diracDice","_arr$_i","die","rolls","splitCube","clipper","candidateCubes","isInside","filterOut","splitFilter","joinCubes","cubeKeys","tryJoin","_cubeKeys$filter","_cubeKeys$filter2","mismatched","toJoin","matched","joinResult","parseRange","_s$slice$split$map$so","_s$slice$split$map$so2","_rest$split$map","_rest$split$map2","sides","reactorReboot","baseRange","isOut","_showStates","cellPadding","grids","showStates","_showStates2","rooms","amphis","amphiType","finished","typeCost","amphi","canReach","others","dir","_arr3","lastEmpty","printGrid","currentResult","isSecond","stateList","endState","father","amphipod","destinations","combinedState","combineStates","isFinished","asNumber","certainZero","isBZero","arithmeticLogicUnit","NotImplementedError","onEveryCellSyncUnsafe","cellType","hasMoved","rawNextC","nextC","seaCucumber","_move","currentHasMoved","PipelineParser","FlatParser","_PipelineParser","IteratedParser","_FlatParser","run","SimpleParser","_PipelineParser2","_super3","Labeler","sep","GroupParser","NestedParser","_SimpleParser","_super4","ListLabeler","_NestedParser","_super5","_possibleConstructorReturn","StringGroupParser","_GroupParser","_super6","LineParser","isPipelineParser","_FlatParser2","_super7","obj","labels","assign","_SimpleParser2","_super8","objs","_len2","_SimpleParser3","_super9","Parser","TokenParser","regex","StringParser","canBeNegative","stringParse","getDefaultValue","_len3","_key3","replaceWith","_PipelineParser3","_super10","_this6","mainMatch","_matches$slice$map","_matches$slice$map2","_matches$slice$map3","_matches$slice$map4","_len4","mappers","_key4","_SimpleParser4","_super11","_len5","_key5","_LineParser","_super12","tokenize","startLabeling","sensor","extractCoordinates","beacon","isInRange","reading","getEdges","_reading$sensor","sx","sy","beaconExclusionZone","readings","beacons","isInRangeOfAnySensor","blizzards","ensureAndGet","findMinutes","startMinute","encountered","_queue$get","candidatePositions","blizzardBasin","simulatedBlizzards","_blizzard","newBlizzards","occupation","blizzard","_blizzard2","toEnd","backToStart","date","extract3dCoordinates","boilingBoulders","existingCubes","airFrontier","_airFrontier","visitFrom","externalGroup","internalAir","_cube","twiceSurrounding","frontier","cols","miniSize","miniCols","miniRows","itemSize","itemBackgrounds","normal","_showOnScreen","minCalorie","maxCalorie","mini","miniItem","percentage","showOnScreen","_setMax","setMax","_removeMax","removeMax","_showOnScreen2","_setMax2","_removeMax2","calorieCounting","groupTotals","PairingHeap","internalPadding","boxPadding","borderThickness","lineMaxWidth","boxSize","Dictionary","_showPairs","currentY","currentCol","pair","box","buildLine","myY","startX","showPairs","_higlightPairs","_pair","higlightPairs","_showPairs2","_higlightPairs2","isIncludedIn","_token$split$map","_token$split$map2","campCleanup","interestingCondition","CPU","cycle","cathodeRayTube","cpu","_typeof","xa","xb","distressSignal","dividers","parseSnafu","snafuToString","snafuToDecimal","snafu","decimalToSnafu","fullOfHotAir","snafus","decimals","asNumbers","grovePositioningSystem","zeroIndex","_input$splice","_input$splice2","_input$splice3","_input$splice4","elevation","hillClimbingAlgorithm","bestStart","Monkey","isWorried","monkeys","worry","modulo","true","false","inspected","getLast","groupMap","rawLine","rawoperand","valueOf","operand","testN","monkeyIndex","monkeyInTheMiddle","_monkey","_monkey2","monkey","_monkey3","_monkey4","_monkey5","Connections","faces","faceSize","connections","parseConnections","conn","aKey","face","isCross","bKey","_this$faces$filter","_this$faces$filter2","immediate","immediateCell","connection","relativePosition","destinationPosition","destinationDirection","cDirection","aFace","aDir","bDir","bFace","directionValues","currentNumber","monkeyMap","matrixLines","candidatePosition","finalPosition","directionValue","faceCorners","_y","mappings","inPlaceInstructions","emptyMatrix","emptyConnections","_y2","startingPosition","testCase","_executeInstructions","fixedInput","getDestination","invertOperator","_rest$split","_rest$split2","invertMonkey","errorOnHuman","oldCalculator","monkeyMath","newMonkeys","humns","_humns","newMonkey","aResults","bResults","newLookup","_newMonkeys","FileSystem","cwd","getDirectories","recursive","isDirectory","shouldClean","cleaner","isFile","indentation","indent","prefix","dirSize","rec","fileSystem","addDir","addFile","changeTo","noSpaceLeftOnDevice","threshold","calculateSizes","allSpace","updateSpace","usedSpace","needSpace","valve","connected","existingDistance","firstStep","secondStep","valves","Cave","timeLimit","openValves","waiting","ticks","waitFor","remainingTime","goTo","open","getBestFlow","bestFlow","bestCave","closedValves","goToAndOpen","cached","getValveState","proboscideaVolcanium","_getBestFlow","interestingValves","skipped","mySubset","myInteresting","elephantInteresting","_getBestFlow2","myBest","myCave","_getBestFlow3","elephantBest","elephantCave","shapes","shape","Tower","areRowsEqual","currentHeight","checkIfValid","fallPosition","shadow","pyroclasticFlow","tower","rockTarget","fallenRocks","directionIndex","persist","heights","heightDeltas","candidateSize","sameSequence","_base","increase","myBase","regolithReservoir","_directions","fellDown","_e$split$map","_e$split$map2","unset","_directions2","_e$split$map3","_e$split$map4","beatenBy","A","B","C","beats","choose","pointCalculator","rockPaperScissors","opp","trans","X","Y","Z","_l$split3","_l$split4","rawDir","rawSteps","ropeBridge","findVisits","howManyKnots","basePosition","knots","Sack","buildSet","_item","getPriority","lowerPart","higherPart","rucksackReorganization","_group","tryParseCrate","parseStacks","rawStacks","stacks","crate","unshift","supplyStacks","toMove","_buildGroupsFromSepar","_buildGroupsFromSepar2","rawInstructions","treetopTreeHouse","_rows","_cols","_interesting","_row","_previous","_col","_row2","_col2","innerLoop","bestScenic","view","_dirs","scenic","findStartOfPacket","seen","tuningTrouble","unstableDiffusion","proposals","_rules$splice","_rules$splice2","removed","elf","_rules$filter","_rules$filter2","movingElves","resultingElves","_rules$splice3","_rules$splice4","_rules$filter3","_rules$filter4","hasSameValuesAs","isTrebuchetMessage","digitInfo","info","_info$filter","_info$filter2","matchingDigit","isSelected","validTokens","_activate","activate","numericalDigits","findFirstAndLastDigits","calculateSum","trebuchet","validDigits","maxCubes","cubeSize","borderSize","cubeMargin","bagStart","tableLine","bagBottom","tablePositions","winSquareSize","_setBag","_Object$values2","_this$constants$bagBo","_item2","mainBagItems","tableItems","setBag","_extractGems","lastItem","baseY","lastTableItem","lastY","nextY","extractGems","_setRunOver","hasRunOver","square","setRunOver","_extractGems2","_setBag2","_setRunOver2","cubeConundrum","games","limits","currentLimit","rounds","mapTokens","_cubes","gearRatios","_scanNumber","matrixMixedNumbers","scanNumber","matchingMap","_scanNumber2","matchingGear","isSurrounded","hasMatchedGear","surroundings","_surroundings$filter","_surroundings$filter2","matchingGearItem","isScratchCardsMessage","slowCards","numberOfCards","howManyCards","_setupCard","win","isSlow","setupCard","_sendMatches","howManyMatches","winId","mineId","sendMatches","_setupCard2","_sendMatches2","scratchCards","amounts","intersectRange","leftRange","rightRange","ifYouGiveASeedAFertilizer","_Parser$header","seeds","parseMappings","findMinLocation","_Parser$header2","pns","mappingHeader","mappingRest","extractAllNumbers","seedRange","resultRanges","adjustSolution","ceilOrFloor","adjustment","truncated","findSolutions","race","firstSolution","secondSolution","minSolution","maxSolution","findNumberOfSolutions","_findSolutions","_findSolutions2","waitForIt","races","pivot","startSimpleLabeling","handOrder","cardOrder","jokerCardOrder","getHandType","hand","cards","counts","getCardIndex","getHandIndex","compareHands","typeComparison","cardComparison","generateFromJokers","cleanHand","howManyJokers","currentHands","newHands","_cardOrder","getBestIndex","bestA","candidateA","compareHandsWithJoker","camelCards","bid","hauntedWasteland","currentState","mapCurrentState","startNodes","endNodes","currentStates","cyclesAt","extractGroupRegex","generateCoefficients","substractCoefficients","generateLastCoefficients","nMax","binomial","mirageMaintenance","coeffs","lastCoeffs","_res","_coeff","lastElements","_lastCoeffs","extrapolation","firstElements","isRightConnected","isLeftConnected","isUpConnected","isDownConnected","isConnected","startC","startV","nC","nV","isNear","pipeMaze","visitLoop","enlarged","isExternal","reduced","clearNonMainPipes","replaceStartingPoint","enlarge","fillEmptyParts","centerV","toSet","currentDistance","neighbourC","nextToFill","toFill","option","_options","cosmicExpansion","emptySize","_empty","galaxies","memoize","memoization","optimizeCycles","baseArg","indexResults","lastRes","serializedArg","cycleI","cycleLength","cycleBase","expectedPosition","_indexResults$get","_indexResults$get2","cycleRes","_f2","newArg","findContiguousGroups","contigous","findArrangements","simple","contiguous","_e$split","_e$split2","cont","_contiguous","newMain","arrangements","unfold","newSimple","hotSprings","findReflection","sizeLimit","lineGetter","baseCol","otherCol","pointOfIncidence","matrixes","horizontalReflection","verticalReflection","getRow","getColumn","findReflectionWithSmudge","oldHorizontal","oldVertical","findNewPosition","parabolicReflectorDish","roll","calculateLoad","_cycle","ascii","Boxes","boxes","focus","lensLibrary","_match","rawFocus","exec","getScore","validCells","vector","existingCell","resultDirections","theFloorWillBeLava","startingBeam","energized","calculateEnergized","startingBeams","best","_startingBeams","_calculateEnergized","beams","newBeams","beam","additionals","clumsyCrucible","bestDestination","matrixNumbers","getBestDestination","maxSteps","minSteps","heatLoss","turnDirections","_turnDirections","newHeat","isEntryRouteBase","enrichList","2015","entries2015","2016","entries2016","2017","entries2017","2018","entries2018","2019","entries2019","2020","entries2020","2021","entries2021","2022","entries2022","2023","entries2023","App","_Vue","__decorate","Component","Navbar","star","animationDuration","animationDelay","_m","yearsByRow","floorYears","yearIndex","shouldPrepend","ordinalDate","starObjects","visibility","isFull","ordinalOf","Entries","CalendarEntry","disabled","example","hasFixedInput","readFile","staticStyle","directives","rawName","variantSelected","domProps","_q","variant","quickRun","executing","$$a","$$el","$$c","checked","$$v","$$i","supportsExample","readFactory","showAdditionalInput","inputLine","keyCode","sendInput","composing","sendClose","entryKey","fileLoaded","_t","fullDate","link","EntryTitle","Prop","noInput","marginBottom","reasonForNoInput","forceEmbedded","readFileContent","hasEmbedded","useEmbedded","class","hidden","hideChoices","loadFile","clickSelectionAction","selectionLabel","ref","filesUpdated","isFileSelected","shownName","readFileFromInput","file","onSuccess","fileReader","FileReader","readAsText","EntryFileInput","chooseFile","fileName","getFileName","files","content","$refs","click","Watch","EntryChoice","required","disabledYear","embeddedLines","EntryInput","inputContent","_loadFile","contentToSplit","splitContent","Emit","EntryTemplate","fileHandling","canvasSize","hideOutput","EntrySimpleOutput","backgroundColor","factory","_factory","toDrawForeground","_add","internalAddItem","_addForeground","_remove","invalidateMap","_stop","renderIteration","_replace","newIds","startRender","pauseFor","changeColor","_changeColor","idOrIndex","manualRender","manualInvalidate","isInvalid","newBounds","rej","canvas","toBlob","val","oldVal","scrollTop","scrollHeight","getContext","clearRect","renderItem","beginPath","lineTo","strokeStyle","stroke","fillStyle","invalidateBounds","invalidateInfo","ua","navigator","userAgent","mq","SimpleEntryTemplate","selectedEntry","showInput","_this$entry$metadata$","_this$entry$metadata$2","sendLine","stopper","clearScreen","reset","destroying","_readFile","_read","createPause","lastPause","messageHandler","showTicket","ticketData","BaseMessageTemplate","shouldStop","currentTime","additionalReset","TicketTranslationView","_messageHandler","showGrid","modifiers","minTime","_n","$forceUpdate","get4dData","getData","ConwayCubesView","get3dData","innerHTML","SVG","Hex","extendHex","Grid","defineGrid","hexSymbol","symbol","polygon","hex","_hex$toPoint","toPoint","use","transparent","running","play","EntryWithPauseAndRun","shouldRun","drawingPause","handleSetup","EntryWithGraph","animate","PassagePathing","graphMessageSender","showCalibrations","visibleCalibrations","calibration","windowSize","TrebuchetView","calibrationData","_handleSendCard","rightCells","leftCells","selector","transition","querySelectorAll","getBoundingClientRect","handleSendCard","_handleMoveSelector","_this$right$getBoundi","baseTop","baseLeft","_cell$getBoundingClie2","ontransitionend","handleMoveSelector","_handleSelectWin","handleSelectWin","keyMap","tuples","map2020","LobbyLayout","map2021","map2023","ScratchCardsView","alert","Router","routes","Home","getTemplate","entryComponentMap","process","library","faSnowman","faSnowflake","faHollyBerry","faGift","faCandyCane","faSleigh","faLink","FontAwesomeIcon","config","productionTip","toJSON","router","$mount"],"mappings":"aACE,SAASA,EAAqBC,GAQ7B,IAPA,IAMIC,EAAUC,EANVC,EAAWH,EAAK,GAChBI,EAAcJ,EAAK,GACnBK,EAAiBL,EAAK,GAIHM,EAAI,EAAGC,EAAW,GACpCD,EAAIH,EAASK,OAAQF,IACzBJ,EAAUC,EAASG,GAChBG,OAAOC,UAAUC,eAAeC,KAAKC,EAAiBX,IAAYW,EAAgBX,IACpFK,EAASO,KAAKD,EAAgBX,GAAS,IAExCW,EAAgBX,GAAW,EAE5B,IAAID,KAAYG,EACZK,OAAOC,UAAUC,eAAeC,KAAKR,EAAaH,KACpDc,EAAQd,GAAYG,EAAYH,IAG/Be,GAAqBA,EAAoBhB,GAE5C,MAAMO,EAASC,OACdD,EAASU,OAATV,GAOD,OAHAW,EAAgBJ,KAAKK,MAAMD,EAAiBb,GAAkB,IAGvDe,IAER,SAASA,IAER,IADA,IAAIC,EACIf,EAAI,EAAGA,EAAIY,EAAgBV,OAAQF,IAAK,CAG/C,IAFA,IAAIgB,EAAiBJ,EAAgBZ,GACjCiB,GAAY,EACRC,EAAI,EAAGA,EAAIF,EAAed,OAAQgB,IAAK,CAC9C,IAAIC,EAAQH,EAAeE,GACG,IAA3BX,EAAgBY,KAAcF,GAAY,GAE3CA,IACFL,EAAgBQ,OAAOpB,IAAK,GAC5Be,EAASM,EAAoBA,EAAoBC,EAAIN,EAAe,KAItE,OAAOD,EAIR,IAAIQ,EAAmB,GAKnBhB,EAAkB,CACrB,IAAO,GAGJK,EAAkB,GAGtB,SAASY,EAAe5B,GACvB,OAAOyB,EAAoBI,EAAI,OAAS,CAAC,4BAA4B,4BAA4B,iCAAiC,iCAAiC,oBAAoB,oBAAoB,4BAA4B,4BAA4B,gCAAgC,gCAAgC,6CAA6C,6CAA6C,8CAA8C,8CAA8C,wBAAwB,wBAAwB,mCAAmC,mCAAmC,uCAAuC,uCAAuC,uBAAuB,uBAAuB,oCAAoC,oCAAoC,uBAAuB,uBAAuB,gCAAgC,gCAAgC,qCAAqC,qCAAqC,0BAA0B,0BAA0B,gDAAgD,gDAAgD,kCAAkC,kCAAkC,6BAA6B,6BAA6B,8BAA8B,8BAA8B,qCAAqC,qCAAqC,kCAAkC,kCAAkC,sCAAsC,sCAAsC,uBAAuB,uBAAuB,iCAAiC,iCAAiC,4CAA4C,4CAA4C,+BAA+B,+BAA+B,oCAAoC,oCAAoC,wBAAwB,wBAAwB,6BAA6B,6BAA6B,wBAAwB,wBAAwB,2BAA2B,2BAA2B,oCAAoC,oCAAoC,0BAA0B,0BAA0B,0BAA0B,0BAA0B,0CAA0C,0CAA0C,uCAAuC,uCAAuC,8BAA8B,8BAA8B,wBAAwB,wBAAwB,iCAAiC,iCAAiC,wBAAwB,wBAAwB,kDAAkD,kDAAkD,yBAAyB,yBAAyB,sCAAsC,sCAAsC,sCAAsC,sCAAsC,6BAA6B,6BAA6B,oCAAoC,oCAAoC,gCAAgC,gCAAgC,qCAAqC,qCAAqC,6BAA6B,6BAA6B,kDAAkD,kDAAkD,6BAA6B,6BAA6B,qCAAqC,qCAAqC,+BAA+B,+BAA+B,2BAA2B,2BAA2B,gCAAgC,gCAAgC,8BAA8B,8BAA8B,gBAAgB,gBAAgB,gCAAgC,gCAAgC,uBAAuB,uBAAuB,oCAAoC,oCAAoC,kBAAkB,kBAAkB,oCAAoC,oCAAoC,2BAA2B,2BAA2B,qBAAqB,qBAAqB,+BAA+B,+BAA+B,2BAA2B,2BAA2B,0BAA0B,0BAA0B,iCAAiC,iCAAiC,4BAA4B,4BAA4B,oBAAoB,oBAAoB,yBAAyB,yBAAyB,2BAA2B,2BAA2B,6BAA6B,6BAA6B,+BAA+B,+BAA+B,+BAA+B,+BAA+B,gCAAgC,gCAAgC,sCAAsC,sCAAsC,sCAAsC,sCAAsC,2CAA2C,2CAA2C,oCAAoC,oCAAoC,iCAAiC,iCAAiC,yCAAyC,yCAAyC,4BAA4B,4BAA4B,+BAA+B,+BAA+B,0BAA0B,0BAA0B,kCAAkC,kCAAkC,8BAA8B,8BAA8B,+BAA+B,+BAA+B,iDAAiD,iDAAiD,sCAAsC,sCAAsC,oCAAoC,oCAAoC,6CAA6C,6CAA6C,wCAAwC,wCAAwC,qBAAqB,qBAAqB,wBAAwB,wBAAwB,2BAA2B,2BAA2B,0CAA0C,0CAA0C,mCAAmC,mCAAmC,qBAAqB,qBAAqB,sCAAsC,sCAAsC,yBAAyB,yBAAyB,sCAAsC,sCAAsC,iDAAiD,iDAAiD,8CAA8C,8CAA8C,4CAA4C,4CAA4C,6DAA6D,6DAA6D,qDAAqD,qDAAqD,2BAA2B,2BAA2B,gCAAgC,gCAAgC,sDAAsD,sDAAsD,sDAAsD,sDAAsD,uCAAuC,uCAAuC,wBAAwB,wBAAwB,wBAAwB,wBAAwB,uCAAuC,uCAAuC,iCAAiC,iCAAiC,sBAAsB,sBAAsB,sBAAsB,sBAAsB,yCAAyC,yCAAyC,sCAAsC,sCAAsC,0CAA0C,0CAA0C,wCAAwC,wCAAwC,wCAAwC,wCAAwC,oCAAoC,oCAAoC,2CAA2C,2CAA2C,oCAAoC,oCAAoC,oCAAoC,oCAAoC,kDAAkD,kDAAkD,yCAAyC,yCAAyC,yBAAyB,yBAAyB,6BAA6B,6BAA6B,mCAAmC,mCAAmC,iCAAiC,iCAAiC,+BAA+B,+BAA+B,0BAA0B,0BAA0B,4BAA4B,4BAA4B,8BAA8B,8BAA8B,qCAAqC,qCAAqC,0BAA0B,0BAA0B,wBAAwB,wBAAwB,8BAA8B,8BAA8B,wBAAwB,wBAAwB,yCAAyC,yCAAyC,qCAAqC,qCAAqC,gCAAgC,gCAAgC,mCAAmC,mCAAmC,2CAA2C,2CAA2C,wBAAwB,wBAAwB,8CAA8C,8CAA8C,mDAAmD,mDAAmD,yBAAyB,yBAAyB,+BAA+B,+BAA+B,2BAA2B,2BAA2B,yBAAyB,yBAAyB,wBAAwB,wBAAwB,uBAAuB,uBAAuB,qBAAqB,qBAAqB,0BAA0B,0BAA0B,wBAAwB,wBAAwB,0BAA0B,0BAA0B,4BAA4B,4BAA4B,4BAA4B,4BAA4B,2BAA2B,2BAA2B,wBAAwB,wBAAwB,4BAA4B,4BAA4B,2BAA2B,2BAA2B,+BAA+B,+BAA+B,+BAA+B,+BAA+B,qBAAqB,qBAAqB,mCAAmC,mCAAmC,yBAAyB,yBAAyB,0BAA0B,0BAA0B,0BAA0B,0BAA0B,8BAA8B,8BAA8B,+BAA+B,+BAA+B,oBAAoB,oBAAoB,iCAAiC,iCAAiC,0BAA0B,0BAA0B,6BAA6B,6BAA6B,kBAAkB,kBAAkB,sBAAsB,sBAAsB,gBAAgB,gBAAgB,yBAAyB,yBAAyB,mCAAmC,mCAAmC,uBAAuB,uBAAuB,gCAAgC,gCAAgC,uBAAuB,uBAAuB,0BAA0B,0BAA0B,2BAA2B,2BAA2B,0BAA0B,0BAA0B,wBAAwB,wBAAwB,gCAAgC,gCAAgC,uBAAuB,uBAAuB,qBAAqB,qBAAqB,uBAAuB,uBAAuB,0BAA0B,0BAA0B,mCAAmC,mCAAmC,+BAA+B,+BAA+B,sBAAsB,sBAAsB,sBAAsB,sBAAsB,iCAAiC,iCAAiC,0BAA0B,0BAA0B,4BAA4B,4BAA4B,4BAA4B,4BAA4B,wBAAwB,wBAAwB,4BAA4B,4BAA4B,2BAA2B,2BAA2B,oCAAoC,oCAAoC,mCAAmC,mCAAmC,gCAAgC,gCAAgC,sBAAsB,sBAAsB,uBAAuB,uBAAuB,mCAAmC,mCAAmC,+BAA+B,+BAA+B,iCAAiC,iCAAiC,4BAA4B,4BAA4B,8BAA8B,8BAA8B,+BAA+B,+BAA+B,uBAAuB,uBAAuB,mCAAmC,mCAAmC,yBAAyB,yBAAyB,8BAA8B,8BAA8B,0BAA0B,0BAA0B,8BAA8B,8BAA8B,uBAAuB,uBAAuB,2BAA2B,2BAA2B,4BAA4B,4BAA4B,0BAA0B,0BAA0B,uBAAuB,uBAAuB,6BAA6B,6BAA6B,uBAAuB,uBAAuB,2CAA2C,2CAA2C,wBAAwB,wBAAwB,8BAA8B,8BAA8B,oCAAoC,oCAAoC,qBAAqB,qBAAqB,8BAA8B,8BAA8B,yBAAyB,yBAAyB,kCAAkC,kCAAkC,qBAAqB,qBAAqB,uBAAuB,wBAAwB7B,IAAUA,GAAW,IAAM,CAAC,4BAA4B,WAAW,iCAAiC,WAAW,oBAAoB,WAAW,4BAA4B,WAAW,gCAAgC,WAAW,6CAA6C,WAAW,8CAA8C,WAAW,wBAAwB,WAAW,mCAAmC,WAAW,uCAAuC,WAAW,uBAAuB,WAAW,oCAAoC,WAAW,uBAAuB,WAAW,gCAAgC,WAAW,qCAAqC,WAAW,0BAA0B,WAAW,gDAAgD,WAAW,kCAAkC,WAAW,6BAA6B,WAAW,8BAA8B,WAAW,qCAAqC,WAAW,kCAAkC,WAAW,sCAAsC,WAAW,uBAAuB,WAAW,iCAAiC,WAAW,4CAA4C,WAAW,+BAA+B,WAAW,oCAAoC,WAAW,wBAAwB,WAAW,6BAA6B,WAAW,wBAAwB,WAAW,2BAA2B,WAAW,oCAAoC,WAAW,0BAA0B,WAAW,0BAA0B,WAAW,0CAA0C,WAAW,uCAAuC,WAAW,8BAA8B,WAAW,wBAAwB,WAAW,iCAAiC,WAAW,wBAAwB,WAAW,kDAAkD,WAAW,yBAAyB,WAAW,sCAAsC,WAAW,sCAAsC,WAAW,6BAA6B,WAAW,oCAAoC,WAAW,gCAAgC,WAAW,qCAAqC,WAAW,6BAA6B,WAAW,kDAAkD,WAAW,6BAA6B,WAAW,qCAAqC,WAAW,+BAA+B,WAAW,2BAA2B,WAAW,gCAAgC,WAAW,8BAA8B,WAAW,gBAAgB,WAAW,gCAAgC,WAAW,uBAAuB,WAAW,oCAAoC,WAAW,kBAAkB,WAAW,oCAAoC,WAAW,2BAA2B,WAAW,qBAAqB,WAAW,+BAA+B,WAAW,2BAA2B,WAAW,0BAA0B,WAAW,iCAAiC,WAAW,4BAA4B,WAAW,oBAAoB,WAAW,yBAAyB,WAAW,2BAA2B,WAAW,6BAA6B,WAAW,+BAA+B,WAAW,+BAA+B,WAAW,gCAAgC,WAAW,sCAAsC,WAAW,sCAAsC,WAAW,2CAA2C,WAAW,oCAAoC,WAAW,iCAAiC,WAAW,yCAAyC,WAAW,4BAA4B,WAAW,+BAA+B,WAAW,0BAA0B,WAAW,kCAAkC,WAAW,8BAA8B,WAAW,+BAA+B,WAAW,iDAAiD,WAAW,sCAAsC,WAAW,oCAAoC,WAAW,6CAA6C,WAAW,wCAAwC,WAAW,qBAAqB,WAAW,wBAAwB,WAAW,2BAA2B,WAAW,0CAA0C,WAAW,mCAAmC,WAAW,qBAAqB,WAAW,sCAAsC,WAAW,yBAAyB,WAAW,sCAAsC,WAAW,iDAAiD,WAAW,8CAA8C,WAAW,4CAA4C,WAAW,6DAA6D,WAAW,qDAAqD,WAAW,2BAA2B,WAAW,gCAAgC,WAAW,sDAAsD,WAAW,sDAAsD,WAAW,uCAAuC,WAAW,wBAAwB,WAAW,wBAAwB,WAAW,uCAAuC,WAAW,iCAAiC,WAAW,sBAAsB,WAAW,sBAAsB,WAAW,yCAAyC,WAAW,sCAAsC,WAAW,0CAA0C,WAAW,wCAAwC,WAAW,wCAAwC,WAAW,oCAAoC,WAAW,2CAA2C,WAAW,oCAAoC,WAAW,oCAAoC,WAAW,kDAAkD,WAAW,yCAAyC,WAAW,yBAAyB,WAAW,6BAA6B,WAAW,mCAAmC,WAAW,iCAAiC,WAAW,+BAA+B,WAAW,0BAA0B,WAAW,4BAA4B,WAAW,8BAA8B,WAAW,qCAAqC,WAAW,0BAA0B,WAAW,wBAAwB,WAAW,8BAA8B,WAAW,wBAAwB,WAAW,yCAAyC,WAAW,qCAAqC,WAAW,gCAAgC,WAAW,mCAAmC,WAAW,2CAA2C,WAAW,wBAAwB,WAAW,8CAA8C,WAAW,mDAAmD,WAAW,yBAAyB,WAAW,+BAA+B,WAAW,2BAA2B,WAAW,yBAAyB,WAAW,wBAAwB,WAAW,uBAAuB,WAAW,qBAAqB,WAAW,0BAA0B,WAAW,wBAAwB,WAAW,0BAA0B,WAAW,4BAA4B,WAAW,4BAA4B,WAAW,2BAA2B,WAAW,wBAAwB,WAAW,4BAA4B,WAAW,2BAA2B,WAAW,+BAA+B,WAAW,+BAA+B,WAAW,qBAAqB,WAAW,mCAAmC,WAAW,yBAAyB,WAAW,0BAA0B,WAAW,0BAA0B,WAAW,8BAA8B,WAAW,+BAA+B,WAAW,oBAAoB,WAAW,iCAAiC,WAAW,0BAA0B,WAAW,6BAA6B,WAAW,kBAAkB,WAAW,sBAAsB,WAAW,gBAAgB,WAAW,yBAAyB,WAAW,mCAAmC,WAAW,uBAAuB,WAAW,gCAAgC,WAAW,uBAAuB,WAAW,0BAA0B,WAAW,2BAA2B,WAAW,0BAA0B,WAAW,wBAAwB,WAAW,gCAAgC,WAAW,uBAAuB,WAAW,qBAAqB,WAAW,uBAAuB,WAAW,0BAA0B,WAAW,mCAAmC,WAAW,+BAA+B,WAAW,sBAAsB,WAAW,sBAAsB,WAAW,iCAAiC,WAAW,0BAA0B,WAAW,4BAA4B,WAAW,4BAA4B,WAAW,wBAAwB,WAAW,4BAA4B,WAAW,2BAA2B,WAAW,oCAAoC,WAAW,mCAAmC,WAAW,gCAAgC,WAAW,sBAAsB,WAAW,uBAAuB,WAAW,mCAAmC,WAAW,+BAA+B,WAAW,iCAAiC,WAAW,4BAA4B,WAAW,8BAA8B,WAAW,+BAA+B,WAAW,uBAAuB,WAAW,mCAAmC,WAAW,yBAAyB,WAAW,8BAA8B,WAAW,0BAA0B,WAAW,8BAA8B,WAAW,uBAAuB,WAAW,2BAA2B,WAAW,4BAA4B,WAAW,0BAA0B,WAAW,uBAAuB,WAAW,6BAA6B,WAAW,uBAAuB,WAAW,2CAA2C,WAAW,wBAAwB,WAAW,8BAA8B,WAAW,oCAAoC,WAAW,qBAAqB,WAAW,8BAA8B,WAAW,yBAAyB,WAAW,kCAAkC,WAAW,qBAAqB,WAAW,uBAAuB,YAAYA,GAAW,MAIluxB,SAASyB,EAAoB1B,GAG5B,GAAG4B,EAAiB5B,GACnB,OAAO4B,EAAiB5B,GAAU+B,QAGnC,IAAIC,EAASJ,EAAiB5B,GAAY,CACzCK,EAAGL,EACHiC,GAAG,EACHF,QAAS,IAUV,OANAjB,EAAQd,GAAUW,KAAKqB,EAAOD,QAASC,EAAQA,EAAOD,QAASL,GAG/DM,EAAOC,GAAI,EAGJD,EAAOD,QAKfL,EAAoBQ,EAAI,SAAuBjC,GAC9C,IAAIkC,EAAW,GAKXC,EAAqBxB,EAAgBX,GACzC,GAA0B,IAAvBmC,EAGF,GAAGA,EACFD,EAAStB,KAAKuB,EAAmB,QAC3B,CAEN,IAAIC,EAAU,IAAIC,SAAQ,SAASC,EAASC,GAC3CJ,EAAqBxB,EAAgBX,GAAW,CAACsC,EAASC,MAE3DL,EAAStB,KAAKuB,EAAmB,GAAKC,GAGtC,IACII,EADAC,EAASC,SAASC,cAAc,UAGpCF,EAAOG,QAAU,QACjBH,EAAOI,QAAU,IACbpB,EAAoBqB,IACvBL,EAAOM,aAAa,QAAStB,EAAoBqB,IAElDL,EAAOO,IAAMpB,EAAe5B,GAG5B,IAAIiD,EAAQ,IAAIC,MAChBV,EAAmB,SAAUW,GAE5BV,EAAOW,QAAUX,EAAOY,OAAS,KACjCC,aAAaT,GACb,IAAIU,EAAQ5C,EAAgBX,GAC5B,GAAa,IAAVuD,EAAa,CACf,GAAGA,EAAO,CACT,IAAIC,EAAYL,IAAyB,SAAfA,EAAMM,KAAkB,UAAYN,EAAMM,MAChEC,EAAUP,GAASA,EAAMQ,QAAUR,EAAMQ,OAAOX,IACpDC,EAAMW,QAAU,iBAAmB5D,EAAU,cAAgBwD,EAAY,KAAOE,EAAU,IAC1FT,EAAMY,KAAO,iBACbZ,EAAMQ,KAAOD,EACbP,EAAMa,QAAUJ,EAChBH,EAAM,GAAGN,GAEVtC,EAAgBX,QAAW+D,IAG7B,IAAIlB,EAAUmB,YAAW,WACxBxB,EAAiB,CAAEiB,KAAM,UAAWE,OAAQlB,MAC1C,MACHA,EAAOW,QAAUX,EAAOY,OAASb,EACjCE,SAASuB,KAAKC,YAAYzB,GAG5B,OAAOJ,QAAQ8B,IAAIjC,IAIpBT,EAAoB2C,EAAIvD,EAGxBY,EAAoB4C,EAAI1C,EAGxBF,EAAoB6C,EAAI,SAASxC,EAAS+B,EAAMU,GAC3C9C,EAAoB+C,EAAE1C,EAAS+B,IAClCtD,OAAOkE,eAAe3C,EAAS+B,EAAM,CAAEa,YAAY,EAAMC,IAAKJ,KAKhE9C,EAAoBmD,EAAI,SAAS9C,GACX,qBAAX+C,QAA0BA,OAAOC,aAC1CvE,OAAOkE,eAAe3C,EAAS+C,OAAOC,YAAa,CAAEC,MAAO,WAE7DxE,OAAOkE,eAAe3C,EAAS,aAAc,CAAEiD,OAAO,KAQvDtD,EAAoBuD,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQtD,EAAoBsD,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,kBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAK5E,OAAO6E,OAAO,MAGvB,GAFA3D,EAAoBmD,EAAEO,GACtB5E,OAAOkE,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOtD,EAAoB6C,EAAEa,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIR1D,EAAoB8D,EAAI,SAASxD,GAChC,IAAIwC,EAASxC,GAAUA,EAAOmD,WAC7B,WAAwB,OAAOnD,EAAO,YACtC,WAA8B,OAAOA,GAEtC,OADAN,EAAoB6C,EAAEC,EAAQ,IAAKA,GAC5BA,GAIR9C,EAAoB+C,EAAI,SAASgB,EAAQC,GAAY,OAAOlF,OAAOC,UAAUC,eAAeC,KAAK8E,EAAQC,IAGzGhE,EAAoBI,EAAI,QAGxBJ,EAAoBiE,GAAK,SAASC,GAA2B,MAApBC,QAAQ3C,MAAM0C,GAAYA,GAEnE,IAAIE,EAAaC,OAAO,gBAAkBA,OAAO,iBAAmB,GAChEC,EAAmBF,EAAWjF,KAAK0E,KAAKO,GAC5CA,EAAWjF,KAAOf,EAClBgG,EAAaA,EAAWG,QACxB,IAAI,IAAI5F,EAAI,EAAGA,EAAIyF,EAAWvF,OAAQF,IAAKP,EAAqBgG,EAAWzF,IAC3E,IAAIU,EAAsBiF,EAI1B/E,EAAgBJ,KAAK,CAAC,EAAE,kBAEjBM,K,6EC5NT,W,+GCAA,W,oCCAA,W,sFCAA,W,kCCAA,W,oCCAA,W,6DCAA,W,6DCAA,W,uBCAA,IAAI+E,EAAM,CACT,8BAA+B,CAC9B,OACA,6BAED,mCAAoC,CACnC,OACA,kCAED,sBAAuB,CACtB,OACA,qBAED,8BAA+B,CAC9B,OACA,6BAED,kCAAmC,CAClC,OACA,iCAED,+CAAgD,CAC/C,OACA,8CAED,gDAAiD,CAChD,OACA,+CAED,0BAA2B,CAC1B,OACA,yBAED,qCAAsC,CACrC,OACA,oCAED,yCAA0C,CACzC,OACA,wCAED,yBAA0B,CACzB,OACA,wBAED,sCAAuC,CACtC,OACA,qCAED,yBAA0B,CACzB,OACA,wBAED,kCAAmC,CAClC,OACA,iCAED,uCAAwC,CACvC,OACA,sCAED,4BAA6B,CAC5B,OACA,2BAED,kDAAmD,CAClD,OACA,iDAED,oCAAqC,CACpC,OACA,mCAED,+BAAgC,CAC/B,OACA,8BAED,gCAAiC,CAChC,OACA,+BAED,uCAAwC,CACvC,OACA,sCAED,oCAAqC,CACpC,OACA,mCAED,wCAAyC,CACxC,OACA,uCAED,yBAA0B,CACzB,OACA,wBAED,mCAAoC,CACnC,OACA,kCAED,8CAA+C,CAC9C,OACA,6CAED,iCAAkC,CACjC,OACA,gCAED,sCAAuC,CACtC,OACA,qCAED,0BAA2B,CAC1B,OACA,yBAED,+BAAgC,CAC/B,OACA,8BAED,0BAA2B,CAC1B,OACA,yBAED,6BAA8B,CAC7B,OACA,4BAED,sCAAuC,CACtC,OACA,qCAED,4BAA6B,CAC5B,OACA,2BAED,4BAA6B,CAC5B,OACA,2BAED,4CAA6C,CAC5C,OACA,2CAED,yCAA0C,CACzC,OACA,wCAED,gCAAiC,CAChC,OACA,+BAED,0BAA2B,CAC1B,OACA,yBAED,mCAAoC,CACnC,OACA,kCAED,0BAA2B,CAC1B,OACA,yBAED,oDAAqD,CACpD,OACA,mDAED,2BAA4B,CAC3B,OACA,0BAED,wCAAyC,CACxC,OACA,uCAED,wCAAyC,CACxC,OACA,uCAED,+BAAgC,CAC/B,OACA,8BAED,sCAAuC,CACtC,OACA,qCAED,kCAAmC,CAClC,OACA,iCAED,uCAAwC,CACvC,OACA,sCAED,+BAAgC,CAC/B,OACA,8BAED,oDAAqD,CACpD,OACA,mDAED,+BAAgC,CAC/B,OACA,8BAED,uCAAwC,CACvC,OACA,sCAED,iCAAkC,CACjC,OACA,gCAED,6BAA8B,CAC7B,OACA,4BAED,kCAAmC,CAClC,OACA,iCAED,gCAAiC,CAChC,OACA,+BAED,kBAAmB,CAClB,OACA,iBAED,kCAAmC,CAClC,OACA,iCAED,yBAA0B,CACzB,OACA,wBAED,sCAAuC,CACtC,OACA,qCAED,oBAAqB,CACpB,OACA,mBAED,sCAAuC,CACtC,OACA,qCAED,6BAA8B,CAC7B,OACA,4BAED,uBAAwB,CACvB,OACA,sBAED,iCAAkC,CACjC,OACA,gCAED,6BAA8B,CAC7B,OACA,4BAED,4BAA6B,CAC5B,OACA,2BAED,mCAAoC,CACnC,OACA,kCAED,8BAA+B,CAC9B,OACA,6BAED,sBAAuB,CACtB,OACA,qBAED,2BAA4B,CAC3B,OACA,0BAED,6BAA8B,CAC7B,OACA,4BAED,+BAAgC,CAC/B,OACA,8BAED,iCAAkC,CACjC,OACA,gCAED,iCAAkC,CACjC,OACA,gCAED,kCAAmC,CAClC,OACA,iCAED,wCAAyC,CACxC,OACA,uCAED,wCAAyC,CACxC,OACA,uCAED,6CAA8C,CAC7C,OACA,4CAED,sCAAuC,CACtC,OACA,qCAED,mCAAoC,CACnC,OACA,kCAED,2CAA4C,CAC3C,OACA,0CAED,8BAA+B,CAC9B,OACA,6BAED,iCAAkC,CACjC,OACA,gCAED,4BAA6B,CAC5B,OACA,2BAED,oCAAqC,CACpC,OACA,mCAED,gCAAiC,CAChC,OACA,+BAED,iCAAkC,CACjC,OACA,gCAED,mDAAoD,CACnD,OACA,kDAED,wCAAyC,CACxC,OACA,uCAED,sCAAuC,CACtC,OACA,qCAED,+CAAgD,CAC/C,OACA,8CAED,0CAA2C,CAC1C,OACA,yCAED,uBAAwB,CACvB,OACA,sBAED,0BAA2B,CAC1B,OACA,yBAED,6BAA8B,CAC7B,OACA,4BAED,4CAA6C,CAC5C,OACA,2CAED,qCAAsC,CACrC,OACA,oCAED,uBAAwB,CACvB,OACA,sBAED,wCAAyC,CACxC,OACA,uCAED,2BAA4B,CAC3B,OACA,0BAED,wCAAyC,CACxC,OACA,uCAED,mDAAoD,CACnD,OACA,kDAED,gDAAiD,CAChD,OACA,+CAED,8CAA+C,CAC9C,OACA,6CAED,+DAAgE,CAC/D,OACA,8DAED,uDAAwD,CACvD,OACA,sDAED,6BAA8B,CAC7B,OACA,4BAED,kCAAmC,CAClC,OACA,iCAED,wDAAyD,CACxD,OACA,uDAED,wDAAyD,CACxD,OACA,uDAED,yCAA0C,CACzC,OACA,wCAED,0BAA2B,CAC1B,OACA,yBAED,0BAA2B,CAC1B,OACA,yBAED,yCAA0C,CACzC,OACA,wCAED,mCAAoC,CACnC,OACA,kCAED,wBAAyB,CACxB,OACA,uBAED,wBAAyB,CACxB,OACA,uBAED,2CAA4C,CAC3C,OACA,0CAED,wCAAyC,CACxC,OACA,uCAED,4CAA6C,CAC5C,OACA,2CAED,0CAA2C,CAC1C,OACA,yCAED,0CAA2C,CAC1C,OACA,yCAED,sCAAuC,CACtC,OACA,qCAED,6CAA8C,CAC7C,OACA,4CAED,sCAAuC,CACtC,OACA,qCAED,sCAAuC,CACtC,OACA,qCAED,oDAAqD,CACpD,OACA,mDAED,2CAA4C,CAC3C,OACA,0CAED,2BAA4B,CAC3B,OACA,0BAED,+BAAgC,CAC/B,OACA,8BAED,qCAAsC,CACrC,OACA,oCAED,mCAAoC,CACnC,OACA,kCAED,iCAAkC,CACjC,OACA,gCAED,4BAA6B,CAC5B,OACA,2BAED,8BAA+B,CAC9B,OACA,6BAED,gCAAiC,CAChC,OACA,+BAED,uCAAwC,CACvC,OACA,sCAED,4BAA6B,CAC5B,OACA,2BAED,0BAA2B,CAC1B,OACA,yBAED,gCAAiC,CAChC,OACA,+BAED,0BAA2B,CAC1B,OACA,yBAED,2CAA4C,CAC3C,OACA,0CAED,uCAAwC,CACvC,OACA,sCAED,kCAAmC,CAClC,OACA,iCAED,qCAAsC,CACrC,OACA,oCAED,6CAA8C,CAC7C,OACA,4CAED,0BAA2B,CAC1B,OACA,yBAED,gDAAiD,CAChD,OACA,+CAED,qDAAsD,CACrD,OACA,oDAED,2BAA4B,CAC3B,OACA,0BAED,iCAAkC,CACjC,OACA,gCAED,6BAA8B,CAC7B,OACA,4BAED,2BAA4B,CAC3B,OACA,0BAED,0BAA2B,CAC1B,OACA,yBAED,yBAA0B,CACzB,OACA,wBAED,uBAAwB,CACvB,OACA,sBAED,4BAA6B,CAC5B,OACA,2BAED,0BAA2B,CAC1B,OACA,yBAED,4BAA6B,CAC5B,OACA,2BAED,8BAA+B,CAC9B,OACA,6BAED,8BAA+B,CAC9B,OACA,6BAED,6BAA8B,CAC7B,OACA,4BAED,0BAA2B,CAC1B,OACA,yBAED,8BAA+B,CAC9B,OACA,6BAED,6BAA8B,CAC7B,OACA,4BAED,iCAAkC,CACjC,OACA,gCAED,iCAAkC,CACjC,OACA,gCAED,uBAAwB,CACvB,OACA,sBAED,qCAAsC,CACrC,OACA,oCAED,2BAA4B,CAC3B,OACA,0BAED,4BAA6B,CAC5B,OACA,2BAED,4BAA6B,CAC5B,OACA,2BAED,gCAAiC,CAChC,OACA,+BAED,iCAAkC,CACjC,OACA,gCAED,sBAAuB,CACtB,OACA,qBAED,mCAAoC,CACnC,OACA,kCAED,4BAA6B,CAC5B,OACA,2BAED,+BAAgC,CAC/B,OACA,8BAED,oBAAqB,CACpB,OACA,mBAED,wBAAyB,CACxB,OACA,uBAED,kBAAmB,CAClB,OACA,iBAED,2BAA4B,CAC3B,OACA,0BAED,qCAAsC,CACrC,OACA,oCAED,yBAA0B,CACzB,OACA,wBAED,kCAAmC,CAClC,OACA,iCAED,yBAA0B,CACzB,QACA,wBAED,4BAA6B,CAC5B,OACA,2BAED,6BAA8B,CAC7B,OACA,4BAED,4BAA6B,CAC5B,OACA,2BAED,0BAA2B,CAC1B,OACA,yBAED,kCAAmC,CAClC,OACA,iCAED,yBAA0B,CACzB,OACA,wBAED,uBAAwB,CACvB,OACA,sBAED,yBAA0B,CACzB,OACA,wBAED,4BAA6B,CAC5B,OACA,2BAED,qCAAsC,CACrC,OACA,oCAED,iCAAkC,CACjC,OACA,gCAED,wBAAyB,CACxB,OACA,uBAED,wBAAyB,CACxB,OACA,uBAED,mCAAoC,CACnC,OACA,kCAED,4BAA6B,CAC5B,OACA,2BAED,8BAA+B,CAC9B,OACA,6BAED,8BAA+B,CAC9B,OACA,6BAED,0BAA2B,CAC1B,OACA,yBAED,8BAA+B,CAC9B,OACA,6BAED,6BAA8B,CAC7B,OACA,4BAED,sCAAuC,CACtC,OACA,qCAED,qCAAsC,CACrC,OACA,oCAED,kCAAmC,CAClC,OACA,iCAED,wBAAyB,CACxB,OACA,uBAED,yBAA0B,CACzB,OACA,wBAED,qCAAsC,CACrC,OACA,oCAED,iCAAkC,CACjC,OACA,gCAED,mCAAoC,CACnC,OACA,kCAED,8BAA+B,CAC9B,OACA,6BAED,gCAAiC,CAChC,OACA,+BAED,iCAAkC,CACjC,OACA,gCAED,yBAA0B,CACzB,OACA,wBAED,qCAAsC,CACrC,OACA,oCAED,2BAA4B,CAC3B,OACA,0BAED,gCAAiC,CAChC,OACA,+BAED,4BAA6B,CAC5B,OACA,2BAED,gCAAiC,CAChC,OACA,+BAED,yBAA0B,CACzB,OACA,wBAED,6BAA8B,CAC7B,OACA,4BAED,8BAA+B,CAC9B,OACA,6BAED,4BAA6B,CAC5B,OACA,2BAED,yBAA0B,CACzB,OACA,wBAED,+BAAgC,CAC/B,OACA,8BAED,yBAA0B,CACzB,OACA,wBAED,6CAA8C,CAC7C,QACA,4CAED,0BAA2B,CAC1B,OACA,yBAED,gCAAiC,CAChC,OACA,+BAED,sCAAuC,CACtC,OACA,qCAED,uBAAwB,CACvB,OACA,sBAED,gCAAiC,CAChC,OACA,+BAED,2BAA4B,CAC3B,OACA,0BAED,oCAAqC,CACpC,OACA,mCAED,uBAAwB,CACvB,OACA,sBAED,yBAA0B,CACzB,OACA,yBAGF,SAASC,EAAoBC,GAC5B,IAAI1E,EAAoB+C,EAAEyB,EAAKE,GAC9B,OAAO9D,QAAQC,UAAU8D,MAAK,WAC7B,IAAInE,EAAI,IAAIiB,MA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","file":"js/app.b660742c.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"js/\" + ({\"2015-abacus-framework-txt\":\"2015-abacus-framework-txt\",\"2015-all-in-a-single-night-txt\":\"2015-all-in-a-single-night-txt\",\"2015-aunt-sue-txt\":\"2015-aunt-sue-txt\",\"2015-corporate-policy-txt\":\"2015-corporate-policy-txt\",\"2015-elves-look-elves-say-txt\":\"2015-elves-look-elves-say-txt\",\"2015-i-was-told-there-would-be-no-math-txt\":\"2015-i-was-told-there-would-be-no-math-txt\",\"2015-infinite-elves-and-infinite-houses-txt\":\"2015-infinite-elves-and-infinite-houses-txt\",\"2015-intern-elves-txt\":\"2015-intern-elves-txt\",\"2015-it-hangs-in-the-balance-txt\":\"2015-it-hangs-in-the-balance-txt\",\"2015-knights-of-the-dinner-table-txt\":\"2015-knights-of-the-dinner-table-txt\",\"2015-let-it-snow-txt\":\"2015-let-it-snow-txt\",\"2015-like-a-gif-for-your-yard-txt\":\"2015-like-a-gif-for-your-yard-txt\",\"2015-matchsticks-txt\":\"2015-matchsticks-txt\",\"2015-medicine-for-rudolph-txt\":\"2015-medicine-for-rudolph-txt\",\"2015-no-such-thing-as-too-much-txt\":\"2015-no-such-thing-as-too-much-txt\",\"2015-not-quite-lisp-txt\":\"2015-not-quite-lisp-txt\",\"2015-perfect-spherical-houses-in-a-vacuum-txt\":\"2015-perfect-spherical-houses-in-a-vacuum-txt\",\"2015-probably-a-fire-hazard-txt\":\"2015-probably-a-fire-hazard-txt\",\"2015-reindeer-olympics-txt\":\"2015-reindeer-olympics-txt\",\"2015-rpg-simulator-20xx-txt\":\"2015-rpg-simulator-20xx-txt\",\"2015-science-for-hungry-people-txt\":\"2015-science-for-hungry-people-txt\",\"2015-some-assembly-required-txt\":\"2015-some-assembly-required-txt\",\"2015-the-ideal-stocking-stuffer-txt\":\"2015-the-ideal-stocking-stuffer-txt\",\"2015-turing-lock-txt\":\"2015-turing-lock-txt\",\"2015-wizard-simulator-20xx-txt\":\"2015-wizard-simulator-20xx-txt\",\"2016-a-maze-of-twisty-little-cubicles-txt\":\"2016-a-maze-of-twisty-little-cubicles-txt\",\"2016-air-duct-spelunking-txt\":\"2016-air-duct-spelunking-txt\",\"2016-an-elephant-named-joseph-txt\":\"2016-an-elephant-named-joseph-txt\",\"2016-balance-bots-txt\":\"2016-balance-bots-txt\",\"2016-bathroom-security-txt\":\"2016-bathroom-security-txt\",\"2016-clock-signal-txt\":\"2016-clock-signal-txt\",\"2016-dragon-checksum-txt\":\"2016-dragon-checksum-txt\",\"2016-explosives-in-cyberspace-txt\":\"2016-explosives-in-cyberspace-txt\",\"2016-firewall-rules-txt\":\"2016-firewall-rules-txt\",\"2016-grid-computing-txt\":\"2016-grid-computing-txt\",\"2016-how-about-a-nice-game-of-chess-txt\":\"2016-how-about-a-nice-game-of-chess-txt\",\"2016-internet-protocol-version-7-txt\":\"2016-internet-protocol-version-7-txt\",\"2016-leonardos-monorail-txt\":\"2016-leonardos-monorail-txt\",\"2016-like-a-rogue-txt\":\"2016-like-a-rogue-txt\",\"2016-no-time-for-a-taxicab-txt\":\"2016-no-time-for-a-taxicab-txt\",\"2016-one-time-pad-txt\":\"2016-one-time-pad-txt\",\"2016-radioisotope-thermoelectric-generators-txt\":\"2016-radioisotope-thermoelectric-generators-txt\",\"2016-safe-cracking-txt\":\"2016-safe-cracking-txt\",\"2016-scrambled-letters-and-hash-txt\":\"2016-scrambled-letters-and-hash-txt\",\"2016-security-through-obscurity-txt\":\"2016-security-through-obscurity-txt\",\"2016-signals-and-noise-txt\":\"2016-signals-and-noise-txt\",\"2016-squares-with-three-sides-txt\":\"2016-squares-with-three-sides-txt\",\"2016-timing-is-everything-txt\":\"2016-timing-is-everything-txt\",\"2016-two-factor-authentication-txt\":\"2016-two-factor-authentication-txt\",\"2016-two-steps-forward-txt\":\"2016-two-steps-forward-txt\",\"2017-a-maze-of-twisty-trampolines-all-alike-txt\":\"2017-a-maze-of-twisty-trampolines-all-alike-txt\",\"2017-a-series-of-tubes-txt\":\"2017-a-series-of-tubes-txt\",\"2017-coprocessor-conflagration-txt\":\"2017-coprocessor-conflagration-txt\",\"2017-corruption-checksum-txt\":\"2017-corruption-checksum-txt\",\"2017-digital-plumber-txt\":\"2017-digital-plumber-txt\",\"2017-disk-defragmentation-txt\":\"2017-disk-defragmentation-txt\",\"2017-dueling-generators-txt\":\"2017-dueling-generators-txt\",\"2017-duet-txt\":\"2017-duet-txt\",\"2017-electromagnetic-moat-txt\":\"2017-electromagnetic-moat-txt\",\"2017-fractal-art-txt\":\"2017-fractal-art-txt\",\"2017-heard-you-like-registers-txt\":\"2017-heard-you-like-registers-txt\",\"2017-hex-ed-txt\":\"2017-hex-ed-txt\",\"2017-high-entropy-passphrases-txt\":\"2017-high-entropy-passphrases-txt\",\"2017-inverse-captcha-txt\":\"2017-inverse-captcha-txt\",\"2017-knot-hash-txt\":\"2017-knot-hash-txt\",\"2017-memory-reallocation-txt\":\"2017-memory-reallocation-txt\",\"2017-packet-scanners-txt\":\"2017-packet-scanners-txt\",\"2017-particle-swarm-txt\":\"2017-particle-swarm-txt\",\"2017-permutation-promenade-txt\":\"2017-permutation-promenade-txt\",\"2017-recursive-circus-txt\":\"2017-recursive-circus-txt\",\"2017-spinlock-txt\":\"2017-spinlock-txt\",\"2017-spiral-memory-txt\":\"2017-spiral-memory-txt\",\"2017-sporifica-virus-txt\":\"2017-sporifica-virus-txt\",\"2017-stream-processing-txt\":\"2017-stream-processing-txt\",\"2017-the-halting-problem-txt\":\"2017-the-halting-problem-txt\",\"2018-a-regular-map-input-txt\":\"2018-a-regular-map-input-txt\",\"2018-alchemical-reduction-txt\":\"2018-alchemical-reduction-txt\",\"2018-beverage-bandits-example-1-txt\":\"2018-beverage-bandits-example-1-txt\",\"2018-beverage-bandits-example-2-txt\":\"2018-beverage-bandits-example-2-txt\",\"2018-beverage-bandits-example-combat-txt\":\"2018-beverage-bandits-example-combat-txt\",\"2018-beverage-bandits-example-txt\":\"2018-beverage-bandits-example-txt\",\"2018-beverage-bandits-goal-txt\":\"2018-beverage-bandits-goal-txt\",\"2018-beverage-bandits-online-input-txt\":\"2018-beverage-bandits-online-input-txt\",\"2018-chocolate-charts-txt\":\"2018-chocolate-charts-txt\",\"2018-chronal-calibration-txt\":\"2018-chronal-calibration-txt\",\"2018-chronal-charge-txt\":\"2018-chronal-charge-txt\",\"2018-chronal-classification-txt\":\"2018-chronal-classification-txt\",\"2018-chronal-conversion-txt\":\"2018-chronal-conversion-txt\",\"2018-chronal-coordinates-txt\":\"2018-chronal-coordinates-txt\",\"2018-experimental-emergency-transportation-txt\":\"2018-experimental-emergency-transportation-txt\",\"2018-four-dimensional-adventure-txt\":\"2018-four-dimensional-adventure-txt\",\"2018-go-with-the-flow-example-txt\":\"2018-go-with-the-flow-example-txt\",\"2018-go-with-the-flow-go-with-the-flow-txt\":\"2018-go-with-the-flow-go-with-the-flow-txt\",\"2018-immune-system-simulator-20xx-txt\":\"2018-immune-system-simulator-20xx-txt\",\"2018-inventory-txt\":\"2018-inventory-txt\",\"2018-marble-mania-txt\":\"2018-marble-mania-txt\",\"2018-memory-maneuver-txt\":\"2018-memory-maneuver-txt\",\"2018-mine-cart-madness-base-example-txt\":\"2018-mine-cart-madness-base-example-txt\",\"2018-mine-cart-madness-input-txt\":\"2018-mine-cart-madness-input-txt\",\"2018-mode-maze-txt\":\"2018-mode-maze-txt\",\"2018-no-matter-how-you-slice-it-txt\":\"2018-no-matter-how-you-slice-it-txt\",\"2018-repose-record-txt\":\"2018-repose-record-txt\",\"2018-reservoir-research-example-txt\":\"2018-reservoir-research-example-txt\",\"2018-reservoir-research-reservoir-research-txt\":\"2018-reservoir-research-reservoir-research-txt\",\"2018-settlers-of-the-north-pole-example-txt\":\"2018-settlers-of-the-north-pole-example-txt\",\"2018-settlers-of-the-north-pole-input-txt\":\"2018-settlers-of-the-north-pole-input-txt\",\"2018-subterranean-substainability-subterranean-example-txt\":\"2018-subterranean-substainability-subterranean-example-txt\",\"2018-subterranean-substainability-subterranean-txt\":\"2018-subterranean-substainability-subterranean-txt\",\"2018-the-stars-align-txt\":\"2018-the-stars-align-txt\",\"2018-the-sum-of-its-parts-txt\":\"2018-the-sum-of-its-parts-txt\",\"2019-amplification-circuit-example-result-43210-txt\":\"2019-amplification-circuit-example-result-43210-txt\",\"2019-amplification-circuit-example-result-54321-txt\":\"2019-amplification-circuit-example-result-54321-txt\",\"2019-amplification-circuit-input-txt\":\"2019-amplification-circuit-input-txt\",\"2019-care-package-txt\":\"2019-care-package-txt\",\"2019-category-six-txt\":\"2019-category-six-txt\",\"2019-crossed-wires-crossed-wires-txt\":\"2019-crossed-wires-crossed-wires-txt\",\"2019-crossed-wires-example-txt\":\"2019-crossed-wires-example-txt\",\"2019-cryostasis-txt\":\"2019-cryostasis-txt\",\"2019-donut-maze-txt\":\"2019-donut-maze-txt\",\"2019-flawed-frequency-transmission-txt\":\"2019-flawed-frequency-transmission-txt\",\"2019-many-worlds-interpretation-txt\":\"2019-many-worlds-interpretation-txt\",\"2019-monitoring-station-big-example-txt\":\"2019-monitoring-station-big-example-txt\",\"2019-monitoring-station-example-1-txt\":\"2019-monitoring-station-example-1-txt\",\"2019-monitoring-station-example-2-txt\":\"2019-monitoring-station-example-2-txt\",\"2019-monitoring-station-input-txt\":\"2019-monitoring-station-input-txt\",\"2019-monitoring-station-kill-example-txt\":\"2019-monitoring-station-kill-example-txt\",\"2019-n-body-problem-example-1-txt\":\"2019-n-body-problem-example-1-txt\",\"2019-n-body-problem-example-3-txt\":\"2019-n-body-problem-example-3-txt\",\"2019-n-body-problem-long-repetition-example-txt\":\"2019-n-body-problem-long-repetition-example-txt\",\"2019-n-body-problem-n-body-problem-txt\":\"2019-n-body-problem-n-body-problem-txt\",\"2019-oxygen-system-txt\":\"2019-oxygen-system-txt\",\"2019-planet-of-discord-txt\":\"2019-planet-of-discord-txt\",\"2019-program-alarm-example-4-txt\":\"2019-program-alarm-example-4-txt\",\"2019-program-alarm-example-txt\":\"2019-program-alarm-example-txt\",\"2019-program-alarm-input-txt\":\"2019-program-alarm-input-txt\",\"2019-rocket-tyranny-txt\":\"2019-rocket-tyranny-txt\",\"2019-secure-container-txt\":\"2019-secure-container-txt\",\"2019-sensor-boost-quine-txt\":\"2019-sensor-boost-quine-txt\",\"2019-sensor-boost-sensor-boost-txt\":\"2019-sensor-boost-sensor-boost-txt\",\"2019-set-and-forget-txt\":\"2019-set-and-forget-txt\",\"2019-slam-shuffle-txt\":\"2019-slam-shuffle-txt\",\"2019-space-image-format-txt\":\"2019-space-image-format-txt\",\"2019-space-police-txt\":\"2019-space-police-txt\",\"2019-space-stoichiometry-example-1-txt\":\"2019-space-stoichiometry-example-1-txt\",\"2019-space-stoichiometry-input-txt\":\"2019-space-stoichiometry-input-txt\",\"2019-springroid-adventure-txt\":\"2019-springroid-adventure-txt\",\"2019-sunny-asteroids-example-txt\":\"2019-sunny-asteroids-example-txt\",\"2019-sunny-asteroids-sunny-asteroids-txt\":\"2019-sunny-asteroids-sunny-asteroids-txt\",\"2019-tractor-beam-txt\":\"2019-tractor-beam-txt\",\"2019-universal-orbit-map-example-second-txt\":\"2019-universal-orbit-map-example-second-txt\",\"2019-universal-orbit-map-universal-orbit-map-txt\":\"2019-universal-orbit-map-universal-orbit-map-txt\",\"2020-adapter-array-txt\":\"2020-adapter-array-txt\",\"2020-allergen-assessment-txt\":\"2020-allergen-assessment-txt\",\"2020-binary-boarding-txt\":\"2020-binary-boarding-txt\",\"2020-combo-breaker-txt\":\"2020-combo-breaker-txt\",\"2020-conway-cubes-txt\":\"2020-conway-cubes-txt\",\"2020-crab-combat-txt\":\"2020-crab-combat-txt\",\"2020-crab-cups-txt\":\"2020-crab-cups-txt\",\"2020-custom-customs-txt\":\"2020-custom-customs-txt\",\"2020-docking-data-txt\":\"2020-docking-data-txt\",\"2020-encoding-error-txt\":\"2020-encoding-error-txt\",\"2020-handheld-halting-txt\":\"2020-handheld-halting-txt\",\"2020-handy-haversacks-txt\":\"2020-handy-haversacks-txt\",\"2020-jurassic-jigsaw-txt\":\"2020-jurassic-jigsaw-txt\",\"2020-lobby-layout-txt\":\"2020-lobby-layout-txt\",\"2020-monster-messages-txt\":\"2020-monster-messages-txt\",\"2020-operation-order-txt\":\"2020-operation-order-txt\",\"2020-passport-processing-txt\":\"2020-passport-processing-txt\",\"2020-password-philosophy-txt\":\"2020-password-philosophy-txt\",\"2020-rain-risk-txt\":\"2020-rain-risk-txt\",\"2020-rambunctious-recitation-txt\":\"2020-rambunctious-recitation-txt\",\"2020-report-repair-txt\":\"2020-report-repair-txt\",\"2020-seating-system-txt\":\"2020-seating-system-txt\",\"2020-shuttle-search-txt\":\"2020-shuttle-search-txt\",\"2020-ticket-translation-txt\":\"2020-ticket-translation-txt\",\"2020-toboggan-trajectory-txt\":\"2020-toboggan-trajectory-txt\",\"2021-amphipod-txt\":\"2021-amphipod-txt\",\"2021-arithmetic-logic-unit-txt\":\"2021-arithmetic-logic-unit-txt\",\"2021-beacon-scanner-txt\":\"2021-beacon-scanner-txt\",\"2021-binary-diagnostic-txt\":\"2021-binary-diagnostic-txt\",\"2021-chiton-txt\":\"2021-chiton-txt\",\"2021-dirac-dice-txt\":\"2021-dirac-dice-txt\",\"2021-dive-txt\":\"2021-dive-txt\",\"2021-dumbo-octopus-txt\":\"2021-dumbo-octopus-txt\",\"2021-extended-polymerization-txt\":\"2021-extended-polymerization-txt\",\"2021-giant-squid-txt\":\"2021-giant-squid-txt\",\"2021-hydrothermal-venture-txt\":\"2021-hydrothermal-venture-txt\",\"2021-lanternfish-txt\":\"2021-lanternfish-txt\",\"2021-packet-decoder-txt\":\"2021-packet-decoder-txt\",\"2021-passage-pathing-txt\":\"2021-passage-pathing-txt\",\"2021-reactor-reboot-txt\":\"2021-reactor-reboot-txt\",\"2021-sea-cucumber-txt\":\"2021-sea-cucumber-txt\",\"2021-seven-segment-search-txt\":\"2021-seven-segment-search-txt\",\"2021-smoke-basin-txt\":\"2021-smoke-basin-txt\",\"2021-snailfish-txt\":\"2021-snailfish-txt\",\"2021-sonar-sweep-txt\":\"2021-sonar-sweep-txt\",\"2021-syntax-scoring-txt\":\"2021-syntax-scoring-txt\",\"2021-the-treachery-of-whales-txt\":\"2021-the-treachery-of-whales-txt\",\"2021-transparent-origami-txt\":\"2021-transparent-origami-txt\",\"2021-trench-map-txt\":\"2021-trench-map-txt\",\"2021-trick-shot-txt\":\"2021-trick-shot-txt\",\"2022-beacon-exclusion-zone-txt\":\"2022-beacon-exclusion-zone-txt\",\"2022-blizzard-basin-txt\":\"2022-blizzard-basin-txt\",\"2022-boiling-boulders-txt\":\"2022-boiling-boulders-txt\",\"2022-calorie-counting-txt\":\"2022-calorie-counting-txt\",\"2022-camp-cleanup-txt\":\"2022-camp-cleanup-txt\",\"2022-cathode-ray-tube-txt\":\"2022-cathode-ray-tube-txt\",\"2022-distress-signal-txt\":\"2022-distress-signal-txt\",\"2022-grove-positioning-system-txt\":\"2022-grove-positioning-system-txt\",\"2022-hill-climbing-algorithm-txt\":\"2022-hill-climbing-algorithm-txt\",\"2022-monkey-in-the-middle-txt\":\"2022-monkey-in-the-middle-txt\",\"2022-monkey-map-txt\":\"2022-monkey-map-txt\",\"2022-monkey-math-txt\":\"2022-monkey-math-txt\",\"2022-no-space-left-on-device-txt\":\"2022-no-space-left-on-device-txt\",\"2022-not-enough-minerals-txt\":\"2022-not-enough-minerals-txt\",\"2022-proboscidea-volcanium-txt\":\"2022-proboscidea-volcanium-txt\",\"2022-pyroclastic-flow-txt\":\"2022-pyroclastic-flow-txt\",\"2022-regolith-reservoir-txt\":\"2022-regolith-reservoir-txt\",\"2022-rock-paper-scissors-txt\":\"2022-rock-paper-scissors-txt\",\"2022-rope-bridge-txt\":\"2022-rope-bridge-txt\",\"2022-rucksack-reorganization-txt\":\"2022-rucksack-reorganization-txt\",\"2022-supply-stacks-txt\":\"2022-supply-stacks-txt\",\"2022-treetop-tree-house-txt\":\"2022-treetop-tree-house-txt\",\"2022-tuning-trouble-txt\":\"2022-tuning-trouble-txt\",\"2022-unstable-diffusion-txt\":\"2022-unstable-diffusion-txt\",\"2023-camel-cards-txt\":\"2023-camel-cards-txt\",\"2023-clumsy-crucible-txt\":\"2023-clumsy-crucible-txt\",\"2023-cosmic-expansion-txt\":\"2023-cosmic-expansion-txt\",\"2023-cube-conundrum-txt\":\"2023-cube-conundrum-txt\",\"2023-gear-ratios-txt\":\"2023-gear-ratios-txt\",\"2023-haunted-wasteland-txt\":\"2023-haunted-wasteland-txt\",\"2023-hot-springs-txt\":\"2023-hot-springs-txt\",\"2023-if-you-give-a-seed-a-fertilizer-txt\":\"2023-if-you-give-a-seed-a-fertilizer-txt\",\"2023-lens-library-txt\":\"2023-lens-library-txt\",\"2023-mirage-maintenance-txt\":\"2023-mirage-maintenance-txt\",\"2023-parabolic-reflector-dish-txt\":\"2023-parabolic-reflector-dish-txt\",\"2023-pipe-maze-txt\":\"2023-pipe-maze-txt\",\"2023-point-of-incidence-txt\":\"2023-point-of-incidence-txt\",\"2023-scratch-cards-txt\":\"2023-scratch-cards-txt\",\"2023-the-floor-will-be-lava-txt\":\"2023-the-floor-will-be-lava-txt\",\"2023-trebuchet-txt\":\"2023-trebuchet-txt\",\"2023-wait-for-it-txt\":\"2023-wait-for-it-txt\"}[chunkId]||chunkId) + \".\" + {\"2015-abacus-framework-txt\":\"bee43363\",\"2015-all-in-a-single-night-txt\":\"79ee3f7c\",\"2015-aunt-sue-txt\":\"81dc6c83\",\"2015-corporate-policy-txt\":\"89c1d36b\",\"2015-elves-look-elves-say-txt\":\"a5e56ceb\",\"2015-i-was-told-there-would-be-no-math-txt\":\"dd61ed73\",\"2015-infinite-elves-and-infinite-houses-txt\":\"387eeba0\",\"2015-intern-elves-txt\":\"abd87d85\",\"2015-it-hangs-in-the-balance-txt\":\"2756e99b\",\"2015-knights-of-the-dinner-table-txt\":\"b30ef853\",\"2015-let-it-snow-txt\":\"bf16ad6c\",\"2015-like-a-gif-for-your-yard-txt\":\"42559b0d\",\"2015-matchsticks-txt\":\"16ca2774\",\"2015-medicine-for-rudolph-txt\":\"54d820e2\",\"2015-no-such-thing-as-too-much-txt\":\"e967a0f4\",\"2015-not-quite-lisp-txt\":\"9259f5ea\",\"2015-perfect-spherical-houses-in-a-vacuum-txt\":\"b99b8bc2\",\"2015-probably-a-fire-hazard-txt\":\"7749b72d\",\"2015-reindeer-olympics-txt\":\"1a64b244\",\"2015-rpg-simulator-20xx-txt\":\"49ce86cd\",\"2015-science-for-hungry-people-txt\":\"192c70ed\",\"2015-some-assembly-required-txt\":\"7a8f31fc\",\"2015-the-ideal-stocking-stuffer-txt\":\"b2f47198\",\"2015-turing-lock-txt\":\"a693eb27\",\"2015-wizard-simulator-20xx-txt\":\"c3fc89fb\",\"2016-a-maze-of-twisty-little-cubicles-txt\":\"c6898673\",\"2016-air-duct-spelunking-txt\":\"a256f8da\",\"2016-an-elephant-named-joseph-txt\":\"321ae9fb\",\"2016-balance-bots-txt\":\"db1492e4\",\"2016-bathroom-security-txt\":\"ec3c7bca\",\"2016-clock-signal-txt\":\"ef0aee22\",\"2016-dragon-checksum-txt\":\"a7f77971\",\"2016-explosives-in-cyberspace-txt\":\"6330da88\",\"2016-firewall-rules-txt\":\"4fd3c33f\",\"2016-grid-computing-txt\":\"62579f6e\",\"2016-how-about-a-nice-game-of-chess-txt\":\"51d45e3a\",\"2016-internet-protocol-version-7-txt\":\"47c45f16\",\"2016-leonardos-monorail-txt\":\"a9ab89c5\",\"2016-like-a-rogue-txt\":\"cf755925\",\"2016-no-time-for-a-taxicab-txt\":\"13a5eb68\",\"2016-one-time-pad-txt\":\"b055be3f\",\"2016-radioisotope-thermoelectric-generators-txt\":\"6684d32f\",\"2016-safe-cracking-txt\":\"ded00c77\",\"2016-scrambled-letters-and-hash-txt\":\"e24d7be6\",\"2016-security-through-obscurity-txt\":\"10ddd6d4\",\"2016-signals-and-noise-txt\":\"6c0ecc90\",\"2016-squares-with-three-sides-txt\":\"61bd0a6b\",\"2016-timing-is-everything-txt\":\"bfbdea79\",\"2016-two-factor-authentication-txt\":\"ccc551b6\",\"2016-two-steps-forward-txt\":\"a17e4590\",\"2017-a-maze-of-twisty-trampolines-all-alike-txt\":\"e2ba2298\",\"2017-a-series-of-tubes-txt\":\"2b4c82a6\",\"2017-coprocessor-conflagration-txt\":\"df303fe5\",\"2017-corruption-checksum-txt\":\"ff1a815d\",\"2017-digital-plumber-txt\":\"ce2eeb20\",\"2017-disk-defragmentation-txt\":\"dfff3cb2\",\"2017-dueling-generators-txt\":\"a3071e69\",\"2017-duet-txt\":\"501cc206\",\"2017-electromagnetic-moat-txt\":\"457e0818\",\"2017-fractal-art-txt\":\"33d74895\",\"2017-heard-you-like-registers-txt\":\"e00c2b65\",\"2017-hex-ed-txt\":\"d000045f\",\"2017-high-entropy-passphrases-txt\":\"91b292b7\",\"2017-inverse-captcha-txt\":\"f7d69ff9\",\"2017-knot-hash-txt\":\"f4f880dc\",\"2017-memory-reallocation-txt\":\"94b94202\",\"2017-packet-scanners-txt\":\"94dfbad1\",\"2017-particle-swarm-txt\":\"cf8f2749\",\"2017-permutation-promenade-txt\":\"118f23ce\",\"2017-recursive-circus-txt\":\"519e396c\",\"2017-spinlock-txt\":\"35ff96bb\",\"2017-spiral-memory-txt\":\"797d7e11\",\"2017-sporifica-virus-txt\":\"d7d07e8a\",\"2017-stream-processing-txt\":\"d42ddd14\",\"2017-the-halting-problem-txt\":\"c7b5f02d\",\"2018-a-regular-map-input-txt\":\"2c77f339\",\"2018-alchemical-reduction-txt\":\"ef7b7293\",\"2018-beverage-bandits-example-1-txt\":\"9cec8a4d\",\"2018-beverage-bandits-example-2-txt\":\"05f69a4c\",\"2018-beverage-bandits-example-combat-txt\":\"2d0993d7\",\"2018-beverage-bandits-example-txt\":\"0466387d\",\"2018-beverage-bandits-goal-txt\":\"96903cbb\",\"2018-beverage-bandits-online-input-txt\":\"01e56471\",\"2018-chocolate-charts-txt\":\"a041a715\",\"2018-chronal-calibration-txt\":\"b480dbd6\",\"2018-chronal-charge-txt\":\"447a0c6b\",\"2018-chronal-classification-txt\":\"818f229e\",\"2018-chronal-conversion-txt\":\"7f3e49a2\",\"2018-chronal-coordinates-txt\":\"4d65935e\",\"2018-experimental-emergency-transportation-txt\":\"40191056\",\"2018-four-dimensional-adventure-txt\":\"b3eec12e\",\"2018-go-with-the-flow-example-txt\":\"6d9599d9\",\"2018-go-with-the-flow-go-with-the-flow-txt\":\"3714ac0d\",\"2018-immune-system-simulator-20xx-txt\":\"c82f2ec7\",\"2018-inventory-txt\":\"0e463bac\",\"2018-marble-mania-txt\":\"a6996405\",\"2018-memory-maneuver-txt\":\"408e5596\",\"2018-mine-cart-madness-base-example-txt\":\"dbbc06af\",\"2018-mine-cart-madness-input-txt\":\"2d29c4fd\",\"2018-mode-maze-txt\":\"c212229a\",\"2018-no-matter-how-you-slice-it-txt\":\"28a890e9\",\"2018-repose-record-txt\":\"c8389881\",\"2018-reservoir-research-example-txt\":\"b587a662\",\"2018-reservoir-research-reservoir-research-txt\":\"3acc0f8a\",\"2018-settlers-of-the-north-pole-example-txt\":\"3fa39792\",\"2018-settlers-of-the-north-pole-input-txt\":\"61f571ca\",\"2018-subterranean-substainability-subterranean-example-txt\":\"7e9535c8\",\"2018-subterranean-substainability-subterranean-txt\":\"755753cb\",\"2018-the-stars-align-txt\":\"3225b4a2\",\"2018-the-sum-of-its-parts-txt\":\"15e825e0\",\"2019-amplification-circuit-example-result-43210-txt\":\"76c437ec\",\"2019-amplification-circuit-example-result-54321-txt\":\"bf02b0e0\",\"2019-amplification-circuit-input-txt\":\"f02790b3\",\"2019-care-package-txt\":\"a7384512\",\"2019-category-six-txt\":\"95187f2f\",\"2019-crossed-wires-crossed-wires-txt\":\"e0e5c0ed\",\"2019-crossed-wires-example-txt\":\"5d5a9ee5\",\"2019-cryostasis-txt\":\"680d19b7\",\"2019-donut-maze-txt\":\"376fddb6\",\"2019-flawed-frequency-transmission-txt\":\"201fb8f4\",\"2019-many-worlds-interpretation-txt\":\"ec7bd450\",\"2019-monitoring-station-big-example-txt\":\"8fdc4b3b\",\"2019-monitoring-station-example-1-txt\":\"0e4cedff\",\"2019-monitoring-station-example-2-txt\":\"028fdf42\",\"2019-monitoring-station-input-txt\":\"aeda306b\",\"2019-monitoring-station-kill-example-txt\":\"db7ebf10\",\"2019-n-body-problem-example-1-txt\":\"11b89162\",\"2019-n-body-problem-example-3-txt\":\"7bc16041\",\"2019-n-body-problem-long-repetition-example-txt\":\"70dcf2e0\",\"2019-n-body-problem-n-body-problem-txt\":\"72b23be0\",\"2019-oxygen-system-txt\":\"b675df5d\",\"2019-planet-of-discord-txt\":\"f830d3c3\",\"2019-program-alarm-example-4-txt\":\"f3fd19cf\",\"2019-program-alarm-example-txt\":\"754823ff\",\"2019-program-alarm-input-txt\":\"3b0fa0be\",\"2019-rocket-tyranny-txt\":\"aa825bcc\",\"2019-secure-container-txt\":\"6f8fae09\",\"2019-sensor-boost-quine-txt\":\"65c34bae\",\"2019-sensor-boost-sensor-boost-txt\":\"217102eb\",\"2019-set-and-forget-txt\":\"0336203f\",\"2019-slam-shuffle-txt\":\"038c8232\",\"2019-space-image-format-txt\":\"cec10210\",\"2019-space-police-txt\":\"c7bb4f16\",\"2019-space-stoichiometry-example-1-txt\":\"a817d12b\",\"2019-space-stoichiometry-input-txt\":\"4dc7a540\",\"2019-springroid-adventure-txt\":\"df1d6ded\",\"2019-sunny-asteroids-example-txt\":\"ac6f57dc\",\"2019-sunny-asteroids-sunny-asteroids-txt\":\"8ff1d632\",\"2019-tractor-beam-txt\":\"8d04320a\",\"2019-universal-orbit-map-example-second-txt\":\"cf2f26f9\",\"2019-universal-orbit-map-universal-orbit-map-txt\":\"f04822a2\",\"2020-adapter-array-txt\":\"d6ff4ca7\",\"2020-allergen-assessment-txt\":\"a3d03e8f\",\"2020-binary-boarding-txt\":\"13816c02\",\"2020-combo-breaker-txt\":\"c5f33ab2\",\"2020-conway-cubes-txt\":\"1ff2dd1b\",\"2020-crab-combat-txt\":\"c0a0a08e\",\"2020-crab-cups-txt\":\"5a94091e\",\"2020-custom-customs-txt\":\"c416871f\",\"2020-docking-data-txt\":\"a73a8e3e\",\"2020-encoding-error-txt\":\"c9db8e13\",\"2020-handheld-halting-txt\":\"fb9b9869\",\"2020-handy-haversacks-txt\":\"f0c9483b\",\"2020-jurassic-jigsaw-txt\":\"a13e8991\",\"2020-lobby-layout-txt\":\"0e4e2590\",\"2020-monster-messages-txt\":\"4d0ef1b4\",\"2020-operation-order-txt\":\"d9f5b56a\",\"2020-passport-processing-txt\":\"59ab2dbc\",\"2020-password-philosophy-txt\":\"aa5ccca7\",\"2020-rain-risk-txt\":\"62c73d6e\",\"2020-rambunctious-recitation-txt\":\"63a6e120\",\"2020-report-repair-txt\":\"14e48ceb\",\"2020-seating-system-txt\":\"b85348c9\",\"2020-shuttle-search-txt\":\"881ae14f\",\"2020-ticket-translation-txt\":\"1b836400\",\"2020-toboggan-trajectory-txt\":\"3336930f\",\"2021-amphipod-txt\":\"7ccb4de6\",\"2021-arithmetic-logic-unit-txt\":\"e3f6fb35\",\"2021-beacon-scanner-txt\":\"1a53347b\",\"2021-binary-diagnostic-txt\":\"8b61163f\",\"2021-chiton-txt\":\"56cbc869\",\"2021-dirac-dice-txt\":\"b9b77b85\",\"2021-dive-txt\":\"d8582171\",\"2021-dumbo-octopus-txt\":\"78f4ac83\",\"2021-extended-polymerization-txt\":\"086c6162\",\"2021-giant-squid-txt\":\"4c6e9011\",\"2021-hydrothermal-venture-txt\":\"5440a9e2\",\"2021-lanternfish-txt\":\"e664a72d\",\"2021-packet-decoder-txt\":\"85dfc0bb\",\"2021-passage-pathing-txt\":\"981d26f1\",\"2021-reactor-reboot-txt\":\"4bd03d4b\",\"2021-sea-cucumber-txt\":\"c98e7844\",\"2021-seven-segment-search-txt\":\"77a1b7c6\",\"2021-smoke-basin-txt\":\"43351408\",\"2021-snailfish-txt\":\"a1eea21c\",\"2021-sonar-sweep-txt\":\"26a1ec3a\",\"2021-syntax-scoring-txt\":\"a4d397d1\",\"2021-the-treachery-of-whales-txt\":\"4e481e62\",\"2021-transparent-origami-txt\":\"d797ebca\",\"2021-trench-map-txt\":\"8cb71fc3\",\"2021-trick-shot-txt\":\"bc9f150a\",\"2022-beacon-exclusion-zone-txt\":\"743d827f\",\"2022-blizzard-basin-txt\":\"de331b25\",\"2022-boiling-boulders-txt\":\"6131544e\",\"2022-calorie-counting-txt\":\"1d36ae22\",\"2022-camp-cleanup-txt\":\"658eb22b\",\"2022-cathode-ray-tube-txt\":\"fd631c03\",\"2022-distress-signal-txt\":\"edc7e393\",\"2022-grove-positioning-system-txt\":\"74f0d1d5\",\"2022-hill-climbing-algorithm-txt\":\"263a4650\",\"2022-monkey-in-the-middle-txt\":\"860f6fdc\",\"2022-monkey-map-txt\":\"24d19248\",\"2022-monkey-math-txt\":\"395e0598\",\"2022-no-space-left-on-device-txt\":\"9717360b\",\"2022-not-enough-minerals-txt\":\"75c2eaec\",\"2022-proboscidea-volcanium-txt\":\"bcd3bba4\",\"2022-pyroclastic-flow-txt\":\"b54e4de0\",\"2022-regolith-reservoir-txt\":\"c90e36fb\",\"2022-rock-paper-scissors-txt\":\"28c72817\",\"2022-rope-bridge-txt\":\"0182c83b\",\"2022-rucksack-reorganization-txt\":\"312305c3\",\"2022-supply-stacks-txt\":\"892d489d\",\"2022-treetop-tree-house-txt\":\"3bbc9fdd\",\"2022-tuning-trouble-txt\":\"73fa1617\",\"2022-unstable-diffusion-txt\":\"235b85f3\",\"2023-camel-cards-txt\":\"b3d3a921\",\"2023-clumsy-crucible-txt\":\"35b4e354\",\"2023-cosmic-expansion-txt\":\"56b5d38a\",\"2023-cube-conundrum-txt\":\"257d6c68\",\"2023-gear-ratios-txt\":\"3ee02160\",\"2023-haunted-wasteland-txt\":\"212943d4\",\"2023-hot-springs-txt\":\"4c2c5ba0\",\"2023-if-you-give-a-seed-a-fertilizer-txt\":\"81e29395\",\"2023-lens-library-txt\":\"df4ff80d\",\"2023-mirage-maintenance-txt\":\"791f0b12\",\"2023-parabolic-reflector-dish-txt\":\"6194601e\",\"2023-pipe-maze-txt\":\"124f1166\",\"2023-point-of-incidence-txt\":\"19ccad5c\",\"2023-scratch-cards-txt\":\"27a0f456\",\"2023-the-floor-will-be-lava-txt\":\"6bd4df4f\",\"2023-trebuchet-txt\":\"f7aa44bf\",\"2023-wait-for-it-txt\":\"ee12b69e\"}[chunkId] + \".js\"\n \t}\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/aoc/\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SimpleEntryTemplate.vue?vue&type=style&index=0&id=e0fb7aa4&prod&lang=scss&scoped=true\"","export * from \"-!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../../../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TicketTranslationView.vue?vue&type=style&index=0&id=061a032b&prod&lang=scss\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CalendarEntry.vue?vue&type=style&index=0&id=553c99e9&prod&scoped=true&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Navbar.vue?vue&type=style&index=0&id=cc461bcc&prod&lang=scss\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Graph.vue?vue&type=style&index=0&id=703df4aa&prod&lang=scss&scoped=true\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=style&index=0&id=093ad348&prod&lang=scss&scoped=true\"","export * from \"-!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../../../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PassagePathing.vue?vue&type=style&index=0&id=e39be4d4&prod&lang=scss\"","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./EntryWithPauseAndRun.vue?vue&type=style&index=0&id=624cd62a&prod&lang=scss\"","var map = {\n\t\"./2015/abacus-framework.txt\": [\n\t\t\"0d3d\",\n\t\t\"2015-abacus-framework-txt\"\n\t],\n\t\"./2015/all-in-a-single-night.txt\": [\n\t\t\"7407\",\n\t\t\"2015-all-in-a-single-night-txt\"\n\t],\n\t\"./2015/aunt-sue.txt\": [\n\t\t\"b20c\",\n\t\t\"2015-aunt-sue-txt\"\n\t],\n\t\"./2015/corporate-policy.txt\": [\n\t\t\"d42e\",\n\t\t\"2015-corporate-policy-txt\"\n\t],\n\t\"./2015/elves-look-elves-say.txt\": [\n\t\t\"6431\",\n\t\t\"2015-elves-look-elves-say-txt\"\n\t],\n\t\"./2015/i-was-told-there-would-be-no-math.txt\": [\n\t\t\"e46b\",\n\t\t\"2015-i-was-told-there-would-be-no-math-txt\"\n\t],\n\t\"./2015/infinite-elves-and-infinite-houses.txt\": [\n\t\t\"0a13\",\n\t\t\"2015-infinite-elves-and-infinite-houses-txt\"\n\t],\n\t\"./2015/intern-elves.txt\": [\n\t\t\"9f37\",\n\t\t\"2015-intern-elves-txt\"\n\t],\n\t\"./2015/it-hangs-in-the-balance.txt\": [\n\t\t\"8e79\",\n\t\t\"2015-it-hangs-in-the-balance-txt\"\n\t],\n\t\"./2015/knights-of-the-dinner-table.txt\": [\n\t\t\"96e0\",\n\t\t\"2015-knights-of-the-dinner-table-txt\"\n\t],\n\t\"./2015/let-it-snow.txt\": [\n\t\t\"039c\",\n\t\t\"2015-let-it-snow-txt\"\n\t],\n\t\"./2015/like-a-gif-for-your-yard.txt\": [\n\t\t\"b8fd\",\n\t\t\"2015-like-a-gif-for-your-yard-txt\"\n\t],\n\t\"./2015/matchsticks.txt\": [\n\t\t\"1b0d\",\n\t\t\"2015-matchsticks-txt\"\n\t],\n\t\"./2015/medicine-for-rudolph.txt\": [\n\t\t\"a1ac\",\n\t\t\"2015-medicine-for-rudolph-txt\"\n\t],\n\t\"./2015/no-such-thing-as-too-much.txt\": [\n\t\t\"f542\",\n\t\t\"2015-no-such-thing-as-too-much-txt\"\n\t],\n\t\"./2015/not-quite-lisp.txt\": [\n\t\t\"d1fc\",\n\t\t\"2015-not-quite-lisp-txt\"\n\t],\n\t\"./2015/perfect-spherical-houses-in-a-vacuum.txt\": [\n\t\t\"a713\",\n\t\t\"2015-perfect-spherical-houses-in-a-vacuum-txt\"\n\t],\n\t\"./2015/probably-a-fire-hazard.txt\": [\n\t\t\"c3e0\",\n\t\t\"2015-probably-a-fire-hazard-txt\"\n\t],\n\t\"./2015/reindeer-olympics.txt\": [\n\t\t\"1c77\",\n\t\t\"2015-reindeer-olympics-txt\"\n\t],\n\t\"./2015/rpg-simulator-20xx.txt\": [\n\t\t\"8c86\",\n\t\t\"2015-rpg-simulator-20xx-txt\"\n\t],\n\t\"./2015/science-for-hungry-people.txt\": [\n\t\t\"3a8f\",\n\t\t\"2015-science-for-hungry-people-txt\"\n\t],\n\t\"./2015/some-assembly-required.txt\": [\n\t\t\"3d78\",\n\t\t\"2015-some-assembly-required-txt\"\n\t],\n\t\"./2015/the-ideal-stocking-stuffer.txt\": [\n\t\t\"5d3a\",\n\t\t\"2015-the-ideal-stocking-stuffer-txt\"\n\t],\n\t\"./2015/turing-lock.txt\": [\n\t\t\"46c6\",\n\t\t\"2015-turing-lock-txt\"\n\t],\n\t\"./2015/wizard-simulator-20xx.txt\": [\n\t\t\"6fe2\",\n\t\t\"2015-wizard-simulator-20xx-txt\"\n\t],\n\t\"./2016/a-maze-of-twisty-little-cubicles.txt\": [\n\t\t\"20db\",\n\t\t\"2016-a-maze-of-twisty-little-cubicles-txt\"\n\t],\n\t\"./2016/air-duct-spelunking.txt\": [\n\t\t\"b8a4\",\n\t\t\"2016-air-duct-spelunking-txt\"\n\t],\n\t\"./2016/an-elephant-named-joseph.txt\": [\n\t\t\"8b7f\",\n\t\t\"2016-an-elephant-named-joseph-txt\"\n\t],\n\t\"./2016/balance-bots.txt\": [\n\t\t\"ee1b\",\n\t\t\"2016-balance-bots-txt\"\n\t],\n\t\"./2016/bathroom-security.txt\": [\n\t\t\"234b\",\n\t\t\"2016-bathroom-security-txt\"\n\t],\n\t\"./2016/clock-signal.txt\": [\n\t\t\"f4af\",\n\t\t\"2016-clock-signal-txt\"\n\t],\n\t\"./2016/dragon-checksum.txt\": [\n\t\t\"9d55\",\n\t\t\"2016-dragon-checksum-txt\"\n\t],\n\t\"./2016/explosives-in-cyberspace.txt\": [\n\t\t\"deab\",\n\t\t\"2016-explosives-in-cyberspace-txt\"\n\t],\n\t\"./2016/firewall-rules.txt\": [\n\t\t\"4c4e\",\n\t\t\"2016-firewall-rules-txt\"\n\t],\n\t\"./2016/grid-computing.txt\": [\n\t\t\"cabf\",\n\t\t\"2016-grid-computing-txt\"\n\t],\n\t\"./2016/how-about-a-nice-game-of-chess.txt\": [\n\t\t\"d1d7\",\n\t\t\"2016-how-about-a-nice-game-of-chess-txt\"\n\t],\n\t\"./2016/internet-protocol-version-7.txt\": [\n\t\t\"b0f4\",\n\t\t\"2016-internet-protocol-version-7-txt\"\n\t],\n\t\"./2016/leonardos-monorail.txt\": [\n\t\t\"61ff\",\n\t\t\"2016-leonardos-monorail-txt\"\n\t],\n\t\"./2016/like-a-rogue.txt\": [\n\t\t\"36ee\",\n\t\t\"2016-like-a-rogue-txt\"\n\t],\n\t\"./2016/no-time-for-a-taxicab.txt\": [\n\t\t\"3c3a\",\n\t\t\"2016-no-time-for-a-taxicab-txt\"\n\t],\n\t\"./2016/one-time-pad.txt\": [\n\t\t\"5a2b\",\n\t\t\"2016-one-time-pad-txt\"\n\t],\n\t\"./2016/radioisotope-thermoelectric-generators.txt\": [\n\t\t\"9ea3\",\n\t\t\"2016-radioisotope-thermoelectric-generators-txt\"\n\t],\n\t\"./2016/safe-cracking.txt\": [\n\t\t\"1206\",\n\t\t\"2016-safe-cracking-txt\"\n\t],\n\t\"./2016/scrambled-letters-and-hash.txt\": [\n\t\t\"22f5\",\n\t\t\"2016-scrambled-letters-and-hash-txt\"\n\t],\n\t\"./2016/security-through-obscurity.txt\": [\n\t\t\"49f6\",\n\t\t\"2016-security-through-obscurity-txt\"\n\t],\n\t\"./2016/signals-and-noise.txt\": [\n\t\t\"3c70\",\n\t\t\"2016-signals-and-noise-txt\"\n\t],\n\t\"./2016/squares-with-three-sides.txt\": [\n\t\t\"5508\",\n\t\t\"2016-squares-with-three-sides-txt\"\n\t],\n\t\"./2016/timing-is-everything.txt\": [\n\t\t\"fcc4\",\n\t\t\"2016-timing-is-everything-txt\"\n\t],\n\t\"./2016/two-factor-authentication.txt\": [\n\t\t\"b17e\",\n\t\t\"2016-two-factor-authentication-txt\"\n\t],\n\t\"./2016/two-steps-forward.txt\": [\n\t\t\"db37\",\n\t\t\"2016-two-steps-forward-txt\"\n\t],\n\t\"./2017/a-maze-of-twisty-trampolines-all-alike.txt\": [\n\t\t\"4132\",\n\t\t\"2017-a-maze-of-twisty-trampolines-all-alike-txt\"\n\t],\n\t\"./2017/a-series-of-tubes.txt\": [\n\t\t\"a7fe\",\n\t\t\"2017-a-series-of-tubes-txt\"\n\t],\n\t\"./2017/coprocessor-conflagration.txt\": [\n\t\t\"9678\",\n\t\t\"2017-coprocessor-conflagration-txt\"\n\t],\n\t\"./2017/corruption-checksum.txt\": [\n\t\t\"56b8\",\n\t\t\"2017-corruption-checksum-txt\"\n\t],\n\t\"./2017/digital-plumber.txt\": [\n\t\t\"03d0\",\n\t\t\"2017-digital-plumber-txt\"\n\t],\n\t\"./2017/disk-defragmentation.txt\": [\n\t\t\"7c87\",\n\t\t\"2017-disk-defragmentation-txt\"\n\t],\n\t\"./2017/dueling-generators.txt\": [\n\t\t\"1a62\",\n\t\t\"2017-dueling-generators-txt\"\n\t],\n\t\"./2017/duet.txt\": [\n\t\t\"40d9\",\n\t\t\"2017-duet-txt\"\n\t],\n\t\"./2017/electromagnetic-moat.txt\": [\n\t\t\"89a3\",\n\t\t\"2017-electromagnetic-moat-txt\"\n\t],\n\t\"./2017/fractal-art.txt\": [\n\t\t\"2917\",\n\t\t\"2017-fractal-art-txt\"\n\t],\n\t\"./2017/heard-you-like-registers.txt\": [\n\t\t\"bfb4\",\n\t\t\"2017-heard-you-like-registers-txt\"\n\t],\n\t\"./2017/hex-ed.txt\": [\n\t\t\"9124\",\n\t\t\"2017-hex-ed-txt\"\n\t],\n\t\"./2017/high-entropy-passphrases.txt\": [\n\t\t\"5ba1\",\n\t\t\"2017-high-entropy-passphrases-txt\"\n\t],\n\t\"./2017/inverse-captcha.txt\": [\n\t\t\"bc57\",\n\t\t\"2017-inverse-captcha-txt\"\n\t],\n\t\"./2017/knot-hash.txt\": [\n\t\t\"e98b\",\n\t\t\"2017-knot-hash-txt\"\n\t],\n\t\"./2017/memory-reallocation.txt\": [\n\t\t\"f108\",\n\t\t\"2017-memory-reallocation-txt\"\n\t],\n\t\"./2017/packet-scanners.txt\": [\n\t\t\"bc2c\",\n\t\t\"2017-packet-scanners-txt\"\n\t],\n\t\"./2017/particle-swarm.txt\": [\n\t\t\"0579\",\n\t\t\"2017-particle-swarm-txt\"\n\t],\n\t\"./2017/permutation-promenade.txt\": [\n\t\t\"ffb1\",\n\t\t\"2017-permutation-promenade-txt\"\n\t],\n\t\"./2017/recursive-circus.txt\": [\n\t\t\"fac4\",\n\t\t\"2017-recursive-circus-txt\"\n\t],\n\t\"./2017/spinlock.txt\": [\n\t\t\"dcf5\",\n\t\t\"2017-spinlock-txt\"\n\t],\n\t\"./2017/spiral-memory.txt\": [\n\t\t\"c6e7\",\n\t\t\"2017-spiral-memory-txt\"\n\t],\n\t\"./2017/sporifica-virus.txt\": [\n\t\t\"7fa0\",\n\t\t\"2017-sporifica-virus-txt\"\n\t],\n\t\"./2017/stream-processing.txt\": [\n\t\t\"b854\",\n\t\t\"2017-stream-processing-txt\"\n\t],\n\t\"./2017/the-halting-problem.txt\": [\n\t\t\"1f94\",\n\t\t\"2017-the-halting-problem-txt\"\n\t],\n\t\"./2018/a-regular-map/input.txt\": [\n\t\t\"10dd\",\n\t\t\"2018-a-regular-map-input-txt\"\n\t],\n\t\"./2018/alchemical-reduction.txt\": [\n\t\t\"11ba\",\n\t\t\"2018-alchemical-reduction-txt\"\n\t],\n\t\"./2018/beverage-bandits/example-1.txt\": [\n\t\t\"639a\",\n\t\t\"2018-beverage-bandits-example-1-txt\"\n\t],\n\t\"./2018/beverage-bandits/example-2.txt\": [\n\t\t\"2a61\",\n\t\t\"2018-beverage-bandits-example-2-txt\"\n\t],\n\t\"./2018/beverage-bandits/example-combat.txt\": [\n\t\t\"2bb4\",\n\t\t\"2018-beverage-bandits-example-combat-txt\"\n\t],\n\t\"./2018/beverage-bandits/example.txt\": [\n\t\t\"fe0f\",\n\t\t\"2018-beverage-bandits-example-txt\"\n\t],\n\t\"./2018/beverage-bandits/goal.txt\": [\n\t\t\"80f6\",\n\t\t\"2018-beverage-bandits-goal-txt\"\n\t],\n\t\"./2018/beverage-bandits/online-input.txt\": [\n\t\t\"4238\",\n\t\t\"2018-beverage-bandits-online-input-txt\"\n\t],\n\t\"./2018/chocolate-charts.txt\": [\n\t\t\"f156\",\n\t\t\"2018-chocolate-charts-txt\"\n\t],\n\t\"./2018/chronal-calibration.txt\": [\n\t\t\"b640\",\n\t\t\"2018-chronal-calibration-txt\"\n\t],\n\t\"./2018/chronal-charge.txt\": [\n\t\t\"9fe3\",\n\t\t\"2018-chronal-charge-txt\"\n\t],\n\t\"./2018/chronal-classification.txt\": [\n\t\t\"a86f\",\n\t\t\"2018-chronal-classification-txt\"\n\t],\n\t\"./2018/chronal-conversion.txt\": [\n\t\t\"5517\",\n\t\t\"2018-chronal-conversion-txt\"\n\t],\n\t\"./2018/chronal-coordinates.txt\": [\n\t\t\"ea1c\",\n\t\t\"2018-chronal-coordinates-txt\"\n\t],\n\t\"./2018/experimental-emergency-transportation.txt\": [\n\t\t\"e3e2\",\n\t\t\"2018-experimental-emergency-transportation-txt\"\n\t],\n\t\"./2018/four-dimensional-adventure.txt\": [\n\t\t\"822b\",\n\t\t\"2018-four-dimensional-adventure-txt\"\n\t],\n\t\"./2018/go-with-the-flow/example.txt\": [\n\t\t\"87b7\",\n\t\t\"2018-go-with-the-flow-example-txt\"\n\t],\n\t\"./2018/go-with-the-flow/go-with-the-flow.txt\": [\n\t\t\"7356\",\n\t\t\"2018-go-with-the-flow-go-with-the-flow-txt\"\n\t],\n\t\"./2018/immune-system-simulator-20xx.txt\": [\n\t\t\"bd65\",\n\t\t\"2018-immune-system-simulator-20xx-txt\"\n\t],\n\t\"./2018/inventory.txt\": [\n\t\t\"eba9\",\n\t\t\"2018-inventory-txt\"\n\t],\n\t\"./2018/marble-mania.txt\": [\n\t\t\"dac5\",\n\t\t\"2018-marble-mania-txt\"\n\t],\n\t\"./2018/memory-maneuver.txt\": [\n\t\t\"403f\",\n\t\t\"2018-memory-maneuver-txt\"\n\t],\n\t\"./2018/mine-cart-madness/base-example.txt\": [\n\t\t\"1ddb\",\n\t\t\"2018-mine-cart-madness-base-example-txt\"\n\t],\n\t\"./2018/mine-cart-madness/input.txt\": [\n\t\t\"294f\",\n\t\t\"2018-mine-cart-madness-input-txt\"\n\t],\n\t\"./2018/mode-maze.txt\": [\n\t\t\"d7cb\",\n\t\t\"2018-mode-maze-txt\"\n\t],\n\t\"./2018/no-matter-how-you-slice-it.txt\": [\n\t\t\"a780\",\n\t\t\"2018-no-matter-how-you-slice-it-txt\"\n\t],\n\t\"./2018/repose-record.txt\": [\n\t\t\"51e5\",\n\t\t\"2018-repose-record-txt\"\n\t],\n\t\"./2018/reservoir-research/example.txt\": [\n\t\t\"4340\",\n\t\t\"2018-reservoir-research-example-txt\"\n\t],\n\t\"./2018/reservoir-research/reservoir-research.txt\": [\n\t\t\"4aa9\",\n\t\t\"2018-reservoir-research-reservoir-research-txt\"\n\t],\n\t\"./2018/settlers-of-the-north-pole/example.txt\": [\n\t\t\"2e56\",\n\t\t\"2018-settlers-of-the-north-pole-example-txt\"\n\t],\n\t\"./2018/settlers-of-the-north-pole/input.txt\": [\n\t\t\"dff7\",\n\t\t\"2018-settlers-of-the-north-pole-input-txt\"\n\t],\n\t\"./2018/subterranean-substainability/subterranean-example.txt\": [\n\t\t\"f77c\",\n\t\t\"2018-subterranean-substainability-subterranean-example-txt\"\n\t],\n\t\"./2018/subterranean-substainability/subterranean.txt\": [\n\t\t\"b72f\",\n\t\t\"2018-subterranean-substainability-subterranean-txt\"\n\t],\n\t\"./2018/the-stars-align.txt\": [\n\t\t\"83d7\",\n\t\t\"2018-the-stars-align-txt\"\n\t],\n\t\"./2018/the-sum-of-its-parts.txt\": [\n\t\t\"9a0d\",\n\t\t\"2018-the-sum-of-its-parts-txt\"\n\t],\n\t\"./2019/amplification-circuit/example-result-43210.txt\": [\n\t\t\"a9d2\",\n\t\t\"2019-amplification-circuit-example-result-43210-txt\"\n\t],\n\t\"./2019/amplification-circuit/example-result-54321.txt\": [\n\t\t\"b3f8\",\n\t\t\"2019-amplification-circuit-example-result-54321-txt\"\n\t],\n\t\"./2019/amplification-circuit/input.txt\": [\n\t\t\"312f\",\n\t\t\"2019-amplification-circuit-input-txt\"\n\t],\n\t\"./2019/care-package.txt\": [\n\t\t\"7a7a\",\n\t\t\"2019-care-package-txt\"\n\t],\n\t\"./2019/category-six.txt\": [\n\t\t\"047c\",\n\t\t\"2019-category-six-txt\"\n\t],\n\t\"./2019/crossed-wires/crossed-wires.txt\": [\n\t\t\"796c\",\n\t\t\"2019-crossed-wires-crossed-wires-txt\"\n\t],\n\t\"./2019/crossed-wires/example.txt\": [\n\t\t\"1f03\",\n\t\t\"2019-crossed-wires-example-txt\"\n\t],\n\t\"./2019/cryostasis.txt\": [\n\t\t\"07fe\",\n\t\t\"2019-cryostasis-txt\"\n\t],\n\t\"./2019/donut-maze.txt\": [\n\t\t\"c494\",\n\t\t\"2019-donut-maze-txt\"\n\t],\n\t\"./2019/flawed-frequency-transmission.txt\": [\n\t\t\"f0a3\",\n\t\t\"2019-flawed-frequency-transmission-txt\"\n\t],\n\t\"./2019/many-worlds-interpretation.txt\": [\n\t\t\"0eb5\",\n\t\t\"2019-many-worlds-interpretation-txt\"\n\t],\n\t\"./2019/monitoring-station/big-example.txt\": [\n\t\t\"1010\",\n\t\t\"2019-monitoring-station-big-example-txt\"\n\t],\n\t\"./2019/monitoring-station/example-1.txt\": [\n\t\t\"4763\",\n\t\t\"2019-monitoring-station-example-1-txt\"\n\t],\n\t\"./2019/monitoring-station/example-2.txt\": [\n\t\t\"b571\",\n\t\t\"2019-monitoring-station-example-2-txt\"\n\t],\n\t\"./2019/monitoring-station/input.txt\": [\n\t\t\"3383\",\n\t\t\"2019-monitoring-station-input-txt\"\n\t],\n\t\"./2019/monitoring-station/kill-example.txt\": [\n\t\t\"020b\",\n\t\t\"2019-monitoring-station-kill-example-txt\"\n\t],\n\t\"./2019/n-body-problem/example-1.txt\": [\n\t\t\"9172\",\n\t\t\"2019-n-body-problem-example-1-txt\"\n\t],\n\t\"./2019/n-body-problem/example-3.txt\": [\n\t\t\"881a\",\n\t\t\"2019-n-body-problem-example-3-txt\"\n\t],\n\t\"./2019/n-body-problem/long-repetition-example.txt\": [\n\t\t\"8860\",\n\t\t\"2019-n-body-problem-long-repetition-example-txt\"\n\t],\n\t\"./2019/n-body-problem/n-body-problem.txt\": [\n\t\t\"5a33\",\n\t\t\"2019-n-body-problem-n-body-problem-txt\"\n\t],\n\t\"./2019/oxygen-system.txt\": [\n\t\t\"39cb\",\n\t\t\"2019-oxygen-system-txt\"\n\t],\n\t\"./2019/planet-of-discord.txt\": [\n\t\t\"ae66\",\n\t\t\"2019-planet-of-discord-txt\"\n\t],\n\t\"./2019/program-alarm/example-4.txt\": [\n\t\t\"e2b8\",\n\t\t\"2019-program-alarm-example-4-txt\"\n\t],\n\t\"./2019/program-alarm/example.txt\": [\n\t\t\"d219\",\n\t\t\"2019-program-alarm-example-txt\"\n\t],\n\t\"./2019/program-alarm/input.txt\": [\n\t\t\"2823\",\n\t\t\"2019-program-alarm-input-txt\"\n\t],\n\t\"./2019/rocket-tyranny.txt\": [\n\t\t\"3324\",\n\t\t\"2019-rocket-tyranny-txt\"\n\t],\n\t\"./2019/secure-container.txt\": [\n\t\t\"35a6\",\n\t\t\"2019-secure-container-txt\"\n\t],\n\t\"./2019/sensor-boost/quine.txt\": [\n\t\t\"2059\",\n\t\t\"2019-sensor-boost-quine-txt\"\n\t],\n\t\"./2019/sensor-boost/sensor-boost.txt\": [\n\t\t\"f178\",\n\t\t\"2019-sensor-boost-sensor-boost-txt\"\n\t],\n\t\"./2019/set-and-forget.txt\": [\n\t\t\"bd57\",\n\t\t\"2019-set-and-forget-txt\"\n\t],\n\t\"./2019/slam-shuffle.txt\": [\n\t\t\"fca4\",\n\t\t\"2019-slam-shuffle-txt\"\n\t],\n\t\"./2019/space-image-format.txt\": [\n\t\t\"c6d2\",\n\t\t\"2019-space-image-format-txt\"\n\t],\n\t\"./2019/space-police.txt\": [\n\t\t\"4d72\",\n\t\t\"2019-space-police-txt\"\n\t],\n\t\"./2019/space-stoichiometry/example-1.txt\": [\n\t\t\"f43c\",\n\t\t\"2019-space-stoichiometry-example-1-txt\"\n\t],\n\t\"./2019/space-stoichiometry/input.txt\": [\n\t\t\"7e8d\",\n\t\t\"2019-space-stoichiometry-input-txt\"\n\t],\n\t\"./2019/springroid-adventure.txt\": [\n\t\t\"5b58\",\n\t\t\"2019-springroid-adventure-txt\"\n\t],\n\t\"./2019/sunny-asteroids/example.txt\": [\n\t\t\"d4a0\",\n\t\t\"2019-sunny-asteroids-example-txt\"\n\t],\n\t\"./2019/sunny-asteroids/sunny-asteroids.txt\": [\n\t\t\"cc81\",\n\t\t\"2019-sunny-asteroids-sunny-asteroids-txt\"\n\t],\n\t\"./2019/tractor-beam.txt\": [\n\t\t\"01e8\",\n\t\t\"2019-tractor-beam-txt\"\n\t],\n\t\"./2019/universal-orbit-map/example-second.txt\": [\n\t\t\"3d53\",\n\t\t\"2019-universal-orbit-map-example-second-txt\"\n\t],\n\t\"./2019/universal-orbit-map/universal-orbit-map.txt\": [\n\t\t\"79bc\",\n\t\t\"2019-universal-orbit-map-universal-orbit-map-txt\"\n\t],\n\t\"./2020/adapter-array.txt\": [\n\t\t\"5705\",\n\t\t\"2020-adapter-array-txt\"\n\t],\n\t\"./2020/allergen-assessment.txt\": [\n\t\t\"ed1a\",\n\t\t\"2020-allergen-assessment-txt\"\n\t],\n\t\"./2020/binary-boarding.txt\": [\n\t\t\"1a9d\",\n\t\t\"2020-binary-boarding-txt\"\n\t],\n\t\"./2020/combo-breaker.txt\": [\n\t\t\"a129\",\n\t\t\"2020-combo-breaker-txt\"\n\t],\n\t\"./2020/conway-cubes.txt\": [\n\t\t\"43db\",\n\t\t\"2020-conway-cubes-txt\"\n\t],\n\t\"./2020/crab-combat.txt\": [\n\t\t\"54aa\",\n\t\t\"2020-crab-combat-txt\"\n\t],\n\t\"./2020/crab-cups.txt\": [\n\t\t\"2b45\",\n\t\t\"2020-crab-cups-txt\"\n\t],\n\t\"./2020/custom-customs.txt\": [\n\t\t\"5b0c\",\n\t\t\"2020-custom-customs-txt\"\n\t],\n\t\"./2020/docking-data.txt\": [\n\t\t\"e0a4\",\n\t\t\"2020-docking-data-txt\"\n\t],\n\t\"./2020/encoding-error.txt\": [\n\t\t\"bb47\",\n\t\t\"2020-encoding-error-txt\"\n\t],\n\t\"./2020/handheld-halting.txt\": [\n\t\t\"d5d4\",\n\t\t\"2020-handheld-halting-txt\"\n\t],\n\t\"./2020/handy-haversacks.txt\": [\n\t\t\"e078\",\n\t\t\"2020-handy-haversacks-txt\"\n\t],\n\t\"./2020/jurassic-jigsaw.txt\": [\n\t\t\"ad2e\",\n\t\t\"2020-jurassic-jigsaw-txt\"\n\t],\n\t\"./2020/lobby-layout.txt\": [\n\t\t\"727a\",\n\t\t\"2020-lobby-layout-txt\"\n\t],\n\t\"./2020/monster-messages.txt\": [\n\t\t\"1e76\",\n\t\t\"2020-monster-messages-txt\"\n\t],\n\t\"./2020/operation-order.txt\": [\n\t\t\"bed8\",\n\t\t\"2020-operation-order-txt\"\n\t],\n\t\"./2020/passport-processing.txt\": [\n\t\t\"f75f\",\n\t\t\"2020-passport-processing-txt\"\n\t],\n\t\"./2020/password-philosophy.txt\": [\n\t\t\"3ffc\",\n\t\t\"2020-password-philosophy-txt\"\n\t],\n\t\"./2020/rain-risk.txt\": [\n\t\t\"570f\",\n\t\t\"2020-rain-risk-txt\"\n\t],\n\t\"./2020/rambunctious-recitation.txt\": [\n\t\t\"b274\",\n\t\t\"2020-rambunctious-recitation-txt\"\n\t],\n\t\"./2020/report-repair.txt\": [\n\t\t\"1f77\",\n\t\t\"2020-report-repair-txt\"\n\t],\n\t\"./2020/seating-system.txt\": [\n\t\t\"3af5\",\n\t\t\"2020-seating-system-txt\"\n\t],\n\t\"./2020/shuttle-search.txt\": [\n\t\t\"0d13\",\n\t\t\"2020-shuttle-search-txt\"\n\t],\n\t\"./2020/ticket-translation.txt\": [\n\t\t\"328f\",\n\t\t\"2020-ticket-translation-txt\"\n\t],\n\t\"./2020/toboggan-trajectory.txt\": [\n\t\t\"d7ea\",\n\t\t\"2020-toboggan-trajectory-txt\"\n\t],\n\t\"./2021/amphipod.txt\": [\n\t\t\"52be\",\n\t\t\"2021-amphipod-txt\"\n\t],\n\t\"./2021/arithmetic-logic-unit.txt\": [\n\t\t\"4ced\",\n\t\t\"2021-arithmetic-logic-unit-txt\"\n\t],\n\t\"./2021/beacon-scanner.txt\": [\n\t\t\"adfe\",\n\t\t\"2021-beacon-scanner-txt\"\n\t],\n\t\"./2021/binary-diagnostic.txt\": [\n\t\t\"7ef7\",\n\t\t\"2021-binary-diagnostic-txt\"\n\t],\n\t\"./2021/chiton.txt\": [\n\t\t\"12d7\",\n\t\t\"2021-chiton-txt\"\n\t],\n\t\"./2021/dirac-dice.txt\": [\n\t\t\"a272\",\n\t\t\"2021-dirac-dice-txt\"\n\t],\n\t\"./2021/dive.txt\": [\n\t\t\"9410\",\n\t\t\"2021-dive-txt\"\n\t],\n\t\"./2021/dumbo-octopus.txt\": [\n\t\t\"cd2f\",\n\t\t\"2021-dumbo-octopus-txt\"\n\t],\n\t\"./2021/extended-polymerization.txt\": [\n\t\t\"3ab9\",\n\t\t\"2021-extended-polymerization-txt\"\n\t],\n\t\"./2021/giant-squid.txt\": [\n\t\t\"5b60\",\n\t\t\"2021-giant-squid-txt\"\n\t],\n\t\"./2021/hydrothermal-venture.txt\": [\n\t\t\"b8f7\",\n\t\t\"2021-hydrothermal-venture-txt\"\n\t],\n\t\"./2021/lanternfish.txt\": [\n\t\t\"b2333\",\n\t\t\"2021-lanternfish-txt\"\n\t],\n\t\"./2021/packet-decoder.txt\": [\n\t\t\"8a72\",\n\t\t\"2021-packet-decoder-txt\"\n\t],\n\t\"./2021/passage-pathing.txt\": [\n\t\t\"1a38\",\n\t\t\"2021-passage-pathing-txt\"\n\t],\n\t\"./2021/reactor-reboot.txt\": [\n\t\t\"c9bd\",\n\t\t\"2021-reactor-reboot-txt\"\n\t],\n\t\"./2021/sea-cucumber.txt\": [\n\t\t\"beb6\",\n\t\t\"2021-sea-cucumber-txt\"\n\t],\n\t\"./2021/seven-segment-search.txt\": [\n\t\t\"aa6b\",\n\t\t\"2021-seven-segment-search-txt\"\n\t],\n\t\"./2021/smoke-basin.txt\": [\n\t\t\"763a\",\n\t\t\"2021-smoke-basin-txt\"\n\t],\n\t\"./2021/snailfish.txt\": [\n\t\t\"8913\",\n\t\t\"2021-snailfish-txt\"\n\t],\n\t\"./2021/sonar-sweep.txt\": [\n\t\t\"ccb5\",\n\t\t\"2021-sonar-sweep-txt\"\n\t],\n\t\"./2021/syntax-scoring.txt\": [\n\t\t\"98e6\",\n\t\t\"2021-syntax-scoring-txt\"\n\t],\n\t\"./2021/the-treachery-of-whales.txt\": [\n\t\t\"ae68\",\n\t\t\"2021-the-treachery-of-whales-txt\"\n\t],\n\t\"./2021/transparent-origami.txt\": [\n\t\t\"a98a\",\n\t\t\"2021-transparent-origami-txt\"\n\t],\n\t\"./2021/trench-map.txt\": [\n\t\t\"acac\",\n\t\t\"2021-trench-map-txt\"\n\t],\n\t\"./2021/trick-shot.txt\": [\n\t\t\"9083\",\n\t\t\"2021-trick-shot-txt\"\n\t],\n\t\"./2022/beacon-exclusion-zone.txt\": [\n\t\t\"f48d\",\n\t\t\"2022-beacon-exclusion-zone-txt\"\n\t],\n\t\"./2022/blizzard-basin.txt\": [\n\t\t\"3fb6\",\n\t\t\"2022-blizzard-basin-txt\"\n\t],\n\t\"./2022/boiling-boulders.txt\": [\n\t\t\"3419\",\n\t\t\"2022-boiling-boulders-txt\"\n\t],\n\t\"./2022/calorie-counting.txt\": [\n\t\t\"93d1\",\n\t\t\"2022-calorie-counting-txt\"\n\t],\n\t\"./2022/camp-cleanup.txt\": [\n\t\t\"486e\",\n\t\t\"2022-camp-cleanup-txt\"\n\t],\n\t\"./2022/cathode-ray-tube.txt\": [\n\t\t\"6a7a\",\n\t\t\"2022-cathode-ray-tube-txt\"\n\t],\n\t\"./2022/distress-signal.txt\": [\n\t\t\"99c9\",\n\t\t\"2022-distress-signal-txt\"\n\t],\n\t\"./2022/grove-positioning-system.txt\": [\n\t\t\"2f04\",\n\t\t\"2022-grove-positioning-system-txt\"\n\t],\n\t\"./2022/hill-climbing-algorithm.txt\": [\n\t\t\"03db\",\n\t\t\"2022-hill-climbing-algorithm-txt\"\n\t],\n\t\"./2022/monkey-in-the-middle.txt\": [\n\t\t\"5281\",\n\t\t\"2022-monkey-in-the-middle-txt\"\n\t],\n\t\"./2022/monkey-map.txt\": [\n\t\t\"c564\",\n\t\t\"2022-monkey-map-txt\"\n\t],\n\t\"./2022/monkey-math.txt\": [\n\t\t\"0c04\",\n\t\t\"2022-monkey-math-txt\"\n\t],\n\t\"./2022/no-space-left-on-device.txt\": [\n\t\t\"1924\",\n\t\t\"2022-no-space-left-on-device-txt\"\n\t],\n\t\"./2022/not-enough-minerals.txt\": [\n\t\t\"c9c5\",\n\t\t\"2022-not-enough-minerals-txt\"\n\t],\n\t\"./2022/proboscidea-volcanium.txt\": [\n\t\t\"6d43\",\n\t\t\"2022-proboscidea-volcanium-txt\"\n\t],\n\t\"./2022/pyroclastic-flow.txt\": [\n\t\t\"1b69\",\n\t\t\"2022-pyroclastic-flow-txt\"\n\t],\n\t\"./2022/regolith-reservoir.txt\": [\n\t\t\"2c1f\",\n\t\t\"2022-regolith-reservoir-txt\"\n\t],\n\t\"./2022/rock-paper-scissors.txt\": [\n\t\t\"0c73\",\n\t\t\"2022-rock-paper-scissors-txt\"\n\t],\n\t\"./2022/rope-bridge.txt\": [\n\t\t\"43eb\",\n\t\t\"2022-rope-bridge-txt\"\n\t],\n\t\"./2022/rucksack-reorganization.txt\": [\n\t\t\"ac23\",\n\t\t\"2022-rucksack-reorganization-txt\"\n\t],\n\t\"./2022/supply-stacks.txt\": [\n\t\t\"2633\",\n\t\t\"2022-supply-stacks-txt\"\n\t],\n\t\"./2022/treetop-tree-house.txt\": [\n\t\t\"aca9\",\n\t\t\"2022-treetop-tree-house-txt\"\n\t],\n\t\"./2022/tuning-trouble.txt\": [\n\t\t\"8319\",\n\t\t\"2022-tuning-trouble-txt\"\n\t],\n\t\"./2022/unstable-diffusion.txt\": [\n\t\t\"196f\",\n\t\t\"2022-unstable-diffusion-txt\"\n\t],\n\t\"./2023/camel-cards.txt\": [\n\t\t\"2cfc\",\n\t\t\"2023-camel-cards-txt\"\n\t],\n\t\"./2023/clumsy-crucible.txt\": [\n\t\t\"7c8b\",\n\t\t\"2023-clumsy-crucible-txt\"\n\t],\n\t\"./2023/cosmic-expansion.txt\": [\n\t\t\"6144\",\n\t\t\"2023-cosmic-expansion-txt\"\n\t],\n\t\"./2023/cube-conundrum.txt\": [\n\t\t\"b42b\",\n\t\t\"2023-cube-conundrum-txt\"\n\t],\n\t\"./2023/gear-ratios.txt\": [\n\t\t\"ace5\",\n\t\t\"2023-gear-ratios-txt\"\n\t],\n\t\"./2023/haunted-wasteland.txt\": [\n\t\t\"d37b\",\n\t\t\"2023-haunted-wasteland-txt\"\n\t],\n\t\"./2023/hot-springs.txt\": [\n\t\t\"1d6a\",\n\t\t\"2023-hot-springs-txt\"\n\t],\n\t\"./2023/if-you-give-a-seed-a-fertilizer.txt\": [\n\t\t\"fbd10\",\n\t\t\"2023-if-you-give-a-seed-a-fertilizer-txt\"\n\t],\n\t\"./2023/lens-library.txt\": [\n\t\t\"3879\",\n\t\t\"2023-lens-library-txt\"\n\t],\n\t\"./2023/mirage-maintenance.txt\": [\n\t\t\"c26d\",\n\t\t\"2023-mirage-maintenance-txt\"\n\t],\n\t\"./2023/parabolic-reflector-dish.txt\": [\n\t\t\"e1c4\",\n\t\t\"2023-parabolic-reflector-dish-txt\"\n\t],\n\t\"./2023/pipe-maze.txt\": [\n\t\t\"8143\",\n\t\t\"2023-pipe-maze-txt\"\n\t],\n\t\"./2023/point-of-incidence.txt\": [\n\t\t\"d7a0\",\n\t\t\"2023-point-of-incidence-txt\"\n\t],\n\t\"./2023/scratch-cards.txt\": [\n\t\t\"e56c\",\n\t\t\"2023-scratch-cards-txt\"\n\t],\n\t\"./2023/the-floor-will-be-lava.txt\": [\n\t\t\"2c31\",\n\t\t\"2023-the-floor-will-be-lava-txt\"\n\t],\n\t\"./2023/trebuchet.txt\": [\n\t\t\"1cfd\",\n\t\t\"2023-trebuchet-txt\"\n\t],\n\t\"./2023/wait-for-it.txt\": [\n\t\t\"e876\",\n\t\t\"2023-wait-for-it-txt\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"70f5\";\nmodule.exports = webpackAsyncContext;","export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../node_modules/cache-loader/dist/cjs.js??ref--1-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&id=470e78e5&prod&lang=scss\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./EntryTitle.vue?vue&type=style&index=0&id=2d88f678&prod&lang=scss&scoped=true\"","export const exampleInput = `#############\r\n#...........#\r\n###B#C#B#D###\r\n  #A#D#C#A#\r\n  #########`;\r\n\r\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./EntrySimpleOutput.vue?vue&type=style&index=0&id=0a6e4920&prod&lang=scss&scoped=true\"","export * from \"-!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../../../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ScratchCards.vue?vue&type=style&index=0&id=bdcc8d08&prod&lang=scss&scoped=true\"","export * from \"-!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../../../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ConwayCubesView.vue?vue&type=style&index=0&id=2d0c2e8a&prod&lang=scss&scoped=true\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./EntryFileInput.vue?vue&type=style&index=0&id=6d4835c0&prod&lang=scss&scoped=true\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./EntryInput.vue?vue&type=style&index=0&id=dc221ab6&prod&lang=scss&scoped=true\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Hamburger.vue?vue&type=style&index=0&id=54573fe0&prod&lang=scss\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./EntryChoice.vue?vue&type=style&index=0&id=307a2ea6&prod&lang=scss&scoped=true\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./EntryTemplate.vue?vue&type=style&index=0&id=44a3474c&prod&lang=scss&scoped=true\"","export * from \"-!../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BaseMessageTemplate.vue?vue&type=style&index=0&id=3edaa91e&prod&lang=scss&scoped=true\"","export * from \"-!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../../../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./LobbyLayout.vue?vue&type=style&index=0&id=d2e217b2&prod&lang=scss&scoped=true\"","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{attrs:{\"id\":\"app\"}},[_c('Navbar',{attrs:{\"entryByYears\":_vm.entryByYears}}),_c('div',{attrs:{\"id\":\"content\"}},[_c('router-view')],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"unselectable\",attrs:{\"id\":\"nav\"}},[_c('div',{staticClass:\"header\"},[_c('Hamburger',{staticClass:\"hamburger\",attrs:{\"size\":25},on:{\"click\":_vm.toggleNavbar}}),_c('div',{staticClass:\"title\"},[_vm._v(\"Advent of Code\"),_c('a',{staticClass:\"link\",attrs:{\"href\":\"https://adventofcode.com\",\"target\":\"_blank\"}},[_c('font-awesome-icon',{attrs:{\"icon\":\"link\"}})],1)]),_c('div',{staticClass:\"author\"},[_vm._v(\"gicali\")])],1),_c('hr'),_c('div',{staticClass:\"links\",style:(_vm.navbarStyle)},[_c('div',{staticClass:\"years\"},_vm._l((_vm.years),function(year){return _c('Year',{key:year,attrs:{\"year\":year,\"selected\":year === _vm.selectedYear},on:{\"click\":function($event){return _vm.selectYear(year)}}})}),1),_c('router-link',{attrs:{\"to\":\"/\"}},[_vm._v(\"Home\")]),_c('router-link',{attrs:{\"to\":{name: 'entries'}}},[_vm._v(\"Entries\")]),_c('div',{staticClass:\"nav-entry\"},[(_vm.shouldTruncateList)?_c('router-link',{staticClass:\"shortened\",attrs:{\"to\":{name: 'entries' }}},[_vm._v(\"(...)\")]):_vm._e(),_vm._l((_vm.entryList),function(entry){return _c('router-link',{key:entry.name,attrs:{\"to\":{name: entry.name}}},[_vm._v(_vm._s(entry.title))])})],2),_c('router-link',{staticClass:\"last-entry\",attrs:{\"to\":{name: _vm.lastEntryName}}},[_vm._v(\"Last Entry\")])],1)])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"hamburger\",on:{\"click\":function($event){return _vm.$emit('click')}}},[_c('div',{staticClass:\"hamburger-line\",style:(_vm.lineStyle)}),_c('div',{staticClass:\"hamburger-line\",style:(_vm.lineStyle)}),_c('div',{staticClass:\"hamburger-line\",style:(_vm.lineStyle)})])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\r\nimport Vue from \"vue\";\r\nexport default Vue.extend({\r\n\r\n    props: {\r\n        size: Number\r\n    },\r\n    computed: {\r\n        lineStyle() {\r\n            return {\r\n                width: `${this.size}px`,\r\n                height: `${this.size as number / 6}px`,\r\n                margin: `${this.size as number / 6}px 0`\r\n            };\r\n        }\r\n    }\r\n\r\n});\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Hamburger.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Hamburger.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./Hamburger.vue?vue&type=template&id=54573fe0&lang=pug\"\nimport script from \"./Hamburger.vue?vue&type=script&lang=ts\"\nexport * from \"./Hamburger.vue?vue&type=script&lang=ts\"\nimport style0 from \"./Hamburger.vue?vue&type=style&index=0&id=54573fe0&prod&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('a',{staticClass:\"year-wrapper\",on:{\"click\":function($event){return _vm.$emit('click')}}},[(_vm.selected)?_c('span',[_vm._v(\">\")]):_vm._e(),_c('span',[_vm._v(_vm._s(_vm.year))]),(_vm.selected)?_c('span',[_vm._v(\"<\")]):_vm._e()])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\r\nimport Vue from \"vue\";\r\nexport default Vue.extend({\r\n    props: {\r\n        year: Number,\r\n        selected: Boolean\r\n    }\r\n});\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Year.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Year.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./Year.vue?vue&type=template&id=1e2a6608&lang=pug\"\nimport script from \"./Year.vue?vue&type=script&lang=ts\"\nexport * from \"./Year.vue?vue&type=script&lang=ts\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","export const baseState = {\r\n    dates: {\r\n        year: 2023\r\n    }\r\n};\r\n\r\nexport function updateYear(year: number | string) {\r\n    if (typeof (year) === \"string\") {\r\n        year = parseInt(year, 10);\r\n    }\r\n    baseState.dates.year = year;\r\n}\r\n","\r\nimport Vue from \"vue\";\r\n\r\nimport Hamburger from \"./Hamburger.vue\";\r\nimport Year from \"./Year.vue\";\r\nimport { EntryRoute } from \"../entries/entryList\";\r\nimport { baseState, updateYear } from \"../state/state\";\r\n\r\nexport default Vue.extend({\r\n    components: {\r\n        Year,\r\n        Hamburger\r\n    },\r\n    props: {\r\n        entryByYears: Object as () => { [key: string]: EntryRoute[] }\r\n    },\r\n    watch: {\r\n        $route(to, from) {\r\n            this.navbarActivated = false;\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            dates: baseState.dates,\r\n            navbarActivated: false\r\n        };\r\n    },\r\n    methods: {\r\n        selectYear(year: number) {\r\n            updateYear(year);\r\n        },\r\n        toggleNavbar() {\r\n            this.navbarActivated = !this.navbarActivated;\r\n        }\r\n    },\r\n    computed: {\r\n        entryList(): EntryRoute[] {\r\n            const list = this.fullEntryList;\r\n            const reducedList = list.slice(Math.max(0, list.length - 10), list.length);\r\n            return reducedList;\r\n        },\r\n        fullEntryList(): EntryRoute[] {\r\n            return this.entryByYears[this.selectedYear + \"\"];\r\n        },\r\n        selectedYear(): number {\r\n            return this.dates.year;\r\n        },\r\n        shouldTruncateList(): boolean {\r\n            return this.entryList.length !== this.fullEntryList.length;\r\n        },\r\n        lastEntryName(): string {\r\n            return this.entryList[this.entryList.length - 1].name;\r\n        },\r\n        years(): number[] {\r\n            return Object.keys(this.entryByYears).map((e) => parseInt(e, 10));\r\n        },\r\n        navbarStyle() {\r\n            if (!this.navbarActivated) {\r\n                return {\r\n                    left: \"-60vw\"\r\n                };\r\n            } else {\r\n                return {\r\n                    left: \"0\"\r\n                };\r\n            }\r\n        }\r\n    }\r\n});\r\n","export enum Choice {\r\n    first = \"first\",\r\n    second = \"second\"\r\n}\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Navbar.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Navbar.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./Navbar.vue?vue&type=template&id=cc461bcc&lang=pug\"\nimport script from \"./Navbar.vue?vue&type=script&lang=ts\"\nexport * from \"./Navbar.vue?vue&type=script&lang=ts\"\nimport style0 from \"./Navbar.vue?vue&type=style&index=0&id=cc461bcc&prod&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import { Choice } from \"../constants/choice\";\r\nimport { Coordinate } from \"../support/geometry\";\r\nimport { Message } from \"./entryStatusMessages\";\r\n\r\nexport interface ScreenBuilder { requireScreen: (size?: Coordinate) => Promise<ScreenPrinter>; }\r\n\r\nconst ensureEmebedded = (e: string | true | undefined): string | true => {\r\n    return typeof e === \"string\" ? e : true;\r\n};\r\n\r\nexport const embedAll = (entries: Entry[]): Entry[] => entries.map((e) => {\r\n    if (e.metadata) {\r\n        return {\r\n            ...e,\r\n            metadata: { ...e.metadata, embeddedData: ensureEmebedded(e.metadata.embeddedData) }\r\n        };\r\n    } else {\r\n        return e;\r\n    }\r\n});\r\n\r\nexport interface EntryCallbackArg {\r\n    lines: string[];\r\n    outputCallback: OutputCallback;\r\n    resultOutputCallback: ResultOutputCallback;\r\n    pause: Pause;\r\n    isCancelled: (() => boolean);\r\n    setAutoStop: () => void;\r\n    additionalInputReader?: {\r\n        read: () => Promise<string | null>;\r\n        close: () => void;\r\n    };\r\n    screen?: ScreenBuilder;\r\n    mediaQuery: MediaQuery;\r\n    isQuickRunning: boolean;\r\n    sendMessage?: MessageSender;\r\n    isExample: boolean;\r\n}\r\n\r\nexport type Pause = (times?: number) => Promise<void>;\r\n\r\ntype OldEntryCallback = (\r\n    lines: string[],\r\n    outputCallback: ((outputLine: any) => Promise<void>),\r\n    statusCallback?: ((outputStatus: Message) => Promise<void>)\r\n) => Promise<void>;\r\n\r\nexport type OutputCallback = (outputLine: any, shouldClear?: boolean) => Promise<void>;\r\nexport type ResultOutputCallback = (outputLine: any) => Promise<void>;\r\n\r\ntype EntryCallback = (arg: EntryCallbackArg) => Promise<void>;\r\n\r\ninterface EntryMetadata {\r\n    key: string;\r\n    stars?: 1 | 2;\r\n    title: string;\r\n    date?: number;\r\n    hasAdditionalInput?: boolean;\r\n    suggestedDelay?: number;\r\n    customComponent?: \"pause-and-run\" | \"graph\";\r\n    supportsQuickRunning?: boolean;\r\n    embeddedData?: string | true;\r\n    canvasBackground?: string;\r\n    variants?: Entry[];\r\n    exampleInput?: string | [string, string];\r\n    fixedInput?: boolean;\r\n}\r\n\r\nexport interface Entry {\r\n    first: EntryCallback;\r\n    second: EntryCallback;\r\n    metadata?: EntryMetadata;\r\n}\r\n\r\nexport function entryForFile(first: EntryCallback, second: EntryCallback, metadata?: EntryMetadata): Entry {\r\n    return {\r\n        first,\r\n        second,\r\n        metadata\r\n    };\r\n}\r\nexport function oldEntryForFile(first: OldEntryCallback, second: OldEntryCallback): Entry {\r\n    return {\r\n        first: (args: EntryCallbackArg) => (first(args.lines, args.outputCallback)),\r\n        second: (args: EntryCallbackArg) => (second(args.lines, args.outputCallback))\r\n    };\r\n}\r\n\r\nexport interface EntryFileHandling {\r\n    choice: Choice;\r\n    content: string[];\r\n}\r\n\r\nexport function simpleOutputCallbackFactory(output: string[], avoidOutput?: () => boolean) {\r\n    return (outputLine: any, shouldClear?: boolean): Promise<void> => {\r\n        if (avoidOutput && avoidOutput()) {\r\n            return new Promise((resolve) => resolve());\r\n        }\r\n        if (shouldClear) {\r\n            output.length = 0;\r\n        }\r\n\r\n        if (outputLine === null) {\r\n            output.length = 0;\r\n        } else if (typeof (outputLine) === \"string\") {\r\n            output.push(outputLine);\r\n        } else if (Array.isArray(outputLine)) {\r\n            output.push(outputLine.join(\"\\n\"));\r\n        } else {\r\n            output.push(JSON.stringify(outputLine, undefined, 4));\r\n        }\r\n        return new Promise<void>((resolve) => setTimeout(resolve, 0));\r\n    };\r\n}\r\n\r\nexport type Drawable = {\r\n    id: string;\r\n    color: string;\r\n    shouldStroke?: boolean;\r\n} & ({\r\n    type: \"rectangle\";\r\n    c: Coordinate;\r\n    size: Coordinate;\r\n} | {\r\n    type: \"points\";\r\n    points: Coordinate[];\r\n});\r\n\r\nexport interface ScreenPrinter {\r\n    add: (item: Drawable) => Promise<void>;\r\n    addForeground: (item: Drawable) => Promise<void>;\r\n    remove: (id: string) => Promise<void>;\r\n    stop: () => Promise<void>;\r\n    replace: (items: Drawable[]) => Promise<void>;\r\n    changeColor: (indexOrId: string | number, color: string) => Promise<void>;\r\n    pause: () => (() => void);\r\n    forceRender: () => void;\r\n    setManualRender: () => void;\r\n    setManualInvalidate: () => void;\r\n    invalidate: (id: string | Drawable) => void;\r\n    getImage(): Promise<Blob>;\r\n}\r\n\r\nexport interface MediaQuery {\r\n    isMobile(): boolean;\r\n}\r\n\r\nexport type MessageSender = (message: any) => Promise<void>;\r\ninterface ExecutionArgs {\r\n    entry: Entry;\r\n    choice: Choice;\r\n    lines: string[];\r\n    outputCallback: EntryCallbackArg[\"outputCallback\"];\r\n    isCancelled: (() => boolean);\r\n    pause?: () => Promise<void>;\r\n    sendMessage?: MessageSender;\r\n    additionalInputReader?: {\r\n        read: () => Promise<string | null>;\r\n        close: () => void;\r\n    };\r\n    screen?: {\r\n        requireScreen: (size?: Coordinate) => Promise<ScreenPrinter>;\r\n    };\r\n    mediaQuery: MediaQuery;\r\n    isQuickRunning: boolean;\r\n    stopTimer: () => void;\r\n    isExample: boolean;\r\n}\r\n\r\nexport class StopException extends Error {\r\n    public isStop = true;\r\n}\r\n\r\nexport async function executeEntry({\r\n    entry,\r\n    choice,\r\n    lines,\r\n    outputCallback,\r\n    isCancelled,\r\n    pause,\r\n    additionalInputReader,\r\n    screen,\r\n    isQuickRunning,\r\n    stopTimer,\r\n    sendMessage,\r\n    mediaQuery,\r\n    isExample\r\n}: ExecutionArgs\r\n) {\r\n    let callback: EntryCallback;\r\n    if (choice === Choice.first) {\r\n        callback = entry.first;\r\n    } else {\r\n        callback = entry.second;\r\n    }\r\n    try {\r\n        const basePause = pause || (() => new Promise<void>((resolve) => setTimeout(resolve, 0)));\r\n        let shouldAutoStop = false;\r\n        const wrappedPause = async (times?: number) => {\r\n            if (isQuickRunning) {\r\n                return;\r\n            }\r\n            times = times || 1;\r\n            for (let i = 0; i < times; i++) {\r\n                if (shouldAutoStop && isCancelled()) {\r\n                    throw new StopException();\r\n                }\r\n                await basePause();\r\n                if (shouldAutoStop && isCancelled()) {\r\n                    throw new StopException();\r\n                }\r\n            }\r\n        };\r\n        let resultOutput = 0;\r\n        await callback({\r\n            lines,\r\n            outputCallback: !isQuickRunning ? outputCallback : async () => { },\r\n            resultOutputCallback: isQuickRunning ? async (line: any, shouldClear?: boolean) => {\r\n                if (resultOutput > 0) {\r\n                    throw new Error(\"Cannot output results more than once\");\r\n                }\r\n                stopTimer();\r\n                resultOutput++;\r\n                await outputCallback(line, shouldClear);\r\n            } : outputCallback,\r\n            pause: wrappedPause,\r\n            isCancelled,\r\n            additionalInputReader,\r\n            screen: isQuickRunning ? undefined : screen,\r\n            setAutoStop: () => shouldAutoStop = true,\r\n            isQuickRunning,\r\n            sendMessage,\r\n            mediaQuery,\r\n            isExample\r\n        });\r\n    } catch (e) {\r\n        if ((e as StopException).isStop) {\r\n            console.log(\"Stopped, all fine\");\r\n            return;\r\n        }\r\n        await outputCallback(\"ERROR: \" + (e as Error).message);\r\n        console.error(e);\r\n    }\r\n}\r\n","import { entryForFile } from \"../../entry\";\r\n\r\nexport const notQuiteLisp = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const line = lines[0];\r\n        const count = line.split(\"\").reduce((acc, next) => acc + (next === \"(\" ? 1 : -1), 0);\r\n        await outputCallback(count);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const line = lines[0];\r\n\r\n        let position = 0;\r\n        for (let i = 0; i < line.length; i++) {\r\n            position += (line[i] === \"(\" ? 1 : -1);\r\n            if (position < 0) {\r\n                await outputCallback(\"Found it! \" + (i + 1));\r\n                return;\r\n            }\r\n        }\r\n\r\n        await outputCallback(\"Never gone to the basement\");\r\n    },\r\n    { key: \"not-quite-lisp\", title: \"Not Quite Lisp\", stars: 2 }\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\n\r\nexport const iWasToldThereWouldBeNoMath = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const sizes = lines.map((line) => {\r\n            return line.split(\"x\").map((e) => parseInt(e, 10));\r\n        })\r\n            .map((size) => ({\r\n                areas: [\r\n                    size[0] * size[1],\r\n                    size[0] * size[2],\r\n                    size[1] * size[2]\r\n                ]\r\n            }))\r\n            .map((areas) => ({\r\n                minArea: areas.areas.reduce((acc, next) => Math.min(acc, next)),\r\n                totalArea: areas.areas.reduce((acc, next) => acc + next) * 2\r\n            }))\r\n            .reduce((acc, next) => acc + (next.minArea + next.totalArea), 0);\r\n\r\n        await outputCallback(sizes);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const sizes = lines.map((line) => {\r\n            return line.split(\"x\").map((e) => parseInt(e, 10));\r\n        })\r\n            .map((size) => {\r\n                const biggest = size.reduce((acc, next) => Math.max(acc, next));\r\n                const smallestPerimeter = (size.reduce((acc, next) => acc + next) - biggest) * 2;\r\n                const volume = size.reduce((acc, next) => acc * next);\r\n                return {\r\n                    smallestPerimeter,\r\n                    volume\r\n                };\r\n            })\r\n            .map((a) => a.smallestPerimeter + a.volume)\r\n            .reduce((acc, next) => acc + next);\r\n\r\n        await outputCallback(sizes);\r\n\r\n    },\r\n    {\r\n        key: \"i-was-told-there-would-be-no-math\",\r\n        title: \"I Was Told There Would Be No Math\",\r\n        stars: 2\r\n    }\r\n);\r\n","export interface BestArg<T, U> {\r\n    key: T;\r\n    value: U;\r\n}\r\n\r\ntype Comparator<T> = (a: T, b: T) => number;\r\n\r\nexport const maxNumber: Comparator<number> = (a, b) => a - b;\r\nexport const minNumber: Comparator<number> = (a, b) => maxNumber(a, b) * -1;\r\n\r\nexport const ascending = maxNumber;\r\nexport const descending = minNumber;\r\n\r\n\r\nexport class CustomBest<T, U> {\r\n    public currentBest: BestArg<T, U> | null = null;\r\n    constructor(private comparator: Comparator<T>) {\r\n    }\r\n    public add(e: BestArg<T, U>) {\r\n        if ((this.currentBest === null) || this.comparator(this.currentBest.key, e.key) < 0) {\r\n            this.currentBest = e;\r\n        }\r\n    }\r\n}\r\n\r\nexport default class Best<U> extends CustomBest<number, U> {\r\n    constructor() {\r\n        super((a, b) => a - b);\r\n    }\r\n}\r\n\r\nexport class SimpleBest<T> {\r\n    public currentBest: T | null = null;\r\n\r\n    constructor(private comparator: Comparator<T>) {\r\n    }\r\n\r\n    public add(e: T) {\r\n        if ((this.currentBest === null) || this.comparator(this.currentBest, e) < 0) {\r\n            this.currentBest = e;\r\n        }\r\n    }\r\n}\r\n","import { Dictionary } from \"linq-typescript\";\r\nimport { coordinateToKey } from \"../entries/single-entries/2019/oxygen-system\";\r\nimport { serialization } from \"./geometry\";\r\nimport { ISerializer } from \"./serialization\";\r\nimport BinaryHeap from \"priorityqueue/lib/cjs\";\r\nimport { PriorityQueue } from \"priorityqueue/lib/cjs/PriorityQueue\";\r\n\r\ninterface QueueNode<T> { element: T; next?: QueueNode<T>; }\r\n\r\nexport class Lifo<T> implements Queuable<T> {\r\n  public forEach(callback: (e: T) => boolean | undefined): void {\r\n    for (let i = this._elements.length-1; i >= 0; i--) {\r\n      const res = callback(this._elements[i]);\r\n      if (res) {\r\n        return;\r\n      }\r\n    }\r\n  }\r\n  private _elements: T[] = [];\r\n\r\n  public add(element: T) {\r\n    this._elements.push(element);\r\n  }\r\n\r\n  public get(): T | null {\r\n    const e = this._elements.pop();\r\n    if (e === undefined) {\r\n      return null;\r\n    }\r\n    return e;\r\n  }\r\n\r\n  public get isEmpty(): boolean {\r\n    return this._elements.length === 0;\r\n  }\r\n\r\n  public get size(): number {\r\n    return this._elements.length;\r\n  }\r\n}\r\n\r\nexport class LinkedList<T> implements Iterable<{element: T, remove: () => void}> {\r\n  // private currentNode?: DoubleLinkedNode<T>;\r\n  private startNode?: DoubleLinkedNode<T>;\r\n\r\n  public addNode(element: T) {\r\n    if (!this.startNode) {\r\n      this.startNode = new DoubleLinkedNode<T>(element);\r\n    } else {\r\n      this.startNode.append(element);\r\n    }\r\n  }\r\n\r\n  public get length() {\r\n    let l = 0;\r\n    let n = this.startNode || null;\r\n    while (n) {\r\n      l++;\r\n      n = n.next;\r\n    }\r\n    return l;\r\n  }\r\n\r\n  public *[Symbol.iterator](): Iterator<{element: T, remove: () => void}> {\r\n    let current = this.startNode;\r\n    const remove = () => {\r\n      if (!current) {\r\n        return;\r\n      }\r\n      if (current.prev) {\r\n          current.prev.removeNext();\r\n        } else {\r\n          if (current.next) {\r\n            current.next.removePrev();\r\n            this.startNode = current.next;\r\n          } else {\r\n            this.startNode = undefined;\r\n          }\r\n        }\r\n    };\r\n    while (true) {\r\n      if (!current) {\r\n        return;\r\n      }\r\n      const c = current;\r\n      yield {element: c.value, remove};\r\n      current = current.next || undefined;\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport interface Queuable<T> {\r\n  get isEmpty(): boolean;\r\n  add(element: T): void;\r\n  get(): T | null;\r\n  forEach(callback: (e: T) => void | boolean): void;\r\n}\r\n\r\nexport class Heap<T> implements Queuable<T> {\r\n  private heap: PriorityQueue<T>;\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor(comparator: (a: T, b: T) => number) {\r\n    this.heap = new BinaryHeap<T>({comparator});\r\n  }\r\n  get isEmpty(): boolean {\r\n    return this.heap.length === 0;\r\n  }\r\n  add(element: T): void {\r\n    this.heap.push(element);\r\n  }\r\n  get(): T | null {\r\n    return this.heap.pop();\r\n  }\r\n  forEach(callback: (e: T) => boolean | void): void {\r\n    this.heap.toArray().forEach(callback);\r\n  }\r\n\r\n}\r\n\r\nexport class Queue<T> implements Queuable<T> {\r\n  private firstNode?: QueueNode<T>;\r\n  private lastNode?: QueueNode<T>;\r\n  private _size: number = 0;\r\n\r\n  public get isEmpty(): boolean {\r\n    return this.firstNode === undefined;\r\n  }\r\n\r\n  public forEach(callback: (e: T) => undefined | boolean): void {\r\n    if (this.isEmpty) {\r\n      return;\r\n    }\r\n    let node = this.firstNode;\r\n    while (node) {\r\n      const res = callback(node.element);\r\n      if (res) {\r\n        return;\r\n      }\r\n      node = node.next;\r\n    }\r\n  }\r\n\r\n  public add(element: T) {\r\n    if (this.isEmpty) {\r\n      this.firstNode = {\r\n        element,\r\n      };\r\n      this.lastNode = this.firstNode;\r\n    } else {\r\n      this.lastNode!.next = {\r\n        element,\r\n      };\r\n      this.lastNode = this.lastNode!.next;\r\n    }\r\n    this._size++;\r\n  }\r\n\r\n  public prepend(element: T) {\r\n    if (this.isEmpty) {\r\n      this.add(element);\r\n    } else {\r\n      const newFirst = {\r\n        element,\r\n        next: this.firstNode!\r\n      };\r\n      this.firstNode = newFirst;\r\n      this._size++;\r\n    }\r\n  }\r\n\r\n  public get(): T | null {\r\n    if (this.isEmpty) {\r\n      return null;\r\n    } else {\r\n      this._size--;\r\n      const toReturn = this.firstNode;\r\n      this.firstNode = this.firstNode!.next;\r\n      return toReturn!.element;\r\n    }\r\n  }\r\n\r\n  public get size(): number {\r\n    return this._size;\r\n  }\r\n}\r\n\r\nexport class Counter {\r\n\r\n  public get keys(): string[] {\r\n    return Object.keys(this._data);\r\n  }\r\n\r\n  public get values(): number[] {\r\n    return Object.values(this._data);\r\n  }\r\n\r\n  public static countCharacters(s: string | string[]): Counter {\r\n    const c = new Counter();\r\n    for (const x of s) {\r\n      c.incr(x);\r\n    }\r\n    return c;\r\n  }\r\n  private _data: {[key: string]: number} = {};\r\n\r\n  public incr(key: string) {\r\n    if (!this._data[key]) {\r\n      this._data[key] = 0;\r\n    }\r\n    this._data[key]++;\r\n  }\r\n\r\n  public get(key: string): number {\r\n    return this._data[key] || 0;\r\n  }\r\n}\r\n\r\nexport class DefaultListDictionaryString<T> {\r\n  private dictionary: { [key: string]: T[] } = {};\r\n\r\n  public add(key: string, value: T) {\r\n    this.ensureKey(key);\r\n    this.dictionary[key].push(value);\r\n  }\r\n  public get(key: string): T[] {\r\n    this.ensureKey(key);\r\n    return this.dictionary[key];\r\n  }\r\n  public remove(key: string) {\r\n    delete this.dictionary[key];\r\n  }\r\n  private ensureKey(key: string) {\r\n    if (this.dictionary[key] === undefined) {\r\n      this.dictionary[key] = [];\r\n    }\r\n  }\r\n}\r\n\r\nexport class DoubleLinkedNode<T> {\r\n  public next: DoubleLinkedNode<T> | null = null;\r\n  public prev: DoubleLinkedNode<T> | null = null;\r\n  constructor(public value: T) {\r\n  }\r\n\r\n  public visitToRight(maxLength: number | null = null): T[] {\r\n    let e: DoubleLinkedNode<T> | null = this;\r\n    const res = [];\r\n    while (e !== null && (maxLength === null || maxLength-- > 0)) {\r\n      res.push(e.value);\r\n      e = e.next;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  public append(item: T): DoubleLinkedNode<T> {\r\n    const oldNext = this.next;\r\n    const newNext = new DoubleLinkedNode(item);\r\n    newNext.prev = this;\r\n    this.next = newNext;\r\n    if (oldNext !== null) {\r\n      newNext.next = oldNext;\r\n      oldNext.prev = newNext;\r\n    }\r\n    return newNext;\r\n  }\r\n\r\n  public prepend(item: T): DoubleLinkedNode<T> {\r\n    const oldPrev = this.prev;\r\n    const newPrev = new DoubleLinkedNode(item);\r\n    newPrev.next = this;\r\n    this.prev = newPrev;\r\n    if (oldPrev !== null) {\r\n      oldPrev.next = newPrev;\r\n      newPrev.prev = oldPrev;\r\n    }\r\n    return newPrev;\r\n  }\r\n\r\n  public removePrev(): T | null {\r\n    if (this.prev === null) {\r\n      return null;\r\n    } else {\r\n      const value = this.prev.value;\r\n      this.prev = this.prev.prev;\r\n      if (this.prev !== null) {\r\n        this.prev.next = this;\r\n      }\r\n      return value;\r\n    }\r\n  }\r\n\r\n  public removeNext(): T | null {\r\n    if (this.next === null) {\r\n      return null;\r\n    } else {\r\n      const value = this.next.value;\r\n      this.next = this.next.next;\r\n      if (this.next !== null) {\r\n        this.next.prev = this;\r\n      }\r\n      return value;\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport class Tree<T> {\r\n  private subNodes: Array<Tree<T>> = [];\r\n  constructor(private element: T) { }\r\n\r\n  public get children(): Array<Tree<T>> {\r\n    return [...this.subNodes];\r\n  }\r\n\r\n  public get head() {\r\n    return this.element;\r\n  }\r\n\r\n  public append(e: T, to: T) {\r\n    if (this.element === to) {\r\n      this.subNodes.push(new Tree<T>(e));\r\n    }\r\n  }\r\n\r\n  public appendTree(e: Tree<T>) {\r\n    this.subNodes.push(e);\r\n  }\r\n}\r\n\r\nexport class CircularDoubleLinkedNode<T> {\r\n  // tslint:disable-next-line:variable-name\r\n  private _next: CircularDoubleLinkedNode<T> | null = null;\r\n  // tslint:disable-next-line:variable-name\r\n  private _prev: CircularDoubleLinkedNode<T> | null = null;\r\n  constructor(public value: T) {\r\n\r\n  }\r\n  public append(item: T): CircularDoubleLinkedNode<T> {\r\n    const newNext = new CircularDoubleLinkedNode<T>(item);\r\n    if (this._next === null) {\r\n      newNext._next = this;\r\n      newNext._prev = this;\r\n      this._next = newNext;\r\n      this._prev = newNext;\r\n    } else {\r\n      newNext._next = this._next;\r\n      newNext._next!._prev = newNext;\r\n      this._next = newNext;\r\n      newNext._prev = this;\r\n    }\r\n    return newNext;\r\n  }\r\n\r\n  public removePrevious(): T {\r\n    if (this._prev === null) {\r\n      throw Error(\"Cannot remove non existing element\");\r\n    } else {\r\n      const toRemove = this._prev;\r\n      this._prev = this._prev!._prev;\r\n      if (this._prev === this) {\r\n        this._prev = null;\r\n        this._next = null;\r\n      } else {\r\n        this._prev!._next = this;\r\n      }\r\n      toRemove!._prev = null;\r\n      toRemove!._next = null;\r\n      return toRemove!.value;\r\n    }\r\n  }\r\n\r\n  public removeNext(): T {\r\n    return this.next.next.removePrevious();\r\n  }\r\n\r\n  public getAllElements(): T[] {\r\n    const values: T[] = [this.value];\r\n    let current = this.next;\r\n    while (current && current !== this) {\r\n      values.push(current.value);\r\n      current = current.next;\r\n    }\r\n    return values;\r\n  }\r\n\r\n  public get prev(): CircularDoubleLinkedNode<T> {\r\n    if (this._prev === null) {\r\n      return this;\r\n    } else {\r\n      return this._prev;\r\n    }\r\n  }\r\n\r\n  public get next(): CircularDoubleLinkedNode<T> {\r\n    if (this._next === null) {\r\n      return this;\r\n    } else {\r\n      return this._next;\r\n    }\r\n  }\r\n\r\n  public prepend(item: T): CircularDoubleLinkedNode<T> {\r\n    return this.prev.append(item);\r\n  }\r\n}\r\n\r\n\r\nexport class SerializableSet<TValue> {\r\n\r\n    public get size(): number {\r\n        return this.set.size;\r\n    }\r\n    private readonly set: Set<string>;\r\n\r\n    constructor(private readonly ser: {\r\n      serialize(e: TValue): string, deserialize(e: string): TValue\r\n    },          data?: TValue[] | SerializableSet<TValue>) {\r\n        if (!data) {\r\n            this.set = new Set<string>();\r\n        } else if (Array.isArray(data)) {\r\n            this.set = new Set<string>(data.map((d) => this.serialize(d)));\r\n        } else {\r\n            this.set = new Set<string>(data.set);\r\n        }\r\n    }\r\n\r\n    public has(c: TValue): boolean {\r\n        return this.set.has(this.serialize(c));\r\n    }\r\n\r\n    public remove(c: TValue): boolean {\r\n        return this.set.delete(this.serialize(c));\r\n    }\r\n\r\n    public delete(c: TValue): boolean {\r\n        return this.remove(c);\r\n    }\r\n\r\n    public includes(c: TValue): boolean {\r\n        return this.has(c);\r\n    }\r\n\r\n    public addRange(c: Iterable<TValue>) {\r\n        for (const x of c) {\r\n          this.add(x);\r\n        }\r\n    }\r\n    public add(c: TValue) {\r\n          this.set.add(this.serialize(c as TValue));\r\n    }\r\n\r\n    public map<T>(f: (c: TValue) => T): Set<T> {\r\n        const res = new Set<T>();\r\n        this.set.forEach((e) => res.add(f(this.deserialize(e))));\r\n        return res;\r\n    }\r\n\r\n    public sameTypeMap(f: (c: TValue) => TValue): SerializableSet<TValue> {\r\n        const res: TValue[] = [];\r\n        this.set.forEach((e) => res.push(f(this.deserialize(e))));\r\n        return new SerializableSet<TValue>(this.ser, res);\r\n    }\r\n\r\n    public *values(): Iterable<TValue> {\r\n        for (const value of this.set.values()) {\r\n            yield this.deserialize(value);\r\n        }\r\n    }\r\n\r\n    public forEach(f: (c: TValue) => void) {\r\n        for (const value of this.set.values()) {\r\n            f(this.deserialize(value));\r\n        }\r\n    }\r\n\r\n    public hasSameValuesAs(other: SerializableSet<TValue>) {\r\n      for (const value of this.values()) {\r\n        if (!other.has(value)) {\r\n          return false;\r\n        }\r\n      }\r\n      return other.size === this.size;\r\n    }\r\n\r\n    private serialize(c: TValue): string {\r\n        return this.ser.serialize(c);\r\n    }\r\n\r\n    private deserialize(c: string): TValue {\r\n        return this.ser.deserialize(c);\r\n    }\r\n}\r\n\r\nexport class SerializableDictionary<TKey, TValue> {\r\n  private readonly dict: {[key: string]: TValue} = {};\r\n\r\n  constructor(private readonly serializer: ISerializer<TKey>) {\r\n    \r\n  }\r\n\r\n  public set(key: TKey, value: TValue) {\r\n    this.dict[this.serializer.serialize(key)] = value;\r\n  }\r\n\r\n  public get(key: TKey): TValue | undefined {\r\n    return this.dict[this.serializer.serialize(key)];\r\n  }\r\n\r\n  public has(key: TKey) {\r\n    return this.dict.hasOwnProperty(this.serializer.serialize(key));\r\n  }\r\n\r\n  public keys(): TKey[] {\r\n    return Object.keys(this.dict).map(this.serializer.deserialize);\r\n  }\r\n\r\n  public values(): TValue[] {\r\n    return Object.values(this.dict);\r\n  }\r\n\r\n  public entries(): {key: TKey, value: TValue}[] {\r\n    return Object.keys(this.dict).map(k => ({\r\n      key: this.serializer.deserialize(k),\r\n      value: this.dict[k]!\r\n    }));\r\n  }\r\n\r\n  public sameTypeMap(f: (key: TKey, value: TValue) => {key: TKey, value: TValue}): SerializableDictionary<TKey, TValue> {\r\n    const res = new SerializableDictionary<TKey, TValue>(this.serializer);\r\n    for (const entry of this.entries()) {\r\n      const {key, value} = f(entry.key, entry.value);\r\n      res.set(key, value);\r\n    }\r\n    return res;\r\n  }\r\n\r\n}\r\n\r\nexport class DefaultDict<TKey, TValue> {\r\n\r\n  public get keys(): Iterable<TKey> {\r\n    if (this.isDataSerializable(this.data)) {\r\n      return this.iterableKeys();\r\n    }\r\n    return this.data.keys();\r\n  }\r\n\r\n  public get values(): Iterable<TValue> {\r\n    return this.data.values();\r\n  }\r\n\r\n  public has(key: TKey): boolean {\r\n    if (this.isDataSerializable(this.data)) {\r\n      return this.data.has(this.serializer!.serialize(key));\r\n    } else {\r\n      return this.data.has(key);\r\n    }\r\n  }\r\n\r\n  public get publicData() {\r\n    return this.data;\r\n  }\r\n  private readonly data: Map<TKey, TValue> | Map<string, TValue>;\r\n  constructor(private readonly defaultValue: () => TValue, private readonly serializer: ISerializer<TKey> | null = null, private options?: {setOnGet: boolean}) {\r\n    if (this.serializer !== null) {\r\n      this.data = new Map<string, TValue>();\r\n    } else {\r\n      this.data = new Map<TKey, TValue>();\r\n    }\r\n  }\r\n\r\n  public set(key: TKey, v: TValue) {\r\n    if (this.isDataSerializable(this.data)) {\r\n      this.data.set(this.serializer!.serialize(key), v);\r\n    } else {\r\n      this.data.set(key, v);\r\n    }\r\n  }\r\n\r\n  public get(key: TKey): TValue {\r\n    const res = this.isDataSerializable(this.data) ?\r\n      this.data.get(this.serializer!.serialize(key))\r\n      : this.data.get(key);\r\n    if (res !== undefined) {\r\n      return res;\r\n    }\r\n    const v = this.defaultValue();\r\n    if (this.options && this.options.setOnGet) {\r\n      this.set(key, v);\r\n    }\r\n    return v;\r\n  }\r\n\r\n  public ensureAndGet(key: TKey): TValue {\r\n    const v = this.get(key);\r\n    this.set(key, v);\r\n    return v;\r\n  }\r\n\r\n  public update(key: TKey, f: (e: TValue) => TValue) {\r\n    this.set(key, f(this.get(key)));\r\n    return this;\r\n  }\r\n\r\n  public *[Symbol.iterator](): Iterator<{key: TKey, value: TValue}> {\r\n    if (this.isDataSerializable(this.data)) {\r\n      for (const entry of this.data) {\r\n        yield {\r\n          key: this.serializer!.deserialize(entry[0] as string),\r\n          value: entry[1]\r\n        };\r\n      }\r\n    } else {\r\n      for (const entry of this.data) {\r\n        yield {\r\n          key: entry[0],\r\n          value: entry[1]\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  private isDataSerializable(data: Map<TKey, TValue> | Map<string, TValue>): data is Map<string, TValue> {\r\n    return this.serializer !== null;\r\n  }\r\n\r\n  private *iterableKeys(): Iterable<TKey> {\r\n    if (this.isDataSerializable(this.data)) {\r\n      for (const key of this.data.keys()) {\r\n        yield this.serializer!.deserialize(key);\r\n      }\r\n    } else {\r\n      throw new Error(\"Should be called only with serializable\");\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport class DefaultNumberDict<TKey> extends DefaultDict<TKey, number> {\r\n  /**\r\n   *\r\n   */\r\n  constructor(serializer: ISerializer<TKey> | null = null) {\r\n    super(() => 0, serializer);\r\n  }\r\n\r\n  public incr(key: TKey, n: number = 1) {\r\n    return this.update(key, (v) => v + n);\r\n  }\r\n}\r\n","import { SimpleBest, ascending } from \"./best\";\r\nimport { coordinateToKey } from \"../entries/single-entries/2019/oxygen-system\";\r\nimport { SerializableSet } from \"./data-structure\";\r\n\r\nexport interface Coordinate {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport interface Coordinate3d extends Coordinate {\r\n    z: number;\r\n}\r\n\r\nexport interface Coordinate4d extends Coordinate3d {\r\n    w: number;\r\n}\r\n\r\nexport type FullCoordinate = Coordinate | Coordinate3d | Coordinate4d;\r\n\r\nfunction is4d(c: FullCoordinate): c is Coordinate4d {\r\n    return (c as Coordinate4d).w !== undefined;\r\n}\r\nfunction is3d(c: FullCoordinate): c is Coordinate3d {\r\n    return (c as Coordinate3d).z !== undefined && (c as Coordinate4d).w === undefined;\r\n}\r\n\r\nfunction is2d(c: FullCoordinate): c is Coordinate {\r\n    return (c as Coordinate3d).z === undefined;\r\n}\r\n\r\nfunction isBounds(c: Coordinate | Bounds): c is Bounds {\r\n    return (c as Bounds).size !== undefined;\r\n}\r\n\r\nexport class CCoordinate implements Coordinate {\r\n\r\n    public get opposite() {\r\n        return new CCoordinate(-this.x, -this.y);\r\n    }\r\n\r\n    public static fromCoordinate(c: Coordinate) {\r\n        return new CCoordinate(c.x, c.y);\r\n    }\r\n    public constructor(public x: number, public y: number) {\r\n\r\n    }\r\n\r\n    public isInBounds = (b: Bounds | Coordinate): boolean => {\r\n        if (isBounds(b)) {\r\n            return isInBounds(this, b);\r\n        } else {\r\n            return isInBounds(this, {\r\n                size: b,\r\n                topLeft: {\r\n                    x: 0,\r\n                    y: 0\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public is = (other: Coordinate) => {\r\n        return manhattanDistance(this, other) === 0;\r\n    }\r\n\r\n    public sum = (other: Coordinate) => {\r\n        const result = sumCoordinate(this, other);\r\n        return new CCoordinate(result.x, result.y);\r\n    }\r\n\r\n    public diff = (other: Coordinate) => {\r\n        const result = sumCoordinate(this, { x: -other.x, y: -other.y });\r\n        return new CCoordinate(result.x, result.y);\r\n    }\r\n\r\n    public toString(): string {\r\n        return `(${this.x},${this.y})`;\r\n    }\r\n\r\n    public times = (t: number): CCoordinate => {\r\n        const result = scalarCoordinates(this, t);\r\n        return new CCoordinate(result.x, result.y);\r\n    }\r\n}\r\n\r\nexport type LiteralDirection = \"v\" | \"^\" | \"<\" | \">\";\r\n\r\nexport const isLiteralDirection = (s: string): s is LiteralDirection => {\r\n    return [\"v\" , \"^\" , \"<\" , \">\"].includes(s);\r\n}\r\n\r\nexport const mapLiteralToDirection = (s: LiteralDirection): CCoordinate => {\r\n    if (s === \"v\") {\r\n        return directions.down;\r\n    } else if (s === \"<\") {\r\n        return directions.left;\r\n    } else if (s === \">\") {\r\n        return directions.right;\r\n    } else {\r\n        return directions.up;\r\n    }\r\n}\r\n\r\nexport const directions = {\r\n    up: new CCoordinate(0, -1),\r\n    down: new CCoordinate(0, 1),\r\n    left: new CCoordinate(-1, 0),\r\n    right: new CCoordinate(1, 0),\r\n    upLeft: new CCoordinate(-1, -1),\r\n    upRight: new CCoordinate(1, -1),\r\n    downLeft: new CCoordinate(-1, 1),\r\n    downRight: new CCoordinate(1, 1)\r\n};\r\n\r\nexport const drawStraightLine = (from: Coordinate, to: Coordinate, toIncluded: boolean): Coordinate[] => {\r\n    const result = [];\r\n    while (manhattanDistance(from, to) !== 0) {\r\n        result.push(from);\r\n        from = {x: from.x + Math.sign(to.x - from.x), y: from.y + Math.sign(to.y - from.y)};\r\n    }\r\n    if (toIncluded) {\r\n        result.push(to);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport const directionList = [\r\n    directions.up,\r\n    directions.down,\r\n    directions.left,\r\n    directions.right,\r\n    directions.upLeft,\r\n    directions.upRight,\r\n    directions.downLeft,\r\n    directions.downRight\r\n];\r\n\r\nexport type Rotation = \"Clockwise\" | \"Counterclockwise\" | \"None\";\r\nexport function rotate(\r\n    coordinate: CCoordinate,\r\n    direction: Rotation,\r\n    times: number = 1\r\n): CCoordinate {\r\n    if (times > 1) {\r\n        coordinate = rotate(coordinate, direction, times - 1);\r\n    }\r\n    switch (direction) {\r\n        case \"Counterclockwise\":\r\n            return new CCoordinate(coordinate.y, -coordinate.x);\r\n        case \"Clockwise\":\r\n            return new CCoordinate(-coordinate.y, coordinate.x);\r\n        case \"None\":\r\n            return coordinate;\r\n    }\r\n}\r\n\r\n\r\nfunction fillWithZero(c: Coordinate): Coordinate;\r\nfunction fillWithZero(c: Coordinate3d): Coordinate3d;\r\nfunction fillWithZero(c: Coordinate4d): Coordinate4d;\r\nfunction fillWithZero(c: FullCoordinate): FullCoordinate {\r\n    if (is4d(c)) {\r\n        if (!c.w) {\r\n            c.w = 0;\r\n        }\r\n        if (!c.z) {\r\n            c.z = 0;\r\n        }\r\n    }\r\n    if (is3d(c)) {\r\n        if (!c.z) {\r\n            c.z = 0;\r\n        }\r\n    }\r\n    if (!c.x) {\r\n        c.x = 0;\r\n    }\r\n    if (!c.y) {\r\n        c.y = 0;\r\n    }\r\n    return c;\r\n}\r\n\r\nexport interface Bounds {\r\n    topLeft: Coordinate;\r\n    size: Coordinate;\r\n}\r\n\r\nexport class CoordinateSet extends SerializableSet<Coordinate> {\r\n    /**\r\n     *\r\n     */\r\n    constructor(data: Coordinate[] | SerializableSet<Coordinate>) {\r\n        super(serialization, data);\r\n    }\r\n}\r\n\r\nexport function ascendingCompare(a: Coordinate, b: Coordinate): number {\r\n    if (b.y === a.y) {\r\n        return ascending(a.x, b.x);\r\n    } else {\r\n        return ascending(a.y, b.y);\r\n    }\r\n}\r\n\r\nexport function isInBounds(c: Coordinate, bounds: Bounds) {\r\n    return (\r\n        c.x >= bounds.topLeft.x &&\r\n        c.y >= bounds.topLeft.y &&\r\n        c.x < bounds.topLeft.x + bounds.size.x &&\r\n        c.y < bounds.topLeft.y + bounds.size.y\r\n    );\r\n}\r\n\r\nconst getCorners = (bounds: Bounds): Coordinate[] => {\r\n    return [\r\n        bounds.topLeft,\r\n        sumCoordinate(bounds.topLeft, bounds.size)\r\n    ];\r\n};\r\n\r\nexport const joinBoundaries = (...bounds: Bounds[]): Bounds => {\r\n    if (bounds.length < 1) {\r\n        throw new Error(\"Invalid bounds\");\r\n    }\r\n    let current = bounds[0];\r\n    for (let i = 1; i < bounds.length; i++) {\r\n        const currentCorners = getCorners(current);\r\n        const nextCorners = getCorners(bounds[i]);\r\n        current = getBoundaries([...currentCorners, ...nextCorners]);\r\n    }\r\n    return current;\r\n};\r\nexport const getBoundaries = (points: Coordinate[]): Bounds => {\r\n    if (points.length === 0) {\r\n        return {\r\n            topLeft: { x: 0, y: 0 },\r\n            size: { x: 0, y: 0 }\r\n        };\r\n    }\r\n    const { maxX, minX, maxY, minY } = getRanges(points);\r\n    const size = {\r\n        x: (maxX.currentBest! - minX.currentBest! + 1),\r\n        y: (maxY.currentBest! - minY.currentBest! + 1),\r\n    };\r\n    return {\r\n        topLeft: {\r\n            x: minX.currentBest!,\r\n            y: minY.currentBest!,\r\n        },\r\n        size,\r\n    };\r\n};\r\n\r\n\r\nexport function sumCoordinate(a: Coordinate4d, b: Coordinate4d): Coordinate4d;\r\nexport function sumCoordinate(a: Coordinate3d, b: Coordinate3d): Coordinate3d;\r\nexport function sumCoordinate(a: Coordinate, b: Coordinate): Coordinate;\r\nexport function sumCoordinate(a: FullCoordinate, b: FullCoordinate): FullCoordinate {\r\n    a = fillWithZero(a);\r\n    b = fillWithZero(b);\r\n    if (is4d(a) && is4d(b)) {\r\n        return {\r\n            x: a.x + b.x,\r\n            y: a.y + b.y,\r\n            z: a.z + b.z,\r\n            w: a.w + b.w,\r\n        };\r\n    } else if (is3d(a) && is3d(b)) {\r\n        return {\r\n            x: a.x + b.x,\r\n            y: a.y + b.y,\r\n            z: a.z + b.z\r\n        };\r\n    } else {\r\n        return {\r\n            x: a.x + b.x,\r\n            y: a.y + b.y,\r\n        };\r\n    }\r\n}\r\n\r\nexport function getTopLeftBottomRight(b: Bounds) {\r\n    return [b.topLeft, sumCoordinate(b.topLeft, b.size)];\r\n}\r\n\r\nexport function boundsIntersect(r1: Bounds, r2: Bounds) {\r\n  return !(r2.topLeft.x > r1.topLeft.x + r1.size.x ||\r\n           r2.topLeft.x + r2.size.x < r1.topLeft.x ||\r\n           r2.topLeft.y > r1.topLeft.y + r1.size.y ||\r\n           r2.topLeft.y + r2.size.y < r1.topLeft.y);\r\n}\r\n\r\nexport function boundsContain(outer: Bounds, inner: Bounds) {\r\n    return (\r\n        inner.topLeft.x >= outer.topLeft.x && inner.topLeft.x + inner.size.x <= outer.topLeft.x + outer.size.x &&\r\n        inner.topLeft.y >= outer.topLeft.y && inner.topLeft.y + inner.size.y <= outer.topLeft.y + outer.size.y\r\n    );\r\n}\r\n\r\nexport function getDirection(from: Coordinate, to: Coordinate): CCoordinate {\r\n    if (manhattanDistance(from, to) !== 1) {\r\n        throw new RangeError(\"Cannot move to distant cell\");\r\n    }\r\n    if (from.x > to.x) {\r\n        return directions.left;\r\n    } else if (from.x < to.x) {\r\n        return directions.right;\r\n    } else if (from.y > to.y) {\r\n        return directions.up;\r\n    } else if (from.y < to.y) {\r\n        return directions.down;\r\n    } else {\r\n        throw new Error(\"Something went wrong :(\");\r\n    }\r\n}\r\n\r\nexport const scalarCoordinates = (a: Coordinate, l: number) => ({ x: a.x * l, y: a.y * l });\r\n\r\nexport const oppositeCoordinate = (a: Coordinate): Coordinate => ({ x: -a.x, y: -a.y });\r\n\r\nexport const diffCoordinate = (a: Coordinate, b: Coordinate): Coordinate => sumCoordinate(a, oppositeCoordinate(b));\r\nexport const manhattanDistance = (a: FullCoordinate, b: FullCoordinate) => {\r\n    const w = (is4d(a) && is4d(b)) ? Math.abs(a.w - b.w) : 0;\r\n    const z = ((is3d(a) && is3d(b)) || (is4d(a) && is4d(b))) ? Math.abs(a.z - b.z) : 0;\r\n    return Math.abs(a.x - b.x) + Math.abs(a.y - b.y) + z + w;\r\n};\r\n\r\nexport const isSameCoordinate = (a: Coordinate, b: Coordinate) => manhattanDistance(a, b) === 0;\r\n\r\nexport function getSurrounding(c: FullCoordinate): FullCoordinate[];\r\nexport function getSurrounding(c: Coordinate4d): Coordinate4d[];\r\nexport function getSurrounding(c: Coordinate3d): Coordinate3d[];\r\nexport function getSurrounding(c: Coordinate): Coordinate[];\r\nexport function getSurrounding(c: FullCoordinate): FullCoordinate[] {\r\n    if (is2d(c)) {\r\n        return [\r\n            directions.up,\r\n            directions.left,\r\n            directions.down,\r\n            directions.right\r\n        ].map((d) => d.sum(c));\r\n    } else {\r\n        return getFullSurrounding(c).filter((e) => manhattanDistance(c, e) === 1);\r\n    }\r\n}\r\n\r\nexport function getFullSurrounding(coordinate: Coordinate): Coordinate[];\r\nexport function getFullSurrounding(coordinate: FullCoordinate): FullCoordinate[];\r\nexport function getFullSurrounding(coordinate: Coordinate4d): Coordinate4d[];\r\nexport function getFullSurrounding(coordinate: Coordinate3d): Coordinate3d[];\r\nexport function getFullSurrounding(coordinate: FullCoordinate): FullCoordinate[] {\r\n    if (is4d(coordinate)) {\r\n        const result: Coordinate4d[] = [];\r\n        const deltas = [-1, 0, 1];\r\n        for (const x of deltas) {\r\n            for (const y of deltas) {\r\n                for (const z of deltas) {\r\n                    for (const w of deltas) {\r\n                        const neighbour = sumCoordinate(coordinate, { x, y, z, w });\r\n                        if (manhattanDistance(neighbour, coordinate) === 0) {\r\n                            continue;\r\n                        }\r\n                        result.push(neighbour);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    } else if (is2d(coordinate)) {\r\n        const c = coordinate;\r\n        return [\r\n            directions.up,\r\n            directions.left,\r\n            directions.down,\r\n            directions.right,\r\n            directions.upLeft,\r\n            directions.upRight,\r\n            directions.downLeft,\r\n            directions.downRight,\r\n        ].map((d) => d.sum(c));\r\n    } else {\r\n        const result: Coordinate3d[] = [];\r\n        const deltas = [-1, 0, 1];\r\n        for (const x of deltas) {\r\n            for (const y of deltas) {\r\n                for (const z of deltas) {\r\n                    const neighbour = sumCoordinate(coordinate, { x, y, z });\r\n                    if (manhattanDistance(neighbour, coordinate) === 0) {\r\n                        continue;\r\n                    }\r\n                    result.push(neighbour);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\nexport function getRanges(points: Coordinate[]) {\r\n    const minComparator = (a: number, b: number) => b - a;\r\n    const maxComparator = (a: number, b: number) => a - b;\r\n    const minX = new SimpleBest<number>(minComparator);\r\n    const maxX = new SimpleBest<number>(maxComparator);\r\n    const minY = new SimpleBest<number>(minComparator);\r\n    const maxY = new SimpleBest<number>(maxComparator);\r\n    points.forEach((p) => {\r\n        minX.add(p.x);\r\n        maxX.add(p.x);\r\n        minY.add(p.y);\r\n        maxY.add(p.y);\r\n    });\r\n    return { maxX, minX, maxY, minY };\r\n}\r\n\r\nexport function getCoordinateForGrid(index: number, rows: number): Coordinate {\r\n    return {\r\n        x: Math.floor(index / rows),\r\n        y: index % rows\r\n    };\r\n}\r\n\r\n\r\nexport const serialization = {\r\n    serialize(c: FullCoordinate): string {\r\n        const els = [c.x, c.y];\r\n        if (is3d(c)) {\r\n            els.push(c.z);\r\n        } else if (is4d(c)) {\r\n            els.push(c.z);\r\n            els.push(c.w);\r\n        }\r\n        return els.join(\"|\");\r\n    },\r\n    deserialize4d(s: string): Coordinate4d {\r\n        const split = s.split(\"|\").map((e) => parseInt(e, 10));\r\n        if (split.length !== 4) {\r\n            throw new RangeError(\"Could not deserialize \" + s);\r\n        }\r\n        return {\r\n            x: split[0],\r\n            y: split[1],\r\n            z: split[2],\r\n            w: split[3],\r\n        };\r\n    },\r\n    deserialize3d(s: string): Coordinate3d {\r\n        const split = s.split(\"|\").map((e) => parseInt(e, 10));\r\n        if (split.length !== 3) {\r\n            throw new RangeError(\"Could not deserialize \" + s);\r\n        }\r\n        return {\r\n            x: split[0],\r\n            y: split[1],\r\n            z: split[2]\r\n        };\r\n    },\r\n    deserialize(s: string): Coordinate {\r\n        const split = s.split(\"|\");\r\n        if (split.length !== 2) {\r\n            throw new RangeError(\"Could not deserialize \" + s);\r\n        }\r\n        return {\r\n            x: parseInt(split[0], 10),\r\n            y: parseInt(split[1], 10)\r\n        };\r\n    }\r\n};\r\n\r\nexport const euclidean3dDistance = (a: Coordinate3d, b: Coordinate3d): number => {\r\n    return Math.sqrt((b.x - a.x) ** 2 + (b.y - a.y) ** 2 + (b.z - a.z) ** 2);\r\n};\r\n\r\nexport const multiplyCoordinate = (a: Coordinate, b: Coordinate): Coordinate => {\r\n    return {\r\n        x: a.x * b.x,\r\n        y: a.y * b.y\r\n    };\r\n};\r\nexport const floatRotateRadians = (center: Coordinate, point: Coordinate, angle: number): Coordinate => {\r\n    const { x: cx, y: cy } = center;\r\n    const { x, y } = point;\r\n    const cos = Math.cos(angle);\r\n    const sin = Math.sin(angle);\r\n    const nx = (cos * (x - cx)) + (sin * (y - cy)) + cx;\r\n    const ny = (cos * (y - cy)) - (sin * (x - cx)) + cy;\r\n    return { x: nx, y: ny };\r\n};\r\n\r\nexport const floatRotate = (center: Coordinate, point: Coordinate, angle: number): Coordinate => {\r\n    const { x: cx, y: cy } = center;\r\n    const { x, y } = point;\r\n    const radians = (Math.PI / 180) * angle;\r\n    const cos = Math.cos(radians);\r\n    const sin = Math.sin(radians);\r\n    const nx = (cos * (x - cx)) + (sin * (y - cy)) + cx;\r\n    const ny = (cos * (y - cy)) - (sin * (x - cx)) + cy;\r\n    return { x: nx, y: ny };\r\n};\r\n","import { entryForFile } from \"../../entry\";\r\nimport { directions, serialization, CCoordinate } from \"../../../support/geometry\";\r\n\r\ntype Directions = \">\" | \"<\" | \"^\" | \"v\";\r\n\r\nexport const perfectSphericalHousesInAVacuum = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const visited = new Set<string>();\r\n        const startPosition = {\r\n            x: 0,\r\n            y: 0\r\n        };\r\n        const directionMapper: {[key: string]: CCoordinate} = {\r\n            \">\": directions.right,\r\n            \"<\": directions.left,\r\n            \"^\": directions.up,\r\n            \"v\": directions.down\r\n        };\r\n        let currentPosition = {...startPosition};\r\n\r\n        visited.add(serialization.serialize(currentPosition));\r\n\r\n        lines[0].split(\"\").forEach((c) => {\r\n            currentPosition = directionMapper[c].sum(currentPosition);\r\n            visited.add(serialization.serialize(currentPosition));\r\n        });\r\n        await outputCallback(visited.size);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const visited = new Set<string>();\r\n        const startPosition = {\r\n            x: 0,\r\n            y: 0\r\n        };\r\n        const directionMapper: {[key: string]: CCoordinate} = {\r\n            \">\": directions.right,\r\n            \"<\": directions.left,\r\n            \"^\": directions.up,\r\n            \"v\": directions.down\r\n        };\r\n        const currentPositions = [{...startPosition}, {...startPosition}];\r\n\r\n        visited.add(serialization.serialize(startPosition));\r\n\r\n        let next = 0;\r\n        lines[0].split(\"\").forEach((c) => {\r\n            currentPositions[next] = directionMapper[c].sum(currentPositions[next]);\r\n            visited.add(serialization.serialize(currentPositions[next]));\r\n            next = (next + 1) % currentPositions.length;\r\n        });\r\n        await outputCallback(visited.size);\r\n    },\r\n    {\r\n        key: \"perfect-spherical-houses-in-a-vacuum\",\r\n        title: \"Perfect Spherical Houses in a Vacuum\",\r\n        stars: 2\r\n    }\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\nimport {Md5} from \"ts-md5\";\r\n\r\nconst hasLeadingZeros = (s: string, n: number): boolean => {\r\n    for (let i = 0; i < n; i++) {\r\n        if (s[i] !== \"0\") {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\n\r\nexport const theIdealStockingStuffer = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const key = lines[0].trim();\r\n        let i = 1;\r\n        while (true) {\r\n            const hashed = Md5.hashAsciiStr(key + i) as string;\r\n            if (hasLeadingZeros(hashed, 5)) {\r\n                await outputCallback(\"Found it: \" + i);\r\n                return;\r\n            }\r\n            i++;\r\n        }\r\n\r\n        await outputCallback(hasLeadingZeros(Md5.hashAsciiStr(key) as string, 1));\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const key = lines[0].trim();\r\n        let i = 1;\r\n        while (true) {\r\n            const hashed = Md5.hashAsciiStr(key + i) as string;\r\n            if (hasLeadingZeros(hashed, 6)) {\r\n                await outputCallback(\"Found it: \" + i);\r\n                return;\r\n            }\r\n            i++;\r\n        }\r\n    },\r\n    {\r\n        key: \"the-ideal-stocking-stuffer\",\r\n        title: \"The Ideal Stocking Stuffer\",\r\n        stars: 2,\r\n        embeddedData: true\r\n    }\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\n\r\nconst calculateHasDuplicates = (s: string): boolean => {\r\n    for (let i = 1; i < s.length; i++) {\r\n        if (s[i] === s[i - 1]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nconst buildGroups = (s: string, size: number): string[] => {\r\n    const res: string[] = [];\r\n    for (let i = 0; i <= s.length - size; i++) {\r\n        res.push(s.slice(i, i + size));\r\n    }\r\n    return res;\r\n};\r\nconst isNice = (s: string): boolean => {\r\n    const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\r\n    const howManyVowels = s.split(\"\").filter((c) => vowels.indexOf(c) >= 0).length;\r\n    const hasDuplicates = calculateHasDuplicates(s);\r\n    const hasForbidden = [\"ab\", \"cd\", \"pq\", \"xy\"].filter((e) => s.indexOf(e) >= 0).length > 0;\r\n\r\n    const conditions = [(howManyVowels >= 3), hasDuplicates, !hasForbidden];\r\n    return conditions.reduce((acc, next) => acc && next);\r\n};\r\n\r\nconst hasNicePairs = (s: string): boolean => {\r\n    const pairs = buildGroups(s, 2);\r\n    for (let i = 0; i < pairs.length; i++) {\r\n        if (pairs.lastIndexOf(pairs[i]) > i + 1) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nconst hasNiceTrios = (s: string): boolean => {\r\n    const trios = buildGroups(s, 3);\r\n    for (const trio of trios) {\r\n        if (trio[0] === trio[2]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const internElves = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const niceLines = lines.filter(isNice);\r\n        await outputCallback(niceLines.length);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const niceLines = lines.filter((line) => hasNicePairs(line) && hasNiceTrios(line));\r\n        await outputCallback(niceLines.length);\r\n    },\r\n    {\r\n        key: \"intern-elves\",\r\n        title: \"Doesn't He Have Intern-Elves For This?\",\r\n        stars: 2\r\n    }\r\n);\r\n","export async function forEachAsync<T>(data: T[], action: ((e: T) => Promise<void>)) {\r\n    for (const element of data) {\r\n        await action(element);\r\n    }\r\n}\r\n\r\nexport async function mapAsync<T, U>(data: T[], action: ((e: T) => Promise<U>)): Promise<U[]> {\r\n    const res = [];\r\n    for (const element of data) {\r\n        res.push(await action(element));\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function setTimeoutAsync(timeout: number): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => setTimeout(() => resolve(), timeout));\r\n}\r\nexport function voidIsPromise(e: void | Promise<void>): e is Promise<void> {\r\n    const casted = e as Promise<void>;\r\n    return casted && casted.then !== undefined;\r\n}\r\n\r\nexport function isPromise(e: void | Promise<any>): e is Promise<any> {\r\n    const casted = e as Promise<any>;\r\n    return casted && casted.then !== undefined;\r\n}\r\n","import { Coordinate, CCoordinate, manhattanDistance } from \"./geometry\";\r\nimport wu, { zip } from \"wu\";\r\nimport { voidIsPromise, isPromise } from \"./async\";\r\n\r\nexport class FixedSizeMatrix<T> {\r\n\r\n    public get delta() {\r\n        return this._delta;\r\n    }\r\n\r\n    public getRow(y: number): T[] {\r\n        const res: T[] = [];\r\n        if (y < 0 || y >= this.size.y) {\r\n            throw new Error(\"Invalid index \" + y);\r\n        }\r\n        for (let x = 0; x < this.size.x; x++) {\r\n            const v = this.get({x,y})!;\r\n            res.push(v)\r\n        }\r\n        return res;\r\n    }\r\n\r\n    public getColumn(x: number): T[] {\r\n        const res: T[] = [];\r\n        if (x < 0 || x >= this.size.x) {\r\n            throw new Error(\"Invalid index \" + x);\r\n        }\r\n        for (let y = 0; y < this.size.y; y++) {\r\n            const v = this.get({x,y})!;\r\n            res.push(v)\r\n        }\r\n        return res;\r\n    }\r\n\r\n    public static fromLines<T>(lines: string[], parser: (e: string) => T): FixedSizeMatrix<T> {\r\n        return FixedSizeMatrix.fromPlain(lines.map(l => l.split(\"\").map(parser)));\r\n    }\r\n\r\n    public static fromPlain<T>(data: T[][]): FixedSizeMatrix<T> {\r\n        const size = {x: data[0].length, y: data.length};\r\n        const matrix = new FixedSizeMatrix<T>(size);\r\n        for (let x = 0; x < matrix.size.x; x++) {\r\n            for (let y = 0; y < matrix.size.y; y++) {\r\n                matrix.set({x, y}, data[y][x]);\r\n            }\r\n        }\r\n        return matrix;\r\n    }\r\n\r\n    public static fromSingleDigitInput(data: string[]): FixedSizeMatrix<number> {\r\n        return this.fromPlain(data.map((d) => d.split(\"\").map((e) => parseInt(e, 10))));\r\n    }\r\n    public data: Array<T | undefined>;\r\n\r\n    private _delta: CCoordinate = new CCoordinate(0, 0);\r\n    constructor(public size: Coordinate) {\r\n        this.data = new Array<(T | undefined)>(size.x * size.y);\r\n    }\r\n\r\n    public getFlatData(): T[] {\r\n        return this.data.filter((e) => e) as T[];\r\n    }\r\n\r\n    public map<U>(mapper: (e: T | undefined, c: Coordinate) => U): FixedSizeMatrix<U> {\r\n        const result = new FixedSizeMatrix<U>(this.size);\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            const c = this.coordinateCalculator(i);\r\n            result.data[i] = mapper(this.data[i], c);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public setDelta(delta: CCoordinate) {\r\n        this._delta = delta;\r\n    }\r\n\r\n    public fill(fillValue: T | undefined) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            this.data[i] = fillValue;\r\n        }\r\n    }\r\n\r\n    public fillFactory(fillValueFactory: (c: Coordinate) => T) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            this.data[i] = fillValueFactory(this.coordinateCalculator(i));\r\n        }\r\n    }\r\n\r\n    public setFlatData(a: T[]) {\r\n        if (a.length !== this.data.length) {\r\n            throw new Error(\"Wrong size!\");\r\n        }\r\n        this.data = [...a];\r\n    }\r\n    public get(c: Coordinate): T | undefined {\r\n        c = this._delta.opposite.sum(c);\r\n        const index = this.indexCalculator(c);\r\n        if (index !== null) {\r\n            return this.data[index];\r\n        }\r\n    }\r\n\r\n    public getUnsafe(c: Coordinate): T {\r\n        c = this._delta.opposite.sum(c);\r\n        const index = this.indexCalculator(c);\r\n        if (index === null) {\r\n            throw new Error(\"Invalid index in matrix\");\r\n        }\r\n        const e = this.data[index];\r\n        if (e === undefined) {\r\n            throw new Error(\"Invalid value in matrix\");\r\n\r\n        }\r\n        return e;\r\n    }\r\n\r\n    public reduce<TAcc>(\r\n        callback: ((accumulator: TAcc, next: {coordinate: Coordinate, cell: T | undefined}) => TAcc),\r\n        startAccumulator: TAcc\r\n    ): TAcc {\r\n        for (let y = 0; y < this.size.y; y++) {\r\n            for (let x = 0; x < this.size.x; x++) {\r\n                startAccumulator = callback(startAccumulator, {coordinate: {x, y}, cell: this.get({x, y})});\r\n            }\r\n        }\r\n        return startAccumulator;\r\n    }\r\n\r\n    public findOne(predicate: (cell: T) => boolean): Coordinate | null {\r\n        return this.findOneWithCoordinate((cell, coordinate) => predicate(cell));\r\n    }\r\n\r\n    public findOneWithCoordinate(predicate: (cell: T, coordinate: Coordinate) => boolean): Coordinate | null {\r\n        for (let x = 0; x < this.size.x; x++) {\r\n            for (let y = 0; y < this.size.y; y++) {\r\n                if (predicate(this.get({ x, y })!, {x, y})) {\r\n                    return this._delta.sum({ x, y });\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public async onEveryCell<U>(\r\n        callback: (c: Coordinate, e: T | undefined) =>\r\n            Promise<U | undefined> | void\r\n    ): Promise<U | undefined> {\r\n        for (let x = 0; x < this.size.x; x++) {\r\n            for (let y = 0; y < this.size.y; y++) {\r\n                const res = callback(this._delta.sum({ x, y }), this.get(this._delta.sum({ x, y })));\r\n                if (isPromise(res)) {\r\n                    const awaited = await res;\r\n                    if (awaited !== undefined) {\r\n                        return awaited;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public onEveryCellSyncUnsafe<U>(callback: (c: Coordinate, e: T) => void | U): void | U {\r\n        for (let x = 0; x < this.size.x; x++) {\r\n            for (let y = 0; y < this.size.y; y++) {\r\n                const c = this._delta.sum({x, y});\r\n                const e = this.getUnsafe(c);\r\n                const res = callback(c, e);\r\n                if (res !== undefined) {\r\n                    return res;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public filter(predicate: (c: Coordinate, e: T | undefined) => boolean): Coordinate[] {\r\n        const result = [];\r\n        for (let x = 0; x < this.size.x; x++) {\r\n            for (let y = 0; y < this.size.y; y++) {\r\n                const lc = this._delta.sum({x, y});\r\n                const e = this.get(lc);\r\n                const res = predicate(lc, e);\r\n                if (res) {\r\n                    result.push({x,y});\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public onEveryCellSync<U>(callback: (c: Coordinate, e: T | undefined) => void | U): void | U {\r\n        for (let x = 0; x < this.size.x; x++) {\r\n            for (let y = 0; y < this.size.y; y++) {\r\n                const res = callback(this._delta.sum({ x, y }), this.get(this._delta.sum({ x, y })));\r\n                if (res !== undefined) {\r\n                    return res;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public set(c: Coordinate, value: T | undefined) {\r\n        c = this._delta.opposite.sum(c);\r\n        const index = this.indexCalculator(c);\r\n        if (index !== null) {\r\n            this.data[index] = value;\r\n        }\r\n    }\r\n\r\n    public copy(): FixedSizeMatrix<T> {\r\n        const newMatrix = new FixedSizeMatrix<T>(this.size);\r\n        newMatrix.data = this.data.slice();\r\n        return newMatrix;\r\n    }\r\n\r\n    public *overRows() {\r\n        for (let rowIndex = 0; rowIndex < this.size.y; rowIndex++) {\r\n            const startIndex = this.indexCalculator({ x: 0, y: rowIndex });\r\n            const endIndex = this.indexCalculator({ x: this.size.x - 1, y: rowIndex });\r\n            if (startIndex !== null && endIndex !== null) {\r\n                yield this.data.slice(\r\n                    startIndex,\r\n                    endIndex + 1\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    public toString(stringifier: (cell: T | undefined, coordinate: Coordinate) => string | undefined): string {\r\n        let rowIndex = -1;\r\n        const serialized = wu(this.overRows()).map((row) => {\r\n            rowIndex++;\r\n            const res = [];\r\n            for (let i = 0; i < row.length; i++) {\r\n                const stringified = stringifier(row[i], this._delta.sum({x: i, y: rowIndex}));\r\n                res.push(stringified === undefined ? \" \" : stringified);\r\n            }\r\n            return res.join(\"\");\r\n        }).toArray().join(\"\\n\");\r\n        return serialized;\r\n    }\r\n\r\n    public simpleSerialize(): string {\r\n        return this.data.join(\"\");\r\n    }\r\n\r\n    public isSameAs(\r\n        other: FixedSizeMatrix<T>,\r\n        customComparer?: (a: (T | undefined), b: (T | undefined)\r\n    ) => boolean): boolean {\r\n        if (manhattanDistance(this.size, other.size) !== 0) {\r\n            return false;\r\n        }\r\n        const thisFlatData = this.data;\r\n        const otherFlatData = other.data;\r\n        for (const tuple of zip(thisFlatData, otherFlatData)) {\r\n            if (customComparer) {\r\n                return customComparer(tuple[0], tuple[1]);\r\n            }\r\n            if (tuple[0] !== tuple[1]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private indexCalculator(c: Coordinate): number | null {\r\n        if (c.y < 0 || c.x < 0 || c.x >= this.size.x || c.y >= this.size.y) {\r\n            return null;\r\n        }\r\n        return c.y * this.size.x + c.x;\r\n    }\r\n\r\n    private coordinateCalculator(i: number): Coordinate {\r\n        if (i < 0 || i >= this.data.length) {\r\n            throw new Error(\"Invalid index\");\r\n        }\r\n        return {x: i % this.size.x, y: Math.floor(i / this.size.x)};\r\n    }\r\n}\r\n","import { entryForFile } from \"../../entry\";\r\nimport { FixedSizeMatrix } from \"../../../support/matrix\";\r\n\r\nexport const probablyAFireHazard = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const field = new FixedSizeMatrix<boolean>({x: 1000, y: 1000});\r\n        lines.forEach((line) => {\r\n            let delta: number | null = null;\r\n            let mapper: ((original: boolean) => boolean) | null = null;\r\n            if (line.startsWith(\"turn on\")) {\r\n                delta = 2;\r\n                mapper = ((_) => true);\r\n            } else if (line.startsWith(\"toggle\")) {\r\n                delta = 1;\r\n                mapper = ((x) => !x);\r\n            } else if (line.startsWith(\"turn off\")) {\r\n                delta = 2;\r\n                mapper = ((_) => false);\r\n            } else {\r\n                throw new Error(\"Unexpected line\");\r\n            }\r\n            const tokens = line.split(\" \");\r\n            const [top, left] = tokens[delta].split(\",\").map((e) => parseInt(e, 10));\r\n            const [bottom, right] = tokens[delta + 2].split(\",\").map((e) => parseInt(e, 10));\r\n            for (let x = left; x <= right; x++) {\r\n                for (let y = top; y <= bottom; y++) {\r\n                    field.set({x, y}, mapper(field.get({x, y}) || false));\r\n                }\r\n            }\r\n        });\r\n        const count = field.reduce((acc, next) => acc + (next.cell ? 1 : 0), 0);\r\n        await outputCallback(count);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const field = new FixedSizeMatrix<number>({x: 1000, y: 1000});\r\n        field.fill(0);\r\n        lines.forEach((line) => {\r\n            let delta: number | null = null;\r\n            let mapper: ((original: number) => number) | null = null;\r\n            if (line.startsWith(\"turn on\")) {\r\n                delta = 2;\r\n                mapper = ((n) => n + 1);\r\n            } else if (line.startsWith(\"toggle\")) {\r\n                delta = 1;\r\n                mapper = ((n) => n + 2);\r\n            } else if (line.startsWith(\"turn off\")) {\r\n                delta = 2;\r\n                mapper = ((n) => Math.max(n - 1, 0));\r\n            } else {\r\n                throw new Error(\"Unexpected line\");\r\n            }\r\n            const tokens = line.split(\" \");\r\n            const [top, left] = tokens[delta].split(\",\").map((e) => parseInt(e, 10));\r\n            const [bottom, right] = tokens[delta + 2].split(\",\").map((e) => parseInt(e, 10));\r\n            for (let x = left; x <= right; x++) {\r\n                for (let y = top; y <= bottom; y++) {\r\n                    field.set({x, y}, mapper(field.get({x, y}) || 0));\r\n                }\r\n            }\r\n        });\r\n        const count = field.reduce((acc, next) => acc + (next.cell || 0), 0);\r\n        await outputCallback(count);\r\n    },\r\n    { key: \"probably-a-fire-hazard\", title: \"Probably a Fire Hazard\", stars: 2}\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\n\r\ntype State = Map<string, number>;\r\n\r\ntype Operation = {\r\n    operator: \"NOT\",\r\n    input: number | string;\r\n} | {\r\n    operator: \"AND\",\r\n    a: string | number;\r\n    b: string;\r\n} | {\r\n    operator: \"OR\",\r\n    a: string;\r\n    b: string;\r\n} | {\r\n    operator: \"RSHIFT\",\r\n    input: string;\r\n    amount: number;\r\n} | {\r\n    operator: \"LSHIFT\",\r\n    input: string,\r\n    amount: number\r\n} | {\r\n    operator: \"VALUE\",\r\n    amount: number | string\r\n};\r\n\r\ninterface InputLine {\r\n    destination: string;\r\n    operation: Operation;\r\n}\r\n\r\nconst parseInput = (lines: string[]): InputLine[] => {\r\n    const parsed: InputLine[] = lines.map((line) => {\r\n        const [left, destination] = line.split(\" -> \");\r\n        const tokens = left.split(\" \");\r\n        if (tokens[0] === \"NOT\") {\r\n            return {\r\n                destination,\r\n                operation: {\r\n                    operator: \"NOT\",\r\n                    input: parseNumberOrString(tokens[1])\r\n                }\r\n            };\r\n        }\r\n        switch (tokens[1]) {\r\n            case \"OR\":\r\n                return {\r\n                    destination,\r\n                    operation: {\r\n                        operator: \"OR\",\r\n                        a: tokens[0],\r\n                        b: tokens[2]\r\n                    }\r\n                };\r\n            case \"AND\":\r\n                return {\r\n                    destination,\r\n                    operation: {\r\n                        operator: \"AND\",\r\n                        a: parseNumberOrString(tokens[0]),\r\n                        b: tokens[2]\r\n                    }\r\n                };\r\n            case \"RSHIFT\":\r\n                return {\r\n                    destination,\r\n                    operation: {\r\n                        operator: \"RSHIFT\",\r\n                        input: tokens[0],\r\n                        amount: parseInt(tokens[2], 10)\r\n                    }\r\n                };\r\n            case \"LSHIFT\":\r\n                return {\r\n                    destination,\r\n                    operation: {\r\n                        operator: \"LSHIFT\",\r\n                        input: tokens[0],\r\n                        amount: parseInt(tokens[2], 10)\r\n                    }\r\n                };\r\n            default:\r\n                return {\r\n                    destination,\r\n                    operation: {\r\n                        operator: \"VALUE\",\r\n                        amount: parseNumberOrString(tokens[0])\r\n                    }\r\n                };\r\n        }\r\n    });\r\n    return parsed;\r\n};\r\n\r\nconst parseNumberOrString = (s: string): number | string => {\r\n    const parsed = parseInt(s, 10);\r\n    const isNumber = parsed.toString() === s;\r\n    return isNumber ? parsed : s;\r\n};\r\n\r\nconst calculate = (wire: string | number, state: State, input: InputLine[]): number => {\r\n    if (typeof(wire) !== \"string\") {\r\n        return wire;\r\n    }\r\n    if (state.has(wire)) {\r\n        return state.get(wire)!;\r\n    }\r\n    const [rule] = input.filter((line) => line.destination === wire);\r\n    if (!rule) {\r\n        throw new Error(\"Cannot parse rule for: \" + wire);\r\n    }\r\n    const value = handleOperation(rule, state, input);\r\n    if (Number.isNaN(value)) {\r\n        throw new Error(\"Got none from: \" + JSON.stringify(rule));\r\n    }\r\n    state.set(wire, value);\r\n    return value;\r\n\r\n};\r\n\r\nconst handleOperation = (rule: InputLine, state: State, input: InputLine[]): number => {\r\n    switch (rule.operation.operator) {\r\n        case \"VALUE\": {\r\n                if (typeof(rule.operation.amount) === \"string\") {\r\n                    return calculate(rule.operation.amount, state, input);\r\n                } else {\r\n                    return rule.operation.amount;\r\n                }\r\n            }\r\n        case \"AND\": {\r\n                const a = calculate(rule.operation.a, state, input);\r\n                const b = calculate(rule.operation.b, state, input);\r\n                return a & b;\r\n            }\r\n        case \"OR\": {\r\n                const a = calculate(rule.operation.a, state, input);\r\n                const b = calculate(rule.operation.b, state, input);\r\n                return a | b;\r\n            }\r\n        case \"LSHIFT\": {\r\n                const i = calculate(rule.operation.input, state, input);\r\n                return i << calculate(rule.operation.amount, state, input);\r\n            }\r\n        case \"RSHIFT\": {\r\n                const i = calculate(rule.operation.input, state, input);\r\n                return i >>> calculate(rule.operation.amount, state, input);\r\n            }\r\n        case \"NOT\": {\r\n                const i = calculate(rule.operation.input, state, input);\r\n                return ~i;\r\n            }\r\n    }\r\n};\r\n\r\nexport const someAssemblyRequired = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const state = new Map<string, number>();\r\n        const input = parseInput(lines);\r\n        const value = calculate(\"a\", state, input);\r\n        await outputCallback(value);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const state = new Map<string, number>();\r\n        const input = parseInput(lines);\r\n        const value = calculate(\"a\", state, input);\r\n        const newInput: InputLine[] = input.map((line) => line.destination === \"b\" ? {\r\n            ...line,\r\n            operation: {\r\n                operator: \"VALUE\",\r\n                amount: value\r\n            }\r\n        } : line);\r\n        const newValue = calculate(\"a\", new Map<string, number>(), newInput);\r\n        await outputCallback(newValue);\r\n    },\r\n    { key: \"some-assembly-required\", title: \"Some Assembly Required\", stars: 2, embeddedData: true}\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\n\r\nconst countRealLetters = (line: string): number => {\r\n    let isEscaped = false;\r\n    let skip = 0;\r\n    const sliced = line.slice(1, line.length - 1);\r\n    let realCount = 0;\r\n    for (const c of sliced) {\r\n        if (skip > 0) {\r\n            skip--;\r\n        } else if (isEscaped) {\r\n            if (c === \"x\") {\r\n                skip = 2;\r\n            }\r\n            isEscaped = false;\r\n        } else {\r\n            if (c === \"\\\\\") {\r\n                isEscaped = true;\r\n            }\r\n            realCount++;\r\n        }\r\n    }\r\n    return realCount;\r\n};\r\n\r\nconst countEncoded = (line: string): number => {\r\n    let count = 2;\r\n    for (const c of line) {\r\n        if (c === \"\\\"\" || c === \"\\\\\") {\r\n            count++;\r\n        }\r\n        count++;\r\n    }\r\n    return count;\r\n};\r\n\r\nexport const matchsticks = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const overhead = lines\r\n            .map((line) => line.length - countRealLetters(line))\r\n            .reduce((acc, next) => acc + next);\r\n        await outputCallback(overhead);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const encoded = lines\r\n            .map((line) => countEncoded(line) - line.length)\r\n            .reduce((acc, next) => acc + next);\r\n        await outputCallback(encoded);\r\n    },\r\n    { key: \"matchsticks\", title: \"Matchsticks\", stars: 2}\r\n);\r\n","export function howManySameAtEnd<T>(sequence: T[]): number {\r\n    if (!sequence || sequence.length === 0) {\r\n        return 0;\r\n    }\r\n    let counter = 1;\r\n    const lastElement: T = sequence[sequence.length - 1];\r\n    for (let i = sequence.length - 2; i >= 0; i--) {\r\n        if (lastElement === sequence[i]) {\r\n            counter++;\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n    return counter;\r\n}\r\n\r\nexport const it = <T, >(e: Iterable<T>): MyIterable<T> => new MyIterable(e);\r\n\r\nexport class MyAsyncIterable<T> implements AsyncIterable<T> {\r\n\r\n    public static fromIterable<T>(data: Iterable<T>) {\r\n        async function *generator() {\r\n            for (const item of data) {\r\n                yield item;\r\n            }\r\n        }\r\n        return new MyAsyncIterable(generator());\r\n    }\r\n    /**\r\n     *\r\n     */\r\n    constructor(private data: AsyncIterable<T>) {\r\n    }\r\n    public async *[Symbol.asyncIterator](): AsyncIterableIterator<T> {\r\n        for await (const item of this.data) {\r\n            yield item;\r\n        }\r\n    }\r\n\r\n    public zip<U>(other: Iterable<U>): MyAsyncIterable<[T, U]> {\r\n        const that = this;\r\n        async function* inner() {\r\n            const thisIterator = that[Symbol.asyncIterator]();\r\n            const otherIterator = other[Symbol.iterator]();\r\n            while (true) {\r\n                const a = await thisIterator.next();\r\n                if (a.done) {\r\n                    return;\r\n                }\r\n                const b = otherIterator.next();\r\n                if (b.done) {\r\n                    return;\r\n                }\r\n                yield [a.value, b.value] as [T, U];\r\n            }\r\n        }\r\n        return new MyAsyncIterable(inner());\r\n    }\r\n\r\n    public map<U>(map: (e: T) => Promise<U>): MyAsyncIterable<U> {\r\n        const that = this;\r\n        async function* inner() {\r\n            for await (const item of that.data) {\r\n                yield map(item);\r\n            }\r\n        }\r\n        return new MyAsyncIterable(inner());\r\n    }\r\n\r\n    public windows(size: number): MyAsyncIterable<T[]> {\r\n        const that = this;\r\n        async function* inner() {\r\n            const windows: T[][] = [];\r\n            for await (const item of that.data) {\r\n                windows.forEach((w) => w.push(item));\r\n                windows.push([item]);\r\n                if (windows[0].length === size) {\r\n                    yield windows[0];\r\n                    windows.shift();\r\n                }\r\n            }\r\n        }\r\n        return new MyAsyncIterable(inner());\r\n    }\r\n\r\n    public async count(): Promise<number> {\r\n        let count = 0;\r\n        for await (const item of this.data) {\r\n            count++;\r\n        }\r\n        return count;\r\n    }\r\n\r\n\r\n    public filter(filter: (e: T) => Promise<boolean>): MyAsyncIterable<T> {\r\n        const that = this;\r\n        async function* inner() {\r\n            for await (const item of that.data) {\r\n                if (await filter(item)) {\r\n                    yield item;\r\n                }\r\n            }\r\n        }\r\n        return new MyAsyncIterable(inner());\r\n    }\r\n\r\n    public async reduce<TAcc>(acc: TAcc, reducer: (acc: TAcc, next: T) => Promise<TAcc>): Promise<TAcc> {\r\n        for await (const item of this.data) {\r\n            acc = await reducer(acc, item);\r\n        }\r\n        return acc;\r\n    }\r\n\r\n    public async simpleReduce(reducer: (acc: T, next: T) => Promise<T>): Promise<T> {\r\n        const isFirst = true;\r\n        const iterator = this.data[Symbol.asyncIterator]();\r\n        const first = await iterator.next();\r\n        if (first.done) {\r\n            throw new Error(\"Cannot reduce without acc on empty collection\");\r\n        }\r\n        let acc: T = first.value;\r\n        while (true) {\r\n            const next = await iterator.next();\r\n            if (next.done) {\r\n                break;\r\n            }\r\n            acc = await reducer(acc, next.value);\r\n        }\r\n        return acc;\r\n    }\r\n\r\n}\r\n\r\nexport class MyIterable<T> implements Iterable<T> {\r\n    /**\r\n     *\r\n     */\r\n    constructor(private data: Iterable<T>) {\r\n    }\r\n    public *[Symbol.iterator](): Iterator<T, any, undefined> {\r\n        for (const item of this.data) {\r\n            yield item;\r\n        }\r\n    }\r\n\r\n    public windows(size: number): MyIterable<T[]> {\r\n        const that = this;\r\n        function* inner() {\r\n            const windows: T[][] = [];\r\n            for (const item of that.data) {\r\n                windows.forEach((w) => w.push(item));\r\n                windows.push([item]);\r\n                if (windows[0].length === size) {\r\n                    yield windows[0];\r\n                    windows.shift();\r\n                }\r\n            }\r\n        }\r\n        return new MyIterable(inner());\r\n    }\r\n\r\n    public zip<U>(other: Iterable<U>): MyIterable<[T, U]> {\r\n        const that = this;\r\n        function* inner() {\r\n            const thisIterator = that[Symbol.iterator]();\r\n            const otherIterator = other[Symbol.iterator]();\r\n            while (true) {\r\n                const a = thisIterator.next();\r\n                if (a.done) {\r\n                    return;\r\n                }\r\n                const b = otherIterator.next();\r\n                if (b.done) {\r\n                    return;\r\n                }\r\n                yield [a.value, b.value] as [T, U];\r\n            }\r\n        }\r\n        return new MyIterable(inner());\r\n    }\r\n\r\n    public map<U>(map: (e: T) => U): MyIterable<U> {\r\n        const that = this;\r\n        function* inner() {\r\n            for (const item of that.data) {\r\n                yield map(item);\r\n            }\r\n        }\r\n        return new MyIterable(inner());\r\n    }\r\n\r\n    public count(): number {\r\n        let count = 0;\r\n        for (const item of this.data) {\r\n            count++;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    public filter(filter: (e: T) => boolean): MyIterable<T> {\r\n        const that = this;\r\n        function* inner() {\r\n            for (const item of that.data) {\r\n                if (filter(item)) {\r\n                    yield item;\r\n                }\r\n            }\r\n        }\r\n        return new MyIterable(inner());\r\n    }\r\n\r\n    public reduce<TAcc>(acc: TAcc, reducer: (acc: TAcc, next: T) => TAcc): TAcc {\r\n        for (const item of this.data) {\r\n            acc = reducer(acc, item);\r\n        }\r\n        return acc;\r\n    }\r\n\r\n    public simpleReduce(reducer: (acc: T, next: T) => T): T {\r\n        const iterator = this.data[Symbol.iterator]();\r\n        const first = iterator.next();\r\n        if (first.done) {\r\n            throw new Error(\"Cannot reduce without acc on empty collection\");\r\n        }\r\n        let acc: T = first.value;\r\n        while (true) {\r\n            const next = iterator.next();\r\n            if (next.done) {\r\n                break;\r\n            }\r\n            acc = reducer(acc, next.value);\r\n        }\r\n        return acc;\r\n    }\r\n}\r\n\r\nexport function groupBy<T>(sequence: T[], n: number): T[][] {\r\n    const result = [];\r\n    let next = [];\r\n    let current = 0;\r\n    for (const e of sequence) {\r\n        next.push(e);\r\n        if (++current === n) {\r\n            result.push(next);\r\n            next = [];\r\n            current = 0;\r\n        }\r\n    }\r\n    if (next.length > 0) {\r\n        result.push(next);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function* zip<T, U>(a: T[], b: U[]): Iterable<[T, U]> {\r\n    for (let i = 0; i < Math.min(a.length, b.length); i++) {\r\n        yield [a[i], b[i]];\r\n    }\r\n}\r\n\r\nexport const areArraysEqual = <T>(a: T[], b: T[], check: (a: T, b: T) => boolean): boolean => {\r\n    if (a.length !== b.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < a.length; i++) {\r\n        if (!check(a[i], b[i])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport function sum(data: Iterable<number>): number {\r\n    let res = 0;\r\n    for (const x of data) {\r\n        res += x;\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function* range(n: number) {\r\n    for (let i = 0; i < n; i++) {\r\n        yield i;\r\n    }\r\n}\r\n\r\nexport function* subsequenceGenerator<T>(array: T[]): Iterable<T[]> {\r\n    const start = 0;\r\n    const end = array.length;\r\n\r\n    for (let s = start; s < end; s++) {\r\n        for (let e = s + 1; e < end; e++) {\r\n            yield array.slice(s, e + 1);\r\n        }\r\n    }\r\n}\r\n\r\nexport function* subsetGenerator<T>(array: T[], start: number, howMany: number | null = null): Iterable<T[]> {\r\n    if (start >= array.length || howMany === 0) {\r\n        yield [];\r\n    } else {\r\n        if (howMany !== null) {\r\n            for (const sub of subsetGenerator(array, start + 1, howMany)) {\r\n                yield sub;\r\n            }\r\n            for (const sub of subsetGenerator(array, start + 1, howMany - 1)) {\r\n                yield [array[start]].concat(sub);\r\n            }\r\n        } else {\r\n            for (const sub of subsetGenerator(array, start + 1)) {\r\n                yield sub;\r\n                yield [array[start]].concat(sub);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function* permutationGenerator<T>(array: T[]): Iterable<T[]> {\r\n    if (array.length === 1) {\r\n        yield [array[0]];\r\n    } else {\r\n        for (let i = 0; i < array.length; i++) {\r\n            const startElement = array[i];\r\n            const otherElements = [...array];\r\n            otherElements.splice(i, 1);\r\n            for (const perm of permutationGenerator(otherElements)) {\r\n                yield [startElement].concat(perm);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function* buildGroups<T>(data: T[], size: number, step: number = 1): Iterable<T[]> {\r\n    for (let i = 0; i <= data.length - size; i += step) {\r\n        yield data.slice(i, i + size);\r\n    }\r\n}\r\n\r\nexport function* buildGroupsFromSeparator<T>(data: Iterable<T>, isSeparator: (e: T) => boolean): Iterable<T[]> {\r\n    let current: T[] = [];\r\n    let hadItems = false;\r\n    for (const item of data) {\r\n        hadItems = true;\r\n        if (isSeparator(item)) {\r\n            yield current;\r\n            current = [];\r\n        } else {\r\n            current.push(item);\r\n        }\r\n    }\r\n    if (hadItems && current.length > 0) {\r\n        yield current;\r\n    }\r\n}\r\n\r\n\r\nexport const median = (values: number[]) => {\r\n    values = [...values].sort((a, b) => a - b);\r\n    const half = Math.floor(values.length / 2);\r\n    if (values.length % 2) {\r\n        return values[half];\r\n    }\r\n\r\n    return (values[half - 1] + values[half]) / 2.0;\r\n};\r\n","import { entryForFile } from \"../../entry\";\r\nimport Graph from \"node-dijkstra\";\r\nimport { permutationGenerator, buildGroups } from \"../../../support/sequences\";\r\n\r\nexport const allInASingleNight = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const edges = lines.map((line) => {\r\n            const [left, distance] = line.split(\" = \");\r\n            const places = left.split(\" to \");\r\n            return {\r\n                places,\r\n                distance: parseInt(distance, 10)\r\n            };\r\n        });\r\n\r\n        const nodes = [...new Set<string>(edges.flatMap((e) => e.places))];\r\n\r\n        let bestResult: null | number = null;\r\n        for (const path of permutationGenerator(nodes)) {\r\n            let cost = 0;\r\n            for (const step of buildGroups(path, 2)) {\r\n                const stepCost = edges.filter((edge) =>\r\n                    edge.places.includes(step[0]) && edge.places.includes(step[1])\r\n                )[0].distance;\r\n                cost += stepCost;\r\n            }\r\n            if (bestResult === null || cost < bestResult) {\r\n                bestResult = cost;\r\n            }\r\n        }\r\n\r\n        await outputCallback(bestResult);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const edges = lines.map((line) => {\r\n            const [left, distance] = line.split(\" = \");\r\n            const places = left.split(\" to \");\r\n            return {\r\n                places,\r\n                distance: parseInt(distance, 10)\r\n            };\r\n        });\r\n\r\n        const nodes = [...new Set<string>(edges.flatMap((e) => e.places))];\r\n\r\n        let bestResult: null | number = null;\r\n        for (const path of permutationGenerator(nodes)) {\r\n            let cost = 0;\r\n            for (const step of buildGroups(path, 2)) {\r\n                const stepCost = edges.filter(\r\n                    (edge) => edge.places.includes(step[0]) && edge.places.includes(step[1])\r\n                )[0].distance;\r\n                cost += stepCost;\r\n            }\r\n            if (bestResult === null || cost > bestResult) {\r\n                bestResult = cost;\r\n            }\r\n        }\r\n\r\n        await outputCallback(bestResult);\r\n    },\r\n    { key: \"all-in-a-single-night\", title: \"All in a Single Night\", stars: 2 }\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\n\r\nconst sayNumber = (s: string): string => {\r\n    const res: string[] = [];\r\n    let i = 0;\r\n    while (i < s.length) {\r\n        const length = findSequenceLength(s, i);\r\n        res.push(`${length}${s[i]}`);\r\n        i += length;\r\n    }\r\n    return res.join(\"\");\r\n};\r\n\r\nconst findSequenceLength = (s: string, start: number): number => {\r\n    const c = s[start];\r\n    let i: number;\r\n    for (i = start + 1; i < s.length; i++) {\r\n        if (s[i] !== c) {\r\n            break;\r\n        }\r\n    }\r\n    return i - start;\r\n};\r\n\r\nexport const elvesLookElvesSay = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const input = lines[0];\r\n        let transformed = input;\r\n        for (let i = 0; i < 40; i++) {\r\n            transformed = sayNumber(transformed);\r\n        }\r\n        await outputCallback(transformed.length);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const input = lines[0];\r\n        let transformed = input;\r\n        for (let i = 0; i < 50; i++) {\r\n            transformed = sayNumber(transformed);\r\n        }\r\n        await outputCallback(transformed.length);\r\n    },\r\n    { key: \"elves-look-elves-say\", title: \"Elves Look, Elves Say\", stars: 2}\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\nimport { buildGroups } from \"../../../support/sequences\";\r\n\r\nconst limit = \"z\".charCodeAt(0);\r\nconst base = \"a\".charCodeAt(0);\r\n\r\nconst increment = (s: string): string => {\r\n    const tokens = s.split(\"\").reverse();\r\n    let carry = 1;\r\n    for (let i = 0; i < tokens.length; i++) {\r\n        let c = tokens[i].charCodeAt(0);\r\n        c = c + carry;\r\n        carry = 0;\r\n        if (c > limit) {\r\n            c = base + (c - limit - 1);\r\n            carry++;\r\n        }\r\n        tokens[i] = String.fromCharCode(c);\r\n    }\r\n    return tokens.reverse().join(\"\");\r\n};\r\n\r\nconst testPairs = (s: string): boolean => {\r\n    const pairs = [...buildGroups(s.split(\"\"), 2)];\r\n    const allEqual = pairs\r\n        .map((p, i) => ({ p, i }))\r\n        .filter((e) => e.p[0] === e.p[1]);\r\n    return allEqual.length >= 2 && (allEqual[allEqual.length - 1].i - allEqual[0].i) >= 2;\r\n};\r\n\r\nconst testIncreasing = (s: string): boolean => {\r\n    const trios = buildGroups(s.split(\"\"), 3);\r\n    for (const trio of trios) {\r\n        if (\r\n            trio[2] === increment(trio[1]) &&\r\n            trio[1] === increment(trio[0]) &&\r\n            trio[0].charCodeAt(0) < trio[2].charCodeAt(0)\r\n        ) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nconst testPassword = (s: string): boolean => {\r\n    if (s.includes(\"i\") || s.includes(\"o\") || s.includes(\"l\")) {\r\n        return false;\r\n    }\r\n    if (!testPairs(s)) {\r\n        return false;\r\n    }\r\n    return testIncreasing(s);\r\n};\r\n\r\nexport const corporatePolicy = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const startPassword = lines[0];\r\n        let password = startPassword;\r\n        do {\r\n            password = increment(password);\r\n            if (password === startPassword) {\r\n                throw new Error(\"Finished domain, no result\");\r\n            }\r\n        } while (!testPassword(password));\r\n\r\n        await outputCallback(password);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const startPassword = lines[0];\r\n        let password = startPassword;\r\n        for (let i = 0; i < 2; i++) {\r\n            do {\r\n                password = increment(password);\r\n                if (password === startPassword) {\r\n                    throw new Error(\"Finished domain, no result\");\r\n                }\r\n            } while (!testPassword(password));\r\n        }\r\n\r\n        await outputCallback(password);\r\n    },\r\n    { key: \"corporate-policy\", title: \"Corporate Policy\", stars: 2 }\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\n\r\nconst countNumbers = (parsed: any, skipReds: boolean = false): number => {\r\n    if (typeof(parsed) === \"number\") {\r\n        return parsed as number;\r\n    } else if (typeof(parsed) === \"string\") {\r\n        return 0;\r\n    } else if (Array.isArray(parsed)) {\r\n        const array = parsed as any[];\r\n        return array.reduce((acc, next) => acc + countNumbers(next, skipReds), 0);\r\n    } else {\r\n        const keys = Object.keys(parsed);\r\n        if (skipReds) {\r\n            if (Object.values(parsed).includes(\"red\")) {\r\n                return 0;\r\n            }\r\n        }\r\n        return keys.reduce((acc, next) => acc + countNumbers(parsed[next], skipReds), 0);\r\n    }\r\n};\r\n\r\nexport const abacusFramework = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const parsed = JSON.parse(lines[0]);\r\n        const numbers = countNumbers(parsed);\r\n        await outputCallback(numbers);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const parsed = JSON.parse(lines[0]);\r\n        const numbers = countNumbers(parsed, true);\r\n        await outputCallback(numbers);\r\n    },\r\n    { key: \"abacus-framework\", title: \"JSAbacusFramework.io\", stars: 2}\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\nimport { permutationGenerator } from \"../../../support/sequences\";\r\n\r\ninterface AdjacencyRule {\r\n    adjacents: [string, string];\r\n    value: number;\r\n}\r\n\r\nconst parseRules = (lines: string[]): {\r\n    participants: string[],\r\n    rules: AdjacencyRule[]\r\n} => {\r\n    const participants = [...new Set<string>(\r\n        lines.map((l) => l.split(\" \")[0])\r\n    ).values()];\r\n\r\n    const rules = lines.map((line) => {\r\n        const tokens = line.split(\" \");\r\n        const sign = tokens.includes(\"gain\") ? 1 : -1;\r\n        const value = parseInt(tokens[3], 10);\r\n        const rule: AdjacencyRule = {\r\n            adjacents: [tokens[0], tokens[tokens.length - 1].slice(0, -1)],\r\n            value: sign * value\r\n        };\r\n        return rule;\r\n    });\r\n\r\n    return {\r\n        participants,\r\n        rules\r\n    };\r\n};\r\n\r\nconst calculateValue = (assignment: string[], rules: AdjacencyRule[]): number => {\r\n    let value = 0;\r\n    for (let i = 0; i < assignment.length; i++) {\r\n        const assignees = [assignment[i], assignment[(i + 1) % assignment.length]];\r\n        const matchingRules = rules.filter(\r\n            (rule) => rule.adjacents.includes(assignees[0]) && rule.adjacents.includes(assignees[1])\r\n        );\r\n        if (matchingRules.length !== 2) {\r\n            throw new Error(\"Could not find enough rules for \" + JSON.stringify(assignees));\r\n        }\r\n        value += matchingRules.reduce((acc, next) => acc + next.value, 0);\r\n    }\r\n    return value;\r\n};\r\n\r\nexport const knightsOfTheDinnerTable = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const { participants, rules } = parseRules(lines);\r\n\r\n        await outputCallback({\r\n            length: participants.length,\r\n            participants\r\n        });\r\n\r\n        let bestValue = Number.NEGATIVE_INFINITY;\r\n        for (const p of permutationGenerator(participants)) {\r\n            bestValue = Math.max(bestValue, calculateValue(p, rules));\r\n        }\r\n        await outputCallback(\"Best: \" + bestValue);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const { participants, rules } = parseRules(lines);\r\n\r\n        participants.push(\"Myself\");\r\n\r\n        participants.forEach((participant) => {\r\n            rules.push({\r\n                adjacents: [\"Myself\", participant],\r\n                value: 0\r\n            });\r\n            rules.push({\r\n                adjacents: [participant, \"Myself\"],\r\n                value: 0\r\n            });\r\n        });\r\n\r\n        await outputCallback({\r\n            length: participants.length,\r\n            participants\r\n        });\r\n\r\n        let bestValue = Number.NEGATIVE_INFINITY;\r\n        for (const p of permutationGenerator(participants)) {\r\n            bestValue = Math.max(bestValue, calculateValue(p, rules));\r\n        }\r\n        await outputCallback(\"Best: \" + bestValue);\r\n    },\r\n    {\r\n        key: \"knights-of-the-dinner-table\",\r\n        title: \"Knights of the Dinner Table\",\r\n        stars: 2\r\n    }\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\n\r\ninterface Reindeer {\r\n    movement: {\r\n        speed: number,\r\n        duration: number\r\n    };\r\n    rest: number;\r\n    name: string;\r\n}\r\n\r\nconst parseReindeers = (lines: string[]): Reindeer[] => {\r\n    return lines.map((line) => {\r\n        const tokens = line.split(\" \");\r\n        return {\r\n            name: tokens[0],\r\n            rest: parseInt(tokens[tokens.length - 2], 10),\r\n            movement: {\r\n                speed: parseInt(tokens[3], 10),\r\n                duration: parseInt(tokens[6], 10)\r\n            }\r\n        };\r\n    });\r\n};\r\n\r\nconst calculateDistance = (reindeer: Reindeer, time: number): number => {\r\n    const period = reindeer.rest + reindeer.movement.duration;\r\n    const baseDistance = Math.floor(time / period) * (reindeer.movement.speed * reindeer.movement.duration);\r\n    const restOfTime = time % period;\r\n    const lastMovementTime = Math.min(reindeer.movement.duration, restOfTime);\r\n    const lastDistance = lastMovementTime * reindeer.movement.speed;\r\n    return baseDistance + lastDistance;\r\n};\r\n\r\nexport const reindeerOlympics = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const time = 2503;\r\n        const reindeers = parseReindeers(lines);\r\n        const distances = reindeers.map((r) => ({\r\n            reindeer: r.name,\r\n            distance: calculateDistance(r, time)\r\n        })).sort((a, b) => a.distance - b.distance);\r\n        await outputCallback(distances);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const maxTime = 2503;\r\n        const reindeers = parseReindeers(lines);\r\n        const points = new Map<string, number>();\r\n        reindeers.forEach((r) => points.set(r.name, 0));\r\n        for (let time = 1; time <= maxTime; time++) {\r\n            const distances = reindeers.map((r) => ({\r\n                reindeer: r.name,\r\n                distance: calculateDistance(r, time)\r\n            })).sort((a, b) => b.distance - a.distance);\r\n            const [winner] = distances;\r\n            points.set(winner.reindeer, points.get(winner.reindeer)! + 1);\r\n        }\r\n        await outputCallback([...points.values()].sort((a, b) => a - b));\r\n    },\r\n    { key: \"reindeer-olympics\", title: \"Reindeer Olympics\", stars: 2}\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\nimport { buildGroups } from \"../../../support/sequences\";\r\n\r\ninterface Ingredient {\r\n    name: string;\r\n    capacity: number;\r\n    durability: number;\r\n    flavor: number;\r\n    texture: number;\r\n    calories: number;\r\n}\r\n\r\nconst parseIngredients = (lines: string[]): Ingredient[] => {\r\n    return lines.map((line) => {\r\n        const tokens = line.split(\" \").map((e) => e.endsWith(\":\") || e.endsWith(\",\") ?\r\n            e.slice(0, -1) : e);\r\n        const name = tokens[0];\r\n        const values = [...buildGroups(tokens.slice(1), 2, 2)].map((e) => {\r\n            return {\r\n                type: e[0],\r\n                value: parseInt(e[1], 10)\r\n            };\r\n        });\r\n        const ingredient: Ingredient = {\r\n            name,\r\n            capacity: 0,\r\n            durability: 0,\r\n            flavor: 0,\r\n            texture: 0,\r\n            calories: 0\r\n        };\r\n        for (const t of values) {\r\n            (ingredient as any)[t.type] = t.value;\r\n        }\r\n        return ingredient;\r\n\r\n    });\r\n};\r\n\r\nfunction* generateRecipes(ingredients: Ingredient[], total: number): Iterable<Recipe[]> {\r\n    if (ingredients.length === 0) {\r\n        if (total === 0) {\r\n            return;\r\n        }\r\n        throw new Error(\"Wrong total: \" + total);\r\n    }\r\n    if (ingredients.length === 1) {\r\n        yield [{\r\n            amount: total,\r\n            ingredient: ingredients[0]\r\n        }];\r\n        return;\r\n    }\r\n    const [ingredient] = ingredients;\r\n    const otherIngredients = ingredients.slice(1);\r\n    for (let i = 1; i <= total - (ingredients.length - 1); i++) {\r\n        for (const permutation of generateRecipes(otherIngredients, total - i)) {\r\n            yield [{\r\n                ingredient,\r\n                amount: i\r\n            }].concat(permutation);\r\n        }\r\n    }\r\n}\r\n\r\nconst calculateSingleTotal = (single: Array<{ characteristic: number, amount: number }>): number => {\r\n    return Math.max(0, single.reduce((acc, next) => acc + (next.characteristic * next.amount), 0));\r\n};\r\n\r\ninterface Recipe { ingredient: Ingredient; amount: number; }\r\n\r\nconst calculateScore = (recipe: Recipe[]): number => {\r\n    if (recipe.reduce((acc, next) => acc + next.amount, 0) !== 100) {\r\n        throw new Error(\"Invalid amount\");\r\n    }\r\n    const totals = [\r\n        calculateSingleTotal(recipe.map((e) => ({\r\n            characteristic: e.ingredient.capacity,\r\n            amount: e.amount\r\n        }))),\r\n        calculateSingleTotal(recipe.map((e) => ({\r\n            characteristic: e.ingredient.durability,\r\n            amount: e.amount\r\n        }))),\r\n        calculateSingleTotal(recipe.map((e) => ({\r\n            characteristic: e.ingredient.flavor,\r\n            amount: e.amount\r\n        }))),\r\n        calculateSingleTotal(recipe.map((e) => ({\r\n            characteristic: e.ingredient.texture,\r\n            amount: e.amount\r\n        })))\r\n    ];\r\n\r\n    return totals.reduce((acc, next) => acc * next, 1);\r\n};\r\n\r\nconst calculateCalories = (recipe: Recipe[]): number => {\r\n    return recipe.reduce((acc, next) => acc + (next.ingredient.calories * next.amount), 0);\r\n};\r\n\r\nexport const scienceForHungryPeople = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const ingredients = parseIngredients(lines);\r\n        let bestResult = Number.NEGATIVE_INFINITY;\r\n        for (const permutation of generateRecipes(ingredients, 100)) {\r\n            const score = calculateScore(permutation);\r\n            bestResult = Math.max(bestResult, score);\r\n        }\r\n        await outputCallback(bestResult);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const ingredients = parseIngredients(lines);\r\n        const targetCalories = 500;\r\n        let bestResult = Number.NEGATIVE_INFINITY;\r\n        for (const permutation of generateRecipes(ingredients, 100)) {\r\n            if (calculateCalories(permutation) === targetCalories) {\r\n                const score = calculateScore(permutation);\r\n                bestResult = Math.max(bestResult, score);\r\n            }\r\n        }\r\n        await outputCallback(bestResult);\r\n    },\r\n    { key: \"science-for-hungry-people\", title: \"Science for Hungry People\", stars: 2, embeddedData: true}\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\n\r\ninterface DetectionData { [key: string]: number; }\r\nconst ticket: DetectionData = {\r\n    children: 3,\r\n    cats: 7,\r\n    samoyeds: 2,\r\n    pomeranians: 3,\r\n    akitas: 0,\r\n    vizslas: 0,\r\n    goldfish: 5,\r\n    trees: 3,\r\n    cars: 2,\r\n    perfumes: 1\r\n};\r\n\r\ninterface Sue {\r\n    id: number;\r\n    data: DetectionData;\r\n}\r\n\r\nconst parseSues = (lines: string[]): Sue[] => {\r\n    return lines.map((line) => {\r\n        const firstSeparator = line.indexOf(\":\");\r\n        const left = line.slice(0, firstSeparator);\r\n        const right = line.slice(firstSeparator + 2);\r\n        const id = parseInt(left.split(\" \")[1], 10);\r\n        const data = right.split(\", \").map((e) => {\r\n            const split = e.split(\": \");\r\n            return {\r\n                name: split[0],\r\n                value: parseInt(split[1], 10)\r\n            };\r\n        }).reduce((acc: DetectionData, next) => {\r\n            acc[next.name] = next.value;\r\n            return acc;\r\n        }, {});\r\n        return {\r\n            id,\r\n            data\r\n        };\r\n    });\r\n};\r\n\r\nconst checkSue = (sue: Sue, argTicket: DetectionData): boolean => {\r\n    for (const key of Object.keys(sue.data)) {\r\n        if (sue.data[key] !== argTicket[key]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\n\r\nconst checkSueRanges = (sue: Sue, argTicket: DetectionData): boolean => {\r\n    for (const key of Object.keys(sue.data)) {\r\n        if (key === \"cats\" || key === \"trees\") {\r\n            if (sue.data[key] <= argTicket[key]) {\r\n                return false;\r\n            }\r\n        } else if (key === \"pomeranians\" || key === \"goldfish\") {\r\n            if (sue.data[key] >= argTicket[key]) {\r\n                return false;\r\n            }\r\n        } else {\r\n            if (sue.data[key] !== argTicket[key]) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n};\r\n\r\nexport const auntSue = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const sues = parseSues(lines);\r\n        for (const sue of sues) {\r\n            if (checkSue(sue, ticket)) {\r\n                await outputCallback(\"Found Sue: \" + sue.id);\r\n                return;\r\n            }\r\n        }\r\n        await outputCallback(\"Sue not found\");\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const sues = parseSues(lines);\r\n        for (const sue of sues) {\r\n            if (checkSueRanges(sue, ticket)) {\r\n                await outputCallback(\"Found Sue: \" + sue.id);\r\n                return;\r\n            }\r\n        }\r\n        await outputCallback(\"Sue not found\");\r\n    },\r\n    { key: \"aunt-sue\", title: \"Aunt Sue\", stars: 2 }\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\n\r\nconst findCombinations = (quantities: number[], amount: number, index: number, selected: number): number[] => {\r\n    if (amount === 0) {\r\n        return [selected];\r\n    }\r\n    if (index >= quantities.length) {\r\n        return [];\r\n    }\r\n    if (amount < quantities[index]) {\r\n        return findCombinations(quantities, amount, index + 1, selected);\r\n    }\r\n    return findCombinations(quantities, amount, index + 1, selected).concat(\r\n           findCombinations(quantities, amount - quantities[index], index + 1, selected + 1)\r\n    );\r\n};\r\n\r\nexport const noSuchThingAsTooMuch = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const quantities = lines.map((e) => parseInt(e, 10)).sort((a, b) => b - a);\r\n        await outputCallback(findCombinations(quantities, 150, 0, 0).length);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const quantities = lines.map((e) => parseInt(e, 10)).sort((a, b) => b - a);\r\n        const selected = findCombinations(quantities, 150, 0, 0).sort((a, b) => a - b);\r\n        const min = selected[0];\r\n        await outputCallback(selected.filter((e) => e === min).length);\r\n    },\r\n    { key: \"no-such-thing-as-too-much\", title: \"No Such Thing as Too Much\", stars: 2}\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\nimport { setTimeoutAsync } from \"../../../support/async\";\r\nimport { FixedSizeMatrix } from \"../../../support/matrix\";\r\nimport { getSurrounding, manhattanDistance, getFullSurrounding } from \"../../../support/geometry\";\r\n\r\ntype Field = FixedSizeMatrix<\"#\" | \".\">;\r\n\r\nconst parseField = (lines: string[]): Field => {\r\n    const size = { x: lines[0].length, y: lines.length };\r\n    const field = new FixedSizeMatrix<\"#\" | \".\">(size);\r\n    field.setFlatData(lines.flatMap((l) => l.split(\"\").map((e) => e as \"#\" | \".\")));\r\n    return field;\r\n};\r\n\r\nconst iterateGame = (field: Field, leaveCornersOn: boolean = false): Field => {\r\n    const newField = field.copy();\r\n    field.onEveryCell((coordinate, cell) => {\r\n        if (leaveCornersOn &&\r\n            (manhattanDistance(coordinate, { x: 0, y: 0 }) === 0\r\n                || manhattanDistance(coordinate, { x: 0, y: field.size.y - 1 }) === 0\r\n                || manhattanDistance(coordinate, { x: field.size.x - 1, y: 0 }) === 0\r\n                || manhattanDistance(coordinate, { x: field.size.x - 1, y: field.size.y - 1 }) === 0)\r\n        ) {\r\n            return;\r\n        }\r\n        const onNeigbours = getFullSurrounding(coordinate)\r\n            .map((c) => field.get(c))\r\n            .filter((e) => e === \"#\")\r\n            .length;\r\n        if (cell === \"#\") {\r\n            if (onNeigbours !== 2 && onNeigbours !== 3) {\r\n                newField.set(coordinate, \".\");\r\n            }\r\n        } else if (cell === \".\") {\r\n            if (onNeigbours === 3) {\r\n                newField.set(coordinate, \"#\");\r\n            }\r\n        }\r\n    });\r\n    return newField;\r\n};\r\n\r\nexport const likeAGifForYourYard = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const field = parseField(lines);\r\n        let iteration = field;\r\n        const steps = 100;\r\n        for (let i = 0; i < steps; i++) {\r\n            iteration = iterateGame(iteration);\r\n        }\r\n        await outputCallback(iteration.reduce(\r\n            (acc, next) => acc + (next.cell === \"#\" ? 1 : 0),\r\n            0\r\n        ));\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const field = parseField(lines);\r\n        let iteration = field;\r\n        const steps = 100;\r\n        for (let i = 0; i < steps; i++) {\r\n            iteration = iterateGame(iteration, true);\r\n        }\r\n        await outputCallback(iteration.reduce(\r\n            (acc, next) => acc + (next.cell === \"#\" ? 1 : 0),\r\n            0\r\n        ));\r\n    },\r\n    { key: \"like-a-gif-for-your-yard\", title: \"Like a GIF For Your Yard\", stars: 2 }\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\nimport { exec } from \"child_process\";\r\n\r\ntype Register = \"a\" | \"b\";\r\n\r\ntype TuringInstruction =\r\n    { instruction: \"hlf\", arg: Register } |\r\n    { instruction: \"tpl\", arg: Register } |\r\n    { instruction: \"inc\", arg: Register } |\r\n    { instruction: \"jmp\", arg: number } |\r\n    { instruction: \"jie\", args: [Register, number] } |\r\n    { instruction: \"jio\", args: [Register, number] };\r\n\r\ninterface State {\r\n    a: number;\r\n    b: number;\r\n    ir: number;\r\n}\r\n\r\ntype Program = TuringInstruction[];\r\n\r\nconst createStartState = (): State => {\r\n    return {\r\n        a: 0,\r\n        b: 0,\r\n        ir: 0\r\n    };\r\n};\r\n\r\nconst parse = (lines: string[]): Program => {\r\n    return lines\r\n        .map((l) => l.trim())\r\n        .filter((l) => l.length > 0)\r\n        .map((l) => ({\r\n            instr: l.slice(0, 3),\r\n            args: l.slice(4).split(\", \")\r\n        }))\r\n        .map((e) => {\r\n            if (\r\n                e.instr === \"hlf\" ||\r\n                e.instr === \"tpl\" ||\r\n                e.instr === \"inc\"\r\n            ) {\r\n                return {\r\n                    instruction: e.instr,\r\n                    arg: e.args[0] as Register\r\n                } as TuringInstruction;\r\n            } else if (e.instr === \"jmp\") {\r\n                return {\r\n                    instruction: \"jmp\",\r\n                    arg: parseInt(e.args[0], 10)\r\n                } as TuringInstruction;\r\n            } else if (e.instr === \"jie\" || e.instr === \"jio\") {\r\n                return {\r\n                    instruction: e.instr,\r\n                    args: [\r\n                        e.args[0] as Register,\r\n                        parseInt(e.args[1], 10)\r\n                    ]\r\n                } as TuringInstruction;\r\n            } else {\r\n                throw new RangeError(\"Invalid instruction \" + e.instr);\r\n            }\r\n        });\r\n};\r\n\r\nconst executeInstruction = (instruction: TuringInstruction, state: State) => {\r\n    let newIr = state.ir + 1;\r\n    switch (instruction.instruction) {\r\n        case \"hlf\":\r\n            state[instruction.arg] = Math.floor(state[instruction.arg] / 2);\r\n            break;\r\n        case \"tpl\":\r\n            state[instruction.arg] *= 3;\r\n            break;\r\n        case \"inc\":\r\n            state[instruction.arg]++;\r\n            break;\r\n        case \"jmp\":\r\n            newIr = state.ir + instruction.arg;\r\n            break;\r\n        case \"jie\":\r\n            if (state[instruction.args[0]] % 2 === 0) {\r\n                newIr = state.ir + instruction.args[1];\r\n            }\r\n            break;\r\n        case \"jio\":\r\n            if (state[instruction.args[0]] === 1) {\r\n                newIr = state.ir + instruction.args[1];\r\n            }\r\n            break;\r\n    }\r\n    state.ir = newIr;\r\n};\r\n\r\nconst execute = (program: Program, state: State) => {\r\n    while (state.ir >= 0 && state.ir < program.length) {\r\n        executeInstruction(program[state.ir], state);\r\n    }\r\n};\r\n\r\nexport const turingLock = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const program = parse(lines);\r\n        const state = createStartState();\r\n        execute(program, state);\r\n        await outputCallback(state.b);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const program = parse(lines);\r\n        const state = createStartState();\r\n        state.a = 1;\r\n        execute(program, state);\r\n        await outputCallback(state.b);\r\n    },\r\n    { key: \"turing-lock\", title: \"Opening the Turing Lock\", stars: 2, embeddedData: true }\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\n\r\ninterface Rule {\r\n    from: string;\r\n    to: string[];\r\n    flatTo: string;\r\n}\r\n\r\nconst serializeRule = (rule: Rule): string => {\r\n    return `${rule.from} => ${rule.to.join(\"\")}`;\r\n};\r\n\r\nconst parseRules = (lines: string[]): Rule[] => {\r\n    return lines.map((line) => {\r\n        const [from, to] = line.split(\" => \");\r\n        return { from, to: parseMolecule(to), flatTo: to };\r\n    });\r\n};\r\n\r\nconst parseMolecule = (line: string): string[] => {\r\n    const current: string[] = [];\r\n    const result: string[] = [];\r\n    for (const c of line) {\r\n        if (c.toUpperCase() === c) {\r\n            if (current.length > 0) {\r\n                result.push(current.join(\"\"));\r\n                current.length = 0;\r\n            }\r\n        }\r\n        current.push(c);\r\n    }\r\n    if (current.length > 0) {\r\n        result.push(current.join(\"\"));\r\n    }\r\n    return result;\r\n};\r\n\r\nconst parseLines = (lines: string[]): { rules: Rule[], molecule: string[] } => {\r\n    const separator = lines.findIndex((e) => e.length === 0);\r\n    const rules = parseRules(lines.slice(0, separator));\r\n    const molecule = parseMolecule(lines[separator + 1]);\r\n    return {\r\n        rules,\r\n        molecule\r\n    };\r\n};\r\n\r\nexport const medicineForRudolph = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const parsed = parseLines(lines);\r\n        const visited = new Set<string>();\r\n        for (const candidate of createCandidates(parsed.rules, parsed.molecule)) {\r\n            visited.add(candidate.join(\"\"));\r\n        }\r\n        if (visited.size < 20) {\r\n            await outputCallback(visited.values());\r\n        }\r\n        await outputCallback(visited.size);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const parsed = parseLines(lines);\r\n\r\n        const appearsInHowManyRules = new Map<string, number>();\r\n\r\n        const bottomRules: Rule[] = [];\r\n        const noFromAtoms: Set<string> = new Set<string>();\r\n\r\n        parsed.rules.forEach((rule) => {\r\n            const tos = new Set<string>();\r\n            rule.to.forEach((r) => tos.add(r));\r\n            tos.forEach((t) => {\r\n                if (appearsInHowManyRules.has(t)) {\r\n                    appearsInHowManyRules.set(t, appearsInHowManyRules.get(t)! + 1);\r\n                } else {\r\n                    appearsInHowManyRules.set(t, 1);\r\n                }\r\n            });\r\n\r\n            const noFrom = rule.to.filter((to) => parsed.rules.filter((r) => r.from === to).length === 0);\r\n            const isBottom = noFrom.length > 0;\r\n            if (isBottom) {\r\n                noFrom.forEach((f) => noFromAtoms.add(f));\r\n                bottomRules.push(rule);\r\n            }\r\n        });\r\n        const unique = [...appearsInHowManyRules.keys()].filter((key) => appearsInHowManyRules.get(key)! === 1);\r\n        await outputCallback(\"Unique: \");\r\n        await outputCallback(unique);\r\n        await outputCallback(appearsInHowManyRules);\r\n        await outputCallback(bottomRules.map(serializeRule));\r\n        await outputCallback(noFromAtoms);\r\n\r\n        // here I started noticing a pattern for Rn, Y and Ar;\r\n        // unfortunately I wasn't smart enough to figure all out,\r\n        // but thanks to askaski for his analysis and this:\r\n        const target = parsed.molecule;\r\n\r\n        const result =\r\n            target.length\r\n            - target.filter((t) => t === \"Ar\" || t === \"Rn\").length\r\n            - 2 * target.filter((t) => t === \"Y\").length - 1;\r\n\r\n        await outputCallback(result);\r\n        await outputCallback(\"Thanks askalski :)\");\r\n        await outputCallback(\"See https://www.reddit.com/r/adventofcode/comments/3xflz8/day_19_solutions/cy4etju\");\r\n\r\n    },\r\n    { key: \"medicine-for-rudolph\", title: \"Medicine for Rudolph\", stars: 2 }\r\n);\r\n\r\nfunction* createCandidates(rules: Rule[], molecule: string[]): Iterable<string[]> {\r\n    for (const rule of rules) {\r\n        for (let i = 0; i < molecule.length; i++) {\r\n            if (molecule[i] === rule.from) {\r\n                const result = molecule.slice(0, i).concat(rule.to).concat(molecule.slice(i + 1));\r\n                yield result;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { entryForFile } from \"../../entry\";\r\nconst {primalityTest} = require(\"primality-test\");\r\n\r\nconst isProbablyPrime = async (e: number, rounds?: number): Promise<boolean> => {\r\n    const res = rounds !== undefined ? (await primalityTest(e, {numRounds: rounds})) : await primalityTest(e);\r\n    return res.probablePrime;\r\n}\r\n\r\n\r\nconst findExponent = (n: number, divisor: number): number => {\r\n    let i = 0;\r\n    while (n % divisor === 0) {\r\n        i++;\r\n        n /= divisor;\r\n    }\r\n    return i;\r\n};\r\n\r\nconst primeFactors = async (n: number): Promise<Array<{ prime: number, exponent: number }>> => {\r\n    if (n === 0) {\r\n        throw new Error(\"Zero is out of range\");\r\n    }\r\n    const primeWithEsponents: Array<{ prime: number, exponent: number }> = [];\r\n    if (n % 2 === 0) {\r\n        const exponent = findExponent(n, 2);\r\n        primeWithEsponents.push({\r\n            prime: 2,\r\n            exponent\r\n        });\r\n        n /= (2 ** exponent);\r\n    }\r\n    if (await isProbablyPrime(n)) {\r\n        primeWithEsponents.push({\r\n            prime: n,\r\n            exponent: 1\r\n        });\r\n    } else if (n !== 1) {\r\n        const max = Math.floor(Math.sqrt(n));\r\n        for (let i = 3; i <= max; i += 2) {\r\n            if (n % i === 0 && await isProbablyPrime(i, 40)) {\r\n                const exponent = findExponent(n, i);\r\n                if (n % (i ** exponent) !== 0) {\r\n                    throw new Error(JSON.stringify({ i, exponent }));\r\n                }\r\n                if (n % (i ** (exponent + 1)) === 0) {\r\n                    throw new Error(JSON.stringify({ i, exponent, next: true }));\r\n                }\r\n                primeWithEsponents.push({\r\n                    prime: i,\r\n                    exponent\r\n                });\r\n            }\r\n        }\r\n    }\r\n    return primeWithEsponents;\r\n};\r\n\r\nconst divisorSum = async (n: number): Promise<number> => {\r\n    const factors = await primeFactors(n);\r\n    return factors\r\n        .reduce((acc, next) => acc * geometric(next.prime, next.exponent), 1);\r\n};\r\n\r\nconst geometric = (r: number, exponent: number): number => {\r\n    return (r ** (exponent + 1) - 1) / (r - 1);\r\n};\r\n\r\nexport const infiniteElvesAndInfiniteHouses = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const target = parseInt(lines[0], 10);\r\n        const flatData: number[] = new Array(Math.ceil(target / 10)).fill(0);\r\n        for (let i = 1; i < flatData.length; i++) {\r\n            if (i % 10000 === 0) {\r\n                await outputCallback(null);\r\n                await outputCallback(`${i * 100 / flatData.length}%`);\r\n            }\r\n            for (let j = 1; j <= flatData.length / i; j++) {\r\n                flatData[i * j - 1] += i * 10;\r\n            }\r\n        }\r\n        for (let i = 0; i < flatData.length; i++) {\r\n            if (flatData[i] >= target) {\r\n                await outputCallback(\"House \" + (i + 1));\r\n                return;\r\n            }\r\n        }\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const target = parseInt(lines[0], 10);\r\n        const flatData: number[] = new Array(Math.ceil(target)).fill(0);\r\n        for (let i = 1; i < flatData.length; i++) {\r\n            if (i % 10000 === 0) {\r\n                await outputCallback(null);\r\n                await outputCallback(`${i * 100 / flatData.length}%`);\r\n            }\r\n            for (let j = 1; j <= Math.min(flatData.length / i, 50); j++) {\r\n                flatData[i * j - 1] += i * 11;\r\n            }\r\n        }\r\n        for (let i = 0; i < flatData.length; i++) {\r\n            if (flatData[i] >= target) {\r\n                await outputCallback(\"House \" + (i + 1));\r\n                return;\r\n            }\r\n        }\r\n    },\r\n    { key: \"infinite-elves-and-infinite-houses\", title: \"Infinite Elves and Infinite Houses\", stars: 2 }\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\nimport { subsetGenerator } from \"../../../support/sequences\";\r\n\r\ninterface Item {\r\n    name: string;\r\n    cost: number;\r\n    damage: number;\r\n    armor: number;\r\n}\r\n\r\ntype ShopKey = \"weapons\" | \"armor\" | \"rings\";\r\n\r\nconst shop: {\r\n    weapons: Item[];\r\n    armor: Item[];\r\n    rings: Item[];\r\n} = {\r\n    weapons: [\r\n        { name: \"Dagger\", cost: 8, damage: 4, armor: 0 },\r\n        { name: \"Shortsword\", cost: 10, damage: 5, armor: 0 },\r\n        { name: \"Warhammer\", cost: 25, damage: 6, armor: 0 },\r\n        { name: \"Longsword\", cost: 40, damage: 7, armor: 0 },\r\n        { name: \"Greataxe\", cost: 74, damage: 8, armor: 0 },\r\n    ],\r\n    armor: [\r\n        { name: \"Leather\", cost: 13, damage: 0, armor: 1 },\r\n        { name: \"Chainmail\", cost: 31, damage: 0, armor: 2 },\r\n        { name: \"Splintmail\", cost: 53, damage: 0, armor: 3 },\r\n        { name: \"Bandedmail\", cost: 75, damage: 0, armor: 4 },\r\n        { name: \"Platemail\", cost: 102, damage: 0, armor: 5 },\r\n        { name: \"None\", cost: 0, damage: 0, armor: 0 }\r\n    ],\r\n    rings: [\r\n        { name: \"Damage +1\", cost: 25, damage: 1, armor: 0 },\r\n        { name: \"Damage +2\", cost: 50, damage: 2, armor: 0 },\r\n        { name: \"Damage +3\", cost: 100, damage: 3, armor: 0 },\r\n        { name: \"Defense +1\", cost: 20, damage: 0, armor: 1 },\r\n        { name: \"Defense +2\", cost: 40, damage: 0, armor: 2 },\r\n        { name: \"Defense +3\", cost: 80, damage: 0, armor: 3 },\r\n    ]\r\n};\r\n\r\ninterface State {\r\n    hitPoints: number;\r\n    damage: number;\r\n    armor: number;\r\n}\r\n\r\nconst parseState = (lines: string[]): State => {\r\n    const [hitPoints, damage, armor] = lines.map((l) => parseInt(l.split(\": \")[1], 10));\r\n    return {\r\n        hitPoints,\r\n        damage,\r\n        armor\r\n    };\r\n};\r\n\r\nconst fight = (player: State, monster: State): boolean => {\r\n    const fPlayer = { ...player };\r\n    const fMonster = { ...monster };\r\n    while (true) {\r\n        fMonster.hitPoints -= Math.max(1, fPlayer.damage - fMonster.armor);\r\n        if (fMonster.hitPoints <= 0) {\r\n            return true;\r\n        }\r\n        fPlayer.hitPoints -= Math.max(1, fMonster.damage - fPlayer.armor);\r\n        if (fPlayer.hitPoints <= 0) {\r\n            return false;\r\n        }\r\n    }\r\n};\r\n\r\nexport const rpgSimulator20xx = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const bossState = parseState(lines);\r\n        let minExpense = Number.POSITIVE_INFINITY;\r\n        for (const weapon of shop.weapons) {\r\n            for (const armor of shop.armor) {\r\n                for (const chosenRings of subsetGenerator(shop.rings, 0)) {\r\n                    if (chosenRings.length <= 2) {\r\n                        const expense =\r\n                            weapon.cost\r\n                            + armor.cost\r\n                            + chosenRings.reduce((acc, next) => acc + next.cost, 0);\r\n                        if (expense < minExpense) {\r\n                            const hasWon = fight({\r\n                                hitPoints: 100,\r\n                                armor: armor.armor + chosenRings.reduce((acc, next) => acc + next.armor, 0),\r\n                                damage: weapon.damage + chosenRings.reduce((acc, next) => acc + next.damage, 0)\r\n                            }, bossState);\r\n                            if (hasWon) {\r\n                                minExpense = expense;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        await outputCallback(minExpense);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const bossState = parseState(lines);\r\n        let maxExpense = Number.NEGATIVE_INFINITY;\r\n        for (const weapon of shop.weapons) {\r\n            for (const armor of shop.armor) {\r\n                for (const chosenRings of subsetGenerator(shop.rings, 0)) {\r\n                    if (chosenRings.length <= 2) {\r\n                        const expense =\r\n                            weapon.cost\r\n                            + armor.cost\r\n                            + chosenRings.reduce((acc, next) => acc + next.cost, 0);\r\n                        if (expense > maxExpense) {\r\n                            const hasWon = fight({\r\n                                hitPoints: 100,\r\n                                armor: armor.armor + chosenRings.reduce((acc, next) => acc + next.armor, 0),\r\n                                damage: weapon.damage + chosenRings.reduce((acc, next) => acc + next.damage, 0)\r\n                            }, bossState);\r\n                            if (!hasWon) {\r\n                                maxExpense = expense;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        await outputCallback(maxExpense);\r\n    },\r\n    { key: \"rpg-simulator-20xx\", title: \"RPG Simulator 20XX\", stars: 2 }\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\nimport { Queue } from \"../../../support/data-structure\";\r\nimport { PriorityQueue } from \"priorityqueue/lib/cjs/PriorityQueue\";\r\nimport { PairingHeap } from \"priorityqueue/lib/cjs\";\r\n\r\ninterface State {\r\n    hitPoints: number;\r\n    damage: number;\r\n}\r\n\r\ninterface Timers {\r\n    shield: number;\r\n    poison: number;\r\n    recharge: number;\r\n}\r\n\r\ntype PlayerState = State & Timers & { mana: number, spentMana: number };\r\n\r\ntype Spell = \"missile\" | \"drain\" | \"shield\" | \"poison\" | \"recharge\";\r\n\r\ninterface GameState {\r\n    playerState: PlayerState;\r\n    bossState: State;\r\n}\r\n\r\nconst spellCost = (spell: Spell): number => {\r\n    switch (spell) {\r\n        case \"drain\":\r\n            return 73;\r\n        case \"missile\":\r\n            return 53;\r\n        case \"poison\":\r\n            return 173;\r\n        case \"recharge\":\r\n            return 229;\r\n        case \"shield\":\r\n            return 113;\r\n    }\r\n};\r\n\r\nconst paySpell = (spell: Spell, state: PlayerState): PlayerState => {\r\n    const cost = spellCost(spell);\r\n    return {\r\n        ...state,\r\n        mana: state.mana - cost,\r\n        spentMana: state.spentMana + cost\r\n    };\r\n};\r\n\r\nconst launchSpell = (spell: Spell, { playerState, bossState }: GameState): GameState => {\r\n    playerState = paySpell(spell, playerState);\r\n    switch (spell) {\r\n        case \"drain\":\r\n            return {\r\n                playerState: {\r\n                    ...playerState,\r\n                    hitPoints: playerState.hitPoints + 2\r\n                },\r\n                bossState: {\r\n                    ...bossState,\r\n                    hitPoints: bossState.hitPoints - 2\r\n                }\r\n            };\r\n        case \"missile\":\r\n            return {\r\n                playerState,\r\n                bossState: {\r\n                    ...bossState,\r\n                    hitPoints: bossState.hitPoints - 4\r\n                }\r\n            };\r\n        case \"poison\":\r\n            return {\r\n                playerState: {\r\n                    ...playerState,\r\n                    poison: 6\r\n                },\r\n                bossState\r\n            };\r\n        case \"recharge\":\r\n            return {\r\n                playerState: {\r\n                    ...playerState,\r\n                    recharge: 5\r\n                },\r\n                bossState\r\n            };\r\n        case \"shield\":\r\n            return {\r\n                playerState: {\r\n                    ...playerState,\r\n                    shield: 6\r\n                },\r\n                bossState\r\n            };\r\n    }\r\n};\r\n\r\nconst parseState = (lines: string[]): State => {\r\n    const [hitPoints, damage] = lines.map((l) => parseInt(l.split(\": \")[1], 10));\r\n    return { hitPoints, damage };\r\n};\r\n\r\nconst applyEffects = ({ playerState, bossState }: GameState): GameState => {\r\n    const newPlayerState = { ...playerState };\r\n    const newBossState = { ...bossState };\r\n    if (newPlayerState.poison > 0) {\r\n        newPlayerState.poison--;\r\n        newBossState.hitPoints -= 3;\r\n    }\r\n    if (newPlayerState.shield > 0) {\r\n        newPlayerState.shield--;\r\n    }\r\n    if (newPlayerState.recharge > 0) {\r\n        newPlayerState.mana += 101;\r\n        newPlayerState.recharge--;\r\n    }\r\n    return { playerState: newPlayerState, bossState: newBossState };\r\n};\r\n\r\nconst bossDamageTurn = ({ playerState, bossState }: GameState): GameState => {\r\n    const damage = Math.max(bossState.damage - (playerState.shield > 0 ? 7 : 0), 1);\r\n    return hurtPlayer({ playerState, bossState }, damage);\r\n    // return {\r\n    //     playerState: {\r\n    //         ...playerState,\r\n    //         hitPoints: playerState.hitPoints - damage\r\n    //     },\r\n    //     bossState\r\n    // };\r\n};\r\n\r\nconst hurtPlayer = ({ playerState, bossState }: GameState, damage: number): GameState => {\r\n    return {\r\n        playerState: {\r\n            ...playerState,\r\n            hitPoints: playerState.hitPoints - damage\r\n        },\r\n        bossState\r\n    };\r\n};\r\n\r\nconst spells: Spell[] = [\r\n    \"drain\",\r\n    \"missile\",\r\n    \"poison\",\r\n    \"recharge\",\r\n    \"shield\"\r\n];\r\n\r\nconst canLaunchSpell = (state: GameState, spell: Spell): boolean => {\r\n    if (spellCost(spell) > state.playerState.mana) {\r\n        return false;\r\n    }\r\n    switch (spell) {\r\n        case \"missile\":\r\n        case \"drain\":\r\n            return true;\r\n        case \"poison\":\r\n            return state.playerState.poison === 0;\r\n        case \"recharge\":\r\n            return state.playerState.recharge === 0;\r\n        case \"shield\":\r\n            return state.playerState.shield === 0;\r\n    }\r\n};\r\n\r\ntype TurnResult = {\r\n    hasWon: true,\r\n    state: GameState\r\n} | {\r\n    hasWon: false,\r\n    hasLost: true,\r\n    state: GameState\r\n} | {\r\n    hasWon: false,\r\n    hasLost: false,\r\n    state: GameState\r\n};\r\n\r\nconst playTurn = (spell: Spell, state: GameState, playerHpLoss: number = 0): TurnResult => {\r\n    const current = state;\r\n    const afterStart = playerHpLoss === 0 ? current : hurtPlayer(current, playerHpLoss);\r\n    if (afterStart.playerState.hitPoints <= 0) {\r\n        return { hasWon: false, hasLost: true, state: afterStart };\r\n    }\r\n    const afterEffects = applyEffects(afterStart);\r\n    if (afterEffects.bossState.hitPoints <= 0) {\r\n        return { hasWon: true, state: afterEffects };\r\n    }\r\n    if (!canLaunchSpell(afterEffects, spell)) {\r\n        return { hasWon: false, hasLost: true, state: afterEffects };\r\n    }\r\n    const afterSpell = launchSpell(spell, afterEffects);\r\n    if (afterSpell.playerState.mana < 0) {\r\n        return { hasWon: false, hasLost: true, state: afterSpell };\r\n    }\r\n    if (afterSpell.bossState.hitPoints <= 0) {\r\n        return { hasWon: true, state: afterSpell };\r\n    }\r\n    const afterSecondEffects = applyEffects(afterSpell);\r\n    if (afterSecondEffects.bossState.hitPoints <= 0) {\r\n        return { hasWon: true, state: afterSecondEffects };\r\n    }\r\n    const afterBoss = bossDamageTurn(afterSecondEffects);\r\n    if (afterBoss.playerState.hitPoints <= 0) {\r\n        return { hasWon: false, hasLost: true, state: afterBoss };\r\n    }\r\n    return { hasWon: false, hasLost: false, state: afterBoss };\r\n};\r\n\r\nconst bfsPruned = (startGameState: GameState, hardMode: boolean): GameState | null => {\r\n    const states = new Queue<GameState>();\r\n    states.add(startGameState);\r\n    let bestWinState: GameState | null = null;\r\n    const updateBestState = (state: GameState) => {\r\n        if (bestWinState === null || bestWinState.playerState.spentMana > state.playerState.spentMana) {\r\n            bestWinState = state;\r\n        }\r\n    };\r\n    while (!states.isEmpty) {\r\n        const current = states.get()!;\r\n        if (bestWinState !== null) {\r\n            const cast = bestWinState as GameState;\r\n            if (cast.playerState.spentMana < current.playerState.spentMana) {\r\n                continue;\r\n            }\r\n        }\r\n        spells.forEach((spell) => {\r\n            const result = playTurn(spell, current, hardMode ? 1 : 0);\r\n            if (result.hasWon) {\r\n                updateBestState(result.state);\r\n            } else if (result.hasLost) {\r\n                return;\r\n            } else {\r\n                states.add(result.state);\r\n            }\r\n            // const afterEffects = applyEffects(current);\r\n            // if (afterEffects.bossState.hitPoints <= 0) {\r\n            //     updateBestState(afterEffects);\r\n            // }\r\n            // if (!canLaunchSpell(afterEffects, spell)) {\r\n            //     return;\r\n            // }\r\n            // const afterSpell = launchSpell(spell, afterEffects);\r\n            // if (afterSpell.playerState.mana < 0) {\r\n            //     return;\r\n            // }\r\n            // if (afterSpell.bossState.hitPoints <= 0) {\r\n            //     updateBestState(afterSpell);\r\n            // }\r\n            // const afterSecondEffects = applyEffects(afterSpell);\r\n            // if (afterSecondEffects.bossState.hitPoints <= 0) {\r\n            //     updateBestState(afterSecondEffects);\r\n            // }\r\n            // const afterBoss = bossDamageTurn(afterSecondEffects);\r\n            // if (afterBoss.playerState.hitPoints <= 0) {\r\n            //     return;\r\n            // }\r\n            // if (bestBossHitpoints > afterBoss.bossState.hitPoints) {\r\n            //     bestBossHitpoints = afterBoss.bossState.hitPoints;\r\n            //     console.log(bestBossHitpoints);\r\n            // }\r\n            // states.add(afterBoss);\r\n        });\r\n\r\n    }\r\n    return bestWinState;\r\n};\r\n\r\nconst exploreFight = (startGameState: GameState): GameState | null => {\r\n    // const queue = new WizardPriorityQueue();\r\n    const queue = new PairingHeap<{ spell: Spell; gameState: GameState }>({\r\n        comparator:\r\n            (a, b) =>\r\n                spellCost(b.spell) + b.gameState.playerState.spentMana -\r\n                (spellCost(a.spell) + a.gameState.playerState.spentMana)\r\n    });\r\n    spells.forEach((spell) => {\r\n        queue.push({ spell, gameState: startGameState });\r\n    });\r\n    while (!queue.isEmpty()) {\r\n        const round = queue.pop();\r\n        const afterEffects = applyEffects(round.gameState);\r\n        if (afterEffects.bossState.hitPoints <= 0) {\r\n            return afterEffects;\r\n        }\r\n        const afterSpell = launchSpell(round.spell, afterEffects);\r\n        if (afterSpell.playerState.mana < 0) {\r\n            continue;\r\n        }\r\n        if (afterSpell.bossState.hitPoints <= 0) {\r\n            return afterSpell;\r\n        }\r\n        const afterSecondEffects = applyEffects(afterSpell);\r\n        if (afterSecondEffects.bossState.hitPoints <= 0) {\r\n            return afterSecondEffects;\r\n        }\r\n        const afterBoss = bossDamageTurn(afterSecondEffects);\r\n        if (afterBoss.playerState.hitPoints <= 0) {\r\n            continue;\r\n        }\r\n        const spellCandidates: Spell[] = [\r\n            \"missile\",\r\n            \"drain\"\r\n        ];\r\n        if (afterBoss.playerState.recharge === 0) {\r\n            spellCandidates.push(\"recharge\");\r\n        }\r\n        if (afterBoss.playerState.shield === 0) {\r\n            spellCandidates.push(\"shield\");\r\n        }\r\n        if (afterBoss.playerState.poison === 0) {\r\n            spellCandidates.push(\"poison\");\r\n        }\r\n        spellCandidates.forEach((spell) => {\r\n            queue.push({ spell, gameState: afterBoss });\r\n        });\r\n    }\r\n    return null;\r\n};\r\n\r\nconst initGameState = (lines: string[]): GameState => {\r\n    const bossState = parseState(lines);\r\n    const playerState: PlayerState = {\r\n        hitPoints: 50,\r\n        mana: 500,\r\n        damage: 0,\r\n        poison: 0,\r\n        recharge: 0,\r\n        shield: 0,\r\n        spentMana: 0\r\n    };\r\n    return { bossState, playerState };\r\n\r\n};\r\n\r\nexport const wizardSimulator20xx = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const gameState = initGameState(lines);\r\n        const winner = bfsPruned(gameState, false);\r\n        if (winner === null) {\r\n            await outputCallback(\"No winner state found\");\r\n        } else {\r\n            await outputCallback(winner);\r\n        }\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const gameState = initGameState(lines);\r\n        const winner = bfsPruned(gameState, true);\r\n        if (winner === null) {\r\n            await outputCallback(\"No winner state found\");\r\n        } else {\r\n            await outputCallback(winner);\r\n        }\r\n    },\r\n    { key: \"wizard-simulator-20xx\", title: \"Wizard Simulator 20XX\", stars: 2, embeddedData: true}\r\n);\r\n","export class TimeCalculator {\r\n    private startTime: number | null = null;\r\n    public start(): void {\r\n        this.startTime = new Date().getTime();\r\n    }\r\n    public getDelta(): number {\r\n        if (this.startTime === null) {\r\n            throw new Error(\"Not started\");\r\n        }\r\n        return new Date().getTime() - this.startTime;\r\n    }\r\n    public getExpected(ratio: number): number {\r\n        if (ratio <= 0 || ratio > 1) {\r\n            throw new Error(\"Cannot calculate with ratio out of bounds\");\r\n        }\r\n        if (ratio === 1) {\r\n            return 0;\r\n        }\r\n        const delta = this.getDelta();\r\n        return (delta / ratio) - delta;\r\n    }\r\n\r\n    public getExpectedSerialized(ratio: number): string {\r\n        return serializeTime(this.getExpected(ratio));\r\n    }\r\n}\r\n\r\nexport const serializeTime = (ms: number): string => {\r\n    let seconds = Math.ceil(ms / 1000);\r\n    let minutes = 0;\r\n    let hours = 0;\r\n    let days = 0;\r\n    if (seconds > 0) {\r\n        minutes = Math.floor(seconds / 60);\r\n        seconds = seconds % 60;\r\n    }\r\n    if (minutes > 60) {\r\n        hours = Math.floor(minutes / 60);\r\n        minutes = minutes % 60;\r\n    }\r\n    if (hours > 24) {\r\n        days = Math.floor(hours / 24);\r\n        hours = hours % 24;\r\n    }\r\n    let result = [hours, minutes, seconds].map((e) => e.toString().padStart(2, \"0\")).join(\":\");\r\n    if (days > 0) {\r\n        result = `${days}d ${result}`;\r\n    }\r\n    return result;\r\n\r\n};\r\n","import { TimeCalculator } from \"../../../support/time\";\r\nimport { subsetGenerator } from \"../../../support/sequences\";\r\nimport { entryForFile } from \"../../entry\";\r\n\r\nconst parseLines = (lines: string[]): number[] => {\r\n    return lines.map((line) => parseInt(line, 10));\r\n};\r\n\r\nexport const itHangsInTheBalance = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const packages = parseLines(lines);\r\n        const totalWeight = packages.reduce((a, b) => a + b);\r\n\r\n        const target = totalWeight / 3;\r\n\r\n        let subsets = 0;\r\n        const expectedTotal = 2 ** packages.length;\r\n        const interestingSubsets: number[][] = [];\r\n        const timeCalculator = new TimeCalculator();\r\n        timeCalculator.start();\r\n        for (let size = 1; size < packages.length - 2; size++) {\r\n            for (const s of subsetGenerator(packages, 0, size)) {\r\n                if (s.length > 0 && s.reduce((a, b) => a + b, 0) === target) {\r\n                    interestingSubsets.push(s);\r\n                }\r\n                subsets++;\r\n                if (subsets % 10000000 === 0) {\r\n                    await outputCallback(\"Remaining \" + timeCalculator.getExpectedSerialized(subsets / expectedTotal));\r\n                }\r\n            }\r\n\r\n            const sorted = interestingSubsets\r\n                .map((e) => ({ e, i: e.reduce((a, b) => a * b, 1) }))\r\n                .sort((a, b) => a.i - b.i)\r\n                .map((e) => e.e);\r\n\r\n            for (const candidate of sorted) {\r\n                const rest = packages.filter((e) => candidate.indexOf(e) < 0);\r\n                for (const s of subsetGenerator(rest, 0)) {\r\n                    if (s.reduce((a, b) => a + b, 0) === target) {\r\n                        await outputCallback(\"Found it! \" + (candidate.reduce((a, b) => a * b, 1)));\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        await outputCallback(\"Sad :(\");\r\n\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const packages = parseLines(lines);\r\n        const totalWeight = packages.reduce((a, b) => a + b);\r\n\r\n        const target = totalWeight / 4;\r\n\r\n        let subsets = 0;\r\n        const expectedTotal = 2 ** packages.length;\r\n        const interestingSubsets: number[][] = [];\r\n        const timeCalculator = new TimeCalculator();\r\n        timeCalculator.start();\r\n        for (let size = 1; size < packages.length - 2; size++) {\r\n            for (const s of subsetGenerator(packages, 0, size)) {\r\n                if (s.length > 0 && s.reduce((a, b) => a + b, 0) === target) {\r\n                    interestingSubsets.push(s);\r\n                }\r\n                subsets++;\r\n                if (subsets % 10000000 === 0) {\r\n                    await outputCallback(\"Remaining \" + timeCalculator.getExpectedSerialized(subsets / expectedTotal));\r\n                }\r\n            }\r\n\r\n            const sorted = interestingSubsets\r\n                .map((e) => ({ e, i: e.reduce((a, b) => a * b, 1) }))\r\n                .sort((a, b) => a.i - b.i)\r\n                .map((e) => e.e);\r\n\r\n            for (const candidate of sorted) {\r\n                const rest = packages.filter((e) => candidate.indexOf(e) < 0);\r\n                for (const s of subsetGenerator(rest, 0)) {\r\n                    if (s.reduce((a, b) => a + b, 0) === target) {\r\n                        const trunkCandidates = rest.filter((e) => s.indexOf(e) < 0);\r\n                        for (const t of subsetGenerator(trunkCandidates, 0)) {\r\n                            if (t.reduce((a, b) => a + b, 0) === target) {\r\n                                await outputCallback(\"Found it! \" + (candidate.reduce((a, b) => a * b, 1)));\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        await outputCallback(\"Sad :(\");\r\n    },\r\n    { key: \"it-hangs-in-the-balance\", title: \"It Hangs in the Balance\", stars: 2 }\r\n);\r\n","export const modInverse = (n: bigint, mod: bigint): bigint => {\r\n    const {a, b} = calculateExtended(n, mod, 1);\r\n    return a > 0n ? a : a + mod;\r\n};\r\n\r\nfunction modPow(expo: bigint, base: bigint, mod: bigint): bigint {\r\n  // \"expo\" needs to be of type BigInt\r\n    let x = BigInt(base) % mod, res = expo & 1n? x: 1n\r\n    do {\r\n        x = x**2n % mod\r\n        if (expo & 2n) res = res * x % mod\r\n    } while (expo /= 2n)\r\n    return res\r\n}\r\n\r\nexport const pow = (n: bigint, exp: bigint, mod: bigint): bigint => {\r\n    return modPow(exp, n, mod);\r\n};\r\n\r\nexport const factorial = (n: number): number => {\r\n    let res = n;\r\n    while (n-- > 1) {\r\n        res *= n;\r\n    }\r\n    return res;\r\n};\r\n\r\nexport const logarithm = (base: number, target: number): number => {\r\n  return Math.log(base) / Math.log(target);\r\n};\r\n\r\nexport const calculateExtended = (aP: number | bigint, bP: number | bigint, m: number | bigint): {\r\n    a: bigint,\r\n    b: bigint\r\n} => {\r\n    aP = BigInt(aP);\r\n    bP = BigInt(bP);\r\n    m = BigInt(m);\r\n    let a = {\r\n        n: aP,\r\n        a: 1n,\r\n        b: 0n\r\n    };\r\n    let b = {\r\n        n: bP,\r\n        a: 0n,\r\n        b: 1n\r\n    };\r\n\r\n    while (!(m % b.n === 0n)) {\r\n        const f = a.n / b.n;\r\n        const q = {\r\n            n: a.n % b.n,\r\n            a: a.a - (f * b.a),\r\n            b: a.b - (f * b.b)\r\n        };\r\n        a = b;\r\n        b = q;\r\n    }\r\n\r\n    const factor = m / b.n;\r\n    const result = {\r\n        a: b.a * factor,\r\n        b: b.b * factor\r\n    };\r\n    if (result.a * aP + result.b * bP !== m) {\r\n        throw new Error(\"Inversion did not work: \" + JSON.stringify({...result, factor}));\r\n    }\r\n    return result;\r\n};\r\n\r\ninterface ExtendedEuclidFactor {\r\n    n: number;\r\n    a: number;\r\n    b: number;\r\n}\r\n\r\n\r\nexport function gcd(a: number, b: number): number {\r\n  let t = 0;\r\n  if (a < b) {\r\n      t = b;\r\n      b = a;\r\n      a = t;\r\n  }\r\n//   a < b && (t = b, b = a, a = t); // swap them if a < b\r\n  t = a % b;\r\n  return t ? gcd(b, t) : b;\r\n}\r\n\r\nexport function lcm(...ns: number[]): number {\r\n    if (ns.length === 0) {\r\n        throw new Error(\"Cannot find an lcm of 0 numbers\");\r\n    }\r\n    if (ns.length === 1) {\r\n        return ns[0];\r\n    }\r\n    const [a, b] = ns;\r\n    let result = a / gcd(a, b) * b;\r\n    for (let i = 2; i < ns.length; i++) {\r\n        result = lcm(result, ns[i]);\r\n    }\r\n    return result;\r\n}\r\n","import { pow } from \"../../../support/algebra\";\r\nimport { entryForFile } from \"../../entry\";\r\n\r\nconst fromRowColumn = (row: number, column: number) => {\r\n    const start = 1;\r\n    const firstOfRow = (row - 1) * row / 2 + 1;\r\n    const increments = column - 1;\r\n    const rightDelta = (increments + row) * (increments + row + 1) / 2 - (row * (row + 1) / 2);\r\n    return firstOfRow + rightDelta;\r\n};\r\n\r\nconst parseLines = (lines: string[]): { row: number, column: number } => {\r\n    const words = lines[0].split(\" \");\r\n    const rowIndex = words.indexOf(\"row\") + 1;\r\n    const columnIndex = words.indexOf(\"column\") + 1;\r\n    return {\r\n        row: parseInt(words[rowIndex].slice(0, -1), 10),\r\n        column: parseInt(words[columnIndex].slice(0, -1), 10)\r\n    };\r\n};\r\n\r\nexport const letItSnow = entryForFile(\r\n    async ({ lines, resultOutputCallback }) => {\r\n        const coordinates = parseLines(lines);\r\n        const start = 20151125;\r\n        const base = 252533;\r\n        const mod = 33554393;\r\n        const index = fromRowColumn(coordinates.row, coordinates.column);\r\n        const factor = pow(BigInt(base), BigInt(index - 1), BigInt(mod));\r\n        const result = (BigInt(start) * factor) % BigInt(mod);\r\n        await resultOutputCallback(Number(result));\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        throw Error(\"Not implemented\");\r\n    },\r\n    { key: \"let-it-snow\", title: \"Let It Snow\", stars: 2 }\r\n);\r\n","import { notQuiteLisp } from \"./not-quite-lisp\";\r\nimport { iWasToldThereWouldBeNoMath } from \"./i-was-told-there-would-be-no-math\";\r\nimport { perfectSphericalHousesInAVacuum } from \"./perfect-spherical-houses-in-a-vacuum\";\r\nimport { theIdealStockingStuffer } from \"./the-ideal-stocking-stuffer\";\r\nimport { internElves } from \"./intern-elves\";\r\nimport { probablyAFireHazard } from \"./probably-a-fire-hazard\";\r\nimport { someAssemblyRequired } from \"./some-assembly-required\";\r\nimport { matchsticks } from \"./matchsticks\";\r\nimport { allInASingleNight } from \"./all-in-a-single-night\";\r\nimport { elvesLookElvesSay } from \"./elves-look-elves-say\";\r\nimport { corporatePolicy } from \"./corporate-policy\";\r\nimport { abacusFramework } from \"./abacus-framework\";\r\nimport { knightsOfTheDinnerTable } from \"./knights-of-the-dinner-table\";\r\nimport { reindeerOlympics } from \"./reindeer-olympics\";\r\nimport { scienceForHungryPeople } from \"./science-for-hungry-people\";\r\nimport { auntSue } from \"./aunt-sue\";\r\nimport { noSuchThingAsTooMuch } from \"./no-such-thing-as-too-much\";\r\nimport { likeAGifForYourYard } from \"./like-a-gif-for-your-yard\";\r\nimport { turingLock } from \"./turing-lock\";\r\nimport { medicineForRudolph } from \"./medicine-for-rudolph\";\r\nimport { infiniteElvesAndInfiniteHouses } from \"./infinite-elves-and-infinite-houses\";\r\nimport { rpgSimulator20xx } from \"./rpg-simulator-20xx\";\r\nimport { wizardSimulator20xx } from \"./wizard-simulator-20xx\";\r\nimport { itHangsInTheBalance } from \"./it-hangs-in-the-balance\";\r\nimport { letItSnow } from \"./let-it-snow\";\r\nimport { embedAll } from \"../../entry\";\r\n\r\nexport const entries = embedAll([\r\n        notQuiteLisp,\r\n        iWasToldThereWouldBeNoMath,\r\n        perfectSphericalHousesInAVacuum,\r\n        theIdealStockingStuffer,\r\n        internElves,\r\n        probablyAFireHazard,\r\n        someAssemblyRequired,\r\n        matchsticks,\r\n        allInASingleNight,\r\n        elvesLookElvesSay,\r\n        corporatePolicy,\r\n        abacusFramework,\r\n        knightsOfTheDinnerTable,\r\n        reindeerOlympics,\r\n        scienceForHungryPeople,\r\n        auntSue,\r\n        noSuchThingAsTooMuch,\r\n        likeAGifForYourYard,\r\n        medicineForRudolph,\r\n        infiniteElvesAndInfiniteHouses,\r\n        rpgSimulator20xx,\r\n        wizardSimulator20xx,\r\n        turingLock,\r\n        itHangsInTheBalance,\r\n        letItSnow\r\n]);\r\n","import { CCoordinate, directions, manhattanDistance, rotate } from \"../../../support/geometry\";\r\nimport { entryForFile } from \"../../entry\";\r\n\r\nexport const noTimeForATaxicab = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        let currentDirection = directions.up;\r\n        const input = lines[0].split(\", \").map((l) => ({\r\n            direction: l[0],\r\n            steps: parseInt(l.slice(1), 10)\r\n        }));\r\n\r\n        let currentCoordinates = new CCoordinate(0, 0);\r\n\r\n        input.forEach((i) => {\r\n            if (i.direction === \"L\") {\r\n                currentDirection = rotate(currentDirection, \"Counterclockwise\");\r\n            } else {\r\n                currentDirection = rotate(currentDirection, \"Clockwise\");\r\n            }\r\n            currentCoordinates = currentCoordinates.sum(currentDirection.times(i.steps));\r\n        });\r\n\r\n        await outputCallback(manhattanDistance(currentCoordinates, {x: 0, y: 0}));\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        let currentDirection = directions.up;\r\n        const input = lines[0].split(\", \").map((l) => ({\r\n            direction: l[0],\r\n            steps: parseInt(l.slice(1), 10)\r\n        }));\r\n\r\n        let currentCoordinates = new CCoordinate(0, 0);\r\n\r\n        const visited: CCoordinate[] = [];\r\n\r\n        visited.push(currentCoordinates);\r\n\r\n        for (const i of input) {\r\n            if (i.direction === \"L\") {\r\n                currentDirection = rotate(currentDirection, \"Counterclockwise\");\r\n            } else {\r\n                currentDirection = rotate(currentDirection, \"Clockwise\");\r\n            }\r\n            for (let x = 0; x < i.steps; x++) {\r\n                currentCoordinates = currentCoordinates.sum(currentDirection);\r\n                if (visited.filter((e) => manhattanDistance(e, currentCoordinates) === 0).length > 0) {\r\n                    await outputCallback(\"Found it:\");\r\n                    await outputCallback(manhattanDistance(currentCoordinates, {x: 0, y: 0}));\r\n                    return;\r\n                }\r\n                visited.push(currentCoordinates);\r\n            }\r\n        }\r\n\r\n    },\r\n    { key: \"no-time-for-a-taxicab\", title: \"No Time for a Taxicab\", stars: 2}\r\n);\r\n","import { Bounds, CCoordinate, Coordinate, directions, isInBounds, manhattanDistance } from \"../../../support/geometry\";\r\nimport { entryForFile } from \"../../entry\";\r\n\r\ntype Dir = \"U\" | \"L\" | \"R\" | \"D\";\r\n\r\nconst parseLines = (lines: string[]): Dir[][] => {\r\n    return lines.map((line) => line.trim().split(\"\").map((e) => e as Dir));\r\n};\r\n\r\nconst dirMap = (d: Dir): CCoordinate => {\r\n    switch (d) {\r\n        case \"D\":\r\n            return directions.down;\r\n        case \"L\":\r\n            return directions.left;\r\n        case \"R\":\r\n            return directions.right;\r\n        case \"U\":\r\n            return directions.up;\r\n        default:\r\n            throw new Error(\"Unknown direction\");\r\n    }\r\n};\r\n\r\nconst coordinateToNumber = (c: Coordinate): number => {\r\n    return c.x + 1 + ((c.y) * 3);\r\n};\r\n\r\nconst coordinateToStrange = (c: Coordinate): string => {\r\n    const output = [\r\n        [\" \", \" \", \"1\"],\r\n        [\" \", \"2\", \"3\", \"4\"],\r\n        [\"5\", \"6\", \"7\", \"8\", \"9\"],\r\n        [\" \", \"A\", \"B\", \"C\"],\r\n        [\" \", \" \", \"D\"]\r\n    ];\r\n    return output[c.y][c.x];\r\n};\r\n\r\nexport const bathroomSecurity = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n\r\n        const bounds: Bounds = {\r\n            topLeft: {x: 0, y: 0},\r\n            size: {x: 3, y: 3}\r\n        };\r\n\r\n        let currentPosition = {x: 1, y: 1};\r\n\r\n        const input = parseLines(lines);\r\n\r\n        const result = input.map((line) => {\r\n            line.forEach((instruction) => {\r\n                const candidate = dirMap(instruction).sum(currentPosition);\r\n                if (isInBounds(candidate, bounds)) {\r\n                    currentPosition = candidate;\r\n                }\r\n            });\r\n            return coordinateToNumber(currentPosition);\r\n        });\r\n\r\n        await outputCallback(result.join(\"\"));\r\n\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        let currentPosition = {x: 0, y: 2};\r\n\r\n        const input = parseLines(lines);\r\n\r\n        const result = input.map((line) => {\r\n            line.forEach((instruction) => {\r\n                const candidate = dirMap(instruction).sum(currentPosition);\r\n                if (manhattanDistance(candidate, {x: 2, y: 2}) <= 2) {\r\n                    currentPosition = candidate;\r\n                }\r\n            });\r\n            return coordinateToStrange(currentPosition);\r\n        });\r\n\r\n        await outputCallback(result.join(\"\"));\r\n    },\r\n    { key: \"bathroom-security\", title: \"Bathroom Security\", stars: 2}\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\n\r\nconst parseLines = (lines: string[]): Array<[number, number, number]> => {\r\n    return lines.map(\r\n        (line) =>\r\n            line\r\n                .trim()\r\n                .split(\" \")\r\n                .filter((e) => e.length > 0)\r\n                .map((e) => parseInt(e, 10)) as [number, number, number]\r\n    );\r\n};\r\n\r\ntype Triple = [number, number, number];\r\n\r\nconst parseSecondLines = (lines: string[]): Array<[number, number, number]> => {\r\n    const input = parseLines(lines);\r\n    let current: number[][] = [[], [], []];\r\n    const result: Array<[number, number, number]> = [];\r\n    let started = false;\r\n    for (let i = 0; i < lines.length; i++) {\r\n        if (i % 3 === 0 && started) {\r\n            result.push(current[0] as Triple, current[1] as Triple, current[2] as Triple);\r\n            current = [[], [], []];\r\n        }\r\n        started = true;\r\n        for (let x = 0; x < 3; x++) {\r\n            current[x].push(input[i][x]);\r\n        }\r\n    }\r\n    result.push(current[0] as Triple, current[1] as Triple, current[2] as Triple);\r\n    return result;\r\n\r\n};\r\n\r\nexport const squaresWithThreeSides = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const input = parseLines(lines);\r\n\r\n        let count = 0;\r\n\r\n        for (const line of input) {\r\n            let isValid = true;\r\n            for (let i = 0; i < 3; i++) {\r\n                let s = 0;\r\n                for (let x = 0; x < 3; x++) {\r\n                    if (x !== i) {\r\n                        s += line[x];\r\n                    }\r\n                }\r\n                if (s <= line[i]) {\r\n                    isValid = false;\r\n                }\r\n            }\r\n            if (isValid) {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        await outputCallback(count);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const input = parseSecondLines(lines);\r\n\r\n        let count = 0;\r\n\r\n        for (const line of input) {\r\n            let isValid = true;\r\n            for (let i = 0; i < 3; i++) {\r\n                let s = 0;\r\n                for (let x = 0; x < 3; x++) {\r\n                    if (x !== i) {\r\n                        s += line[x];\r\n                    }\r\n                }\r\n                if (s <= line[i]) {\r\n                    isValid = false;\r\n                }\r\n            }\r\n            if (isValid) {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        await outputCallback(count);\r\n    },\r\n    { key: \"squares-with-three-sides\", title: \"Squares With Three Sides\", stars: 2}\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\n\r\ninterface Room {\r\n    encryptedName: string;\r\n    sectorID: number;\r\n    checksum: string;\r\n}\r\n\r\nconst parseLines = (lines: string[]): Room[] => {\r\n    return lines.map((line) => {\r\n        const dashIndex = line.lastIndexOf(\"-\");\r\n        const squareIndex = line.lastIndexOf(\"[\");\r\n        const name = line.slice(0, dashIndex);\r\n        const sectorID = parseInt(line.slice(dashIndex + 1, squareIndex), 10);\r\n        const checksum = line.slice(squareIndex + 1, -1);\r\n        return {\r\n            encryptedName: name,\r\n            sectorID,\r\n            checksum\r\n        };\r\n    });\r\n};\r\n\r\nconst decrypt = (room: Room): string => {\r\n    const mod = \"z\".charCodeAt(0) - \"a\".charCodeAt(0) + 1;\r\n\r\n    const newName = [...room.encryptedName].map((e) => {\r\n        if (e === \"-\") {\r\n            return e;\r\n        }\r\n        return String.fromCharCode(((e.charCodeAt(0) - \"a\".charCodeAt(0) + room.sectorID) % mod) + \"a\".charCodeAt(0));\r\n    });\r\n    return newName.join(\"\");\r\n};\r\n\r\nconst verifyChecksum = (room: Room): boolean => {\r\n    const frequency = new Map<string, number>();\r\n\r\n    for (const letter of room.encryptedName) {\r\n        if (letter !== \"-\") {\r\n            const value = frequency.get(letter) || 0;\r\n            frequency.set(letter, value + 1);\r\n        }\r\n    }\r\n\r\n    const result = [...frequency.entries()].sort((a, b) => {\r\n        if (b[1] === a[1]) {\r\n            return a[0].localeCompare(b[0]);\r\n        } else {\r\n            return b[1] - a[1];\r\n        }\r\n    });\r\n\r\n    const calculated = result.slice(0, 5).map((e) => e[0]).join(\"\") ;\r\n\r\n    return calculated === room.checksum;\r\n\r\n};\r\n\r\nexport const securityThroughObscurity = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const input = parseLines(lines);\r\n\r\n        const count = input.filter(verifyChecksum).map((e) => e.sectorID).reduce((a, b) => a + b);\r\n\r\n        await outputCallback(count);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const input = parseLines(lines);\r\n\r\n        const res = input.map((i) => {\r\n            return [decrypt(i), i.sectorID] as [string, number];\r\n        });\r\n\r\n        const candidates = res.filter((e) => e[0].includes(\"pole\"));\r\n\r\n        await outputCallback(candidates);\r\n        await outputCallback(\"\");\r\n        await outputCallback(res);\r\n    },\r\n    { key: \"security-through-obscurity\", title: \"Security Through Obscurity\", stars: 2}\r\n);\r\n","export const randrange = (min: number, max: number): number => Math.floor(Math.random() * (max - min + 1)) + min;\r\n\r\nexport const randomCharacter = (): string => {\r\n    const min = \"a\".charCodeAt(0);\r\n    const max = \"z\".charCodeAt(0);\r\n    return String.fromCharCode(randrange(min, max));\r\n};\r\n","import { Md5 } from \"ts-md5\";\r\nimport { randomCharacter } from \"../../../support/random\";\r\nimport { entryForFile } from \"../../entry\";\r\n\r\nconst getCharacter = (input: string, n: number): string | null => {\r\n    const hash = getHashIfRelevant(input, n);\r\n    if (hash !== null) {\r\n        return hash[5].toString();\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\nconst getCharacterAndPosition = (input: string, n: number): {c: string, index: number} | null => {\r\n    const hash = getHashIfRelevant(input, n);\r\n    if (hash !== null) {\r\n        const i = parseInt(hash[5], 10);\r\n        if (i.toString() === hash[5]) {\r\n            return {c: hash[6], index: i};\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\n\r\n\r\nconst getHashIfRelevant = (input: string, n: number): string | null => {\r\n    const hash = Md5.hashAsciiStr(input + n);\r\n    if (hash.slice(0, 5) === \"00000\") {\r\n        return hash as string;\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\nconst fillPasswordWithRandom = (password: Array<string|null>): string => {\r\n    return password.map((e) => e !== null ? e : randomCharacter()).join(\" \");\r\n};\r\n\r\nexport const howAboutANiceGameOfChess = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n\r\n        const input = lines[0].trim();\r\n        const password: Array<string | null> = [null, null, null, null, null, null, null, null];\r\n        let i = 0;\r\n        let lastTime = new Date().getTime();\r\n        while (password.length !== password.filter((e) => e !== null).length) {\r\n            const c = getCharacter(input, i++);\r\n            if (c !== null) {\r\n                const index = password.indexOf(null);\r\n                password[index] = c;\r\n                await outputCallback(null);\r\n                await outputCallback(fillPasswordWithRandom(password));\r\n            } else {\r\n                const current = new Date().getTime();\r\n                if (current - lastTime > 100) {\r\n                    lastTime = current;\r\n                    await outputCallback(null);\r\n                    await outputCallback(fillPasswordWithRandom(password));\r\n                }\r\n            }\r\n        }\r\n        await outputCallback(\"Decoded\");\r\n        await outputCallback(password.join(\"\"));\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const input = lines[0].trim();\r\n        const password: Array<string | null> = [null, null, null, null, null, null, null, null];\r\n        let i = 0;\r\n        let lastTime = new Date().getTime();\r\n        while (password.length !== password.filter((e) => e !== null).length) {\r\n            const c = getCharacterAndPosition(input, i++);\r\n            if (c !== null) {\r\n                const index = c.index;\r\n                if (index >= 0 && index < password.length && password[index] === null) {\r\n                    password[index] = c.c;\r\n                    await outputCallback(null);\r\n                    await outputCallback(fillPasswordWithRandom(password));\r\n                }\r\n            } else {\r\n                const current = new Date().getTime();\r\n                if (current - lastTime > 100) {\r\n                    lastTime = current;\r\n                    await outputCallback(null);\r\n                    await outputCallback(fillPasswordWithRandom(password));\r\n                }\r\n            }\r\n        }\r\n        await outputCallback(\"Decoded\");\r\n        await outputCallback(password.join(\"\"));\r\n    },\r\n    { key: \"how-about-a-nice-game-of-chess\", title: \"How About a Nice Game of Chess?\", stars: 2}\r\n);\r\n","import Best, { CustomBest, minNumber } from \"../../../support/best\";\r\nimport { entryForFile } from \"../../entry\";\r\n\r\nexport const signalsAndNoise = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const result: string[] = [];\r\n        for (let i = 0; i < lines[0].length; i++) {\r\n            const frequency = new Map<string, number>();\r\n            lines.forEach((line) => {\r\n                frequency.set(line[i], (frequency.get(line[i]) || 0) + 1);\r\n            });\r\n            const comparator = new Best<string>();\r\n            for (const entry of frequency) {\r\n                comparator.add({key: entry[1], value: entry[0]});\r\n            }\r\n            result.push(comparator.currentBest!.value);\r\n        }\r\n        await outputCallback(result.join(\"\"));\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const result: string[] = [];\r\n        for (let i = 0; i < lines[0].length; i++) {\r\n            const frequency = new Map<string, number>();\r\n            lines.forEach((line) => {\r\n                frequency.set(line[i], (frequency.get(line[i]) || 0) + 1);\r\n            });\r\n            const comparator = new CustomBest<number, string>(minNumber);\r\n            for (const entry of frequency) {\r\n                comparator.add({key: entry[1], value: entry[0]});\r\n            }\r\n            result.push(comparator.currentBest!.value);\r\n        }\r\n        await outputCallback(result.join(\"\"));\r\n    },\r\n    { key: \"signals-and-noise\", title: \"Signals and Noise\", stars: 2}\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\n\r\ninterface IP {\r\n    sections: string[];\r\n    hypernets: string[];\r\n}\r\n\r\nconst parseLines = (lines: string[]): IP[] => {\r\n    return lines.map((line) => {\r\n        let section: string[] = [];\r\n        let hypernet: string[] = [];\r\n        const result: IP = {\r\n            sections: [],\r\n            hypernets: []\r\n        };\r\n        let isHypernet = false;\r\n        for (const c of line) {\r\n            if (c === \"[\") {\r\n                isHypernet = true;\r\n                if (section.length > 0) {\r\n                    result.sections.push(section.join(\"\"));\r\n                    section = [];\r\n                }\r\n            } else if (c === \"]\") {\r\n                isHypernet = false;\r\n                result.hypernets.push(hypernet.join(\"\"));\r\n                hypernet = [];\r\n            } else {\r\n                if (isHypernet) {\r\n                    hypernet.push(c);\r\n                } else {\r\n                    section.push(c);\r\n                }\r\n            }\r\n        }\r\n        if (hypernet.length > 0) {\r\n            result.hypernets.push(hypernet.join(\"\"));\r\n        }\r\n        if (section.length > 0) {\r\n            result.sections.push(section.join(\"\"));\r\n        }\r\n        return result;\r\n    });\r\n};\r\n\r\nconst hasABBA = (sequence: string): boolean => {\r\n    for (let i = 0; i < sequence.length - 3; i++) {\r\n        if (sequence[i + 3] === sequence[i] && sequence[i + 1] === sequence[i + 2] && sequence[i + 1] !== sequence[i]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nconst supportsTLS = (ip: IP): boolean => {\r\n    for (const hyper of ip.hypernets) {\r\n        if (hasABBA(hyper)) {\r\n            return false;\r\n        }\r\n    }\r\n    for (const section of ip.sections) {\r\n        if (hasABBA(section)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nconst supportsSSL = (ip: IP): boolean => {\r\n    const babs: string[] = [];\r\n    for (const section of ip.sections) {\r\n        for (let i = 0; i < section.length - 2; i++) {\r\n            if (section[i] !== section[i + 1] && section[i] === section[i + 2]) {\r\n                babs.push(`${section[i + 1]}${section[i]}${section[i + 1]}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    for (const hyper of ip.hypernets) {\r\n        for (const bab of babs) {\r\n            if (hyper.includes(bab)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const internetProtocolVersion7 = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const ips = parseLines(lines);\r\n        const matching = ips.filter(supportsTLS).length;\r\n        await outputCallback(matching);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const ips = parseLines(lines);\r\n        const matching = ips.filter(supportsSSL).length;\r\n        await outputCallback(matching);\r\n    },\r\n    { key: \"internet-protocol-version-7\", title: \"Internet Protocol Version 7\", stars: 2}\r\n);\r\n","import { Coordinate } from \"../../../support/geometry\";\r\nimport { FixedSizeMatrix } from \"../../../support/matrix\";\r\nimport { entryForFile } from \"../../entry\";\r\n\r\ntype Cell = \"#\" | \".\";\r\n\r\ntype Field = FixedSizeMatrix<Cell>;\r\n\r\nconst size = {x: 50, y: 6};\r\n\r\nconst empty = (): Field => {\r\n    const field = new FixedSizeMatrix<Cell>(size);\r\n    field.fill(\".\");\r\n    return field;\r\n};\r\n\r\nconst rect = (rectangle: Coordinate, field: Field): Field => {\r\n    const result = empty();\r\n    for (let x = 0; x < size.x; x++) {\r\n        for (let y = 0; y < size.y; y++) {\r\n            if (x < rectangle.x && y < rectangle.y) {\r\n                result.set({x, y}, \"#\");\r\n            } else {\r\n                result.set({x, y}, field.get({x, y}));\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n};\r\n\r\nconst rotateRow = (row: number, by: number, field: Field): Field => {\r\n    const result = empty();\r\n    field.onEveryCell((c, e) => {\r\n        const x = c.y === row ? (c.x + by) % size.x : c.x;\r\n        result.set({x, y: c.y}, e);\r\n    });\r\n    return result;\r\n};\r\n\r\nconst rotateColumn = (column: number, by: number, field: Field): Field => {\r\n    const result = empty();\r\n    field.onEveryCell((c, e) => {\r\n        const y = c.x === column ? (c.y + by) % size.y : c.y;\r\n        result.set({x: c.x, y}, e);\r\n    });\r\n    return result;\r\n};\r\n\r\nconst execute = (line: string, field: Field): Field => {\r\n    const tokens = line.split(\" \");\r\n    if (tokens[0] === \"rect\") {\r\n        const [x, y] = tokens[1].split(\"x\").map((e) => parseInt(e, 10));\r\n        return rect({x, y}, field);\r\n    } else if (tokens[0] === \"rotate\") {\r\n        const by = parseInt(tokens[4], 10);\r\n        const el = parseInt(tokens[2].split(\"=\")[1], 10);\r\n        if (tokens[1] === \"column\") {\r\n            return rotateColumn(el, by, field);\r\n        } else {\r\n            return rotateRow(el, by, field);\r\n        }\r\n    }\r\n    throw new Error(\"Invalid operation \" + line);\r\n};\r\n\r\nexport const twoFactorAuthentication = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        let field: Field = empty();\r\n        for (const line of lines) {\r\n            field = execute(line, field);\r\n        }\r\n        let count = 0;\r\n        field.onEveryCell((c, e) => {\r\n            if (e === \"#\") {\r\n                count++;\r\n            }\r\n        });\r\n\r\n        await outputCallback(count);\r\n\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        let field: Field = empty();\r\n        for (const line of lines) {\r\n            field = execute(line, field);\r\n        }\r\n        await outputCallback(field.toString((e) => e!));\r\n    },\r\n    { key: \"two-factor-authentication\", title: \"Two-Factor Authentication\", stars: 2}\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\n\r\nconst parseLines = (lines: string[]): string => {\r\n    return lines.map((e) => e.trim()).join(\"\");\r\n};\r\n\r\nconst countExpandedLength = (line: string): number => {\r\n    let count = 0;\r\n    let i = 0;\r\n    while (i < line.length) {\r\n        if (line[i] === \"(\") {\r\n            const markerEnd = line.indexOf(\")\", i);\r\n            const marker = line.slice(i + 1, markerEnd);\r\n            const [size, repeat] = marker.split(\"x\").map((e) => parseInt(e, 10));\r\n            const toRepeat = line.slice(markerEnd + 1, markerEnd + 1 + size);\r\n            i = markerEnd + 1 + size;\r\n            const nestedLength = countExpandedLength(toRepeat);\r\n            count += (nestedLength * repeat);\r\n        } else {\r\n            count++;\r\n            i++;\r\n        }\r\n    }\r\n    return count;\r\n};\r\n\r\nconst expand = (line: string): string => {\r\n    const result: string[] = [];\r\n    let i = 0;\r\n    while (i < line.length) {\r\n        if (line[i] === \"(\") {\r\n            const markerEnd = line.indexOf(\")\", i);\r\n            const marker = line.slice(i + 1, markerEnd);\r\n            const [size, repeat] = marker.split(\"x\").map((e) => parseInt(e, 10));\r\n            const toRepeat = line.slice(markerEnd + 1, markerEnd + 1 + size);\r\n            for (let x = 0; x < repeat; x++) {\r\n                result.push(toRepeat);\r\n            }\r\n            i = markerEnd + 1 + size;\r\n        } else {\r\n            result.push(line[i]);\r\n            i++;\r\n        }\r\n    }\r\n    return result.join(\"\");\r\n};\r\n\r\nexport const explosivesInCyberspace = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const line = parseLines(lines);\r\n        await outputCallback(expand(line).length);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const line = parseLines(lines);\r\n        await outputCallback(countExpandedLength(line));\r\n    },\r\n    { key: \"explosives-in-cyberspace\", title: \"Explosives in Cyberspace\", stars: 2}\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\n\r\ntype Instruction = {\r\n    type: \"value\";\r\n    value: number;\r\n    bot: number;\r\n} | {\r\n    type: \"give\";\r\n    low: Out;\r\n    high: Out;\r\n    bot: number;\r\n};\r\n\r\ninterface BotState {\r\n    id: number;\r\n    chips: number[];\r\n}\r\n\r\ninterface Out {\r\n        type: \"output\" | \"bot\";\r\n        value: number;\r\n}\r\n\r\nconst parseLines = (lines: string[]): Instruction[] => {\r\n    return lines.map((line) => {\r\n        const tokens = line.split(\" \");\r\n        if (line.includes(\"goes\")) {\r\n            // line is value\r\n            return {\r\n                type: \"value\",\r\n                value: parseInt(tokens[1], 10),\r\n                bot: parseInt(tokens[5], 10)\r\n            };\r\n        } else {\r\n            // line is give\r\n            return {\r\n                type: \"give\",\r\n                bot: parseInt(tokens[1], 10),\r\n                high: {\r\n                    value: parseInt(tokens[11], 10),\r\n                    type: tokens[10] as \"bot\" | \"output\"\r\n                },\r\n                low: {\r\n                    value: parseInt(tokens[6], 10),\r\n                    type: tokens[5] as \"bot\" | \"output\"\r\n                }\r\n            };\r\n        }\r\n    });\r\n};\r\n\r\nclass Machine {\r\n    private callback?: (instruction: Instruction, botState: BotState) => void;\r\n    private toExecute: Instruction[] = [];\r\n    private botState: Map<number, BotState> = new Map<number, BotState>();\r\n    private outputState: Map<number, number[]> = new Map<number, number[]>();\r\n\r\n    private stop: boolean = false;\r\n\r\n    public execute(instruction: Instruction): void {\r\n        if (this.canExecute(instruction)) {\r\n            this.doExecute(instruction);\r\n            this.executePending();\r\n        } else {\r\n            this.toExecute.push(instruction);\r\n        }\r\n    }\r\n\r\n    public getOutput(id: number): number[] {\r\n        return this.outputState.get(id) || [];\r\n    }\r\n\r\n    public stopNextPending(): void {\r\n        this.stop = true;\r\n    }\r\n\r\n    public executeBeforeEveryInstruction(callback: (instruction: Instruction, botState: BotState) => void): void {\r\n        this.callback = callback;\r\n    }\r\n\r\n    private canExecute(instruction: Instruction): boolean {\r\n        if (instruction.type === \"value\") {\r\n            return true;\r\n        } else {\r\n            const bot = this.botState.get(instruction.bot);\r\n            if (!bot) {\r\n                return false;\r\n            }\r\n            return bot.chips.length === 2;\r\n        }\r\n    }\r\n\r\n    private doExecute(instruction: Instruction): void {\r\n        const bot = this.getState(instruction.bot);\r\n        if (this.callback) {\r\n            this.callback(instruction, bot);\r\n        }\r\n        if (instruction.type === \"value\") {\r\n            bot.chips.push(instruction.value);\r\n        } else {\r\n            const high = Math.max(...bot.chips);\r\n            const low = Math.min(...bot.chips);\r\n            bot.chips = [];\r\n            this.giveTo(instruction.high, high);\r\n            this.giveTo(instruction.low, low);\r\n        }\r\n    }\r\n\r\n    private giveTo({type, value}: Out, chip: number): void {\r\n        if (type === \"bot\" ) {\r\n            const state = this.getState(value);\r\n            state.chips.push(chip);\r\n        } else {\r\n            this.output(value, chip);\r\n        }\r\n    }\r\n\r\n    private output(id: number, chip: number): void {\r\n        const bin = this.outputState.get(id) || [];\r\n        bin.push(chip);\r\n        this.outputState.set(id, bin);\r\n    }\r\n\r\n    private getState(bot: number): BotState {\r\n        return this.botState.get(bot) || this.createBot(bot);\r\n    }\r\n\r\n    private createBot(bot: number): BotState {\r\n        const state: BotState = {\r\n            id: bot,\r\n            chips: []\r\n        };\r\n        this.botState.set(bot, state);\r\n        return state;\r\n    }\r\n\r\n    private executePending(): void {\r\n        if (this.stop) {\r\n            this.stop = false;\r\n            return;\r\n        }\r\n        for (let i = 0; i < this.toExecute.length; i++) {\r\n            const instruction = this.toExecute[i];\r\n            if (this.canExecute(instruction)) {\r\n                this.doExecute(instruction);\r\n                this.toExecute.splice(i, 1);\r\n                return this.executePending();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const balanceBots = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const instructions = parseLines(lines);\r\n        const machine = new Machine();\r\n        let target: number | null = null;\r\n        machine.executeBeforeEveryInstruction((instruction, botState) => {\r\n            if (botState.chips.length === 2) {\r\n                const [low, high] = [Math.min(...botState.chips), Math.max(...botState.chips)];\r\n                if (low === 17 && high === 61) {\r\n                    target = botState.id;\r\n                }\r\n            }\r\n        });\r\n        for (const instruction of instructions) {\r\n            machine.execute(instruction);\r\n            if (target !== null) {\r\n                await outputCallback(\"Bot was: \" + target);\r\n                return;\r\n            }\r\n        }\r\n        await outputCallback(\"Not found :(\");\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const instructions = parseLines(lines);\r\n        const machine = new Machine();\r\n        for (const instruction of instructions) {\r\n            machine.execute(instruction);\r\n        }\r\n        let result = 1;\r\n        for (let i = 0; i < 3; i++) {\r\n            const [x] = machine.getOutput(i);\r\n            result *= x;\r\n        }\r\n        await outputCallback(result);\r\n    },\r\n    { key: \"balance-bots\", title: \"Balance Bots\", stars: 2}\r\n);\r\n","import { Queue } from \"../../../support/data-structure\";\r\nimport { subsetGenerator } from \"../../../support/sequences\";\r\nimport { entryForFile } from \"../../entry\";\r\nimport { balanceBots } from \"./balance-bots\";\r\n\r\ninterface Item {\r\n    element: string;\r\n    type: \"generator\" | \"chip\";\r\n}\r\n\r\nfunction match(a: Item, b: Item): boolean {\r\n    return a.element === b.element && a.type === b.type;\r\n}\r\n\r\ntype Direction = \"up\" | \"down\";\r\n\r\nclass Building {\r\n\r\n    public currentFloor: number = 0;\r\n    private _state: Item[][];\r\n\r\n    constructor() {\r\n        const floors = 4;\r\n        this._state = [];\r\n        for (let i = 0; i < floors; i++) {\r\n            this._state.push([]);\r\n        }\r\n    }\r\n\r\n    public setFloors(floors: Array<{floorId: number, items: Item[]}>): void {\r\n        for (const floor of floors) {\r\n            if (floor.floorId < 0 || floor.floorId >= this._state.length) {\r\n                throw new Error(\"Invalid floor ID: \" + floor.floorId);\r\n            }\r\n            this._state[floor.floorId] = floor.items;\r\n        }\r\n    }\r\n\r\n    public addToFloor(floorId: number, items: Item[]): void {\r\n        if (floorId < 0 || floorId >= this._state.length) {\r\n            throw new Error(\"Invalid floor id: \" + floorId);\r\n        }\r\n        this._state[floorId] = this._state[floorId].concat(items);\r\n    }\r\n\r\n    public move(items: Item[], direction: Direction): Building | null {\r\n        const [floor] = this._state.map((e, i) => ({e, i})).filter((e) => {\r\n            for (const item of items) {\r\n                if (e.e.filter((x) => match(x, item)).length === 0) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        });\r\n        if (!floor || floor.i !== this.currentFloor) {\r\n            return null;\r\n        }\r\n        const newFloorIndex = floor.i + (direction === \"up\" ? 1 : -1);\r\n        const newFloor = this._state[newFloorIndex];\r\n        if (!newFloor) {\r\n            return null;\r\n        }\r\n\r\n        const newBuilding = this.clone();\r\n        newBuilding._state[floor.i] = floor.e.filter((e) => items.filter((x) => match(x, e)).length === 0);\r\n        newBuilding._state[newFloorIndex] = newFloor.concat(items);\r\n        newBuilding.currentFloor = newFloorIndex;\r\n\r\n        const isValid = newBuilding.isValid();\r\n        if (isValid) {\r\n            return newBuilding;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public isAllOnLastFloor(): boolean {\r\n        for (let i = 0; i < this._state.length - 1; i++) {\r\n            if (this._state[i].length > 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public isSubsetValid(items: Item[]) {\r\n        const floor = items;\r\n        const generators = floor.filter((e) => e.type === \"generator\");\r\n        if (generators.length === 0) {\r\n            return true;\r\n        }\r\n        const chips = floor.filter((e) => e.type === \"chip\");\r\n        for (const chip of chips) {\r\n            if (generators.filter((e) => e.element === chip.element).length === 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public isValid(): boolean {\r\n        for (const floor of this._state) {\r\n            if (!this.isSubsetValid(floor)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public currentFloorItems(): Item[] {\r\n        return this._state[this.currentFloor];\r\n    }\r\n\r\n    public clone(): Building {\r\n        const newBuilding = new Building();\r\n        newBuilding._state = this._state.map((e) => [...e]);\r\n        newBuilding.currentFloor = this.currentFloor;\r\n        return newBuilding;\r\n    }\r\n\r\n    public serialize(): string {\r\n        const res: string[] = [`${this.currentFloor}|`];\r\n        for (let i = 0; i < this._state.length; i++) {\r\n            res.push(i.toString());\r\n            const sorted = this._state[i].map((e) => toColumn(e)).sort();\r\n            sorted.forEach((e) => res.push(e));\r\n        }\r\n        return res.join(\"\");\r\n    }\r\n\r\n    public serializeToEquivalent(): string {\r\n        const elementMap = new Map<string, number>();\r\n\r\n        const res: string[] = [`${this.currentFloor}|`];\r\n\r\n        let nextMapped = 0;\r\n\r\n        for (let i = 0; i < this._state.length; i++) {\r\n            res.push(i.toString() + \"~\");\r\n            for (const item of this._state[i])  {\r\n                if (!elementMap.has(item.element)) {\r\n                    elementMap.set(item.element, nextMapped++);\r\n                }\r\n            }\r\n\r\n            const line: string[] = [];\r\n            for (const item of this._state[i]) {\r\n                line.push(`${elementMap.get(item.element)}${item.type}`);\r\n            }\r\n            res.push(line.sort().join(\",\"));\r\n        }\r\n\r\n        return res.join(\".\");\r\n\r\n    }\r\n\r\n    public toString(): string {\r\n        const out: string[] = [];\r\n        const columns: string[] = [\"E \"];\r\n        for (const floor of this._state) {\r\n            for (const item of floor) {\r\n                columns.push(toColumn(item));\r\n            }\r\n        }\r\n        for (let i = this._state.length - 1; i >= 0; i--) {\r\n            const serializedFloor: string[] = [`F${i}`];\r\n            for (const column of columns) {\r\n                if (column === \"E \") {\r\n                    if (i === this.currentFloor) {\r\n                        serializedFloor.push(\"E \");\r\n                    } else {\r\n                        serializedFloor.push(\". \");\r\n                    }\r\n                } else {\r\n                    if (this._state[i].filter((e) => toColumn(e) === column).length > 0) {\r\n                        serializedFloor.push(column);\r\n                    } else {\r\n                        serializedFloor.push(\". \");\r\n                    }\r\n                }\r\n            }\r\n            out.push(serializedFloor.join(\" \"));\r\n        }\r\n        return out.join(\"\\n\");\r\n    }\r\n}\r\n\r\n\r\n\r\nconst parseLines = (lines: string[]): Building => {\r\n    const floors = lines.map((line) => {\r\n        const cleaned = line.replace(/[,.]/g, \"\").replace(/-[^ ]*/g, \"\").trim();\r\n        const tokens = cleaned.split(\" \");\r\n        const floorOrdinal = tokens[1];\r\n        const floorId: number = parseOrdinal(floorOrdinal);\r\n        const generatorIndexes = tokens.map((e, i) => ({e, i})).filter((x) => x.e === \"generator\").map((x) => x.i - 1);\r\n        const microchipIndexes = tokens.map((e, i) => ({e, i})).filter((x) => x.e === \"microchip\").map((x) => x.i - 1);\r\n        const items: Item[] = [];\r\n        for (const generatorIndex of generatorIndexes) {\r\n            const x = {\r\n                element: tokens[generatorIndex],\r\n                type: \"generator\" as \"generator\",\r\n            };\r\n            items.push(x);\r\n        }\r\n\r\n        for (const microchipIndex of microchipIndexes) {\r\n            const x = {\r\n                element: tokens[microchipIndex],\r\n                type: \"chip\" as \"chip\",\r\n            };\r\n            items.push(x);\r\n        }\r\n\r\n        return {items, floorId};\r\n    });\r\n    const building = new Building();\r\n    building.setFloors(floors);\r\n    return building;\r\n};\r\n\r\nconst parseOrdinal = (ordinal: string): number => {\r\n    const valid = [\"first\", \"second\", \"third\", \"fourth\"];\r\n    const result = valid.indexOf(ordinal.toLowerCase());\r\n    if (result >= 0) {\r\n        return result;\r\n    }\r\n    throw new Error(\"Invalid ordinal: \" + ordinal);\r\n};\r\n\r\nconst toColumn = (item: Omit<Item, \"column\">): string => {\r\n    const element = item.element === \"promethium\" ? \"K\" : item.element[0].toUpperCase();\r\n    const type = item.type[0].toUpperCase();\r\n    return `${element}${type}`;\r\n};\r\n\r\nconst bringEverythingToFourth = (building: Building): number | null => {\r\n    const queue = new Queue<{building: Building, steps: number}>();\r\n    const visitedStates = new Set<string>();\r\n    queue.add({building, steps: 0});\r\n    while (!queue.isEmpty) {\r\n        const node = queue.get()!;\r\n        const serialized = node.building.serializeToEquivalent();\r\n        if (visitedStates.has(serialized)) {\r\n            continue;\r\n        }\r\n        visitedStates.add(serialized);\r\n        const candidateItems = node.building.currentFloorItems();\r\n        const candidatesToBring = subsetGenerator(candidateItems, 0, 2);\r\n        for (const candidate of candidatesToBring) {\r\n            if (candidate.length === 0) {\r\n                continue;\r\n            }\r\n            if (node.building.isSubsetValid(candidate)) {\r\n                for (const direction of [\"up\", \"down\"] as [\"up\", \"down\"]) {\r\n                    const moved = node.building.move(candidate, direction);\r\n                    const newSteps = node.steps + 1;\r\n                    if (moved) {\r\n                        if (moved.isAllOnLastFloor()) {\r\n                            return newSteps;\r\n                        } else {\r\n                            queue.add({building: moved, steps: newSteps});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const radioisotopeThermoelectricGenerators = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const building = parseLines(lines);\r\n        await outputCallback(building.toString());\r\n\r\n        await outputCallback(bringEverythingToFourth(building));\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const building = parseLines(lines);\r\n        const additionalElements: string[] = [\"elerium\", \"dilithium\"];\r\n        const types: Array<\"chip\" | \"generator\"> = [\"chip\", \"generator\"];\r\n        building.addToFloor(0, additionalElements.flatMap((e) => types.map((t) => ({\r\n            element: e,\r\n            type: t\r\n        }))));\r\n\r\n        await outputCallback(building.toString());\r\n\r\n        await outputCallback(bringEverythingToFourth(building));\r\n    },\r\n    { key: \"radioisotope-thermoelectric-generators\", title: \"Radioisotope Thermoelectric Generators\", stars: 2}\r\n);\r\n","import { setTimeoutAsync } from \"../../../../support/async\";\r\n\r\ninterface Registers {\r\n    a: number;\r\n    b: number;\r\n    c: number;\r\n    d: number;\r\n}\r\n\r\ntype RegisterKey = keyof Registers;\r\ninterface State {\r\n    registers: Registers;\r\n    currentInstruction: number;\r\n}\r\n\r\ntype Argument = RegisterKey | number;\r\n\r\ninterface DoubleArgumentInstruction {\r\n    type: \"cpy\" | \"jnz\";\r\n    args: [Argument, Argument];\r\n}\r\n\r\ninterface SingleArgumentInstruction {\r\n    type: \"inc\" | \"dec\" | \"tgl\";\r\n    args: Argument;\r\n}\r\n\r\ntype Instruction = SingleArgumentInstruction | DoubleArgumentInstruction;\r\n\r\nconst isRegister = (e: any): e is RegisterKey => {\r\n    return e === \"a\" || e === \"b\" || e === \"c\" || e === \"d\";\r\n};\r\n\r\nconst isSingleArgument = (i: Instruction): i is SingleArgumentInstruction => {\r\n    return (i.args as [Argument, Argument]).pop === undefined;\r\n};\r\n\r\nconst parseArgument = (s: string): Argument => {\r\n    if (isRegister(s)) {\r\n        return s;\r\n    } else {\r\n        return parseInt(s, 10);\r\n    }\r\n};\r\n\r\nconst argumentToValue = (a: Argument, state: State): number => {\r\n    if (isRegister(a)) {\r\n        return state.registers[a];\r\n    }\r\n    return a;\r\n};\r\n\r\n\r\n\r\nconst executeInstruction = (instruction: Instruction, state: State, instructions: Instruction[]): void => {\r\n    let shouldIncreaseCurrentInstruction = true;\r\n    switch (instruction.type) {\r\n        case \"cpy\":\r\n            if (!isRegister(instruction.args[1])) {\r\n                break;\r\n            }\r\n            const value = argumentToValue(instruction.args[0], state);\r\n            state.registers[instruction.args[1]] = value;\r\n            break;\r\n        case \"inc\":\r\n            if (!isRegister(instruction.args)) {\r\n                break;\r\n            }\r\n            state.registers[instruction.args]++;\r\n            break;\r\n        case \"dec\":\r\n            if (!isRegister(instruction.args)) {\r\n                break;\r\n            }\r\n            state.registers[instruction.args]--;\r\n            break;\r\n        case \"jnz\":\r\n            // if (!isRegister(instruction.args[0])) {\r\n            //     break;\r\n            // }\r\n            // if (isRegister(instruction.args[1])) {\r\n            //     break;\r\n            // }\r\n            const a = argumentToValue(instruction.args[0], state);\r\n            if (a !== 0) {\r\n                shouldIncreaseCurrentInstruction = false;\r\n                state.currentInstruction += argumentToValue(instruction.args[1], state);\r\n                    // isRegister(instruction.args[1]) ? state.registers[instruction.args[1]] : instruction.args[1];\r\n            }\r\n            break;\r\n        case \"tgl\":\r\n            const delta = isRegister(instruction.args) ? state.registers[instruction.args] : instruction.args;\r\n            const instructionToChange = instructions[state.currentInstruction + delta];\r\n            if (instructionToChange) {\r\n                if (isSingleArgument(instructionToChange)) {\r\n                    if (instructionToChange.type === \"inc\") {\r\n                        instructionToChange.type = \"dec\";\r\n                    } else {\r\n                        instructionToChange.type = \"inc\";\r\n                    }\r\n                } else {\r\n                    if (instructionToChange.type === \"jnz\") {\r\n                        instructionToChange.type = \"cpy\";\r\n                    } else {\r\n                        instructionToChange.type = \"jnz\";\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n    }\r\n\r\n    if (shouldIncreaseCurrentInstruction) {\r\n        state.currentInstruction++;\r\n    }\r\n};\r\n\r\nexport const prettyPrint = (state: State, program: Instruction[]): string => {\r\n    const output: Array<[string, string]> = [];\r\n    output.push([\"I\", state.currentInstruction.toString().padStart(5)]);\r\n    for (const register of [\"a\", \"b\", \"c\", \"d\"] as RegisterKey[]) {\r\n        output.push([register, state.registers[register].toString().padStart(5)]);\r\n    }\r\n\r\n    const maxOutLength = output.map((e) => e[1].length).reduce((acc, next) => Math.max(acc, next));\r\n\r\n    const result: string[] = [];\r\n\r\n    const simpleLine = \"+\" + \"-\".repeat(3) + \"+\" + \"-\".repeat(maxOutLength + 2) + \"+\";\r\n\r\n    result.push(simpleLine);\r\n    for (const line of output) {\r\n        result.push(`| ${line[0]} | ${line[1]} |`);\r\n        result.push(simpleLine);\r\n    }\r\n\r\n    for (let i = 0; i < program.length; i++) {\r\n        result.push(\r\n            (i !== state.currentInstruction ? \"   \" : \"-> \")\r\n             + `${program[i].type} ${JSON.stringify(program[i].args)}`\r\n        );\r\n    }\r\n\r\n    return result.join(\"\\n\");\r\n};\r\n\r\nexport const execute = async (\r\n    program: Instruction[],\r\n    state: State,\r\n    executionCallback?: (program: Instruction[], state: State\r\n) => Promise<boolean>): Promise<void> => {\r\n    const programExecution = program.map((instruction) => ({...instruction}));\r\n    const i = 0;\r\n    while (true) {\r\n        const currentInstruction = programExecution[state.currentInstruction];\r\n        if (!currentInstruction) {\r\n            return;\r\n        }\r\n        executeInstruction(currentInstruction, state, programExecution);\r\n        if (executionCallback) {\r\n            const result = await executionCallback(programExecution, state);\r\n            if (!result) {\r\n                return;\r\n            }\r\n        }\r\n        // console.log(state);\r\n        // await setTimeoutAsync(1000);\r\n    }\r\n};\r\n\r\nexport const parseProgram = (lines: string[]): Instruction[] => {\r\n    return lines\r\n    .map((line) => line.trim())\r\n    .filter((line) => line)\r\n    .filter((line) => !line.startsWith(\"#\"))\r\n    .map((line) => {\r\n        const tokens = line.split(\" \");\r\n        const instruction = tokens[0];\r\n        if (instruction === \"cpy\" || instruction === \"jnz\") {\r\n            return {\r\n                type: instruction,\r\n                args: [parseArgument(tokens[1]), parseArgument(tokens[2])]\r\n            };\r\n        } else if (instruction === \"inc\" || instruction === \"dec\" || instruction === \"tgl\") {\r\n            return {\r\n                type: instruction,\r\n                args: tokens[1] as RegisterKey\r\n            };\r\n        } else {\r\n            throw new Error(\"invalid instruction \" + instruction);\r\n        }\r\n    });\r\n};\r\n\r\nexport const emptyState = (): State => {\r\n    return {\r\n        currentInstruction: 0,\r\n        registers: {\r\n            a: 0,\r\n            b: 0,\r\n            c: 0,\r\n            d: 0\r\n        }\r\n    };\r\n};\r\n","import { setTimeoutAsync } from \"../../../support/async\";\r\nimport { entryForFile } from \"../../entry\";\r\nimport { emptyState, execute, parseProgram } from \"./common/assembunny\";\r\n\r\n\r\nexport const leonardosMonorail = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const program = parseProgram(lines);\r\n        const state = emptyState();\r\n        await execute(program, state);\r\n\r\n        await outputCallback(state.registers.a);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const program = parseProgram(lines);\r\n        const state = emptyState();\r\n        state.registers.c = 1;\r\n        await execute(program, state);\r\n\r\n        await outputCallback(state.registers.a);\r\n    },\r\n    { key: \"leonardos-monorail\", title: \"Leonardo's Monorail\", stars: 2}\r\n);\r\n","import { Coordinate, serialization } from \"./geometry\";\r\nimport { Queue } from \"./data-structure\";\r\n\r\ntype FieldGetter<TValue, TCoordinate> = (c: TCoordinate) => TValue | undefined;\r\nexport interface CellWithDistance<TValue, TCoordinate> {\r\n    cell: TValue;\r\n    coordinate: TCoordinate;\r\n    distance: number | null;\r\n    parent: CellWithDistance<TValue, TCoordinate> | null;\r\n}\r\n\r\ninterface DistanceGetter<TValue, TCoordinate> {\r\n    list: Array<CellWithDistance<TValue, TCoordinate>>;\r\n    map(c: TCoordinate): (number | null);\r\n    pathTo(c: TCoordinate): CellWithDistance<TValue, TCoordinate>[];\r\n}\r\n\r\ntype DistanceCalculator<TValue, TCoordinate> =\r\n    (start: CellWithDistance<TValue, TCoordinate>, end: TCoordinate) => number | null;\r\n\r\nexport function calculateDistancesGenericCoordinates<TValue, TCoordinate>(\r\n    fieldGetter: FieldGetter<TValue, TCoordinate>,\r\n    distanceCalculator: DistanceCalculator<TValue, TCoordinate>,\r\n    getSurrounding: (c: TCoordinate) => TCoordinate[],\r\n    start: TCoordinate,\r\n    serializer: (c: TCoordinate) => string,\r\n    stopAt: ((c: CellWithDistance<TValue, TCoordinate>) => boolean) | null = null\r\n): DistanceGetter<TValue, TCoordinate> {\r\n    const distanceMap: { [key: string]: CellWithDistance<TValue, TCoordinate> } = {};\r\n\r\n    const visitQueue = new Queue<CellWithDistance<TValue, TCoordinate>>();\r\n\r\n    const startCell = fieldGetter(start);\r\n    if (startCell === undefined) {\r\n        throw new RangeError(\"Cannot find starting cell\");\r\n    }\r\n    const startNode: CellWithDistance<TValue, TCoordinate> = {\r\n        cell: startCell,\r\n        coordinate: start,\r\n        distance: 0,\r\n        parent: null\r\n    };\r\n\r\n    distanceMap[serializer(startNode.coordinate)] = startNode;\r\n    visitQueue.add(startNode);\r\n\r\n    let forceStop = false;\r\n    while (!visitQueue.isEmpty) {\r\n        const node = visitQueue.get()!;\r\n        const surrounding = getSurrounding(node.coordinate);\r\n        for (const s of surrounding) {\r\n            const withDistance = distanceMap[serializer(s)];\r\n            if (!withDistance) {\r\n                const cell = fieldGetter(s);\r\n                if (cell !== undefined) {\r\n                    const distance = distanceCalculator(node, s);\r\n                    if (distance) {\r\n                        const sWithDistance: CellWithDistance<TValue, TCoordinate> = {\r\n                            cell,\r\n                            coordinate: s,\r\n                            distance,\r\n                            parent: node\r\n                        };\r\n                        distanceMap[serializer(s)] = sWithDistance;\r\n                        if (stopAt && stopAt(sWithDistance))  {\r\n                            forceStop = true;\r\n                            break;\r\n                        }\r\n                        visitQueue.add(sWithDistance);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (forceStop) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return {\r\n        map: (c: TCoordinate) => {\r\n            const v = distanceMap[serializer(c)];\r\n            if (v) {\r\n                return v.distance;\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n        pathTo: (c: TCoordinate): CellWithDistance<TValue, TCoordinate>[] => {\r\n            const queue = [];\r\n            let node: CellWithDistance<TValue, TCoordinate> | null = distanceMap[serializer(c)];\r\n            while (node) {\r\n                queue.push(node);\r\n                node = node.parent;\r\n            }\r\n            return queue.reverse();\r\n        },\r\n        list: Object.values(distanceMap)\r\n    };\r\n}\r\n\r\nexport function calculateDistances<T>(\r\n    fieldGetter: FieldGetter<T, Coordinate>,\r\n    distanceCalculator: DistanceCalculator<T, Coordinate>,\r\n    getSurrounding: (c: Coordinate) => Coordinate[],\r\n    start: Coordinate,\r\n    stopAt: ((c: CellWithDistance<T, Coordinate>) => boolean) | null = null\r\n): DistanceGetter<T, Coordinate> {\r\n    return calculateDistancesGenericCoordinates(\r\n        fieldGetter,\r\n        distanceCalculator,\r\n        getSurrounding,\r\n        start,\r\n        serialization.serialize,\r\n        stopAt\r\n    );\r\n    // const distanceMap: { [key: string]: CellWithDistance<T, Coordinate> } = {};\r\n\r\n    // const visitQueue = new Queue<CellWithDistance<T, Coordinate>>();\r\n\r\n    // const startCell = fieldGetter(start);\r\n    // if (!startCell) {\r\n    //     throw new RangeError(\"Cannot find starting cell\");\r\n    // }\r\n    // const startNode: CellWithDistance<T, Coordinate> = {\r\n    //     cell: startCell,\r\n    //     coordinate: start,\r\n    //     distance: 0\r\n    // };\r\n\r\n    // distanceMap[serialization.serialize(startNode.coordinate)] = startNode;\r\n    // visitQueue.add(startNode);\r\n\r\n    // while (!visitQueue.isEmpty) {\r\n    //     const node = visitQueue.get()!;\r\n    //     const surrounding = getSurrounding(node.coordinate);\r\n    //     surrounding.forEach((s) => {\r\n    //         const withDistance = distanceMap[serialization.serialize(s)];\r\n    //         if (!withDistance) {\r\n    //             const cell = fieldGetter(s);\r\n    //             if (cell) {\r\n    //                 const distance = distanceCalculator(node, s);\r\n    //                 if (distance) {\r\n    //                     const sWithDistance: CellWithDistance<T, Coordinate> = {\r\n    //                         cell,\r\n    //                         coordinate: s,\r\n    //                         distance\r\n    //                     };\r\n    //                     distanceMap[serialization.serialize(s)] = sWithDistance;\r\n    //                     visitQueue.add(sWithDistance);\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //     });\r\n    // }\r\n\r\n    // return {\r\n    //     map: (c: Coordinate) => {\r\n    //         const v = distanceMap[serialization.serialize(c)];\r\n    //         if (v) {\r\n    //             return v.distance;\r\n    //         } else {\r\n    //             return null;\r\n    //         }\r\n    //     },\r\n    //     list: Object.values(distanceMap)\r\n    // };\r\n}\r\n","import { Coordinate, getSurrounding, manhattanDistance } from \"../../../support/geometry\";\r\nimport { calculateDistances } from \"../../../support/labyrinth\";\r\nimport { FixedSizeMatrix } from \"../../../support/matrix\";\r\nimport { entryForFile } from \"../../entry\";\r\n\r\nconst countParity = (n: number): 0 | 1 => {\r\n    let parity: (0 | 1) = 0;\r\n    while (n !== 0) {\r\n        n = (n - 1) & n;\r\n        parity = (parity ^ 1) as (0 | 1);\r\n    }\r\n    return parity;\r\n};\r\n\r\ntype Tile = \"#\" | \".\";\r\n\r\nconst calculatorBuilder = (secretNumber: number): ((c: Coordinate) => Tile) => {\r\n    return (c: Coordinate) => {\r\n        const value = (c.x + c.y) ** 2 + 3 * c.x + c.y + secretNumber;\r\n        const result = countParity(value) === 0 ? \".\" : \"#\";\r\n        return result;\r\n    };\r\n};\r\n\r\nexport const aMazeOfTwistyLittleCubicles = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const calculator = calculatorBuilder(parseInt(lines[0], 10));\r\n        // const calculator = calculatorBuilder(10);\r\n        const target = {x: 31, y: 39};\r\n        // const target = {x: 7, y: 4};\r\n        const maze = calculateDistances<Tile>(\r\n            (c) => (c.x < 0 || c.y < 0) ? undefined : calculator(c),\r\n            (a, b) => (a.distance || 0) + manhattanDistance(a.coordinate, b),\r\n            (c) => getSurrounding(c).filter((e) => e.x >= 0 && e.y >= 0).filter((e) => calculator(e) === \".\"),\r\n            {x: 1, y: 1},\r\n            (c) => manhattanDistance(c.coordinate, target) === 0\r\n        );\r\n\r\n        await outputCallback(maze.map(target));\r\n\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const calculator = calculatorBuilder(parseInt(lines[0], 10));\r\n        // const calculator = calculatorBuilder(10);\r\n        const target = {x: 31, y: 39};\r\n        // const target = {x: 7, y: 4};\r\n        const maze = calculateDistances<Tile>(\r\n            (c) => (c.x < 0 || c.y < 0) ? undefined : calculator(c),\r\n            (a, b) => (a.distance || 0) + manhattanDistance(a.coordinate, b),\r\n            (c) => getSurrounding(c).filter((e) => e.x >= 0 && e.y >= 0).filter((e) => calculator(e) === \".\"),\r\n            {x: 1, y: 1},\r\n            (c) => (c.distance && c.distance > 50) || false\r\n        );\r\n\r\n        // let count = 0;\r\n        // maze.list.filter(e => e.cell === \".\" && e.distance && e.distance <= 50).forEach(() => count++)\r\n        await outputCallback(JSON.stringify(maze.list.filter((e) => e.distance !== null && e.distance <= 50).length));\r\n\r\n        const field = new FixedSizeMatrix<Tile | number>({x: 60, y: 60});\r\n        for (let x = 0; x < 60; x++) {\r\n            for (let y = 0; y < 60; y++) {\r\n                const tile = calculator({x, y});\r\n                if (tile === \"#\") {\r\n                    field.set({x, y}, tile);\r\n                } else {\r\n                    field.set({x, y}, maze.map({x, y}) || \".\");\r\n                }\r\n            }\r\n        }\r\n        await outputCallback(field.toString((e) => {\r\n            if (e === \"#\" || e === \".\") {\r\n                return ` ${e} `;\r\n            } else if (e) {\r\n                if (e < 10) {\r\n                    return ` ${e} `;\r\n                } else {\r\n                    return ` ${e}`;\r\n                }\r\n            } else {\r\n                return \"   \";\r\n            }\r\n        }));\r\n    },\r\n    { key: \"a-maze-of-twisty-little-cubicles\", title: \"A Maze of Twisty Little Cubicles\", stars: 2}\r\n);\r\n","import { Md5 } from \"ts-md5\";\r\nimport { entryForFile } from \"../../entry\";\r\n\r\ntype Hash = (n: number) => string;\r\n\r\nconst baseHashGenerator = (salt: string): Hash => {\r\n    return (n: number) => {\r\n        return Md5.hashAsciiStr(salt + n) as string;\r\n    };\r\n};\r\n\r\nconst stretchHashGenerator = (salt: string): Hash => {\r\n    return (n: number) => {\r\n        let current: string = Md5.hashAsciiStr(salt + n) as string;\r\n        for (let i = 0; i < 2016; i++) {\r\n            current = Md5.hashAsciiStr(current) as string;\r\n        }\r\n        return current;\r\n    };\r\n};\r\n\r\nconst incrementHashes = (hash: Hash, current: string[], howManyToAdd: number) => {\r\n    let nextIndex = current.length;\r\n    const newLength = current.length + howManyToAdd;\r\n    while (nextIndex < newLength) {\r\n        const v = hash(nextIndex);\r\n        current.push(v);\r\n        nextIndex++;\r\n    }\r\n    console.log(\"New length: \" + newLength);\r\n};\r\n\r\nconst findTriplet = (s: string): number | null => {\r\n    const tokens = s.split(\"\");\r\n    for (let i = 0; i < tokens.length - 2; i++) {\r\n        if (tokens[i] === tokens[i + 1] && tokens[i + 1] === tokens[i + 2]) {\r\n            return i;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\nconst hasQuintuplet = (s: string, c: string): boolean => {\r\n    const rawTarget: string[] = [];\r\n    for (let i = 0; i < 5; i++) {\r\n        rawTarget.push(c);\r\n    }\r\n    const target = rawTarget.join(\"\");\r\n    return s.includes(target);\r\n};\r\n\r\nconst isValid = (s: string, hashes: string[], hash: Hash, index: number): boolean => {\r\n    const triplet = findTriplet(s);\r\n    if (triplet === null) {\r\n        return false;\r\n    }\r\n    const targetIndex = index + 1000;\r\n    while (targetIndex >= hashes.length) {\r\n        incrementHashes(hash, hashes, 2000);\r\n    }\r\n    for (let i = index + 1; i <= targetIndex; i++) {\r\n        if (hasQuintuplet(hashes[i], s[triplet])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const oneTimePad = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const hashCalculator = baseHashGenerator(lines[0]);\r\n        let howMany = 64;\r\n        const hashes: string[] = [];\r\n        const keys: Array<[string, number]> = [];\r\n        let currentIndex = 0;\r\n        while (howMany > 0) {\r\n            if (currentIndex >= hashes.length) {\r\n                incrementHashes(hashCalculator, hashes, 2000);\r\n            }\r\n            if (isValid(hashes[currentIndex], hashes, hashCalculator, currentIndex)) {\r\n                keys.push([hashes[currentIndex], currentIndex]);\r\n                howMany--;\r\n            }\r\n            currentIndex++;\r\n        }\r\n        await outputCallback(keys[keys.length - 1][1]);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const hashCalculator = stretchHashGenerator(lines[0]);\r\n        let howMany = 64;\r\n        const hashes: string[] = [];\r\n        const keys: Array<[string, number]> = [];\r\n        let currentIndex = 0;\r\n        while (howMany > 0) {\r\n            if (currentIndex >= hashes.length) {\r\n                incrementHashes(hashCalculator, hashes, 2000);\r\n            }\r\n            if (isValid(hashes[currentIndex], hashes, hashCalculator, currentIndex)) {\r\n                keys.push([hashes[currentIndex], currentIndex]);\r\n                howMany--;\r\n            }\r\n            currentIndex++;\r\n        }\r\n        await outputCallback(keys[keys.length - 1][1]);\r\n    },\r\n    { key: \"one-time-pad\", title: \"One-Time Pad\", stars: 2}\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\n\r\ninterface Disc {\r\n    size: number;\r\n    position: number;\r\n    level: number;\r\n}\r\n\r\ninterface Ball {\r\n    launchedAt: number;\r\n    level: number;\r\n    debug: string[];\r\n}\r\n\r\nconst parseLines = (lines: string[]): Disc[] => {\r\n    return lines.map((line) => {\r\n        const tokens = line.replace(/[.,;=#]/g, \" \").split(\" \").filter((e) => e);\r\n        return {\r\n            level: parseInt(tokens[1], 10),\r\n            size: parseInt(tokens[3], 10),\r\n            position: parseInt(tokens[tokens.length - 1], 10)\r\n        };\r\n    });\r\n};\r\n\r\nconst moveDisc = (disc: Disc): Disc => {\r\n    return {\r\n        ...disc,\r\n        position: (disc.position + 1) % disc.size\r\n    };\r\n};\r\n\r\nclass GameState {\r\n    public get time(): number {\r\n        return this._time;\r\n    }\r\n    private _time: number = 0;\r\n\r\n    private balls: Ball[] = [];\r\n    constructor(private discs: Disc[]) {\r\n        this.addNewBall();\r\n    }\r\n\r\n    public passTime(): Ball | null {\r\n        this._time++;\r\n        this.moveDiscs();\r\n        this.moveBalls();\r\n        const winner = this.findWinner();\r\n        if (winner) {\r\n            return winner;\r\n        }\r\n        this.removeInvalidBalls();\r\n        this.addNewBall();\r\n        this.debug();\r\n        return null;\r\n    }\r\n\r\n    public toString(): string {\r\n        return `${this.time}|${this.discs.map((d) => `${d.level}~${d.position}`).join(\"-\")}`;\r\n    }\r\n\r\n    private debug() {\r\n        this.balls.forEach((ball) => {\r\n            ball.debug.push(`${this.toString()}!${ball.level}`);\r\n        });\r\n    }\r\n\r\n    private addNewBall() {\r\n        this.balls.push({level: 0, launchedAt: this._time, debug: []});\r\n    }\r\n\r\n    private moveDiscs() {\r\n        this.discs = this.discs.map(moveDisc);\r\n    }\r\n\r\n    private moveBalls() {\r\n        this.balls.forEach((b) => b.level++);\r\n    }\r\n\r\n    private findWinner(): Ball | null {\r\n        const winner = this.balls.find((ball) => ball.level > this.discs.length);\r\n        if (winner) {\r\n            return winner;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private removeInvalidBalls() {\r\n        this.balls = this.balls.filter((ball) => {\r\n            const matchingDisc = this.discs[ball.level - 1];\r\n            if (!matchingDisc) {\r\n                throw new Error(\"What happened here?\");\r\n            }\r\n            return matchingDisc.position === 0;\r\n        });\r\n    }\r\n}\r\n\r\nexport const timingIsEverything = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const discs = parseLines(lines);\r\n        const state = new GameState(discs);\r\n        while (true) {\r\n            const winner = state.passTime();\r\n            if (winner) {\r\n                await outputCallback(\"Found winner!\");\r\n                await outputCallback(winner.launchedAt);\r\n                await outputCallback(winner.debug.join(\"\\n\"));\r\n                break;\r\n            }\r\n            if (state.time % 1000 === 0) {\r\n                await outputCallback(\"Current time: \" + state.time);\r\n            }\r\n        }\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const discs = parseLines(lines);\r\n        discs.push({level: discs.length + 1, position: 0, size: 11});\r\n        const state = new GameState(discs);\r\n        while (true) {\r\n            const winner = state.passTime();\r\n            if (winner) {\r\n                await outputCallback(\"Found winner!\");\r\n                await outputCallback(winner.launchedAt);\r\n                await outputCallback(winner.debug.join(\"\\n\"));\r\n                break;\r\n            }\r\n            if (state.time % 1000 === 0) {\r\n                await outputCallback(\"Current time: \" + state.time);\r\n            }\r\n        }\r\n    },\r\n    { key: \"timing-is-everything\", title: \"Timing is Everything\", stars: 2}\r\n);\r\n","import { groupBy } from \"../../../support/sequences\";\r\nimport { entryForFile } from \"../../entry\";\r\n\r\nexport const dragonStep = (data: string): string => {\r\n    const tokens = data.split(\"\").reverse().map((e) => e === \"0\" ? \"1\" : \"0\");\r\n    return [data, \"0\"].concat(tokens).join(\"\");\r\n};\r\n\r\nconst fillDisk = (data: string, length: number): string => {\r\n    while (data.length < length) {\r\n        data = dragonStep(data);\r\n    }\r\n    return data.length === length ? data : data.slice(0, length);\r\n};\r\n\r\nexport const calculateChecksum = (data: string): string => {\r\n    if (data.length % 2 === 1) {\r\n        return data;\r\n    }\r\n    const result: string[] = [];\r\n    for (let i = 0; i < data.length; i += 2) {\r\n        result.push(data[i] === data[i + 1] ? \"1\" : \"0\");\r\n    }\r\n    return calculateChecksum(result.join(\"\"));\r\n};\r\n\r\nexport const dragonEverything = (data: string, diskSize: number): string => {\r\n    data = fillDisk(data, diskSize);\r\n    return calculateChecksum(data);\r\n};\r\n\r\nexport const dragonChecksum = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const checksum = dragonEverything(lines[0], 272);\r\n        await outputCallback(checksum);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const checksum = dragonEverything(lines[0], 35651584);\r\n        await outputCallback(checksum);\r\n    },\r\n    { key: \"dragon-checksum\", title: \"Dragon Checksum\", stars: 2}\r\n);\r\n","import { Md5 } from \"ts-md5\";\r\nimport { Lifo, Queue } from \"../../../support/data-structure\";\r\nimport { CCoordinate, Coordinate, directionList, directions, manhattanDistance, serialization } from \"../../../support/geometry\";\r\nimport { calculateDistancesGenericCoordinates } from \"../../../support/labyrinth\";\r\nimport { entryForFile } from \"../../entry\";\r\n\r\ntype Hash = (steps: string[] | string) => string;\r\n\r\ninterface CoordinateWithSteps {\r\n    coordinate: Coordinate;\r\n    steps: string;\r\n    hash: string;\r\n}\r\n\r\nconst serialize = (coordinate: CoordinateWithSteps): string => {\r\n    const base = serialization.serialize(coordinate.coordinate);\r\n    return `${coordinate.steps}~${base}`;\r\n};\r\n\r\nconst isString = (s: string[] | string): s is string => {\r\n    return (typeof s) === \"string\";\r\n};\r\n\r\nconst hashFactory = (secret: string): Hash => {\r\n    return (steps: string[] | string) => {\r\n        return Md5.hashAsciiStr(secret + (isString(steps) ? steps : steps.join(\"\"))) as string;\r\n    };\r\n};\r\n\r\nconst isValidCharacter = (c: string): boolean => [\"b\", \"c\", \"d\", \"e\", \"f\"].includes(c);\r\n\r\nconst isDirectionAvailable = (size: Coordinate, c: CoordinateWithSteps, direction: CCoordinate) => {\r\n    const candidate = direction.sum(c.coordinate);\r\n    if (candidate.x < 0 || candidate.y < 0 || candidate.x >= size.x || candidate.y >= size.y) {\r\n        return false;\r\n    }\r\n    if (direction.is(directions.up)) {\r\n        return isValidCharacter(c.hash[0]);\r\n    } else if (direction.is(directions.down)) {\r\n        return isValidCharacter(c.hash[1]);\r\n    } else if (direction.is(directions.left)) {\r\n        return isValidCharacter(c.hash[2]);\r\n    } else if (direction.is(directions.right)) {\r\n        return isValidCharacter(c.hash[3]);\r\n    } else {\r\n        throw new Error(\"Invalid direction\");\r\n    }\r\n};\r\n\r\nconst serializeDirection = (direction: CCoordinate): string => {\r\n    if (direction.is(directions.up)) {\r\n        return \"U\";\r\n    } else if (direction.is(directions.down)) {\r\n        return \"D\";\r\n    } else if (direction.is(directions.left)) {\r\n        return \"L\";\r\n    } else if (direction.is(directions.right)) {\r\n        return \"R\";\r\n    } else {\r\n        throw new Error(\"Invalid direction\");\r\n    }\r\n};\r\n\r\nexport const twoStepsForward = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const secret = lines[0];\r\n        const hash = hashFactory(secret);\r\n        const size = {x: 4, y: 4};\r\n        const target = {x: 3, y: 3};\r\n        const map = calculateDistancesGenericCoordinates<\"x\", CoordinateWithSteps>(\r\n            ((c) => \"x\"),\r\n            (start, end) => manhattanDistance(start.coordinate.coordinate, end.coordinate) + (start.distance || 0),\r\n            (c) => [\r\n                directions.up,\r\n                directions.left,\r\n                directions.down,\r\n                directions.right\r\n            ].filter((e) => isDirectionAvailable(size, c, e)).map((d) => ({\r\n                coordinate: d.sum(c.coordinate),\r\n                steps: c.steps + serializeDirection(d)\r\n            })).map((e) => ({\r\n                ...e,\r\n                hash: hash(e.steps)\r\n            })),\r\n            {coordinate: {x: 0, y: 0}, steps: \"\", hash: hash([])},\r\n            serialize,\r\n            (e) => manhattanDistance(e.coordinate.coordinate, target) === 0\r\n        );\r\n        await outputCallback(\r\n            map.list\r\n                .filter((e) => manhattanDistance(e.coordinate.coordinate, target) === 0)\r\n                .map((e) => e.coordinate.steps)\r\n            );\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const target = {x: 3, y: 3};\r\n        const secret = lines[0];\r\n        const hash = hashFactory(secret);\r\n        const size = {x: 4, y: 4};\r\n        const queue: CoordinateWithSteps[] = [];\r\n        queue.push({coordinate: {x: 0, y: 0}, steps: \"\", hash: hash([])});\r\n\r\n        let bestResult: number = Number.MIN_VALUE;\r\n\r\n        let iteration = 1;\r\n        const spreads: number[] = [];\r\n        while (queue.length > 0) {\r\n            const current = queue.pop()!;\r\n            const surrounding = [\r\n                directions.up,\r\n                directions.left,\r\n                directions.down,\r\n                directions.right\r\n            ].filter((e) => isDirectionAvailable(size, current, e)).map((d) => ({\r\n                coordinate: d.sum(current.coordinate),\r\n                steps: current.steps + serializeDirection(d),\r\n            })).map((e) => ({...e, hash: hash(e.steps)}));\r\n            spreads.push(surrounding.length);\r\n            if (spreads.length > 10000) {\r\n                await outputCallback(spreads.reduce((acc, next) => acc + next, 0) / spreads.length);\r\n                spreads.length = 0;\r\n            }\r\n\r\n            for (const s of surrounding) {\r\n                if (manhattanDistance(s.coordinate, target) === 0) {\r\n                    bestResult = Math.max(bestResult, s.steps.length);\r\n                } else {\r\n                    queue.push(s);\r\n                }\r\n            }\r\n            if ((++iteration) % 10000 === 0) {\r\n                await outputCallback(\"Iteration: \" + (iteration / 1000) + \"k\");\r\n                await outputCallback(`Size: ${queue.length}`);\r\n            }\r\n        }\r\n\r\n        await outputCallback(bestResult);\r\n    },\r\n    { key: \"two-steps-forward\", title: \"Two Steps Forward\", stars: 2}\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\n\r\ntype Cell = \"^\" | \".\";\r\n\r\nconst getSafe = (cell: Cell[], index: number): Cell => {\r\n    if (index < 0 || index >= cell.length) {\r\n        return \".\";\r\n    }\r\n    return cell[index];\r\n};\r\n\r\nconst mapCell = (left: Cell, center: Cell, right: Cell): Cell => {\r\n    const total = [left, center, right];\r\n    const traps = total.filter((e) => e === \"^\").length;\r\n    if (traps === 2) {\r\n        if (right  === \".\" || left === \".\") {\r\n            return \"^\";\r\n        }\r\n    }\r\n    if (traps === 1) {\r\n        if (left === \"^\" || right === \"^\") {\r\n            return \"^\";\r\n        }\r\n    }\r\n    return \".\";\r\n};\r\n\r\nconst evolve = (line: Cell[]): Cell[] => {\r\n    const result: Cell[] = [];\r\n    for (let i = 0; i < line.length; i++) {\r\n        const left = getSafe(line, i - 1);\r\n        const center = getSafe(line, i);\r\n        const right = getSafe(line, i + 1);\r\n        result.push(mapCell(left, center, right));\r\n    }\r\n    return result;\r\n};\r\n\r\nconst buildMap = (startLine: Cell[], size: number): Cell[][] => {\r\n    const result: Cell[][] = [startLine];\r\n    for (let i = 1; i < size; i++) {\r\n        result.push(evolve(result[i - 1]));\r\n    }\r\n    return result;\r\n};\r\n\r\nconst prettify = (cells: Cell[][]): string => {\r\n    return cells.map((line) => line.join(\"\")).join(\"\\n\");\r\n};\r\n\r\nconst countSafe = (cells: Cell[]): number => cells.filter((c) => c === \".\").length;\r\n\r\nexport const likeARogue = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const result = buildMap(lines[0].split(\"\") as Cell[], 40);\r\n        await outputCallback(prettify(result));\r\n        await outputCallback(result.flatMap((r) => r).filter((e) => e === \".\").length);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        let lastLine = lines[0].split(\"\") as Cell[];\r\n        let result: number = countSafe(lastLine);\r\n        const size = 400000;\r\n        for (let i = 1; i < size; i++) {\r\n            lastLine = evolve(lastLine);\r\n            result += countSafe(lastLine);\r\n        }\r\n        await outputCallback(result);\r\n    },\r\n    { key: \"like-a-rogue\", title: \"Like a Rogue\", stars: 2}\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\n\r\ninterface Elf {\r\n    index: number;\r\n    presents: number;\r\n}\r\n\r\nconst integerLogarithm = (x: number, base: number): {value: number, isLower: boolean} => {\r\n    let result: number = 0;\r\n    let current = 1;\r\n    while (current < x) {\r\n        current *= base;\r\n        result++;\r\n    }\r\n    if (current === x) {\r\n        return {value: result, isLower: false};\r\n    }\r\n    return {value: result - 1, isLower: true};\r\n};\r\n\r\nexport const anElephantNamedJoseph = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const howManyElves = parseInt(lines[0], 10);\r\n        let elves: Elf[] = [];\r\n        for (let i = 0; i < howManyElves; i++) {\r\n            elves.push({\r\n                index: i + 1,\r\n                presents: 1\r\n            });\r\n        }\r\n        while (true) {\r\n            for (let i = 0; i < elves.length; i++) {\r\n                if (elves[i].presents === 0) {\r\n                    continue;\r\n                }\r\n                const stealFrom = (i + 1) % elves.length;\r\n                elves[i].presents += elves[stealFrom].presents;\r\n                elves[stealFrom].presents = 0;\r\n            }\r\n            elves = elves.filter((e) => e.presents > 0);\r\n            if (elves.length === 1) {\r\n                await outputCallback(\"Found it!\");\r\n                await outputCallback(elves[0].index);\r\n                return;\r\n            }\r\n        }\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const calculator = (howManyElves: number) => {\r\n            const logarithm = integerLogarithm(howManyElves, 3);\r\n            if ([81, 27, 3].includes(howManyElves)) {\r\n                console.log(logarithm);\r\n            }\r\n            if (!logarithm.isLower) {\r\n                return howManyElves;\r\n            }\r\n            const delta = 3 ** logarithm.value;\r\n            if (howManyElves <= delta * 2) {\r\n                return howManyElves - delta;\r\n            } else {\r\n                return 2 * howManyElves - 3 * delta;\r\n            }\r\n\r\n        };\r\n        await outputCallback(\"Starting pattern calculations...\");\r\n        for (let howManyElves = 1; howManyElves < 100; howManyElves++) {\r\n            const elves: Elf[] = [];\r\n            for (let i = 0; i < howManyElves; i++) {\r\n                elves.push({\r\n                    index: i + 1,\r\n                    presents: 1\r\n                });\r\n            }\r\n            let nextIndex = 0;\r\n            const lastSteal: null | number = null;\r\n            while (elves.length > 1) {\r\n                if (elves.length % 10000 === 0) {\r\n                    await outputCallback(elves.length);\r\n                }\r\n                nextIndex = nextIndex % elves.length;\r\n                const stealFrom = (nextIndex + Math.floor(elves.length / 2)) % elves.length;\r\n                if (lastSteal !== null) {\r\n                    if (elves.length % 2 === 0) {\r\n                        if (stealFrom !== lastSteal + 2) {\r\n                            throw new Error(\":(\");\r\n                        }\r\n                    } else {\r\n                        if (stealFrom !== lastSteal + 1) {\r\n                            throw new Error(\":((\");\r\n                        }\r\n                    }\r\n                }\r\n                elves[nextIndex].presents += elves[stealFrom].presents;\r\n                elves.splice(stealFrom, 1);\r\n                if (nextIndex < stealFrom) {\r\n                    nextIndex++;\r\n                }\r\n            }\r\n            await outputCallback(`${howManyElves}:${elves[0].index}:${calculator(howManyElves)}`);\r\n        }\r\n        await outputCallback(\"Final calculation:\");\r\n        const elvesCount = parseInt(lines[0], 10);\r\n        await outputCallback(calculator(elvesCount));\r\n    },\r\n    { key: \"an-elephant-named-joseph\", title: \"An Elephant Named Joseph\", stars: 2}\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\n\r\ninterface Range {\r\n    start: number;\r\n    end: number;\r\n}\r\n\r\nclass Ranges {\r\n    private _ranges: Range[] = [];\r\n    public addRange(start: number, end: number): Ranges {\r\n        this._ranges.push({start, end});\r\n        this.mergeRanges();\r\n        return this;\r\n    }\r\n\r\n    public addRanges(ranges: Range[]): Ranges {\r\n        this._ranges = this._ranges.concat(ranges);\r\n        this.mergeRanges();\r\n        return this;\r\n    }\r\n\r\n    private mergeRanges() {\r\n        this._ranges.sort((a, b) => a.start - b.start);\r\n        for (let i = 0; i < this._ranges.length - 1; i++) {\r\n            if (this._ranges[i].end >= this._ranges[i + 1].start - 1) {\r\n                this._ranges[i + 1].start = Math.min(this._ranges[i].start, this._ranges[i + 1].start);\r\n                this._ranges[i + 1].end = Math.max(this._ranges[i].end, this._ranges[i + 1].end);\r\n                this._ranges[i].start = -1;\r\n            }\r\n        }\r\n        this._ranges = this._ranges.filter((e) => e.start >= 0);\r\n    }\r\n\r\n    public get ranges() {\r\n        return this._ranges.map((e) => ({...e}));\r\n    }\r\n\r\n    public get length() {\r\n        return this._ranges.length;\r\n    }\r\n}\r\n\r\nconst parseLines = (lines: string[]): Ranges => {\r\n    return new Ranges().addRanges(lines.map((line) => {\r\n        const [a, b] = line.split(\"-\").map((e) => parseInt(e, 10));\r\n        return {start: a, end: b};\r\n    }));\r\n};\r\n\r\nexport const firewallRules = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const ranges = parseLines(lines);\r\n\r\n        await outputCallback(`${ranges.length}/${lines.length}`);\r\n        const firstRange = ranges.ranges[0];\r\n        await outputCallback(\"First free ip: \");\r\n        if (firstRange.start !== 0) {\r\n            await outputCallback(0);\r\n        } else {\r\n            await outputCallback(firstRange.end + 1);\r\n        }\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const ranges = parseLines(lines);\r\n        const minValue = 0;\r\n        const maxValue = 2 ** 32 - 1;\r\n\r\n        let nextCandidate = minValue;\r\n        let result = 0;\r\n        for (const range of ranges.ranges) {\r\n            const delta = range.start - nextCandidate;\r\n            result += delta;\r\n            nextCandidate = range.end + 1;\r\n        }\r\n        result += maxValue - nextCandidate + 1;\r\n        await outputCallback(result);\r\n    },\r\n    { key: \"firewall-rules\", title: \"Firewall Rules\", stars: 2}\r\n);\r\n","import { permutationGenerator } from \"../../../support/sequences\";\r\nimport { entryForFile } from \"../../entry\";\r\n\r\ntype Rule = {\r\n    type: \"swap-position\";\r\n    a: number;\r\n    b: number;\r\n} | {\r\n    type: \"swap-letter\";\r\n    a: string;\r\n    b: string;\r\n} | {\r\n    type: \"rotate\";\r\n    direction: \"right\" | \"left\";\r\n    steps: number\r\n} | {\r\n    type: \"rotate-on\";\r\n    direction: \"right\";\r\n    letter: string;\r\n} | {\r\n    type: \"reverse\";\r\n    from: number;\r\n    to: number;\r\n} | {\r\n    type: \"move\";\r\n    from: number;\r\n    to: number;\r\n};\r\n\r\nconst parseLine = (line: string): Rule => {\r\n    const tokens = line.split(\" \");\r\n    switch (tokens[0]) {\r\n        case \"swap\":\r\n            if (tokens[1] === \"position\") {\r\n                return {\r\n                    type: \"swap-position\",\r\n                    a: parseInt(tokens[2], 10),\r\n                    b: parseInt(tokens[5], 10)\r\n                };\r\n            } else if (tokens[1] === \"letter\") {\r\n                return {\r\n                    type: \"swap-letter\",\r\n                    a: tokens[2],\r\n                    b: tokens[5]\r\n                };\r\n            } else {\r\n                throw new Error(\"Invalid position token: \" + tokens[1]);\r\n            }\r\n        case \"rotate\":\r\n            if (tokens[1] === \"based\") {\r\n                return {\r\n                    type: \"rotate-on\",\r\n                    direction: \"right\",\r\n                    letter: tokens[6]\r\n                };\r\n            } else if (tokens[1] === \"left\" || tokens[1] === \"right\") {\r\n                return {\r\n                    type: \"rotate\",\r\n                    direction: tokens[1],\r\n                    steps: parseInt(tokens[2], 10)\r\n                };\r\n            } else {\r\n                throw new Error(\"Invalid rotate token: \" + tokens[1]);\r\n            }\r\n        case \"reverse\":\r\n            return {\r\n                type: \"reverse\",\r\n                from: parseInt(tokens[2], 10),\r\n                to: parseInt(tokens[4], 10)\r\n            };\r\n        case \"move\":\r\n            return {\r\n                type: \"move\",\r\n                from: parseInt(tokens[2], 10),\r\n                to: parseInt(tokens[5], 10)\r\n            };\r\n        default:\r\n            throw new Error(\"Invalid token\");\r\n    }\r\n};\r\n\r\nconst applyRule = (input: string, rule: Rule): string => {\r\n    const tokenized = [...input];\r\n    switch (rule.type) {\r\n        case \"swap-position\":\r\n            return tokenized.map((e, i) => i === rule.a ? input[rule.b] : (i === rule.b ? input[rule.a] : e)).join(\"\");\r\n        case \"swap-letter\":\r\n            return applyRule(input, {type: \"swap-position\", a: input.indexOf(rule.a), b: input.indexOf(rule.b)});\r\n        case \"rotate\":\r\n            const rotate = (rindex: number) => {\r\n                const steps = (rule.direction === \"right\" ? -rule.steps : rule.steps);\r\n                return (rindex + steps + 100 * tokenized.length) % tokenized.length;\r\n            };\r\n            return tokenized.map((e, i) => tokenized[rotate(i)]).join(\"\");\r\n        case \"rotate-on\":\r\n            const index = input.indexOf(rule.letter);\r\n            const base = index + 1;\r\n            const rotateOf = index >= 4 ? base + 1 : base;\r\n            return applyRule(input, {type: \"rotate\", steps: rotateOf, direction: rule.direction});\r\n        case \"reverse\":\r\n            return tokenized.map((e, i) => {\r\n                if (i < rule.from || i > rule.to) {\r\n                    return e;\r\n                }\r\n                const reverseIndex = rule.from + (rule.to - i);\r\n                return tokenized[reverseIndex];\r\n            }).join(\"\");\r\n        case \"move\":\r\n            return tokenized.map((e, i) => {\r\n                if (rule.from < rule.to) {\r\n                    if (i < rule.from) {\r\n                        return e;\r\n                    }\r\n                    if (i < rule.to) {\r\n                        return tokenized[i + 1];\r\n                    }\r\n                    if (i === rule.to) {\r\n                        return tokenized[rule.from];\r\n                    }\r\n                    return e;\r\n                } else {\r\n                    if (i < rule.to) {\r\n                        return e;\r\n                    } else if (i === rule.to) {\r\n                        return tokenized[rule.from];\r\n                    } else if (i <= rule.from) {\r\n                        return tokenized[i - 1];\r\n                    } else {\r\n                        return e;\r\n                    }\r\n                }\r\n            }).join(\"\");\r\n    }\r\n};\r\n\r\nconst serializeRule = (rule: Rule): string => {\r\n    switch (rule.type) {\r\n        case \"swap-position\":\r\n            return `swap position ${rule.a} with position ${rule.b}`;\r\n        case \"swap-letter\":\r\n            return `swap letter ${rule.a} with letter ${rule.b}`;\r\n        case \"rotate\":\r\n            return `rotate ${rule.direction} ${rule.steps} ${rule.steps === 1 ? \"step\" : \"steps\"}`;\r\n        case \"rotate-on\":\r\n            return `rotate based on position of letter ${rule.letter}`;\r\n        case \"reverse\":\r\n            return `reverse positions ${rule.from} through ${rule.to}`;\r\n        case \"move\":\r\n            return `move position ${rule.from} to position ${rule.to}`;\r\n    }\r\n};\r\n\r\nconst serialize = (rules: Rule[]): string[] => rules.map(serializeRule);\r\n\r\nconst parseLines = (lines: string[]): Rule[] => lines.map(parseLine);\r\n\r\nconst testInput: string[] = [\r\n    \"swap position 4 with position 0\",\r\n    \"swap letter d with letter b\",\r\n    \"reverse positions 0 through 4\",\r\n    \"rotate left 1 step\",\r\n    \"move position 1 to position 4\",\r\n    \"move position 3 to position 0\",\r\n    \"rotate based on position of letter b\",\r\n    \"rotate based on position of letter d\",\r\n];\r\n\r\nexport const scrambledLettersAndHash = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const parsed = parseLines(lines);\r\n        let input = \"abcdefgh\";\r\n        // let input = \"abcde\";\r\n        for (const rule of parsed) {\r\n            await outputCallback(input);\r\n            input = applyRule(input, rule);\r\n        }\r\n        await outputCallback(input);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const target = \"fbgdceah\";\r\n        const parsed = parseLines(lines);\r\n        for (const permutation of permutationGenerator(target.split(\"\"))) {\r\n            const candidate = permutation.join(\"\");\r\n            const result = parsed.reduce((acc, next) => applyRule(acc, next), candidate);\r\n            if (result === target) {\r\n                await outputCallback(\"Found it!\");\r\n                await outputCallback(candidate);\r\n                return;\r\n            }\r\n        }\r\n        await outputCallback(\"I'm very sad :(\");\r\n        // await outputCallback(target.split(\"\").map((e,i) => i+1).reduce((acc, next) => acc * next))\r\n        // throw Error(\"Not implemented\");\r\n    },\r\n    { key: \"scrambled-letters-and-hash\", title: \"Scrambled Letters and Hash\", stars: 2}\r\n);\r\n","import { BinaryHeap } from \"priorityqueue/lib/cjs/BinaryHeap\";\r\nimport { PriorityQueue } from \"priorityqueue/lib/cjs/PriorityQueue\";\r\nimport { Queue } from \"../../../support/data-structure\";\r\nimport { CCoordinate, Coordinate, directionList, directions, getSurrounding, manhattanDistance } from \"../../../support/geometry\";\r\nimport { hexManhattanDistance } from \"../../../support/hex-geometry\";\r\nimport { FixedSizeMatrix } from \"../../../support/matrix\";\r\nimport { entryForFile } from \"../../entry\";\r\n\r\ninterface Node {\r\n    c: Coordinate;\r\n    used: number;\r\n    available: number;\r\n}\r\n\r\ntype Field = FixedSizeMatrix<Node>;\r\n\r\ninterface FullField {\r\n    field: Field;\r\n    target: Coordinate;\r\n    steps: number;\r\n}\r\n\r\nconst parseLines = (lines: string[]): Node[] => {\r\n    const parseCoordinates = (token: string): Coordinate => {\r\n        const startFrom = token.indexOf(\"-\") + 1;\r\n        const [x, y] = token.substr(startFrom).split(\"-\").map((e) => parseInt(e.substr(1), 10));\r\n        return {x, y};\r\n    };\r\n    const parseSize = (token: string): number => parseInt(token.slice(0, -1), 10);\r\n    const parseLine = (line: string): Node | null => {\r\n        if (!line.includes(\"dev\")) {\r\n            return null;\r\n        }\r\n        const tokens = line.split(\" \").filter((e) => e);\r\n        return {\r\n            c: parseCoordinates(tokens[0]),\r\n            used: parseSize(tokens[2]),\r\n            available: parseSize(tokens[3])\r\n        };\r\n    };\r\n    return lines.map(parseLine).filter((l) => l !== null) as Node[];\r\n};\r\n\r\nconst createMatrix = (nodes: Node[]): Field => {\r\n    const size = {x: 0, y: 0};\r\n    for (const node of nodes) {\r\n        size.x = Math.max(size.x, node.c.x);\r\n        size.y = Math.max(size.y, node.c.y);\r\n    }\r\n    size.x++;\r\n    size.y++;\r\n    const matrix = new FixedSizeMatrix<Node>(size);\r\n    for (const node of nodes) {\r\n        matrix.set(node.c, node);\r\n    }\r\n    return matrix;\r\n};\r\n\r\nconst move = (fullField: FullField, from: Coordinate, to: Coordinate): FullField => {\r\n    const original = fullField.field;\r\n    const result = original.copy();\r\n    const fromNode = result.get(from);\r\n    const toNode = result.get(to);\r\n    if (!fromNode || !toNode) {\r\n        throw new Error(\"Node didn't exist\");\r\n    }\r\n    if (!isViable(fromNode, toNode)) {\r\n        throw new Error(\"Could not move\");\r\n    }\r\n    result.set(from, {...fromNode, used: 0, available: fromNode.used + fromNode.available});\r\n    result.set(to, {...toNode, used: toNode.used + fromNode.used, available: toNode.available - fromNode.used});\r\n    const target = manhattanDistance(fromNode.c, fullField.target) === 0 ? toNode.c : fullField.target;\r\n    return {...fullField, field: result, target};\r\n};\r\n\r\nconst getValidMoves = (fullField: FullField): Array<{from: Coordinate; to: Coordinate}> => {\r\n    const result: Array<{from: Coordinate; to: Coordinate}> = [];\r\n    fullField.field.onEveryCellSync((c, node) => {\r\n        if (node) {\r\n            if (node.used === 0) {\r\n                return;\r\n            }\r\n            const neighbours = getSurrounding(c)\r\n                .map((coords) => fullField.field.get(coords))\r\n                .filter((e) => e) as Node[];\r\n            for (const neighbour of neighbours) {\r\n                if (isViable(node, neighbour)) {\r\n                    result.push({from: node.c, to: neighbour.c});\r\n                }\r\n            }\r\n        }\r\n    });\r\n    return result;\r\n};\r\n\r\nconst isViable = (from: Node, to: Node): boolean => {\r\n    return from.used > 0 && from.used <= to.available;\r\n};\r\n\r\nconst serializer = (fullField: FullField): string => {\r\n    return fullField.field.toString((cell) => {\r\n        if (!cell) {\r\n            throw new Error(\"Invalid node\");\r\n        }\r\n        const neighbours = getSurrounding(cell.c);\r\n        if (cell.used === 0) {\r\n            return \"_\";\r\n        }\r\n        const canMove = neighbours\r\n            .map((e) => fullField.field.get(e))\r\n            .filter((e) => e)\r\n            .reduce((acc, next) => acc || isViable(cell, next!), false);\r\n        const isTarget = manhattanDistance(cell.c, fullField.target) === 0;\r\n        if (canMove) {\r\n            return isTarget ? \"G\" : \".\";\r\n        }\r\n        return isTarget ? \"g\" : \"#\";\r\n    });\r\n};\r\n\r\nconst fullSerializer = async (fullField: FullField): Promise<string> => {\r\n    const result: string[] = [`t:${fullField.target.x}.${fullField.target.y}`];\r\n    await fullField.field.onEveryCell((c, n) => {\r\n        if (n) {\r\n            result.push(`${c.x}.${c.y}.${n.used}.${n.available}`);\r\n        }\r\n    });\r\n    return result.join(\"|\");\r\n};\r\n\r\nclass FieldPQ extends BinaryHeap<FullField> {\r\n    constructor(myPosition: Coordinate) {\r\n        super({comparator: (a, b) => {\r\n            const targetDistance = manhattanDistance(a.target, myPosition) - manhattanDistance(b.target, myPosition);\r\n            if (targetDistance !== 0) {\r\n                return targetDistance;\r\n            }\r\n            const movablesA = getValidMoves(a)\r\n                .map((e) => ({move: e, distance: manhattanDistance(e.from, a.target)}))\r\n                .sort((x, y) => x.distance - y.distance)[0];\r\n            const movablesB = getValidMoves(b)\r\n                .map((e) => ({move: e, distance: manhattanDistance(e.from, b.target)}))\r\n                .sort((x, y) => x.distance - y.distance)[0];\r\n            if (!movablesA && !movablesB) {\r\n                return 0;\r\n            }\r\n            if (!movablesA) {\r\n                return 1;\r\n            }\r\n            return movablesA.distance - movablesB.distance;\r\n        }\r\n    });\r\n\r\n    }\r\n}\r\n\r\nconst mapInput = (command: string | null): CCoordinate | null => {\r\n    if (command === null) {\r\n        return null;\r\n    }\r\n    switch (command.toLowerCase()) {\r\n        case \"j\":\r\n            return directions.down;\r\n        case \"k\":\r\n            return directions.up;\r\n        case \"h\":\r\n            return directions.left;\r\n        case \"l\":\r\n            return directions.right;\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const gridComputing = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const input = parseLines(lines);\r\n        let count = 0;\r\n        for (let i = 0; i < input.length; i++) {\r\n            for (let j = i + 1; j < input.length; j++) {\r\n                if (isViable(input[i], input[j]) || isViable(input[j], input[i])) {\r\n                    count++;\r\n                }\r\n            }\r\n        }\r\n        await outputCallback(count);\r\n    },\r\n    async ({ lines, outputCallback, additionalInputReader }) => {\r\n        if (!additionalInputReader) {\r\n            await outputCallback(\"Could not run the program, need additional input\");\r\n            return;\r\n        }\r\n        const myPosition = {x: 0, y: 0};\r\n        const matrix = createMatrix(parseLines(lines));\r\n        const target: Coordinate = {x: matrix.size.x - 1, y: 0};\r\n        let fullField = {field: matrix, target, steps: 0};\r\n        let currentPosition = matrix.findOne((node) => node.available > node.used);\r\n        if (!currentPosition) {\r\n            await outputCallback(\"Invalid input\");\r\n            return;\r\n        }\r\n\r\n        const oldCommands: CCoordinate[] = [];\r\n        const oldStates: Array<{field: FullField; position: Coordinate}> = [];\r\n        while (true) {\r\n            await outputCallback(null);\r\n            await outputCallback(serializer(fullField) + \"\\n\" + fullField.steps);\r\n            if (manhattanDistance(fullField.target, myPosition) === 0) {\r\n                await outputCallback(\"You've done it!\");\r\n                return;\r\n            }\r\n            // await outputCallback(fullField.steps);\r\n            let input: CCoordinate | null = null;\r\n            input = oldCommands.pop() || null;\r\n            if (input === null) {\r\n                const rawInput = await additionalInputReader.read();\r\n                if (rawInput === null) {\r\n                    await outputCallback(\"Closing down\");\r\n                    return;\r\n                }\r\n                if (rawInput === \"b\" && oldStates.length > 0) {\r\n                    const old = oldStates.pop()!;\r\n                    fullField = old.field;\r\n                    currentPosition = old.position;\r\n                    continue;\r\n                } else if (rawInput && rawInput.startsWith(\"loop\")) {\r\n                    const times = rawInput.includes(\"-\") ? parseInt(rawInput.split(\"-\")[1], 10) : 1;\r\n                    for (let i = 0; i < times; i++) {\r\n                        oldCommands.push(directions.up);\r\n                        oldCommands.push(directions.left);\r\n                        oldCommands.push(directions.left);\r\n                        oldCommands.push(directions.down);\r\n                        oldCommands.push(directions.right);\r\n                    }\r\n                    continue;\r\n                } else if (rawInput === \"start\") {\r\n                    for (let i = 0; i < 7; i++) {\r\n                        oldCommands.push(directions.right);\r\n                    }\r\n                    for (let i = 0; i < 20; i++) {\r\n                        oldCommands.push(directions.up);\r\n                    }\r\n                    for (let i = 0; i < 6; i++) {\r\n                        oldCommands.push(directions.left);\r\n                    }\r\n                    oldCommands.push(directions.up);\r\n                }\r\n                input = mapInput(rawInput);\r\n            }\r\n            if (!input) {\r\n                await outputCallback(\"Invalid command\");\r\n                continue;\r\n            }\r\n            const from = input.sum(currentPosition);\r\n            if (!from.isInBounds(matrix.size)) {\r\n                await outputCallback(\"Invalid direction\");\r\n                continue;\r\n            }\r\n            oldStates.push({field: fullField, position: currentPosition});\r\n            fullField = {...move(fullField, from, currentPosition), steps: fullField.steps + 1};\r\n            currentPosition = from;\r\n        }\r\n    },\r\n    { key: \"grid-computing\", title: \"Grid Computing\", hasAdditionalInput: true, stars: 2}\r\n);\r\n","import { factorial } from \"../../../support/algebra\";\r\nimport { setTimeoutAsync } from \"../../../support/async\";\r\nimport { entryForFile } from \"../../entry\";\r\nimport { emptyState, execute, parseProgram, prettyPrint } from \"./common/assembunny\";\r\n\r\nexport const safeCracking = entryForFile(\r\n    async ({ lines, outputCallback, pause, isCancelled  }) => {\r\n        const program = parseProgram(lines);\r\n        const state = emptyState();\r\n        state.registers.a = 7;\r\n        await execute(program, state, async (executingProgram, executingState) => {\r\n            await outputCallback(null);\r\n            await outputCallback(prettyPrint(executingState, executingProgram));\r\n            // await setTimeoutAsync(100);\r\n            await pause();\r\n            if (isCancelled && isCancelled()) {\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        await outputCallback(state.registers.a);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const getValue = (ln: number): number => {\r\n            const v = parseInt(lines[ln].split(\" \")[1], 10);\r\n            return v;\r\n        };\r\n        const result = factorial(12) + getValue(19) * getValue(20);\r\n        await outputCallback(\"I'm not sure whether the solution is universal; it does work on my input\");\r\n        await outputCallback(result);\r\n    },\r\n    {\r\n        key: \"safe-cracking\",\r\n        title: \"Safe Cracking\",\r\n        stars: 2,\r\n        customComponent: \"pause-and-run\"\r\n    }\r\n);\r\n","import { Queue } from \"../../../support/data-structure\";\r\nimport { Coordinate, getSurrounding, manhattanDistance } from \"../../../support/geometry\";\r\nimport { FixedSizeMatrix } from \"../../../support/matrix\";\r\nimport { entryForFile } from \"../../entry\";\r\n\r\ninterface Target {\r\n    type: string;\r\n    position: Coordinate;\r\n}\r\n\r\nconst parseLines = (lines: string[]):\r\n    { field: FixedSizeMatrix<\"#\" | \".\">; startPosition: Coordinate; targets: Target[] } => {\r\n\r\n    const size = {x: lines[0].length, y: lines.length};\r\n    const field = new FixedSizeMatrix<\"#\" | \".\">(size);\r\n    let startPosition: Coordinate | undefined;\r\n    const targets: Target[] = [];\r\n    for (let x = 0; x < size.x; x++) {\r\n        for (let y = 0; y < size.y; y++) {\r\n            const cell = lines[y][x];\r\n            if (cell === \".\" || cell === \"#\") {\r\n                field.set({x, y}, cell);\r\n            } else if (cell === \"0\") {\r\n                startPosition = {x, y};\r\n                field.set({x, y}, \".\");\r\n            } else {\r\n                targets.push({type: cell, position: {x, y}});\r\n                field.set({x, y}, \".\");\r\n            }\r\n        }\r\n    }\r\n    if (!startPosition) {\r\n        throw new Error(\"Start position not found\");\r\n    }\r\n    return {field, startPosition, targets};\r\n};\r\n\r\ninterface QueueElement {currentPosition: Coordinate; reachedTargets: string[]; steps: number; }\r\n\r\nconst serializeState = (state: QueueElement) => `${state.currentPosition.x}.${state.currentPosition.y}|${state.reachedTargets.join(\".\")}`;\r\n\r\nexport const airDuctSpelunking = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const {field, startPosition, targets} = parseLines(lines);\r\n\r\n        const outputField = new FixedSizeMatrix<\"#\" | \".\" | \"+\">(field.size);\r\n        await field.onEveryCell((e, c) => outputField.set(e, c));\r\n\r\n        const visitedStates = new Set<string>();\r\n        const queue = new Queue<QueueElement>();\r\n        const start: QueueElement = {currentPosition: startPosition, reachedTargets: [], steps: 0};\r\n        queue.add(start);\r\n        visitedStates.add(serializeState(start));\r\n        let bestReached = 0;\r\n        while (true) {\r\n            const current = queue.get();\r\n            if (!current) {\r\n                // await outputCallback(\"Failed\");\r\n                // await outputCallback(outputField.toString(e => e || \" \"));\r\n                return;\r\n            }\r\n            outputField.set(current.currentPosition, \"+\");\r\n            for (const candidate of getSurrounding(current.currentPosition)) {\r\n                const nextCell = field.get(candidate);\r\n                if (!nextCell || nextCell === \"#\") {\r\n                    continue;\r\n                }\r\n                const newSteps = current.steps + 1;\r\n                const newReached = [...current.reachedTargets];\r\n                const matchingTarget = targets.find((e) => manhattanDistance(e.position, candidate) === 0);\r\n                if (matchingTarget && !newReached.includes(matchingTarget.type)) {\r\n                    newReached.push(matchingTarget.type);\r\n                    if (newReached.length === targets.length) {\r\n                        await outputCallback(\"And here we are!\");\r\n                        await outputCallback(newSteps);\r\n                        return;\r\n                    }\r\n                    newReached.sort();\r\n                }\r\n                const queueElement: QueueElement = {\r\n                    currentPosition: candidate,\r\n                    reachedTargets: newReached,\r\n                    steps: newSteps\r\n                };\r\n                const state = serializeState(queueElement);\r\n                if (visitedStates.has(state)) {\r\n                    continue;\r\n                }\r\n                visitedStates.add(state);\r\n                if (newReached.length > bestReached) {\r\n                    await outputCallback(\"New best: \" + newReached.length);\r\n                    bestReached = newReached.length;\r\n                }\r\n                queue.add(queueElement);\r\n            }\r\n        }\r\n\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const {field, startPosition, targets} = parseLines(lines);\r\n\r\n        const outputField = new FixedSizeMatrix<\"#\" | \".\" | \"+\">(field.size);\r\n        await field.onEveryCell((e, c) => outputField.set(e, c));\r\n\r\n        const visitedStates = new Set<string>();\r\n        const queue = new Queue<QueueElement>();\r\n        const start: QueueElement = {currentPosition: startPosition, reachedTargets: [], steps: 0};\r\n        queue.add(start);\r\n        visitedStates.add(serializeState(start));\r\n        let bestReached = 0;\r\n        while (true) {\r\n            const current = queue.get();\r\n            if (!current) {\r\n                await outputCallback(\"Failed\");\r\n                return;\r\n            }\r\n            outputField.set(current.currentPosition, \"+\");\r\n            for (const candidate of getSurrounding(current.currentPosition)) {\r\n                const nextCell = field.get(candidate);\r\n                if (!nextCell || nextCell === \"#\") {\r\n                    continue;\r\n                }\r\n                const newSteps = current.steps + 1;\r\n                const newReached = [...current.reachedTargets];\r\n                const matchingTarget = targets.find((e) => manhattanDistance(e.position, candidate) === 0);\r\n                if (matchingTarget && !newReached.includes(matchingTarget.type)) {\r\n                    newReached.push(matchingTarget.type);\r\n                    newReached.sort();\r\n                }\r\n                if (newReached.length === targets.length) {\r\n                    if (manhattanDistance(candidate, startPosition) === 0) {\r\n                        await outputCallback(\"And here we are!\");\r\n                        await outputCallback(newSteps);\r\n                        return;\r\n                    }\r\n                }\r\n                const queueElement: QueueElement = {\r\n                    currentPosition: candidate,\r\n                    reachedTargets: newReached,\r\n                    steps: newSteps\r\n                };\r\n                const state = serializeState(queueElement);\r\n                if (visitedStates.has(state)) {\r\n                    continue;\r\n                }\r\n                visitedStates.add(state);\r\n                if (newReached.length > bestReached) {\r\n                    await outputCallback(\"New best: \" + newReached.length);\r\n                    bestReached = newReached.length;\r\n                }\r\n                queue.add(queueElement);\r\n            }\r\n        }\r\n    },\r\n    { key: \"air-duct-spelunking\", title: \"Air Duct Spelunking\", stars: 2}\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\n\r\nexport const clockSignal = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const getValue = (ln: number): number => {\r\n            const v = parseInt(lines[ln].split(\" \")[1], 10);\r\n            return v;\r\n        };\r\n        const addition = getValue(2) * getValue(1);\r\n        const check = async (a: number): Promise<boolean> => {\r\n            if (a % 2 === 1) {\r\n                return false;\r\n            }\r\n            a += addition;\r\n            let last = 1;\r\n            while (a > 0) {\r\n                const out = a % 2;\r\n                if (out === last) {\r\n                    return false;\r\n                }\r\n                last = out;\r\n                a = Math.floor(a / 2);\r\n            }\r\n            return true;\r\n        };\r\n        let x = 1;\r\n        while (x < addition || x % 2 === 1) {\r\n            if (x % 2 === 0) {\r\n                x *= 2;\r\n                x += 1;\r\n            } else {\r\n                x *= 2;\r\n            }\r\n        }\r\n        await outputCallback(\"I'm not sure if it works for every input\");\r\n        await outputCallback(await check(x - addition));\r\n        await outputCallback(x - addition);\r\n\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        throw Error(\"Not implemented\");\r\n    },\r\n    { key: \"clock-signal\", title: \"Clock Signal\", stars: 2}\r\n);\r\n","import { noTimeForATaxicab } from \"./no-time-for-a-taxicab\";\r\nimport { bathroomSecurity } from \"./bathroom-security\";\r\nimport { squaresWithThreeSides } from \"./squares-with-three-sides\";\r\nimport { securityThroughObscurity } from \"./security-through-obscurity\";\r\nimport { howAboutANiceGameOfChess } from \"./how-about-a-nice-game-of-chess\";\r\nimport { signalsAndNoise } from \"./signals-and-noise\";\r\nimport { internetProtocolVersion7 } from \"./internet-protocol-version-7\";\r\nimport { twoFactorAuthentication } from \"./two-factor-authentication\";\r\nimport { explosivesInCyberspace } from \"./explosives-in-cyberspace\";\r\nimport { balanceBots } from \"./balance-bots\";\r\nimport { radioisotopeThermoelectricGenerators } from \"./radioisotope-thermoelectric-generators\";\r\nimport { leonardosMonorail } from \"./leonardos-monorail\";\r\nimport { aMazeOfTwistyLittleCubicles } from \"./a-maze-of-twisty-little-cubicles\";\r\nimport { oneTimePad } from \"./one-time-pad\";\r\nimport { timingIsEverything } from \"./timing-is-everything\";\r\nimport { dragonChecksum } from \"./dragon-checksum\";\r\nimport { twoStepsForward } from \"./two-steps-forward\";\r\nimport { likeARogue } from \"./like-a-rogue\";\r\nimport { anElephantNamedJoseph } from \"./an-elephant-named-joseph\";\r\nimport { firewallRules } from \"./firewall-rules\";\r\nimport { scrambledLettersAndHash } from \"./scrambled-letters-and-hash\";\r\nimport { gridComputing } from \"./grid-computing\";\r\nimport { safeCracking } from \"./safe-cracking\";\r\nimport { airDuctSpelunking } from \"./air-duct-spelunking\";\r\nimport { clockSignal } from \"./clock-signal\";\r\nimport { embedAll } from \"../../entry\";\r\n\r\nexport const entries = embedAll([\r\n        noTimeForATaxicab,\r\n        bathroomSecurity,\r\n        squaresWithThreeSides,\r\n        securityThroughObscurity,\r\n        howAboutANiceGameOfChess,\r\n        signalsAndNoise,\r\n        internetProtocolVersion7,\r\n        twoFactorAuthentication,\r\n        explosivesInCyberspace,\r\n        balanceBots,\r\n        radioisotopeThermoelectricGenerators,\r\n        leonardosMonorail,\r\n        aMazeOfTwistyLittleCubicles,\r\n        oneTimePad,\r\n        timingIsEverything,\r\n        dragonChecksum,\r\n        twoStepsForward,\r\n        likeARogue,\r\n        anElephantNamedJoseph,\r\n        firewallRules,\r\n        scrambledLettersAndHash,\r\n        gridComputing,\r\n        safeCracking,\r\n        airDuctSpelunking,\r\n        clockSignal\r\n]);\r\n","import { entryForFile } from \"../../entry\";\r\nexport const aMazeOfTwistyTrampolinesAllAlike = entryForFile(\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const instructions = lines.map((l) => parseInt(l, 10));\r\n        let ip = 0;\r\n        let i = 0;\r\n        while (ip >= 0 && ip < instructions.length) {\r\n            i++;\r\n            const delta = instructions[ip];\r\n            instructions[ip]++;\r\n            ip += delta;\r\n        }\r\n        await outputCallback(i);\r\n    },\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const instructions = lines.map((l) => parseInt(l, 10));\r\n        let ip = 0;\r\n        let i = 0;\r\n        while (ip >= 0 && ip < instructions.length) {\r\n            i++;\r\n            const delta = instructions[ip];\r\n            if (delta >= 3) {\r\n                instructions[ip]--;\r\n            } else {\r\n                instructions[ip]++;\r\n            }\r\n            ip += delta;\r\n        }\r\n        await outputCallback(i);\r\n    },\r\n    { key: \"a-maze-of-twisty-trampolines-all-alike\", title: \"A Maze of Twisty Trampolines, All Alike\", stars: 2, }\r\n);\r\n\r\n\r\n","import { entryForFile } from \"../../entry\";\r\nimport { FixedSizeMatrix } from \"../../../support/matrix\";\r\nimport { CCoordinate, Coordinate, directions, rotate, Rotation, manhattanDistance } from \"../../../support/geometry\";\r\nimport { NotImplementedError } from \"../../../support/error\";\r\nimport { groupBy } from \"../../../support/sequences\";\r\n\r\ntype Axis = \"horizontal\" | \"vertical\";\r\n\r\nfunction axisFromDirection(direction: CCoordinate) {\r\n    if ((direction.x !== 0) === (direction.y !== 0)) {\r\n        throw new Error(\"One and only one coordinate can be non zero in a direction\");\r\n    }\r\n    if (direction.x !== 0) {\r\n        return \"horizontal\";\r\n    }\r\n    return \"vertical\";\r\n}\r\n\r\nfunction expectedFromDirection(direction: CCoordinate) {\r\n    const axis = axisFromDirection(direction);\r\n    if (axis === \"horizontal\") {\r\n        return \"-\";\r\n    }\r\n    return \"|\";\r\n}\r\n\r\ninterface State {\r\n    position: Coordinate;\r\n    direction: CCoordinate;\r\n}\r\n\r\ntype Field = FixedSizeMatrix<string>;\r\n\r\ntype LetterCallback = (letter: string, direction: CCoordinate, coordinate: Coordinate) => void;\r\n\r\nfunction isLine(s: string) {\r\n    return s === \"|\" || s === \"-\";\r\n}\r\n\r\nfunction travel(field: Field, state: State, letterCallback: LetterCallback): State | null {\r\n    const direction = state.direction;\r\n    const expected = expectedFromDirection(direction);\r\n    const currentCell = field.get(state.position);\r\n    if (currentCell === undefined) {\r\n        return null;\r\n    }\r\n    const nextCoordinate = direction.sum(state.position);\r\n    const nextCell = field.get(nextCoordinate);\r\n    if (nextCell === \" \" || nextCell === undefined) {\r\n        return null;\r\n    } else if (isLine(nextCell)) {\r\n        return { ...state, position: nextCoordinate };\r\n    } else if (nextCell === \"+\") {\r\n        const rotations: Rotation[] = [\"Clockwise\", \"Counterclockwise\"];\r\n        const candidateDirections = rotations.map((rotation) => rotate(state.direction, rotation));\r\n        const resultStates = candidateDirections\r\n            .map((d) => ({ direction: d, state: travel(field, { position: nextCoordinate, direction }, () => { }) }))\r\n            .filter((result) => result.state !== null)\r\n            ;\r\n        if (resultStates.length !== 1) {\r\n            throw new Error(\"Invalid states :( \" + JSON.stringify(resultStates));\r\n        }\r\n        return { position: nextCoordinate, direction: resultStates[0].direction };\r\n\r\n    } else {\r\n        letterCallback(nextCell, direction, nextCoordinate);\r\n        return { ...state, position: nextCoordinate };\r\n    }\r\n}\r\n\r\nexport const aSeriesOfTubes = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        lines = lines.map((line) => line.trimEnd());\r\n        const maxLineSize = lines.reduce((acc, next) => acc + next.length, 0);\r\n        lines = lines.map((line) => line.padEnd(maxLineSize, \" \"));\r\n        const matrix: Field = new FixedSizeMatrix<string>({ x: maxLineSize, y: lines.length });\r\n        const flat = lines.map((l) => l.split(\"\")).flat();\r\n        matrix.setFlatData(flat);\r\n\r\n        const startingPoint = matrix.findOneWithCoordinate((cell, coordinate) => coordinate.y === 0 && cell === \"|\");\r\n        if (!startingPoint) {\r\n            throw new Error(\"Starting point not found!\");\r\n        }\r\n        await outputCallback(startingPoint);\r\n        let state: State | null = {\r\n            position: startingPoint,\r\n            direction: directions.down\r\n        };\r\n\r\n        const foundLetters: string[] = [];\r\n\r\n        while (state !== null) {\r\n            state = travel(matrix, state, (letter, direction, coordinate) => {\r\n                foundLetters.push(letter);\r\n                matrix.set(coordinate, expectedFromDirection(direction));\r\n            });\r\n        }\r\n\r\n        await outputCallback(foundLetters.join(\"\"));\r\n\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        lines = lines.map((line) => line.trimEnd());\r\n        const maxLineSize = lines.reduce((acc, next) => acc + next.length, 0);\r\n        lines = lines.map((line) => line.padEnd(maxLineSize, \" \"));\r\n        const matrix: Field = new FixedSizeMatrix<string>({ x: maxLineSize, y: lines.length });\r\n        const flat = lines.map((l) => l.split(\"\")).flat();\r\n        matrix.setFlatData(flat);\r\n\r\n        const startingPoint = matrix.findOneWithCoordinate((cell, coordinate) => coordinate.y === 0 && cell === \"|\");\r\n        if (!startingPoint) {\r\n            throw new Error(\"Starting point not found!\");\r\n        }\r\n        await outputCallback(startingPoint);\r\n        let state: State | null = {\r\n            position: startingPoint,\r\n            direction: directions.down\r\n        };\r\n\r\n        const foundLetters: string[] = [];\r\n\r\n        let lastPosition: Coordinate | null = null;\r\n        let count = 1;\r\n        while (state !== null) {\r\n            state = travel(matrix, state, (letter, direction, coordinate) => {\r\n                foundLetters.push(letter);\r\n                matrix.set(coordinate, expectedFromDirection(direction));\r\n            });\r\n            if (state != null && (lastPosition === null || manhattanDistance(state.position, lastPosition) !== 0)) {\r\n                count++;\r\n                lastPosition = state.position;\r\n            }\r\n        }\r\n\r\n        await outputCallback(count);\r\n    },\r\n    { key: \"a-series-of-tubes\", title: \"A Series of Tubes\", stars: 2, }\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\nimport { Queue } from \"../../../support/data-structure\";\r\n\r\n// type Command = \"snd\" | \"set\" | \"add\" | \"mul\" | \"mod\" | \"rcv\" | \"jgz\";\r\ntype Command = \"set\" | \"sub\" | \"mul\" | \"jnz\";\r\n\r\ninterface Instruction {\r\n    command: Command;\r\n    args: string[];\r\n}\r\n\r\nconst parseLines = (lines: string[]): Instruction[] => {\r\n    return lines.map((line) => line.trim().split(\" \")).map((tokens) => {\r\n        return {\r\n            command: tokens[0] as Command,\r\n            args: tokens.slice(1)\r\n        };\r\n    });\r\n};\r\n\r\n// type SoundCallback = (frequency: number) => void;\r\n// type RecoverCallback = (() => void) | ReceiveCallback;\r\n// type ReceiveCallback = { receive: () => number | void };\r\n\r\n// function isReceive(e: RecoverCallback): e is ReceiveCallback {\r\n//     return (<ReceiveCallback>e).receive !== undefined;\r\n// }\r\n\r\ntype Registers = Map<string, number>;\r\n\r\nconst registerFactory = (): Registers => {\r\n    const map = new Map<string, number>();\r\n    [...Array(\"z\".charCodeAt(0) - \"a\".charCodeAt(0) + 1).keys()]\r\n        .map((index) => String.fromCharCode(\"a\".charCodeAt(0) + index))\r\n        .forEach((e) => map.set(e, 0));\r\n    return map;\r\n};\r\n\r\nconst getConstantOrRegister = (e: string, registers: Registers): number => {\r\n    if (registers.has(e)) {\r\n        return registers.get(e)!;\r\n    }\r\n    const value = parseInt(e, 10);\r\n    if (value.toString() === e) {\r\n        return value;\r\n    }\r\n    throw new Error(\"Invalid value: \" + e);\r\n};\r\n\r\ninterface Callbacks {\r\n    mulCallback?: () => void;\r\n    // soundCallback: SoundCallback,\r\n    // recoverCallback: RecoverCallback\r\n}\r\n\r\nconst executeInstruction = (\r\n    instruction: Instruction,\r\n    currentIndex: number,\r\n    registers: Registers,\r\n    callbacks?: Callbacks\r\n)\r\n    : [number, Registers] => {\r\n    const increasedIndex = currentIndex + 1;\r\n    const args = instruction.args;\r\n    const gcr = (index: number) => getConstantOrRegister(args[index], registers);\r\n    switch (instruction.command) {\r\n        case \"sub\":\r\n            registers.set(args[0], gcr(0) - gcr(1));\r\n            break;\r\n        // case \"add\":\r\n        //     registers.set(args[0], gcr(0) + gcr(1));\r\n        //     break;\r\n        // case \"jgz\":\r\n        //     if (gcr(0) > 0) {\r\n        //         return [currentIndex + gcr(1), registers];\r\n        //     }\r\n        //     break;\r\n        case \"jnz\":\r\n            if (gcr(0) !== 0) {\r\n                return [currentIndex + gcr(1), registers];\r\n            }\r\n            break;\r\n        // case \"mod\":\r\n        //     registers.set(args[0], gcr(0) % gcr(1));\r\n        //     break;\r\n        case \"mul\":\r\n            registers.set(args[0], gcr(0) * gcr(1));\r\n            if (callbacks && callbacks.mulCallback) {\r\n                callbacks.mulCallback();\r\n            }\r\n            break;\r\n        // case \"rcv\":\r\n        //     if (isReceive(callbacks.recoverCallback)) {\r\n        //         const result = callbacks.recoverCallback.receive();\r\n        //         if (result !== undefined) {\r\n        //             registers.set(args[0], result);\r\n        //         } else {\r\n        //             return [currentIndex, registers];\r\n        //         }\r\n        //     } else if (gcr(0) !== 0) {\r\n        //         callbacks.recoverCallback();\r\n        //     }\r\n        //     break;\r\n        case \"set\":\r\n            registers.set(args[0], gcr(1));\r\n            break;\r\n        // case \"snd\":\r\n        //     callbacks.soundCallback(gcr(0));\r\n        //     break;\r\n        default:\r\n            throw new Error(\"Could not execute instruction '\" + instruction.command + \"'\");\r\n    }\r\n    return [increasedIndex, registers];\r\n};\r\n\r\nexport const coprocessorConflagration = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const instructions = parseLines(lines);\r\n        let currentIndex = 0;\r\n        let registers = registerFactory();\r\n        let mulCount = 0;\r\n        while (currentIndex >= 0 && currentIndex < instructions.length) {\r\n            const instruction = instructions[currentIndex];\r\n            [currentIndex, registers] = executeInstruction(\r\n                instruction,\r\n                currentIndex,\r\n                registers,\r\n                {\r\n                    mulCallback: () => mulCount++\r\n                }\r\n            );\r\n        }\r\n        await outputCallback(mulCount);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        // disassembled:\r\n        // let b = (81 * 100) + 100000;\r\n        // let c = b + 17000\r\n        // //semantic\r\n        // let h = 0;\r\n        // //let b = 108100;\r\n        // //let c = b + 17000;\r\n        // while (b !== c + 17) {\r\n        //     if (!isPrime(b)) {\r\n        //         h++;\r\n        //     }\r\n        //     b += 17;\r\n        // }\r\n\r\n        const isPrime = (e: number) => {\r\n            for (let i = 2; i * i <= e; i++) {\r\n                if (e % i === 0) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n        let b = (81 * 100) + 100000;\r\n        const c = b + 17000;\r\n        let h = 0;\r\n        while (b !== c + 17) {\r\n            if (!isPrime(b)) {\r\n                h++;\r\n            }\r\n            b += 17;\r\n        }\r\n\r\n        await outputCallback(h);\r\n    },\r\n    { key: \"coprocessor-conflagration\", title: \"Coprocessor Conflagration\", stars: 2, }\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\n\r\nfunction parseLines(lines: string[]): number[][] {\r\n    return lines\r\n        .map((l) => l.trim())\r\n        .map((line) => line.split(\"\\t\").map((token) => parseInt(token, 10)))\r\n    ;\r\n}\r\n\r\nexport const corruptionChecksum = entryForFile(\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const sequence = parseLines(lines);\r\n        const checksum = sequence.map((row) => {\r\n            const max = row.reduce((acc, next) => Math.max(acc, next));\r\n            const min = row.reduce((acc, next) => Math.min(acc, next));\r\n            return max - min;\r\n        }).reduce((acc, next) => acc + next);\r\n        await outputCallback(checksum);\r\n    },\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const sequence = parseLines(lines);\r\n        const checksum = sequence.map((row) => {\r\n            const internalChecksum = row.map((small) => {\r\n                const candidates = row.filter((big) => big > small && big % small === 0);\r\n                if (candidates.length === 0) {\r\n                    return null;\r\n                } else if (candidates.length !== 1) {\r\n                    throw new Error(\"Multiple candidates found for \" + small + \": \" + JSON.stringify(candidates));\r\n                }\r\n                return candidates[0] / small;\r\n            }).filter((e) => e !== null).map((e) => e!);\r\n            if (internalChecksum.length !== 1) {\r\n                throw new Error(\"Multiple candidates found for internal: \" + JSON.stringify(internalChecksum));\r\n            }\r\n            return internalChecksum[0];\r\n        }).reduce((acc, next) => acc + next);\r\n        await outputCallback(checksum);\r\n\r\n    },\r\n    { key: \"corruption-checksum\", title: \"Corruption Checksum\", stars: 2, }\r\n);\r\n\r\n","import { entryForFile } from \"../../entry\";\r\nimport { Stack } from \"linq-typescript\";\r\n\r\nconst parseLines = (lines: string[]): PipeDefinition[] => {\r\n    return lines.map((line) => {\r\n        const [sourceToken, targetToken] = line.split(\" <-> \");\r\n        const source = parseInt(sourceToken, 10);\r\n        const targets = targetToken.split(\", \").map((e) => parseInt(e, 10));\r\n        return { source, targets };\r\n    });\r\n};\r\n\r\ninterface PipeDefinition {\r\n    source: number;\r\n    targets: number[];\r\n}\r\n\r\nclass Graph {\r\n    private readonly _map = new Map<number, Set<number>>();\r\n\r\n    public addLink(source: number, target: number) {\r\n        this.ensureLink(source, target);\r\n        this.ensureLink(target, source);\r\n    }\r\n\r\n    public addDefinition(pipeDefinition: PipeDefinition) {\r\n        pipeDefinition.targets.forEach((target) => this.addLink(pipeDefinition.source, target));\r\n    }\r\n\r\n    public addDefinitions(pipeDefinitions: PipeDefinition[]) {\r\n        pipeDefinitions.forEach((definition) => this.addDefinition(definition));\r\n    }\r\n\r\n    public getNodes(): number[] {\r\n        return [...this._map.keys()];\r\n    }\r\n\r\n    public dfs(start: number, callback: (arg: number) => void) {\r\n        const stack = new Stack<number>();\r\n        const visited = new Set<number>();\r\n        stack.push(start);\r\n        while (true) {\r\n            const toVisit = stack.pop();\r\n            if (toVisit === undefined) {\r\n                break;\r\n            }\r\n            if (visited.has(toVisit)) {\r\n                continue;\r\n            }\r\n            visited.add(toVisit);\r\n            callback(toVisit);\r\n            const linked = this.getLinked(toVisit);\r\n            linked.forEach((e) => stack.push(e));\r\n        }\r\n    }\r\n\r\n    private getLinked(source: number): number[] {\r\n        const adjacency = this._map.get(source);\r\n        if (!adjacency) {\r\n            return [];\r\n        }\r\n        return [...adjacency.values()];\r\n    }\r\n\r\n    private ensureLink(source: number, target: number) {\r\n        let adjacency = this._map.get(source);\r\n        if (adjacency === undefined) {\r\n            adjacency = new Set<number>();\r\n            this._map.set(source, adjacency);\r\n        }\r\n        adjacency.add(target);\r\n    }\r\n}\r\n\r\nexport const digitalPlumber = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const definitions = parseLines(lines);\r\n        const graph = new Graph();\r\n        graph.addDefinitions(definitions);\r\n        let count = 0;\r\n        graph.dfs(0, (e) => count++);\r\n        await outputCallback(count);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const definitions = parseLines(lines);\r\n        const graph = new Graph();\r\n        graph.addDefinitions(definitions);\r\n        const visited = new Set<number>();\r\n        let count = 0;\r\n        const stack = new Stack<number>(graph.getNodes());\r\n        while (true) {\r\n            const next = stack.pop();\r\n            if (next === undefined) {\r\n                break;\r\n            }\r\n            if (visited.has(next)) {\r\n                continue;\r\n            }\r\n            count++;\r\n            graph.dfs(next, (e) => visited.add(e));\r\n        }\r\n        await outputCallback(count);\r\n    },\r\n    { key: \"digital-plumber\", title: \"Digital Plumber\", stars: 2, }\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\nimport { groupBy } from \"../../../support/sequences\";\r\n\r\nconst reverseWrap = (elements: number[], state: State, length: number): number[] => {\r\n    const startPortionLength = state.currentIndex + length - elements.length;\r\n    const reversePortion = [\r\n        elements.slice(state.currentIndex),\r\n        elements.slice(0, startPortionLength)\r\n    ].flatMap((e) => e).reverse();\r\n    return [\r\n        reversePortion.slice(reversePortion.length - startPortionLength),\r\n        elements.slice(startPortionLength, state.currentIndex),\r\n        reversePortion.slice(0, reversePortion.length - startPortionLength)\r\n    ].flatMap((e) => e);\r\n};\r\nconst reverseSimple = (elements: number[], state: State, length: number): number[] => {\r\n    return [\r\n        elements.slice(0, state.currentIndex),\r\n        elements.slice(state.currentIndex, state.currentIndex + length).reverse(),\r\n        elements.slice(state.currentIndex + length)\r\n    ].flatMap((e) => e);\r\n\r\n};\r\n\r\nexport const reverse = (elements: number[], state: State, length: number): [number[], State] => {\r\n    if (state.currentIndex + length > elements.length) {\r\n        elements = reverseWrap(elements, state, length);\r\n    } else {\r\n        elements = reverseSimple(elements, state, length);\r\n    }\r\n    return [\r\n        elements,\r\n        {\r\n            currentIndex: (state.currentIndex + length + state.skipSize) % elements.length,\r\n            skipSize: (state.skipSize + 1) % elements.length\r\n        }\r\n    ];\r\n};\r\n\r\nexport const circleGenerator = (n: number = 256): [number[], State] => {\r\n    return [[...Array(n).keys()], {\r\n        currentIndex: 0,\r\n        skipSize: 0\r\n    }];\r\n};\r\n\r\ninterface State {\r\n    currentIndex: number;\r\n    skipSize: number;\r\n}\r\n\r\nexport const knotHash = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const lengths = lines[0].split(\",\").map((e) => parseInt(e, 10));\r\n        let [circle, state] = circleGenerator();\r\n        lengths.forEach((length) => {\r\n            [circle, state] = reverse(circle, state, length);\r\n        });\r\n        await outputCallback(circle[0] * circle[1]);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const input = lines[0];\r\n        const result = calculateKnotHash(input);\r\n        await outputCallback(result);\r\n    },\r\n    { key: \"knoth-hash\", title: \"Knot Hash\", stars: 2, }\r\n);\r\n\r\nexport function calculateKnotHash(input: string, baseSequence: (number[] | null) = null) {\r\n    if (baseSequence === null) {\r\n        baseSequence = [17, 31, 73, 47, 23];\r\n    }\r\n    const decodedInput = [...input].map((e) => e.charCodeAt(0));\r\n    const lengths = decodedInput.concat(baseSequence);\r\n    let [circle, state] = circleGenerator();\r\n    for (let i = 0; i < 64; i++) {\r\n        lengths.forEach((length) => {\r\n            [circle, state] = reverse(circle, state, length);\r\n        });\r\n    }\r\n    const result = groupBy(circle, 16)\r\n        .map((group) => group.reduce((acc, next) => acc ^ next))\r\n        .map((res) => res.toString(16).padStart(2, \"0\"))\r\n        .join(\"\");\r\n    return result;\r\n}\r\n","import { entryForFile } from \"../../entry\";\r\nimport { groupBy } from \"../../../support/sequences\";\r\nimport { calculateKnotHash } from \"./knot-hash\";\r\nimport { FixedSizeMatrix } from \"../../../support/matrix\";\r\nimport { Coordinate, getSurrounding } from \"../../../support/geometry\";\r\nimport { NotImplementedError } from \"../../../support/error\";\r\nimport { Stack } from \"linq-typescript\";\r\n\r\ntype Binary = 0 | 1;\r\n\r\ntype Disk = Binary[][];\r\n\r\nconst hexStringToBits = (s: string): Binary[] => {\r\n    return [...s]\r\n        .map((e) => parseInt(e, 16))\r\n        .map((e) => e.toString(2).padStart(4, \"0\"))\r\n        .flatMap((e) => e.split(\"\"))\r\n        .map((e) => parseInt(e, 10) as Binary);\r\n};\r\n\r\nexport const diskDefragmentation = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const key = lines[0].trim();\r\n        const bits = generateDisk(key);\r\n        await outputCallback(bits.map((row) => row.join(\"\")).join(\"\\n\"));\r\n        const setBitsCount = bits.flatMap((e) => e).filter((e) => e === 1).length;\r\n        await outputCallback(setBitsCount);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const key = lines[0].trim();\r\n        const disk = generateDisk(key);\r\n        const diskMatrix = new FixedSizeMatrix<Binary>({x: 128, y: 128});\r\n        diskMatrix.setFlatData(disk.flat());\r\n        let regionCount = 0;\r\n        diskMatrix.onEveryCell((coordinate, value) => {\r\n            if (value === 1) {\r\n                regionCount++;\r\n                emptyRegion(diskMatrix, coordinate);\r\n            }\r\n        });\r\n        await outputCallback(regionCount);\r\n    },\r\n    { key: \"disk-defragmentation\", title: \"Disk Defragmentation\", stars: 2, }\r\n);\r\n\r\nfunction emptyRegion(matrix: FixedSizeMatrix<Binary>, coordinate: Coordinate) {\r\n    const stack = new Stack<Coordinate>();\r\n    stack.push(coordinate);\r\n    while (true) {\r\n        const nextCoordinate = stack.pop();\r\n        if (nextCoordinate === undefined) {\r\n            break;\r\n        }\r\n        matrix.set(nextCoordinate, 0);\r\n        getSurrounding(nextCoordinate).filter((e) => matrix.get(e) === 1).forEach((e) => stack.push(e));\r\n    }\r\n}\r\n\r\nfunction generateDisk(key: string): Disk {\r\n    const generatedLines = [...Array(128).keys()].map((index) => `${key}-${index}`);\r\n    const hashes = generatedLines.map((e) => calculateKnotHash(e));\r\n    const bits = hashes.map(hexStringToBits);\r\n    return bits;\r\n}\r\n","import { entryForFile } from \"../../entry\";\r\n\r\nclass Generator {\r\n    private last: number;\r\n    constructor(\r\n        private readonly seed: number,\r\n        private readonly factor: number,\r\n        private readonly filter?: (e: number) => boolean\r\n    ) {\r\n        this.last = seed;\r\n    }\r\n\r\n    public getNext(): number {\r\n        do {\r\n            this.last = (this.last * this.factor) % 2147483647;\r\n        } while (this.filter && !this.filter(this.last));\r\n\r\n        return this.last;\r\n    }\r\n}\r\n\r\nfunction parseLines(lines: string[]): [number, number] {\r\n    const [a, b] = lines\r\n        .map((line) => line.trim())\r\n        .filter((line) => line)\r\n        .map((line) => line.split(\" \")[4])\r\n        .map((e) => parseInt(e, 10));\r\n    return [a, b];\r\n}\r\n\r\nexport const duelingGenerators = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const [seedA, seedB] = parseLines(lines);\r\n        const factorA = 16807;\r\n        const factorB = 48271;\r\n        const generators = [\r\n            new Generator(seedA, factorA),\r\n            new Generator(seedB, factorB)\r\n        ];\r\n        let count = 0;\r\n\r\n        const total = 40 * (10 ** 6);\r\n\r\n        for (let i = 0; i < total; i++) {\r\n            if (i % 100000 === 0) {\r\n                await outputCallback(`${i / total * 100}% done`);\r\n            }\r\n            const values = generators.map((generator) => generator.getNext());\r\n            const mapped = values.map((value) => [...value.toString(2)].reverse().slice(0, 16).join(\"\"));\r\n            const same = mapped.reduce((acc, next) => acc === next ? acc : \"\");\r\n            if (same !== \"\") {\r\n                count++;\r\n            }\r\n        }\r\n        await outputCallback(count);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const [seedA, seedB] = parseLines(lines);\r\n        const factorA = 16807;\r\n        const factorB = 48271;\r\n        const generators = [\r\n            new Generator(seedA, factorA, (e) => e % 4 === 0),\r\n            new Generator(seedB, factorB, (e) => e % 8 === 0)\r\n        ];\r\n        let count = 0;\r\n\r\n        const total = 5 * (10 ** 6);\r\n\r\n        for (let i = 0; i < total; i++) {\r\n            if (i % 100000 === 0) {\r\n                await outputCallback(`${i / total * 100}% done`);\r\n            }\r\n            const values = generators.map((generator) => generator.getNext());\r\n            const mapped = values.map((value) => [...value.toString(2)].reverse().slice(0, 16).join(\"\"));\r\n            const same = mapped.reduce((acc, next) => acc === next ? acc : \"\");\r\n            if (same !== \"\") {\r\n                count++;\r\n            }\r\n        }\r\n        await outputCallback(count);\r\n    },\r\n    { key: \"dueling-generators\", title: \"Dueling Generators\", stars: 2, }\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\nimport { Queue } from \"../../../support/data-structure\";\r\n\r\ntype Command = \"snd\" | \"set\" | \"add\" | \"mul\" | \"mod\" | \"rcv\" | \"jgz\";\r\n\r\ninterface Instruction {\r\n    command: Command;\r\n    args: string[];\r\n}\r\n\r\nconst parseLines = (lines: string[]): Instruction[] => {\r\n    return lines.map((line) => line.trim().split(\" \")).map((tokens) => {\r\n        return {\r\n            command: tokens[0] as Command,\r\n            args: tokens.slice(1)\r\n        };\r\n    });\r\n};\r\n\r\ntype SoundCallback = (frequency: number) => void;\r\ntype RecoverCallback = (() => void) | ReceiveCallback;\r\ninterface ReceiveCallback {receive: () => number | void; }\r\n\r\nfunction isReceive(e: RecoverCallback): e is ReceiveCallback {\r\n    return (e as ReceiveCallback).receive !== undefined;\r\n}\r\n\r\ntype Registers = Map<string, number>;\r\n\r\nconst registerFactory = (): Registers => {\r\n    const map = new Map<string, number>();\r\n    [...Array(\"z\".charCodeAt(0) - \"a\".charCodeAt(0) + 1).keys()]\r\n        .map((index) => String.fromCharCode(\"a\".charCodeAt(0) + index))\r\n        .forEach((e) => map.set(e, 0));\r\n    return map;\r\n};\r\n\r\nconst getConstantOrRegister = (e: string, registers: Registers): number => {\r\n    if (registers.has(e)) {\r\n        return registers.get(e)!;\r\n    }\r\n    const value = parseInt(e, 10);\r\n    if (value.toString() === e) {\r\n        return value;\r\n    }\r\n    throw new Error(\"Invalid value: \" + e);\r\n};\r\n\r\ninterface Callbacks {\r\n    soundCallback: SoundCallback;\r\n    recoverCallback: RecoverCallback;\r\n}\r\n\r\nconst executeInstruction = (\r\n    instruction: Instruction,\r\n    currentIndex: number,\r\n    registers: Registers,\r\n    callbacks: Callbacks\r\n)\r\n    : [number, Registers] => {\r\n        const increasedIndex = currentIndex + 1;\r\n        const args = instruction.args;\r\n        const gcr = (index: number) => getConstantOrRegister(args[index], registers);\r\n        switch (instruction.command) {\r\n            case \"add\":\r\n                registers.set(args[0], gcr(0) + gcr(1));\r\n                break;\r\n            case \"jgz\":\r\n                if (gcr(0) > 0) {\r\n                    return [currentIndex + gcr(1), registers];\r\n                }\r\n                break;\r\n            case \"mod\":\r\n                registers.set(args[0], gcr(0) % gcr(1));\r\n                break;\r\n            case \"mul\":\r\n                registers.set(args[0], gcr(0) * gcr(1));\r\n                break;\r\n            case \"rcv\":\r\n                if (isReceive(callbacks.recoverCallback)) {\r\n                    const result = callbacks.recoverCallback.receive();\r\n                    if (result !== undefined) {\r\n                        registers.set(args[0], result);\r\n                    } else {\r\n                        return [currentIndex, registers];\r\n                    }\r\n                } else if (gcr(0) !== 0) {\r\n                    callbacks.recoverCallback();\r\n                }\r\n                break;\r\n            case \"set\":\r\n                registers.set(args[0], gcr(1));\r\n                break;\r\n            case \"snd\":\r\n                callbacks.soundCallback(gcr(0));\r\n                break;\r\n            default:\r\n                throw new Error(\"Could not execute instruction '\" + instruction.command + \"'\");\r\n        }\r\n        return [increasedIndex, registers];\r\n};\r\n\r\nexport const duet = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const instructions = parseLines(lines);\r\n        let currentIndex = 0;\r\n        let registers = registerFactory();\r\n        let lastSound = 0;\r\n        let hasRecovered = false;\r\n        while (currentIndex >= 0 && currentIndex < instructions.length && !hasRecovered) {\r\n            const instruction = instructions[currentIndex];\r\n            [currentIndex, registers] = executeInstruction(\r\n                instruction,\r\n                currentIndex,\r\n                registers,\r\n                {\r\n                    soundCallback: (sound) => lastSound = sound,\r\n                    recoverCallback: () => hasRecovered = true\r\n                }\r\n            );\r\n        }\r\n        await outputCallback({hasRecovered, lastSound});\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const instructions = parseLines(lines);\r\n        let aIndex = 0;\r\n        let bIndex = 0;\r\n        let aRegisters = registerFactory();\r\n        let bRegisters = registerFactory();\r\n        bRegisters.set(\"p\", 1);\r\n        const a2bPipe: Queue<number> = new Queue<number>();\r\n        const b2aPipe: Queue<number> = new Queue<number>();\r\n        let isAWaiting = false;\r\n        let isBWaiting = false;\r\n        let hasAEnded = false;\r\n        let hasBEnded = false;\r\n\r\n        let counter = 0;\r\n\r\n        while (!hasAEnded || !hasBEnded) {\r\n            if (!hasAEnded) {\r\n                [aIndex, aRegisters] = executeInstruction(\r\n                    instructions[aIndex],\r\n                    aIndex,\r\n                    aRegisters,\r\n                    {\r\n                        soundCallback: (n: number) => a2bPipe.add(n),\r\n                        recoverCallback: {receive: () => {\r\n                            isAWaiting = true;\r\n                            if (!b2aPipe.isEmpty) {\r\n                                isAWaiting = false;\r\n                                return b2aPipe.get()!;\r\n                            }\r\n                        }}\r\n                    }\r\n                );\r\n            }\r\n            if (!hasBEnded) {\r\n                [bIndex, bRegisters] = executeInstruction(\r\n                    instructions[bIndex],\r\n                    bIndex,\r\n                    bRegisters,\r\n                    {\r\n                        soundCallback: (n: number) => {\r\n                            b2aPipe.add(n);\r\n                            counter++;\r\n                        },\r\n                        recoverCallback: {receive: () => {\r\n                            isBWaiting = true;\r\n                            if (!a2bPipe.isEmpty) {\r\n                                isBWaiting = false;\r\n                                return a2bPipe.get()!;\r\n                            }\r\n                        }}\r\n                    }\r\n                );\r\n            }\r\n            if ((isAWaiting || hasAEnded) && (isBWaiting || hasBEnded)) {\r\n                hasAEnded = true;\r\n                hasBEnded = true;\r\n            }\r\n            if (aIndex < 0 || aIndex >= instructions.length) {\r\n                hasAEnded = true;\r\n            }\r\n            if (bIndex < 0 || bIndex >= instructions.length) {\r\n                hasBEnded = true;\r\n            }\r\n        }\r\n        await outputCallback(counter);\r\n    },\r\n    { key: \"duet\", title: \"Duet\", stars: 2, }\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\n\r\ninterface BridgeComponent {\r\n    ports: [number, number];\r\n}\r\n\r\ntype Bridge = BridgeComponent[];\r\n\r\nconst parse = (lines: string[]): BridgeComponent[] => {\r\n    return lines.map((line) => {\r\n        const [a, b] = line.split(\"/\").map((e) => parseInt(e, 10));\r\n        return {\r\n            ports: [a, b]\r\n        };\r\n    });\r\n};\r\n\r\nconst findStrongestBridge = (nextPort: number, components: BridgeComponent[]): number => {\r\n    const candidates = components.filter((component) => component.ports.indexOf(nextPort) >= 0);\r\n    if (candidates.length === 0) {\r\n        return 0;\r\n    } else {\r\n        return candidates.reduce((acc: number, candidate: BridgeComponent) => {\r\n            const remainingComponents = components.filter((e) => e !== candidate);\r\n            const freePort = candidate.ports[0] === nextPort ? candidate.ports[1] : candidate.ports[0];\r\n            return Math.max(\r\n                candidate.ports[0] +\r\n                candidate.ports[1] +\r\n                findStrongestBridge(freePort, remainingComponents),\r\n                acc\r\n            );\r\n        }, 0);\r\n    }\r\n};\r\n\r\nconst createAllBridges = (nextPort: number, components: BridgeComponent[]): Bridge[] => {\r\n    const candidates = components.filter((bridge) => bridge.ports.indexOf(nextPort) >= 0);\r\n    if (candidates.length === 0) {\r\n        return [];\r\n    } else {\r\n        return candidates.flatMap((candidate) => {\r\n            const remainingComponents = components.filter((e) => e !== candidate);\r\n            const freePort = candidate.ports[0] === nextPort ? candidate.ports[1] : candidate.ports[0];\r\n            const recursiveBridges = createAllBridges(freePort, remainingComponents);\r\n            if (recursiveBridges.length === 0) {\r\n                return [[candidate]];\r\n            }\r\n            const result = recursiveBridges.map((tail) => [...tail, candidate]);\r\n            return result;\r\n        });\r\n    }\r\n};\r\n\r\nexport const electromagneticMoat = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const bridges = parse(lines);\r\n        const value = findStrongestBridge(0, bridges);\r\n        await outputCallback(value);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const components = parse(lines);\r\n        const bridges = createAllBridges(0, components);\r\n        const maxLength = bridges.map((bridge) => bridge.length).reduce((acc, next) => Math.max(acc, next));\r\n        const interestingBridges = bridges.filter((bridge) => bridge.length === maxLength);\r\n        const bridgesWithCounts = interestingBridges.map((bridge) => ({\r\n            bridge,\r\n            score: bridge.reduce((acc, next) => acc + next.ports[0] + next.ports[1], 0)\r\n        }));\r\n        const bestBridge = bridgesWithCounts.reduce((acc, next) => {\r\n            if (acc.score < next.score) {\r\n                return next;\r\n            }\r\n            return acc;\r\n        });\r\n        await outputCallback(bestBridge.score);\r\n    },\r\n    { key: \"electromagnetic-moat\", title: \"Electromagnetic Moat\", stars: 2, }\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\nimport { FixedSizeMatrix } from \"../../../support/matrix\";\r\nimport { manhattanDistance, Coordinate, CCoordinate } from \"../../../support/geometry\";\r\n\r\ntype Grid = FixedSizeMatrix<string>;\r\n\r\nconst flipHorizontal = (matrix: Grid): Grid => {\r\n    const newGrid: Grid = new FixedSizeMatrix<string>(matrix.size);\r\n    matrix.onEveryCell((coordinate, cell) => {\r\n        newGrid.set({y: coordinate.y, x: matrix.size.x - coordinate.x - 1}, cell!);\r\n    });\r\n    return newGrid;\r\n};\r\n\r\nconst generateAllSymmetries = (matrix: Grid): Grid[] => {\r\n    const result = [];\r\n    result.push(matrix.copy());\r\n    for (let i = 0; i < 4; i++) {\r\n        matrix = flipHorizontal(matrix);\r\n        result.push(matrix);\r\n        matrix = transpose(matrix);\r\n        result.push(matrix);\r\n    }\r\n    return result;\r\n};\r\n\r\nconst matches = (matrix: Grid, symmetries: Grid[]): boolean => {\r\n    if (manhattanDistance(matrix.size, symmetries[0].size) !== 0) {\r\n        return false;\r\n    }\r\n    for (const symmetry of symmetries) {\r\n        if (matrix.isSameAs(symmetry)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\ninterface GridWithDelta {\r\n    grid: Grid;\r\n    delta: Coordinate;\r\n}\r\n\r\nconst extractGrid = (grid: Grid, offset: Coordinate, size: Coordinate): Grid => {\r\n    const gridResult = new FixedSizeMatrix<string>(size);\r\n    const cOffset = new CCoordinate(offset.x, offset.y);\r\n    for (let x = 0; x < size.x; x++) {\r\n        for (let y = 0; y < size.y; y++) {\r\n            gridResult.set({x, y}, grid.get(cOffset.sum({x, y}))!);\r\n        }\r\n    }\r\n    return gridResult;\r\n};\r\n\r\nconst splitWithDelta = (fullGrid: Grid): GridWithDelta[] => {\r\n    const size = fullGrid.size.x % 2 === 0 ? 2 : 3;\r\n    const result: GridWithDelta[] = [];\r\n    for (let x = 0; x < fullGrid.size.x; x += size) {\r\n        for (let y = 0; y < fullGrid.size.y; y += size) {\r\n            const subGrid = extractGrid(fullGrid, {x, y}, {x: size, y: size});\r\n            result.push({\r\n                grid: subGrid,\r\n                delta: {x: x / size, y: y / size}\r\n            });\r\n        }\r\n    }\r\n    return result;\r\n};\r\n\r\nconst joinDeltas = (deltas: GridWithDelta[]): Grid => {\r\n    const subSize = deltas[0].grid.size.x;\r\n    const maxX = deltas.map((d) => d.delta.x).reduce((acc, next) => Math.max(acc, next));\r\n    const size = subSize * (maxX + 1);\r\n    const resultGrid = new FixedSizeMatrix<string>({x: size, y: size});\r\n    deltas.forEach((subGrid) => {\r\n        subGrid.grid.onEveryCell((coordinate, cell) => {\r\n            const setCoordinate = {\r\n                x: coordinate.x + subGrid.delta.x * subSize,\r\n                y: coordinate.y + subGrid.delta.y * subSize,\r\n\r\n            };\r\n            if (resultGrid.get(setCoordinate) !== undefined) {\r\n                throw new Error(\"Join is overwriting data\");\r\n            }\r\n            resultGrid.set(setCoordinate, cell!);\r\n        });\r\n    });\r\n    return resultGrid;\r\n};\r\nconst transpose = (matrix: Grid): Grid => {\r\n    const result = new FixedSizeMatrix<string>(matrix.size);\r\n    matrix.onEveryCell((coordinate, cell) => {\r\n        result.set({x: coordinate.y, y: coordinate.x}, cell!);\r\n    });\r\n    return result;\r\n};\r\n\r\ninterface Rule {\r\n    matching: Grid[];\r\n    result: Grid;\r\n}\r\n\r\nconst parseRules = (lines: string[]): Rule[] => {\r\n    return lines.map((line) => line.trim()).filter((line) => line.length > 0).map((line) => {\r\n        const [left, right] = line.trim().split(\" => \");\r\n        const leftFlat = left.split(\"\").filter((e) => e !== \"/\");\r\n        const rightFlat = right.split(\"\").filter((e) => e !== \"/\");\r\n        const leftSize = Math.sqrt(leftFlat.length);\r\n        const rightSize = Math.sqrt(rightFlat.length);\r\n        const baseRuleMatch = new FixedSizeMatrix<string>({x: leftSize, y: leftSize});\r\n        baseRuleMatch.setFlatData(leftFlat);\r\n        const rightGrid = new FixedSizeMatrix<string>({x: rightSize, y: rightSize});\r\n        rightGrid.setFlatData(rightFlat);\r\n        return {\r\n            matching: generateAllSymmetries(baseRuleMatch),\r\n            result: rightGrid\r\n        };\r\n    });\r\n};\r\n\r\nconst iterate = (grid: Grid, rules: Rule[]): Grid => {\r\n    const splitGrids = splitWithDelta(grid);\r\n    const mappedGrids: GridWithDelta[] = splitGrids.map((subGrid) => {\r\n        for (const rule of rules) {\r\n            if (matches(subGrid.grid, rule.matching)) {\r\n                return {\r\n                    ...subGrid,\r\n                    grid: rule.result\r\n                };\r\n            }\r\n        }\r\n        throw new Error(\"No rule matched\");\r\n    });\r\n    return joinDeltas(mappedGrids);\r\n};\r\n\r\nexport const fractalArt = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const startGrid = new FixedSizeMatrix<string>({x: 3, y: 3});\r\n        startGrid.setFlatData(\".#...####\".split(\"\"));\r\n        const rules = parseRules(lines);\r\n        const sizes = [];\r\n        const total = 5;\r\n        let grid = startGrid;\r\n        sizes.push(grid.size.x);\r\n        for (let i = 0; i < total; i++) {\r\n            grid = iterate(grid, rules);\r\n            sizes.push(grid.size.x);\r\n        }\r\n        await outputCallback(grid.toString((e) => e || \" \"));\r\n        await outputCallback(grid.data.filter((e) => e === \"#\").length);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const startGrid = new FixedSizeMatrix<string>({x: 3, y: 3});\r\n        startGrid.setFlatData(\".#...####\".split(\"\"));\r\n        const rules = parseRules(lines);\r\n        const sizes = [];\r\n        const total = 18;\r\n        let grid = startGrid;\r\n        sizes.push(grid.size.x);\r\n        for (let i = 0; i < total; i++) {\r\n            await outputCallback(\"Iteration: \" + i);\r\n            grid = iterate(grid, rules);\r\n            sizes.push(grid.size.x);\r\n        }\r\n        await outputCallback(grid.data.filter((e) => e === \"#\").length);\r\n    },\r\n    { key: \"fractal-art\", title: \"Fractal Art\", stars: 2, }\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\nimport { DefaultListDictionaryString } from \"../../../support/data-structure\";\r\ntype Operation = \"inc\" | \"dec\";\r\ntype Operator = \">\" | \"<\" | \">=\" | \"<=\" | \"==\" | \"!=\";\r\ninterface Condition {\r\n    left: string;\r\n    operator: Operator;\r\n    right: number;\r\n}\r\n\r\ninterface Action {\r\n    target: string;\r\n    operation: Operation;\r\n    amount: number;\r\n}\r\ninterface Instruction {\r\n    action: Action;\r\n    condition: Condition;\r\n}\r\nclass RegisterState {\r\n\r\n    public currentMax: number = Number.NEGATIVE_INFINITY;\r\n    private readonly state = new Map<string, number>();\r\n\r\n    public update(register: string, calc: (v: number) => number) {\r\n        const existing = this.state.get(register) || 0;\r\n        const newValue = calc(existing);\r\n        this.currentMax = Math.max(this.currentMax, newValue);\r\n        this.state.set(register, newValue);\r\n    }\r\n\r\n    public get(register: string): number {\r\n        const existing = this.state.get(register);\r\n        if (existing === undefined) {\r\n            this.state.set(register, 0);\r\n            return 0;\r\n        }\r\n        return existing;\r\n    }\r\n\r\n    public getValues(): number[] {\r\n        return [...this.state.values()];\r\n    }\r\n}\r\n\r\nconst checkCondition = (condition: Condition, state: RegisterState): boolean => {\r\n    const leftValue = state.get(condition.left);\r\n    switch (condition.operator) {\r\n        case \"!=\":\r\n            return leftValue !== condition.right;\r\n        case \"<\":\r\n            return leftValue < condition.right;\r\n        case \"<=\":\r\n            return leftValue <= condition.right;\r\n        case \"==\":\r\n            return leftValue === condition.right;\r\n        case \">\":\r\n            return leftValue > condition.right;\r\n        case \">=\":\r\n            return leftValue >= condition.right;\r\n    }\r\n    throw new Error(\"Invalid operator \" + condition.operator);\r\n};\r\n\r\nconst updateState = (action: Action, state: RegisterState) => {\r\n    state.update(\r\n        action.target,\r\n        (value) => action.operation === \"dec\" ?\r\n                    value - action.amount :\r\n                    value + action.amount\r\n        );\r\n};\r\n\r\nexport const heardYouLikeRegisters = entryForFile(\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const state = new RegisterState();\r\n        const instructions = parseInstructions(lines);\r\n        executeInstructions(instructions, state);\r\n\r\n        const maxValue = state.getValues().reduce((acc, next) => Math.max(acc, next));\r\n        await outputCallback(maxValue);\r\n    },\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const state = new RegisterState();\r\n        const instruction = parseInstructions(lines);\r\n        executeInstructions(instruction, state);\r\n        await outputCallback(state.currentMax);\r\n    },\r\n    { key: \"heard-you-like-registers\", title: \"I Heard You Like Registers\", stars: 2, }\r\n);\r\n\r\nfunction executeInstructions(instructions: Instruction[], state: RegisterState) {\r\n    instructions.forEach((instruction) => {\r\n        if (checkCondition(instruction.condition, state)) {\r\n            updateState(instruction.action, state);\r\n        }\r\n    });\r\n}\r\n\r\nfunction parseInstructions(lines: string[]) {\r\n    return lines.map((line: string): Instruction => {\r\n        const tokens = line.split(\" \").map((e) => e.trim());\r\n        return {\r\n            action: {\r\n                target: tokens[0],\r\n                operation: tokens[1] as Operation,\r\n                amount: parseInt(tokens[2], 10),\r\n            },\r\n            condition: {\r\n                left: tokens[4],\r\n                operator: tokens[5] as Operator,\r\n                right: parseInt(tokens[6], 10)\r\n            }\r\n        };\r\n    });\r\n}\r\n\r\n","import { flatten } from \"wu\";\r\n\r\nexport interface HexCubeCoordinate {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n}\r\n\r\nexport const sumHexCoordinates = (a: HexCubeCoordinate, b: HexCubeCoordinate): HexCubeCoordinate => {\r\n    return {\r\n        x: a.x + b.x,\r\n        y: a.y + b.y,\r\n        z: a.z + b.z\r\n    };\r\n};\r\n\r\nexport const getHexSurrounding = (a: HexCubeCoordinate): HexCubeCoordinate[] => {\r\n    return Object\r\n        .values(pointyHexDirections)\r\n        .map((d) => sumHexCoordinates(a, d));\r\n};\r\n\r\nexport const serialization = {\r\n    serialize: (c: HexCubeCoordinate) => `${c.x}|${c.y}|${c.z}`,\r\n    deserialize: (s: string): HexCubeCoordinate => {\r\n        const [x, y, z] = s.split(\"|\").map((e) => parseInt(e, 10));\r\n        return {x, y, z};\r\n    }\r\n};\r\n\r\nexport const flatHexDirections = {\r\n    northWest: {x: -1, y: 1, z: 0},\r\n    southEast: {x: 1, y: -1, z: 0},\r\n    northEast: {x: 1, y: 0, z: -1},\r\n    southWest: {x: -1, y: 0, z: 1},\r\n    north: {x: 0, y: 1, z: -1},\r\n    south: {x: 0, y: -1, z: 1},\r\n};\r\n\r\nexport const pointyHexDirections = {\r\n    west: {x: -1, y: 1, z: 0},\r\n    east: {x: 1, y: -1, z: 0},\r\n    northEast: {x: 1, y: 0, z: -1},\r\n    southWest: {x: -1, y: 0, z: 1},\r\n    northWest: {x: 0, y: 1, z: -1},\r\n    southEast: {x: 0, y: -1, z: 1},\r\n};\r\n\r\nexport const hexManhattanDistance = (a: HexCubeCoordinate, b: HexCubeCoordinate): number => {\r\n    return (Math.abs(a.x - b.x) + Math.abs(a.y - b.y) + Math.abs(a.z - b.z)) / 2;\r\n};\r\n","import { entryForFile } from \"../../entry\";\r\nimport { HexCubeCoordinate, sumHexCoordinates, hexManhattanDistance, flatHexDirections } from \"../../../support/hex-geometry\";\r\n\r\nexport type Direction = \"s\" | \"sw\" | \"nw\" | \"n\" | \"ne\" | \"se\";\r\n\r\nconst directionMapper = (d: Direction): HexCubeCoordinate => {\r\n    switch (d) {\r\n        case \"n\":\r\n            return flatHexDirections.north;\r\n        case \"ne\":\r\n            return flatHexDirections.northEast;\r\n        case \"nw\":\r\n            return flatHexDirections.northWest;\r\n        case \"s\":\r\n            return flatHexDirections.south;\r\n        case \"se\":\r\n            return flatHexDirections.southEast;\r\n        case \"sw\":\r\n            return flatHexDirections.southWest;\r\n    }\r\n};\r\n\r\nexport const applyDirections = (\r\n    start: HexCubeCoordinate,\r\n    directions: Direction[],\r\n    callback?: (currentPosition: HexCubeCoordinate) => void\r\n): HexCubeCoordinate => {\r\n    return directions.reduce((acc, next) => {\r\n        const result = sumHexCoordinates(acc, directionMapper(next));\r\n        if (callback) {\r\n            callback(result);\r\n        }\r\n        return result;\r\n    }, start);\r\n};\r\n\r\nexport const hexEd = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const directions = lines[0].split(\",\").map((e) => e as Direction).filter((e) => e !== null);\r\n\r\n\r\n        const center: HexCubeCoordinate = {\r\n            x: 0,\r\n            y: 0,\r\n            z: 0\r\n        };\r\n        const result = applyDirections(center, directions);\r\n        await outputCallback(hexManhattanDistance(center, result));\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const directions = lines[0].split(\",\").map((e) => e as Direction).filter((e) => e !== null);\r\n\r\n\r\n        const center: HexCubeCoordinate = {\r\n            x: 0,\r\n            y: 0,\r\n            z: 0\r\n        };\r\n        let maxDistance = Number.NEGATIVE_INFINITY;\r\n        applyDirections(center, directions, (currentPosition) => {\r\n            maxDistance = Math.max(maxDistance, hexManhattanDistance(center, currentPosition));\r\n        });\r\n        await outputCallback(maxDistance);\r\n    },\r\n    { key: \"hex-ed\", title: \"Hex Ed\", stars: 2, }\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\nexport const highEntropyPasshprases = entryForFile(\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const uniqueLines = lines.filter((line) => {\r\n            const words = line.split(\" \");\r\n            const uniqueWords = new Set(words);\r\n            return words.length === uniqueWords.size;\r\n        }).length;\r\n        await outputCallback(uniqueLines);\r\n    },\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const uniqueLines = lines.filter((line) => {\r\n            const words = line.split(\" \").map((word) => [...word].sort().join(\"\"));\r\n            const uniqueWords = new Set(words);\r\n            return words.length === uniqueWords.size;\r\n        }).length;\r\n        await outputCallback(uniqueLines);\r\n    },\r\n    { key: \"high-entropy-passphrases\", title: \"High-Entropy Passphrases\", stars: 2  }\r\n);\r\n\r\n","import { entryForFile } from \"../../entry\";\r\n\r\nfunction parseLines(lines: string[]): number[] {\r\n    return lines\r\n        .map((l) => l.trim())\r\n        .filter((l) => l.length > 0)\r\n        .flatMap((l) => l.split(\"\"))\r\n        .filter((e) => e.trim().length > 0)\r\n        .map((n) => parseInt(n, 10));\r\n}\r\n\r\nfunction findMatching(sequence: number[]): number[] {\r\n    let lastDigit: number | null = null;\r\n    return sequence.filter((n) => {\r\n        const previous = lastDigit;\r\n        lastDigit = n;\r\n        return n === previous;\r\n    });\r\n}\r\n\r\nexport const inverseCaptcha = entryForFile(\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const sequence = parseLines(lines);\r\n        const circular = [...sequence, sequence[0]];\r\n        const matchingSequence: number[] = findMatching(circular);\r\n        await outputCallback(matchingSequence.reduce((a, b) => a + b));\r\n    },\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const sequence = parseLines(lines);\r\n        const step = Math.floor(sequence.length / 2);\r\n        const matchingSequence: number[] = sequence\r\n            .filter((n, index) => sequence[(index + step) % sequence.length] === n);\r\n        await outputCallback(matchingSequence.reduce((a, b) => a + b));\r\n    },\r\n    { key: \"inverse-captcha\", title: \"Inverse Captcha\", stars: 2, }\r\n);\r\n\r\n","import { entryForFile } from \"../../entry\";\r\n\r\ntype State = number[];\r\n\r\nconst serializeState = (state: State): string => {\r\n    return JSON.stringify(state);\r\n};\r\n\r\nconst shiftIndex = <T>(array: T[], index: number, delta: number): number => {\r\n    return (index + delta) % array.length;\r\n};\r\n\r\nconst distribute = (state: State, maxIndex: number, maxValue: number): State => {\r\n    const newState = [...state];\r\n    newState[maxIndex] = 0;\r\n    let toDistribute = maxValue;\r\n    let nextIndex = shiftIndex(state, maxIndex, 1);\r\n    while (toDistribute > 0) {\r\n        newState[nextIndex]++;\r\n        nextIndex = shiftIndex(state, nextIndex, 1);\r\n        toDistribute--;\r\n    }\r\n    return newState;\r\n};\r\n\r\nexport const memoryReallocation = entryForFile(\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        let state = lines[0].split(\"\\t\").map((e) => parseInt(e, 10));\r\n        const createdStates = new Set<string>();\r\n        while (true) {\r\n            const maxValue = state.reduce((acc, next) => Math.max(acc, next));\r\n            const maxIndex = state.indexOf(maxValue);\r\n            state = distribute(state, maxIndex, maxValue);\r\n            const serialization = serializeState(state);\r\n            if (createdStates.has(serialization)) {\r\n                break;\r\n            }\r\n            createdStates.add(serialization);\r\n        }\r\n        await outputCallback(createdStates.size + 1);\r\n    },\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        let state = lines[0].split(\"\\t\").map((e) => parseInt(e, 10));\r\n        const createdStates = new Map<string, number>();\r\n        let lastSerialization: string | null = null;\r\n        while (true) {\r\n            const maxValue = state.reduce((acc, next) => Math.max(acc, next));\r\n            const maxIndex = state.indexOf(maxValue);\r\n            state = distribute(state, maxIndex, maxValue);\r\n            const serialization = serializeState(state);\r\n            if (createdStates.has(serialization)) {\r\n                lastSerialization = serialization;\r\n                break;\r\n            }\r\n            createdStates.set(serialization, createdStates.size + 1);\r\n        }\r\n        await outputCallback((createdStates.size + 1) - createdStates.get(lastSerialization)!);\r\n    },\r\n    { key: \"memory-reallocation\", title: \"Memory Reallocation\", stars: 2, }\r\n);\r\n\r\n","import { entryForFile } from \"../../entry\";\r\n\r\ntype Direction = -1 | 1;\r\n\r\nclass Scanner {\r\n    constructor(\r\n        public readonly depth: number,\r\n        public readonly range: number,\r\n        public position: number = 0,\r\n        public direction: Direction = 1\r\n        ) {\r\n    }\r\n\r\n    public tick() {\r\n        const position = this.position + this.direction;\r\n        if (position < 0 || position >= this.range) {\r\n            this.direction *= -1;\r\n            this.tick();\r\n        } else {\r\n            this.position = position;\r\n        }\r\n    }\r\n\r\n    public clone(): Scanner {\r\n        return new Scanner(this.depth, this.range, this.position, this.direction);\r\n    }\r\n}\r\n\r\ntype Field = Array<Scanner | null>;\r\n\r\nconst cloneField = (field: Field): Field => {\r\n    return field.map((e) => e ? e.clone() : e);\r\n};\r\n\r\nconst parseLines = (lines: string[]): Field => {\r\n    const sparseField = lines.map((line) => {\r\n        const [depth, range] = line.split(\": \").map((e) => parseInt(e, 10));\r\n        return new Scanner(depth, range);\r\n    });\r\n    const maxDepth = sparseField.map((e) => e.depth).reduce((acc, next) => Math.max(acc, next));\r\n    return [...Array(maxDepth + 1).keys()].map((index) => {\r\n        const scanner = sparseField.filter((e) => e.depth === index)[0];\r\n        if (scanner) {\r\n            return scanner;\r\n        }\r\n        return null;\r\n    });\r\n};\r\n\r\nconst tickField = (field: Field) => {\r\n    field.filter((e) => e != null).forEach((e) => e!.tick());\r\n};\r\n\r\nexport const packetScanners = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const field = parseLines(lines);\r\n        let currentPosition = -1;\r\n        const collisions: Scanner[] = [];\r\n        while (currentPosition < field.length) {\r\n            currentPosition++;\r\n            const currentScanner = field[currentPosition];\r\n            if (currentScanner && currentScanner.position === 0) {\r\n                collisions.push(currentScanner);\r\n            }\r\n            tickField(field);\r\n        }\r\n        const score = collisions.reduce((acc, next) => acc + (next.depth * next.range), 0);\r\n        await outputCallback(score);\r\n    },\r\n    async ({ lines, outputCallback, pause }) => {\r\n        let delay = 0;\r\n        const baseField = parseLines(lines);\r\n        while (true) {\r\n            if (delay % 1000 === 0) {\r\n                await pause();\r\n            }\r\n            const field = cloneField(baseField);\r\n            let currentPosition = -1;\r\n            let hasCollided = false;\r\n            while (currentPosition < field.length) {\r\n                currentPosition++;\r\n                const currentScanner = field[currentPosition];\r\n                if (currentScanner && currentScanner.position === 0) {\r\n                    hasCollided = true;\r\n                    break;\r\n                }\r\n                tickField(field);\r\n            }\r\n            if (!hasCollided) {\r\n                await outputCallback(delay);\r\n                break;\r\n            }\r\n            tickField(baseField);\r\n            hasCollided = false;\r\n            delay++;\r\n        }\r\n    },\r\n    { key: \"packet-scanners\", title: \"Packet Scanners\", stars: 2, }\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\nimport { manhattanDistance, Coordinate3d } from \"../../../support/geometry\";\r\nimport { NotImplementedError } from \"../../../support/error\";\r\n\r\ninterface Particle {\r\n    position: Coordinate3d;\r\n    speed: Coordinate3d;\r\n    acceleration: Coordinate3d;\r\n}\r\n\r\nconst parseTuple = (s: string): Coordinate3d => {\r\n    const split = s.slice(3, -1).split(\",\").map((e) => parseInt(e, 10));\r\n    if (split.length !== 3) {\r\n        throw new Error(\"Invalid string\");\r\n    }\r\n    return {\r\n        x: split[0],\r\n        y: split[1],\r\n        z: split[2]\r\n    };\r\n};\r\n\r\nconst parseParticles = (lines: string[]): Particle[] => {\r\n    return lines.map((line) => {\r\n        const [rawPos, rawSpeed, rawAcc] = line.split(\", \");\r\n        return {\r\n            position: parseTuple(rawPos),\r\n            speed: parseTuple(rawSpeed),\r\n            acceleration: parseTuple(rawAcc)\r\n        };\r\n    });\r\n};\r\n\r\nconst updateParticle = (particle: Particle): Particle => {\r\n    const newSpeed: Coordinate3d = {\r\n        x: particle.speed.x + particle.acceleration.x,\r\n        y: particle.speed.y + particle.acceleration.y,\r\n        z: particle.speed.z + particle.acceleration.z,\r\n    };\r\n\r\n    const newPosition: Coordinate3d = {\r\n        x: particle.position.x + newSpeed.x,\r\n        y: particle.position.y + newSpeed.y,\r\n        z: particle.position.z + newSpeed.z,\r\n    };\r\n    return {\r\n        ...particle,\r\n        position: newPosition,\r\n        speed: newSpeed\r\n    };\r\n};\r\n\r\nconst serializeCoordinate = (c: Coordinate3d): string => {\r\n    return [c.x, c.y, c.z].join(\",\");\r\n};\r\n\r\nconst createCollided = (particles: Particle[]): Array<Particle & {collision: boolean}> => {\r\n    const existing = new Set<string>();\r\n    const collisions = new Set<string>();\r\n    particles.forEach((p) => {\r\n        const serialized = serializeCoordinate(p.position);\r\n        if (existing.has(serialized)) {\r\n            collisions.add(serialized);\r\n        }\r\n        existing.add(serialized);\r\n    });\r\n    return particles.map((particle) => ({\r\n        ...particle,\r\n        collision: collisions.has(serializeCoordinate(particle.position))\r\n    }));\r\n};\r\n\r\nexport const particleSwarm = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const accelerations = lines\r\n            .map((line) => line.split(\", \")[2].split(\"=<\")[1].slice(0, -1))\r\n            .map((rawAcc) => rawAcc.split(\",\").map((e) => parseInt(e, 10)))\r\n            .map((vs) => ({\r\n                x: vs[0],\r\n                y: vs[1],\r\n                z: vs[2]\r\n            }));\r\n        const lowestAcceleration = accelerations\r\n            .map((e, index) => ({e, index}))\r\n            .filter((e) => manhattanDistance(e.e, {x: 0, y: 0, z: 0}) === 0);\r\n\r\n        await outputCallback(accelerations);\r\n        await outputCallback(lowestAcceleration);\r\n\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        let particles = parseParticles(lines);\r\n\r\n        let lastCollision = 0;\r\n        let currentStep = 0;\r\n\r\n        await outputCallback(particles.length);\r\n        while (currentStep - lastCollision < 1000) {\r\n            particles = particles.map(updateParticle);\r\n            const oldLength = particles.length;\r\n            particles = createCollided(particles).filter((p) => !p.collision);\r\n            if (particles.length !== oldLength) {\r\n                lastCollision = currentStep;\r\n            }\r\n            currentStep++;\r\n        }\r\n        await outputCallback(particles.length);\r\n\r\n    },\r\n    { key: \"particle-swarm\", title: \"Particle Swarm\", stars: 2, }\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\n\r\nexport const permutationPromenade = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const programs = programListGenerator(16);\r\n        const instructions = lines[0].split(\",\").map((i) => i.trim());\r\n        const reordered = dance(instructions, programs);\r\n        await outputCallback(reordered.join(\"\"));\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        let programs = programListGenerator(16);\r\n        const instructions = lines[0].split(\",\").map((i) => i.trim());\r\n        const total = 1000000000;\r\n        const dances: string[] = [];\r\n        for (let i = 0; i < total; i++) {\r\n            if (i % 100 === 0) {\r\n                const currentRatio = i / total;\r\n                await outputCallback(`Done ${currentRatio * 100}%`);\r\n            }\r\n            programs = dance(instructions, programs);\r\n            const serialized = programs.join(\"\");\r\n            if (dances.indexOf(serialized) >= 0) {\r\n                await outputCallback(\"Found at cycle \" + i);\r\n                await outputCallback(\"Dances length: \" + dances.length);\r\n                break;\r\n            }\r\n            dances.push(serialized);\r\n        }\r\n        const requiredIndex = (total - 1) % dances.length;\r\n        await outputCallback(dances[requiredIndex]);\r\n    },\r\n    { key: \"permutation-promenade\", title: \"Permutation Promenade\", stars: 2, }\r\n);\r\nfunction msToTime(s: number) {\r\n\r\n  // Pad to 2 or 3 digits, default is 2\r\n  function pad(n: number, z?: number) {\r\n    z = z || 2;\r\n    return (\"00\" + n).slice(-z);\r\n  }\r\n\r\n  const ms = s % 1000;\r\n  s = (s - ms) / 1000;\r\n  const secs = s % 60;\r\n  s = (s - secs) / 60;\r\n  const mins = s % 60;\r\n  const hrs = (s - mins) / 60;\r\n\r\n  return pad(hrs) + \":\" + pad(mins) + \":\" + pad(secs) + \".\" + pad(ms, 3);\r\n}\r\n\r\nexport function dance(instructions: string[], programs: string[]) {\r\n    programs = [...programs];\r\n    let currentPosition = 0;\r\n    instructions.forEach((instruction) => {\r\n        const identifier = instruction[0];\r\n        switch (identifier) {\r\n            case \"s\":\r\n                const delta = parseInt(instruction.slice(1), 10);\r\n                currentPosition -= delta;\r\n                while (currentPosition < 0) {\r\n                    currentPosition += programs.length;\r\n                }\r\n                break;\r\n            case \"x\":\r\n                {\r\n                    const [a, b] = instruction.slice(1).split(\"/\").map((e) => parseInt(e, 10));\r\n                    const aIndex = (currentPosition + a) % programs.length;\r\n                    const bIndex = (currentPosition + b) % programs.length;\r\n                    swap(programs, aIndex, bIndex);\r\n                }\r\n                break;\r\n            case \"p\":\r\n                {\r\n                    const [a, b] = instruction.slice(1).split(\"/\");\r\n                    const aIndex = programs.indexOf(a);\r\n                    const bIndex = programs.indexOf(b);\r\n                    swap(programs, aIndex, bIndex);\r\n                }\r\n                break;\r\n        }\r\n    });\r\n    const reordered = programs.slice(currentPosition).concat(programs.slice(0, currentPosition));\r\n    return reordered;\r\n}\r\n\r\nexport function programListGenerator(n: number): string[] {\r\n    return [...Array(n).keys()].map((index) => String.fromCharCode(\"a\".charCodeAt(0) + index));\r\n}\r\n\r\nfunction swap(programs: string[], aIndex: number, bIndex: number) {\r\n    const temp = programs[aIndex];\r\n    programs[aIndex] = programs[bIndex];\r\n    programs[bIndex] = temp;\r\n}\r\n","import { entryForFile } from \"../../entry\";\r\nimport { Tree, Queue } from \"../../../support/data-structure\";\r\n\r\nconst parseLines = (lines: string[]): Map<string, DiscDefinition> => {\r\n    const definitions = lines.map((line: string): DiscDefinition => {\r\n        const split = line.split(\" -> \");\r\n        const [head, weightToParse] = split[0].split(\" \");\r\n        const weight = parseInt(weightToParse.slice(1, weightToParse.length - 1), 10);\r\n\r\n        const children = split.length === 1 ? [] : split[1].split(\", \");\r\n\r\n        return {\r\n            head: {\r\n                name: head,\r\n                weight\r\n            },\r\n            children\r\n        };\r\n    });\r\n    const map = new Map<string, DiscDefinition>();\r\n    definitions.forEach((definition) => map.set(definition.head.name, definition));\r\n    return map;\r\n};\r\n\r\nconst buildTree = (\r\n    startTree: string,\r\n    definitions: Map<string, DiscDefinition>,\r\n): Tree<WeightedProgram> => {\r\n    const definition = definitions.get(startTree)!;\r\n    const tree = new Tree<WeightedProgram>(definition.head);\r\n    const subTrees = definition.children.map((child) => buildTree(child, definitions));\r\n    subTrees.forEach((subTree) => tree.appendTree(subTree));\r\n    return tree;\r\n};\r\n\r\ninterface UnbalancedResult {\r\n    isUnbalanced: true;\r\n    requiredWeight: number;\r\n}\r\n\r\ninterface BalancedResult {\r\n    isUnbalanced: false;\r\n    totalWeight: number;\r\n    headWeight: number;\r\n}\r\n\r\n\r\ntype CheckResult = UnbalancedResult | BalancedResult;\r\n\r\nconst isUnbalanced = (e: CheckResult): e is UnbalancedResult => {\r\n    return e.isUnbalanced;\r\n};\r\n\r\nconst findUnbalancedIndex = (weights: number[]): number | null => {\r\n    const min = weights.reduce((acc, next) => Math.min(acc, next));\r\n    const max = weights.reduce((acc, next) => Math.max(acc, next));\r\n    if (min === max) {\r\n        return null;\r\n    }\r\n    const isMinUnbalanced = weights.filter((w) => w === min).length === 1;\r\n    const target = isMinUnbalanced ? min : max;\r\n    return weights.indexOf(target);\r\n};\r\nconst checkWeight = (tree: Tree<WeightedProgram>): CheckResult => {\r\n    if (tree.children.length === 0) {\r\n        return {\r\n            isUnbalanced: false,\r\n            totalWeight: tree.head.weight,\r\n            headWeight: tree.head.weight\r\n        };\r\n    }\r\n    const childrenResults = tree.children.map((child) => checkWeight(child));\r\n    const unbalancedResults = childrenResults.filter((e) => isUnbalanced(e));\r\n    if (unbalancedResults.length > 0) {\r\n        return unbalancedResults[0];\r\n    }\r\n    const balancedResults: BalancedResult[] = childrenResults.map((e) => e as BalancedResult);\r\n    const childrenWeights = balancedResults.map((e) => e.totalWeight);\r\n    const unbalancedIndex = findUnbalancedIndex(childrenWeights);\r\n    if (unbalancedIndex === null) {\r\n        return {\r\n            isUnbalanced: false,\r\n            totalWeight: childrenWeights.reduce((acc, next) => acc + next) + tree.head.weight,\r\n            headWeight: tree.head.weight\r\n        };\r\n    }\r\n    const otherIndex = (unbalancedIndex + 1) % balancedResults.length;\r\n    const delta = balancedResults[unbalancedIndex].totalWeight - balancedResults[otherIndex].totalWeight;\r\n    const result: UnbalancedResult = {\r\n        isUnbalanced: true,\r\n        requiredWeight: balancedResults[unbalancedIndex].headWeight - delta\r\n    };\r\n    return result;\r\n};\r\n\r\ninterface WeightedProgram {\r\n    weight: number;\r\n    name: string;\r\n}\r\n\r\ninterface DiscDefinition {\r\n    head: WeightedProgram;\r\n    children: string[];\r\n}\r\nexport const recursiveCircus = entryForFile(\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const bottomValue = findBottom(lines);\r\n\r\n        await outputCallback(bottomValue);\r\n\r\n    },\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const definitions = parseLines(lines);\r\n        const bottom = findBottom(lines);\r\n        const tree = buildTree(bottom, definitions);\r\n        const checkResult = checkWeight(tree);\r\n        await outputCallback(checkResult);\r\n    },\r\n    { key: \"recursive-circus\", title: \"Recursive Circus\", stars: 2, }\r\n);\r\n\r\nfunction findBottom(lines: string[]) {\r\n    const withRightSide = lines.filter((l) => l.indexOf(\">\") >= 0);\r\n    const onlyRightHand = withRightSide.map((line) => line.split(\">\")[1].trim());\r\n    const rightHandValues = new Set<string>(onlyRightHand\r\n        .flatMap((right) => right.split(\",\")\r\n            .map((e) => e.trim())));\r\n    const leftValues = lines.map((line) => line.split(\" \")[0].trim());\r\n    const bottomValue = leftValues.filter((value) => !rightHandValues.has(value))[0];\r\n    return bottomValue;\r\n}\r\n\r\n","import { entryForFile } from \"../../entry\";\r\n\r\nexport const spinlock = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const steps = parseInt(lines[0], 10);\r\n        const buffer: number[] = [0];\r\n        let currentPosition = 0;\r\n        for (let i = 1; i <= 2017; i++) {\r\n            currentPosition = (currentPosition + steps) % buffer.length + 1;\r\n            buffer.splice(currentPosition, 0, i);\r\n        }\r\n\r\n        await outputCallback(buffer[(currentPosition + 1) % buffer.length]);\r\n\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const steps = parseInt(lines[0], 10);\r\n        // const buffer: number[] = [0];\r\n        let lastAdd = 0;\r\n        let currentPosition = 0;\r\n        const total = 50 * 10 ** 6;\r\n        for (let i = 1; i <= total; i++) {\r\n            currentPosition = (currentPosition + steps) % i + 1;\r\n            if (currentPosition === 1) {\r\n                lastAdd = i;\r\n            }\r\n            // buffer.splice(currentPosition, 0, i);\r\n            // await outputCallback(buffer[1]);\r\n        }\r\n\r\n        // const zeroIndex = buffer.indexOf(0);\r\n\r\n        // await outputCallback(buffer[(zeroIndex + 1) % buffer.length]);\r\n        await outputCallback(lastAdd);\r\n    },\r\n    { key: \"spinlock\", title: \"Spinlock\", stars: 2, }\r\n);\r\n","import { Coordinate } from \"./geometry\";\r\n\r\nexport class UlamCalculator {\r\n    public getCoordinatesFromValue(vArg: number): Coordinate {\r\n        if (vArg === 1) {\r\n            return {x: 0, y: 0};\r\n        }\r\n        const size = this.findSquareSize(vArg);\r\n        const sideDistance = Math.floor(size / 2);\r\n        const min = (size - 1) ** 2;\r\n        const max = size ** 2;\r\n        const isDown = vArg > max - size;\r\n        const sideCalculators = [\r\n            {\r\n                delta: -size,\r\n                x: (v: number, middle: number) => v - middle,\r\n                y: (v: number, middle: number) => -sideDistance\r\n            },\r\n            {\r\n                delta: -2 * (size - 1) - 1,\r\n                x: (v: number, middle: number) => -sideDistance,\r\n                y: (v: number, middle: number) => middle - v\r\n            },\r\n            {\r\n                delta: -3 * (size - 1) - 1,\r\n                x: (v: number, middle: number) => middle - v,\r\n                y: (v: number, middle: number) => sideDistance\r\n            },\r\n            {\r\n                delta: -4 * (size - 1) - 1,\r\n                x: (v: number, middle: number) => sideDistance,\r\n                y: (v: number, middle: number) => v - middle\r\n            }\r\n        ];\r\n\r\n        for (const calc of sideCalculators) {\r\n            const currentMax = max + calc.delta + size;\r\n            if (vArg > max + calc.delta) {\r\n                const middlePoint = this.findSideMiddlePoint(size, currentMax);\r\n                return {\r\n                    x: calc.x(vArg, middlePoint),\r\n                    y: calc.y(vArg, middlePoint)\r\n                };\r\n            }\r\n        }\r\n        throw new Error(`Cannot calculate for ${vArg} :(`);\r\n    }\r\n\r\n    public findSideMiddlePoint(size: number, max: number) {\r\n        const min = max - size + 1;\r\n        return (max + min) / 2;\r\n    }\r\n\r\n    public findSquareSize(v: number): number {\r\n        const root = Math.sqrt(v);\r\n        const ceil = Math.ceil(root);\r\n        return ceil % 2 === 0 ? ceil + 1 : ceil;\r\n    }\r\n}\r\n","import { FixedSizeMatrix } from \"./matrix\";\r\nimport { Coordinate, getBoundaries, CCoordinate, Bounds } from \"./geometry\";\r\n\r\nexport class UnknownSizeField<T> {\r\n\r\n    private readonly cells: { [key: string]: T | undefined } = {};\r\n\r\n    public set(coordinate: Coordinate, element: T): void {\r\n        this.cells[this.serializeCoordinate(coordinate)] = element;\r\n    }\r\n\r\n    public unset(coordinate: Coordinate): void {\r\n        delete this.cells[this.serializeCoordinate(coordinate)];\r\n    }\r\n\r\n    public *getPoints(): Iterable<{e: T, c: Coordinate}> {\r\n        for (const k in this.cells) {\r\n            if (k in this.cells) {\r\n                const c = this.deserializeCoordinate(k);\r\n                const cell = this.cells[k];\r\n                if (cell) {\r\n                    yield {\r\n                        e: cell,\r\n                        c\r\n                    };\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public get(coordinate: Coordinate): T | null {\r\n        const element = this.cells[this.serializeCoordinate(coordinate)];\r\n        if (element === undefined) {\r\n            return null;\r\n        }\r\n        return element;\r\n    }\r\n\r\n    public getBoundaries(): Bounds {\r\n        const bounds = getBoundaries(Object.keys(this.cells).map(this.deserializeCoordinate));\r\n        return bounds;\r\n    }\r\n\r\n    public toMatrix(): FixedSizeMatrix<T> {\r\n        // const bounds = getBoundaries(Object.keys(this.cells).map(this.deserializeCoordinate));\r\n        const bounds = this.getBoundaries();\r\n        const matrix = new FixedSizeMatrix<T>(bounds.size);\r\n        matrix.setDelta(CCoordinate.fromCoordinate(bounds.topLeft));\r\n        Object.keys(this.cells).forEach((serialized) => {\r\n            const coordinate = this.deserializeCoordinate(serialized);\r\n            const cell = this.cells[serialized];\r\n            if (cell !== undefined) {\r\n                matrix.set(coordinate, cell);\r\n            }\r\n        });\r\n        return matrix;\r\n    }\r\n\r\n    private serializeCoordinate(c: Coordinate): string {\r\n        return JSON.stringify({ x: c.x, y: c.y });\r\n    }\r\n\r\n    private deserializeCoordinate(serialized: string): Coordinate {\r\n        return JSON.parse(serialized) as Coordinate;\r\n    }\r\n}\r\n","import { entryForFile } from \"../../entry\";\r\nimport { UlamCalculator } from \"../../../support/ulam\";\r\nimport { manhattanDistance, directions, getSurrounding, getFullSurrounding } from \"../../../support/geometry\";\r\nimport { UnknownSizeField } from \"../../../support/field\";\r\n\r\nfunction parseLines(lines: string[]): number[][] {\r\n    return lines\r\n        .map((l) => l.trim())\r\n        .map((line) => line.split(\"\\t\").map((token) => parseInt(token, 10)))\r\n        ;\r\n}\r\n\r\nexport const spiralMemory = entryForFile(\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const squareValue = parseInt(lines[0], 10);\r\n        const calculator = new UlamCalculator();\r\n        const coordinates = calculator.getCoordinatesFromValue(squareValue);\r\n        const distance = manhattanDistance({ x: 0, y: 0 }, coordinates);\r\n        await outputCallback(distance);\r\n    },\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const target = parseInt(lines[0], 10);\r\n        const field = new UnknownSizeField<number>();\r\n\r\n        let next = 1;\r\n        let toDo = next;\r\n        let nextIteration = 2;\r\n        const directionOrder = [\r\n            directions.right,\r\n            directions.up,\r\n            directions.left,\r\n            directions.down\r\n        ];\r\n        let currentDirection = 0;\r\n\r\n        field.set({ x: 0, y: 0 }, 1);\r\n        let currentPosition = { x: 0, y: 0 };\r\n        const i = 0;\r\n        while (true) {\r\n            currentPosition = directionOrder[currentDirection].sum(currentPosition);\r\n            const value = getFullSurrounding(currentPosition)\r\n                .map((c) => field.get(c))\r\n                .filter((e) => e !== null)\r\n                .reduce((acc: number, n) => acc + n!, 0);\r\n            if (value > target) {\r\n                await outputCallback(value);\r\n                return;\r\n            }\r\n            field.set(currentPosition, value);\r\n            toDo--;\r\n            if (toDo === 0) {\r\n                nextIteration--;\r\n                currentDirection = (currentDirection + 1) % directionOrder.length;\r\n                if (nextIteration > 0) {\r\n                    toDo = next;\r\n                } else {\r\n                    nextIteration = 2;\r\n                    next++;\r\n                    toDo = next;\r\n                }\r\n            }\r\n        }\r\n    },\r\n    { key: \"spiral-memory\", title: \"Spiral Memory\", stars: 2, }\r\n);\r\n\r\n","import { entryForFile } from \"../../entry\";\r\nimport { UnknownSizeField } from \"../../../support/field\";\r\nimport { NotImplementedError } from \"../../../support/error\";\r\nimport { Coordinate, CCoordinate, directions, rotate } from \"../../../support/geometry\";\r\nimport { aMazeOfTwistyTrampolinesAllAlike } from \"./a-maze-of-twisty-trampolines-all-alike\";\r\nimport { FixedSizeMatrix } from \"../../../support/matrix\";\r\n\r\ntype Field = UnknownSizeField<string>;\r\n\r\nconst parse = (lines: string[]): Field => {\r\n    const sizeY = lines.length;\r\n    lines = lines.map((line) => line.trim());\r\n    const lineLengths = lines.map((line) => line.length);\r\n    if (\r\n        lineLengths.reduce((acc, next) => Math.max(acc, next))\r\n        !== lineLengths.reduce((acc, next) => Math.min(acc, next))) {\r\n        throw new Error(\"Invalid input, line lengths are not all the same\");\r\n    }\r\n    const sizeX = lineLengths[0];\r\n    const flatData = lines.flatMap((line) => line.split(\"\"));\r\n    const matrix = new FixedSizeMatrix<string>({ x: sizeX, y: sizeY });\r\n    matrix.setFlatData(flatData);\r\n    const field = new UnknownSizeField<string>();\r\n    matrix.onEveryCell((coordinate, cell) => field.set(coordinate, cell!));\r\n    return field;\r\n};\r\n\r\ninterface VirusCarrier {\r\n    position: Coordinate;\r\n    direction: CCoordinate;\r\n}\r\n\r\nexport const sporificaVirus = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const field = parse(lines);\r\n        const startSize = field.toMatrix().size;\r\n        const midX = Math.floor(startSize.x / 2);\r\n        const midY = Math.floor(startSize.y / 2);\r\n        const virus: VirusCarrier = {\r\n            position: { x: midX, y: midY },\r\n            direction: directions.up\r\n        };\r\n\r\n        const total = 10 ** 4;\r\n\r\n        let infectionCount = 0;\r\n\r\n        for (let i = 0; i < total; i++) {\r\n            const cell = field.get(virus.position);\r\n            if (cell === \"#\") {\r\n                field.set(virus.position, \".\");\r\n                virus.direction = rotate(virus.direction, \"Clockwise\");\r\n            } else {\r\n                field.set(virus.position, \"#\");\r\n                virus.direction = rotate(virus.direction, \"Counterclockwise\");\r\n                infectionCount++;\r\n            }\r\n            virus.position = virus.direction.sum(virus.position);\r\n            // await outputCallback(field.toMatrix().toString((e) => e || \" \") + \"\\n\");\r\n        }\r\n\r\n        await outputCallback(infectionCount);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const field = parse(lines);\r\n        const startSize = field.toMatrix().size;\r\n        const midX = Math.floor(startSize.x / 2);\r\n        const midY = Math.floor(startSize.y / 2);\r\n        const virus: VirusCarrier = {\r\n            position: { x: midX, y: midY },\r\n            direction: directions.up\r\n        };\r\n\r\n        const total = 10 ** 7;\r\n\r\n        let infectionCount = 0;\r\n\r\n        for (let i = 0; i < total; i++) {\r\n            const cell = field.get(virus.position);\r\n            if (cell === \"#\") {\r\n                field.set(virus.position, \"F\");\r\n                virus.direction = rotate(virus.direction, \"Clockwise\");\r\n            } else if (cell === \".\" || !cell) {\r\n                field.set(virus.position, \"W\");\r\n                virus.direction = rotate(virus.direction, \"Counterclockwise\");\r\n            } else if (cell === \"W\") {\r\n                field.set(virus.position, \"#\");\r\n                infectionCount++;\r\n            } else if (cell === \"F\") {\r\n                field.set(virus.position, \".\");\r\n                virus.direction = rotate(rotate(virus.direction, \"Counterclockwise\"), \"Counterclockwise\");\r\n            }\r\n            virus.position = virus.direction.sum(virus.position);\r\n            // await outputCallback(field.toMatrix().toString((e) => e || \" \") + \"\\n\");\r\n        }\r\n\r\n        await outputCallback(infectionCount);\r\n    },\r\n    { key: \"sporifica-virus\", title: \"Sporifica Virus\", stars: 2, }\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\nimport { Stack } from \"linq-typescript\";\r\n\r\ntype Group = Element[];\r\ntype Garbage = string;\r\ntype Element = Group | Garbage;\r\n\r\nconst outI = 0;\r\nconst parseGarbage = (line: string, start: number): [Garbage, number] => {\r\n    let isEscaped = false;\r\n    const current: string[] = [];\r\n    let currentIndex = start;\r\n    while (true) {\r\n        if (currentIndex >= line.length) {\r\n            throw new Error(\"I got out of the bounds while garbaging o.o\");\r\n        }\r\n        if (isEscaped) {\r\n            isEscaped = false;\r\n            currentIndex++;\r\n        } else if (line[currentIndex] === \"!\") {\r\n            isEscaped = true;\r\n            currentIndex++;\r\n        } else if (line[currentIndex] === \">\") {\r\n            return [current.join(\"\"), currentIndex + 1];\r\n        } else {\r\n            current.push(line[currentIndex++]);\r\n        }\r\n    }\r\n};\r\n\r\nexport const parseGroup = (line: string, start: number = 1): [Group, number] => {\r\n    const current: Group = [];\r\n    let currentIndex = start;\r\n    while (true) {\r\n        if (currentIndex >= line.length) {\r\n            console.log(current);\r\n            throw new Error(\"I got out of the bounds while grouping o.o\");\r\n        }\r\n        if (line[currentIndex] === \"{\") {\r\n            const [group, suggestedIndex] = parseGroup(line, currentIndex + 1);\r\n            current.push(group);\r\n            currentIndex = suggestedIndex;\r\n        } else if (line[currentIndex] === \"}\") {\r\n            return [current, currentIndex + 1];\r\n        } else if (line[currentIndex] === \"<\") {\r\n            const [garbage, suggestedIndex] = parseGarbage(line, currentIndex + 1);\r\n            current.push(garbage);\r\n            currentIndex = suggestedIndex;\r\n        } else if (line[currentIndex] === \",\") {\r\n            currentIndex++;\r\n        } else {\r\n            throw new Error(\"Invalid token while parsing group: \" + line[currentIndex]);\r\n        }\r\n    }\r\n};\r\n\r\nconst isGarbage = (element: Element): element is Garbage => {\r\n    return (typeof element) === \"string\";\r\n};\r\n\r\nconst score = (element: Element, baseScore: number = 0): number => {\r\n    if (isGarbage(element)) {\r\n        return 0;\r\n    }\r\n    const localScore = baseScore + 1;\r\n    const additionalScore = element.reduce((acc, next) => score(next, localScore) + acc, 0);\r\n    return localScore + additionalScore;\r\n};\r\n\r\nexport const countGarbage = (element: Element): number => {\r\n    if (isGarbage(element)) {\r\n        return element.length;\r\n    }\r\n    return element.reduce((acc, next) => countGarbage(next) + acc, 0);\r\n};\r\nexport const streamProcessing = entryForFile(\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const line = lines[0];\r\n        const result = parseGroup(line)[0];\r\n        await outputCallback(score(result));\r\n    },\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const line = lines[0];\r\n        const result = parseGroup(line)[0];\r\n        await outputCallback(countGarbage(result));\r\n    },\r\n    { key: \"stream-processing\", title: \"Stream Processing\", stars: 2, }\r\n);\r\n\r\n","import { entryForFile } from \"../../entry\";\r\nimport { NotImplementedError } from \"../../../support/error\";\r\nimport { groupBy } from \"../../../support/sequences\";\r\nimport { parseGroup } from \"./stream-processing\";\r\n\r\ntype Cell = 0 | 1;\r\n\r\ntype Direction = -1 | 1;\r\n\r\ninterface Input {\r\n    machine: TuringMachine;\r\n    steps: number;\r\n}\r\n\r\ninterface TuringRule {\r\n    write: Cell;\r\n    direction: Direction;\r\n    nextState: string;\r\n}\r\n\r\ninterface TuringState {\r\n    state: string;\r\n    0: TuringRule;\r\n    1: TuringRule;\r\n}\r\n\r\ninterface TuringData {\r\n    mainTape: Cell[];\r\n    negativeTape: Cell[];\r\n}\r\n\r\ninterface TuringInstance {\r\n    data: TuringData;\r\n    position: number;\r\n    nextState: string;\r\n}\r\n\r\ninterface TuringMachine {\r\n    instance: TuringInstance;\r\n    states: TuringState[];\r\n}\r\n\r\nconst getTape = (turingData: TuringData, position: number): Cell[] => {\r\n    const tape = position >= 0 ? turingData.mainTape : turingData.negativeTape;\r\n    return tape;\r\n};\r\n\r\nconst getCell = (turingData: TuringData, position: number): Cell => {\r\n    const tape = getTape(turingData, position);\r\n    return tape[Math.abs(position)] || 0;\r\n};\r\n\r\nconst setCell = (turingData: TuringData, position: number, cell: Cell): TuringData => {\r\n    const tape = getTape(turingData, position);\r\n    tape[Math.abs(position)] = cell;\r\n    return turingData;\r\n};\r\n\r\nconst calculateStep = (machine: TuringMachine) => {\r\n    const nextState = machine.instance.nextState;\r\n    const matchingState = machine.states.filter((states) => states.state === nextState)[0];\r\n    const currentCell = getCell(machine.instance.data, machine.instance.position);\r\n    const matchingRule = matchingState[currentCell];\r\n    setCell(machine.instance.data, machine.instance.position, matchingRule.write);\r\n    machine.instance.position += matchingRule.direction;\r\n    machine.instance.nextState = matchingRule.nextState;\r\n};\r\n\r\nconst getLastWord = (s: string, delta: number = 0): string => {\r\n    const tokens = s.trim().split(\" \");\r\n    const lastToken = tokens[tokens.length - delta - 1];\r\n    return (lastToken.endsWith(\".\") || lastToken.endsWith(\":\")) ?\r\n        lastToken.slice(0, -1) :\r\n        lastToken;\r\n};\r\n\r\nconst getLastNumber = (s: string): number => {\r\n    return parseInt(getLastWord(s), 10);\r\n};\r\n\r\nconst getLastCell = (s: string): Cell => {\r\n    const number = getLastNumber(s);\r\n    if (number !== 0 && number !== 1) {\r\n        throw new Error(\"Invalid cell: \" + number);\r\n    }\r\n    return number;\r\n};\r\n\r\nconst parseRule = (group: string[]): TuringRule => {\r\n    if (group.length !== 3) {\r\n        throw new Error(\"Invalid group\");\r\n    }\r\n    return {\r\n        write: getLastCell(group[0]),\r\n        direction: getLastWord(group[1]) === \"right\" ? 1 : -1,\r\n        nextState: getLastWord(group[2])\r\n    };\r\n};\r\n\r\nconst parseInput = (lines: string[]): Input => {\r\n    const startState = getLastWord(lines[0]);\r\n    const steps = parseInt(getLastWord(lines[1], 1), 10);\r\n    lines = lines.slice(2);\r\n    const states: TuringState[] = groupBy(lines, 10).map((group) => {\r\n        group = group.slice(1);\r\n        const state = getLastWord(group[0]);\r\n        const rs = [0, 1].map((i) => {\r\n            const key = getLastCell(group[i * 4 + 1]);\r\n            const rules = parseRule(group.slice(i * 4 + 2, i * 4 + 5));\r\n            return {\r\n                [0]: rules\r\n            };\r\n        });\r\n        return {\r\n            state,\r\n            0: parseRule(group.slice(2, 5)),\r\n            1: parseRule(group.slice(6, 9))\r\n        };\r\n    });\r\n    return {\r\n        steps,\r\n        machine: {\r\n            states,\r\n            instance: {\r\n                data: {\r\n                    mainTape: [],\r\n                    negativeTape: []\r\n                },\r\n                nextState: startState,\r\n                position: 0\r\n            }\r\n        }\r\n    };\r\n};\r\n\r\nconst calculateChecksum = (machine: TuringMachine): number => {\r\n    return machine.instance.data.mainTape.reduce((acc: number, next) => acc + next, 0) +\r\n    machine.instance.data.negativeTape.reduce((acc: number, next) => acc + next, 0);\r\n\r\n};\r\n\r\nexport const haltingProblem = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const input = parseInput(lines);\r\n        const machine = input.machine;\r\n        for (let i = 0; i < input.steps; i++) {\r\n            calculateStep(machine);\r\n        }\r\n        const checksum = calculateChecksum(machine);\r\n        await outputCallback(checksum);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        throw Error(\"Not implemented\");\r\n    },\r\n    { key: \"the-halting-problem\", title: \"The Halting Problem\", stars: 2, }\r\n);\r\n","import { embedAll } from \"../../entry\";\r\nimport { aMazeOfTwistyTrampolinesAllAlike } from \"./a-maze-of-twisty-trampolines-all-alike\";\r\nimport { aSeriesOfTubes } from \"./a-series-of-tubes\";\r\nimport { coprocessorConflagration } from \"./coprocessor-conflagration\";\r\nimport { corruptionChecksum } from \"./corruption-checksum\";\r\nimport { digitalPlumber } from \"./digital-plumber\";\r\nimport { diskDefragmentation } from \"./disk-defragmentation\";\r\nimport { duelingGenerators } from \"./dueling-generators\";\r\nimport { duet } from \"./duet\";\r\nimport { electromagneticMoat } from \"./electromagnetic-moat\";\r\nimport { fractalArt } from \"./fractal-art\";\r\nimport { heardYouLikeRegisters } from \"./heard-you-like-registers\";\r\nimport { hexEd } from \"./hex-ed\";\r\nimport { highEntropyPasshprases } from \"./high-entropy-passhprases\";\r\nimport { inverseCaptcha } from \"./inverse-captcha\";\r\nimport { knotHash } from \"./knot-hash\";\r\nimport { memoryReallocation } from \"./memory-reallocation\";\r\nimport { packetScanners } from \"./packet-scanners\";\r\nimport { particleSwarm } from \"./particle-swarm\";\r\nimport { permutationPromenade } from \"./permutation-promenade\";\r\nimport { recursiveCircus } from \"./recursive-circus\";\r\nimport { spinlock } from \"./spinlock\";\r\nimport { spiralMemory } from \"./spiral-memory\";\r\nimport { sporificaVirus } from \"./sporifica-virus\";\r\nimport { streamProcessing } from \"./stream-processing\";\r\nimport { haltingProblem } from \"./the-halting-problem\";\r\n\r\nexport const entries =\r\n    embedAll([\r\n        inverseCaptcha,\r\n        corruptionChecksum,\r\n        spiralMemory,\r\n        highEntropyPasshprases,\r\n        aMazeOfTwistyTrampolinesAllAlike,\r\n        memoryReallocation,\r\n        recursiveCircus,\r\n        heardYouLikeRegisters,\r\n        streamProcessing,\r\n        knotHash,\r\n        hexEd,\r\n        digitalPlumber,\r\n        packetScanners,\r\n        diskDefragmentation,\r\n        duelingGenerators,\r\n        permutationPromenade,\r\n        spinlock,\r\n        duet,\r\n        aSeriesOfTubes,\r\n        particleSwarm,\r\n        fractalArt,\r\n        sporificaVirus,\r\n        coprocessorConflagration,\r\n        electromagneticMoat,\r\n        haltingProblem,\r\n    ])\r\n;\r\n","import { oldEntryForFile, entryForFile } from \"../../entry\";\r\n\r\nexport const entry = entryForFile(\r\n    async ({lines, outputCallback}) => {\r\n        let currentFrequency = 0;\r\n        lines.forEach((line) => {\r\n            const trimmed = line.trim();\r\n            let value = parseInt(trimmed.slice(1), 10);\r\n            if (trimmed.startsWith(\"-\")) {\r\n                value *= -1;\r\n            }\r\n            currentFrequency += value;\r\n        });\r\n        await outputCallback(\"Result: \" + currentFrequency);\r\n    },\r\n    async ({lines, outputCallback}) => {\r\n        const values: number[] = [];\r\n        const firstRoundOfFrequencies: number[] = [];\r\n        let currentFrequency: number = 0;\r\n        lines.forEach((line) => {\r\n            const trimmed = line.trim();\r\n            let value = parseInt(trimmed.slice(1), 10);\r\n            if (trimmed.startsWith(\"-\")) {\r\n                value *= -1;\r\n            }\r\n            values.push(value);\r\n            currentFrequency += value;\r\n            firstRoundOfFrequencies.push(currentFrequency);\r\n        });\r\n        const foundFrequencies = new Set<number>();\r\n        let current = 0;\r\n        foundFrequencies.add(0);\r\n        let found = false;\r\n        while (!found) {\r\n            found = values.some((v) => {\r\n                current += v;\r\n                if (foundFrequencies.has(current)) {\r\n                    // tslint:disable-next-line:no-floating-promises\r\n                    outputCallback(\"Found: \" + current);\r\n                    return true;\r\n                } else {\r\n                    foundFrequencies.add(current);\r\n                    return false;\r\n                }\r\n            });\r\n        }\r\n    },\r\n    { key: \"frequency\", title: \"Chronal Calibration\", stars: 2, embeddedData: \"chronal-calibration\" }\r\n);\r\n","import { Entry, oldEntryForFile, entryForFile } from \"../../entry\";\r\n\r\nexport const entry: Entry = entryForFile(\r\n    async ({lines, outputCallback}) => {\r\n        interface WordCounter { [key: string]: number; }\r\n        function createWordCounter(word: string) {\r\n            const currentCount: WordCounter = {};\r\n            word.split(\"\").forEach((letter) => {\r\n                if (letter in currentCount) {\r\n                    currentCount[letter]++;\r\n                } else {\r\n                    currentCount[letter] = 1;\r\n                }\r\n            });\r\n            return currentCount;\r\n        }\r\n        function hasNLetters(counter: WordCounter, n: number): boolean {\r\n            for (const key in counter) {\r\n                if (counter[key] === n) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        interface WordStatus {\r\n            hasTwoLetters: boolean;\r\n            hasThreeLetters: boolean;\r\n        }\r\n\r\n        const checksumCounter: WordStatus[] = lines.map((line) => {\r\n            const counter = createWordCounter(line);\r\n            return {\r\n                hasTwoLetters: hasNLetters(counter, 2),\r\n                hasThreeLetters: hasNLetters(counter, 3),\r\n            };\r\n        });\r\n\r\n        const amountOfTwoLetters = checksumCounter.filter((c) => c.hasTwoLetters).length;\r\n        const amountOfThreeLetters = checksumCounter.filter((c) => c.hasThreeLetters).length;\r\n\r\n        await outputCallback(\"Checksum: \" + amountOfTwoLetters * amountOfThreeLetters);\r\n    },\r\n    async ({lines, outputCallback}) => {\r\n        const stringLength = lines[0].length;\r\n        for (let i = 0; i < stringLength; i++) {\r\n            const spliced = lines.map((l) => l.slice(0, i) + l.slice(i + 1, l.length));\r\n            const duplicates = new Set<string>();\r\n            const hasFoundDuplicate = spliced.some((l) => {\r\n                if (duplicates.has(l)) {\r\n                    // tslint:disable-next-line:no-floating-promises\r\n                    outputCallback(l);\r\n                    return true;\r\n                } else {\r\n                    duplicates.add(l);\r\n                    return false;\r\n                }\r\n            });\r\n            if (hasFoundDuplicate) {\r\n                return;\r\n            }\r\n        }\r\n        await outputCallback(\"Something wen wrong\");\r\n    },\r\n    { key: \"inventory\", title: \"Inventory Management System\", stars: 2, }\r\n);\r\n","import { Entry, oldEntryForFile, entryForFile } from \"../../entry\";\r\nimport { Coordinate } from \"../../../support/geometry\";\r\n\r\ninterface Rectangle {\r\n    id: number;\r\n    position: Coordinate;\r\n    size: Coordinate;\r\n}\r\n\r\ntype Map = boolean[][];\r\n\r\nlet isFirstTime = true;\r\nconst parseRectangle = (line: string, output: (l: string) => void): Rectangle => {\r\n    const trimmed = line.trim();\r\n    const noSpaces = trimmed.replace(/ /g, \"\");\r\n    const normalizedDelimiters = noSpaces.replace(\"#\", \"\").replace(\"@\", \" \").replace(\":\", \" \");\r\n    if (isFirstTime) {\r\n        isFirstTime = false;\r\n        output(noSpaces);\r\n        output(normalizedDelimiters);\r\n    }\r\n    const split = normalizedDelimiters.split(\" \");\r\n    const id = parseInt(split[0], 10);\r\n    const fromCoupleToCoordinate = (s: string, d: string): Coordinate => {\r\n        const argSplit = s.split(d);\r\n        return {\r\n            x: parseInt(argSplit[0], 10),\r\n            y: parseInt(argSplit[1], 10),\r\n        };\r\n    };\r\n    const position = fromCoupleToCoordinate(split[1], \",\");\r\n    const size = fromCoupleToCoordinate(split[2], \"x\");\r\n\r\n    return {\r\n        id,\r\n        position,\r\n        size,\r\n    };\r\n};\r\nexport const entry: Entry = entryForFile(\r\n    async ({lines, outputCallback}) => {\r\n        const map = mapCreator(lines.map((e) => parseRectangle(e, outputCallback)), outputCallback);\r\n\r\n        const total = map.reduce<number>((acc, current) => acc + current.filter((e) => e).length, 0);\r\n        await outputCallback(\"\" + total);\r\n    },\r\n    async ({lines, outputCallback}) => {\r\n        const rectangles = lines.map((e) => parseRectangle(e, outputCallback));\r\n        const map = mapCreator(rectangles, outputCallback);\r\n\r\n        const candidate = rectangles.find((r) => {\r\n            let isCandidate = true;\r\n            executeOnMap(r, (argMap: Map, coordinate: Coordinate) => {\r\n                if (argMap[coordinate.x][coordinate.y]) {\r\n                    isCandidate = false;\r\n                }\r\n            }, map);\r\n            return isCandidate;\r\n        });\r\n        await outputCallback(candidate ? \"\" + candidate.id : \"null\");\r\n    },\r\n    { key: \"no-matter-how-you-slice-it\", title: \"No Matter How You Slice It\", stars: 2, }\r\n);\r\n\r\nfunction mapCreator(rectangles: Rectangle[], output: (s: string) => void) {\r\n    const size = 1000;\r\n    const map: Map = new Array<boolean[]>(size);\r\n    for (let i = 0; i < size; i++) {\r\n        map[i] = new Array<boolean>(size);\r\n    }\r\n    const first = rectangles[0];\r\n    output(`First Rectangle: ${first.size.x}x${first.size.y}`);\r\n    const callback = (argMap: Map, coordinate: Coordinate) => {\r\n        if (argMap[coordinate.x][coordinate.y] === undefined) {\r\n            argMap[coordinate.x][coordinate.y] = false;\r\n        } else {\r\n            argMap[coordinate.x][coordinate.y] = true;\r\n        }\r\n    };\r\n    rectangles.forEach((r) => executeOnMap(r, callback, map));\r\n    return map;\r\n\r\n}\r\n\r\nfunction executeOnMap(r: Rectangle, callback: (map: boolean[][], coordinate: Coordinate) => void, map: boolean[][]) {\r\n    for (let i = 0; i < r.size.x; i++) {\r\n        for (let j = 0; j < r.size.y; j++) {\r\n            const coordinate: Coordinate = {\r\n                x: i + r.position.x,\r\n                y: j + r.position.y,\r\n            };\r\n            callback(map, coordinate);\r\n        }\r\n    }\r\n}\r\n\r\n","/* tslint:disable-next-line */\r\nexport const log = (o: any) => console.log(o);\r\n/* tslint:disable-next-line */\r\nexport const warn = (o: any) => console.warn(o);\r\n/* tslint:disable-next-line */\r\nexport const error = (o: any) => console.error(o);\r\n","import { oldEntryForFile, entryForFile } from \"../../entry\";\r\nimport Best from \"../../../support/best\";\r\nimport { warn } from \"../../../support/log\";\r\n\r\nclass GuardSleep {\r\n    public id: number;\r\n    public from: number | null = null;\r\n    public to: number | null = null;\r\n    constructor(guardID: number) {\r\n        this.id = guardID;\r\n    }\r\n\r\n    public get howMuch(): number {\r\n        if (this.from === null || this.to === null) {\r\n            throw Error(\"From or to were null\");\r\n        }\r\n        return this.to - this.from;\r\n    }\r\n\r\n    public isSleepingInMinute(minute: number) {\r\n        if (this.from === null || this.to === null) {\r\n            throw Error(\"From or to were null\");\r\n        }\r\n        return this.from <= minute && this.to > minute;\r\n    }\r\n\r\n\r\n}\r\nclass LogDate {\r\n    public minutes: number;\r\n    private dateText: string;\r\n    constructor(line: string) {\r\n        const dateLastIndex = line.indexOf(\"]\");\r\n        const dateText = line.slice(1, dateLastIndex);\r\n        this.dateText = dateText;\r\n        this.minutes = parseInt(this.dateText.split(\":\")[1], 10);\r\n    }\r\n    public compare(other: LogDate): number {\r\n        return this.dateText.localeCompare(other.dateText);\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.dateText;\r\n    }\r\n}\r\nclass LogEntry {\r\n    public guardID: number | null = null;\r\n    public wakes: boolean = false;\r\n    public fallsAsleep: boolean = false;\r\n    public dateToken: LogDate;\r\n\r\n    constructor(line: string) {\r\n        this.dateToken = new LogDate(line);\r\n        if (line.includes(\"wakes\")) {\r\n            this.wakes = true;\r\n        } else if (line.includes(\"asleep\")) {\r\n            this.fallsAsleep = true;\r\n        } else {\r\n            const idStartIndex = line.indexOf(\"#\") + 1;\r\n            const idEndIndex = line.slice(idStartIndex).indexOf(\" \");\r\n            const sliced = line.slice(idStartIndex, idStartIndex + idEndIndex + 1);\r\n            this.guardID = parseInt(sliced, 10);\r\n        }\r\n    }\r\n\r\n    public toString(): string {\r\n        let post: string;\r\n        if (this.wakes) {\r\n            post = \"+\";\r\n        } else if (this.fallsAsleep) {\r\n            post = \"-\";\r\n        } else {\r\n            post = \"\" + this.guardID;\r\n        }\r\n        return `${this.dateToken} - ${post}`;\r\n    }\r\n\r\n    public compare(other: LogEntry) {\r\n        return this.dateToken.compare(other.dateToken);\r\n    }\r\n}\r\n\r\nexport const entry = entryForFile(\r\n    async ({lines, outputCallback}) => {\r\n        const guardSleeps: {\r\n            [key: number]: GuardSleep[];\r\n        } = parseSleeps(lines);\r\n\r\n        let currentMax: [number, GuardSleep[]] | null = null;\r\n        for (const guardIDKey of Object.keys(guardSleeps)) {\r\n            const nestedGuardID = parseInt(guardIDKey, 10);\r\n            const sleeps = guardSleeps[nestedGuardID];\r\n            const totalSleep = sleeps.map((s) => s.howMuch).reduce((acc, curr) => acc + curr);\r\n            if (!currentMax || totalSleep > currentMax[0]) {\r\n                currentMax = [totalSleep, sleeps];\r\n            }\r\n        }\r\n\r\n        let bestMinute: [number, number] | null = null;\r\n\r\n        if (!currentMax) {\r\n            throw Error(\"No current max found\");\r\n        }\r\n        for (let i = 0; i < 60; i++) {\r\n            const sleeps = currentMax[1];\r\n            const howManyIntervals = sleeps.filter((interval) => interval.isSleepingInMinute(i)).length;\r\n            if (!bestMinute || howManyIntervals > bestMinute[0]) {\r\n                bestMinute = [howManyIntervals, i];\r\n            }\r\n        }\r\n        const mostSleepingMinute = bestMinute![1];\r\n        const guardID = currentMax[1][0].id;\r\n        await outputCallback(\"\" + mostSleepingMinute * guardID);\r\n\r\n    },\r\n    async ({lines, outputCallback}) => {\r\n        const guardSleeps = parseSleeps(lines);\r\n        const totalMaxSleep = new Best<number>();\r\n        for (const guardIDKey of Object.keys(guardSleeps)) {\r\n            const guardID = parseInt(guardIDKey, 10);\r\n            const maxSleep = new Best<number>();\r\n            const sleeps = guardSleeps[guardID];\r\n            for (let i = 0; i < 60; i++) {\r\n                const howMany = sleeps.filter((interval) => interval.isSleepingInMinute(i)).length;\r\n                maxSleep.add({ key: howMany, value: i });\r\n            }\r\n            totalMaxSleep.add({\r\n                key: maxSleep.currentBest!.key,\r\n                value: guardID * maxSleep.currentBest!.value,\r\n            });\r\n        }\r\n        await outputCallback(\"\" + totalMaxSleep.currentBest!.value);\r\n\r\n    },\r\n    { key: \"repose-record\", title: \"Repose Record\", stars: 2, }\r\n);\r\n\r\nfunction parseSleeps(lines: string[]) {\r\n    const entries = lines.map((l) => new LogEntry(l)).sort((a, b) => a.compare(b));\r\n    let isAsleep = false;\r\n    // sanity check\r\n    entries.forEach((e) => {\r\n        if (e.wakes) {\r\n            if (!isAsleep) {\r\n                warn(\"Was not sleeping!\");\r\n            }\r\n            isAsleep = false;\r\n        } else if (e.fallsAsleep) {\r\n            if (isAsleep) {\r\n                warn(\"Was already sleeping\");\r\n            }\r\n            isAsleep = true;\r\n        }\r\n    });\r\n    const guardSleeps: {\r\n        [key: number]: GuardSleep[];\r\n    } = {};\r\n    let currentGuardSleep: GuardSleep;\r\n    entries.forEach((e) => {\r\n        if (e.guardID) {\r\n            currentGuardSleep = new GuardSleep(e.guardID);\r\n        } else if (e.fallsAsleep) {\r\n            currentGuardSleep.from = e.dateToken.minutes;\r\n        } else if (e.wakes) {\r\n            currentGuardSleep.to = e.dateToken.minutes;\r\n            if (!(currentGuardSleep.id in guardSleeps)) {\r\n                guardSleeps[currentGuardSleep.id] = [];\r\n            }\r\n            guardSleeps[currentGuardSleep.id].push(currentGuardSleep);\r\n            currentGuardSleep = new GuardSleep(currentGuardSleep.id);\r\n        }\r\n    });\r\n    return guardSleeps;\r\n}\r\n","import { oldEntryForFile, entryForFile } from \"../../entry\";\r\nimport Best from \"../../../support/best\";\r\n// import { log } from \"../../support/log\";\r\n\r\nexport const entry = entryForFile(\r\n    async ({lines, outputCallback}) => {\r\n        if (lines.length > 1) {\r\n            throw Error(\"Only one line expected\");\r\n        }\r\n        let polymerText = lines[0];\r\n\r\n        await outputCallback(\"Start length: \" + polymerText.length);\r\n        polymerText = explodePolymer(polymerText);\r\n        await outputCallback(polymerText.length);\r\n\r\n    },\r\n    async ({lines, outputCallback}) => {\r\n        if (lines.length > 1) {\r\n            throw Error(\"Only one line expected\");\r\n        }\r\n        let polymerText = lines[0];\r\n\r\n        const max = new Best<string>();\r\n        const unitList = new Set<string>(polymerText.toLowerCase().split(\"\"));\r\n        polymerText = explodePolymer(polymerText);\r\n        unitList.forEach((unit) => {\r\n            const cleanPolymer = polymerText.replace(new RegExp(`[${unit}${unit.toUpperCase()}]`, \"g\"), \"\");\r\n            const exploded = explodePolymer(cleanPolymer);\r\n            max.add({ key: polymerText.length - exploded.length, value: exploded });\r\n        });\r\n        await outputCallback(max.currentBest!.value.length);\r\n    },\r\n    { key: \"alchemical-reduction\", title: \"Alchemical Reduction\", stars: 2, }\r\n);\r\n\r\nfunction explodePolymer(polymerText: string) {\r\n    let i = 0;\r\n    while (i < polymerText.length - 1) {\r\n        if (polymerText[i] !== polymerText[i + 1]\r\n            && polymerText[i].toLowerCase() === polymerText[i + 1].toLowerCase()\r\n        ) {\r\n            polymerText = polymerText.slice(0, i) + polymerText.slice(i + 2);\r\n            i = 0;\r\n        } else {\r\n            i++;\r\n        }\r\n    }\r\n    return polymerText;\r\n}\r\n","import { oldEntryForFile, entryForFile } from \"../../entry\";\r\nimport { Coordinate, sumCoordinate } from \"../../../support/geometry\";\r\nimport Best, { SimpleBest, CustomBest, maxNumber } from \"../../../support/best\";\r\nimport { FixedSizeMatrix } from \"../../../support/matrix\";\r\nimport { Queue } from \"../../../support/data-structure\";\r\n// import { log } from \"@/support/log\";\r\n\r\ninterface Territory {\r\n  coordinate: Coordinate;\r\n  id: number | null;\r\n  distance: number;\r\n}\r\n\r\nexport const entry = entryForFile(\r\n  async ({lines, outputCallback}) => {\r\n    let points: Coordinate[] = parsePoints(lines);\r\n\r\n    const { minX, minY, size } = getBoundaries(points);\r\n\r\n    points = points.map((p) => {\r\n      return {\r\n        x: p.x - minX.currentBest!,\r\n        y: p.y - minY.currentBest!,\r\n      };\r\n    });\r\n\r\n    const grid = new FixedSizeMatrix<Territory>(size);\r\n\r\n    const queue = new Queue<Territory>();\r\n    const territoryPoints = points.map((p, index) => {\r\n      return {\r\n        coordinate: p,\r\n        distance: 0,\r\n        id: index + 1,\r\n      };\r\n    });\r\n    territoryPoints.forEach((p) => {\r\n      grid.set(p.coordinate, p);\r\n      queue.add(p);\r\n    });\r\n\r\n    const offsets = (() => {\r\n      const numberOffsets = [1, 0, -1];\r\n      return numberOffsets.map((i) => numberOffsets.map((j) => i === j || (i !== 0 && j !== 0) ? null : {\r\n        x: i,\r\n        y: j,\r\n      }).filter((l) => l)).reduce((acc, curr) => acc.concat(curr));\r\n    })();\r\n    if (offsets.length !== 4) {\r\n      throw Error(\"What happened to the offsets?\");\r\n    }\r\n\r\n    while (!queue.isEmpty) {\r\n      const nextElement = queue.get();\r\n      if (nextElement) {\r\n        offsets.forEach((offset) => {\r\n          const newCoordinate = sumCoordinate(nextElement.coordinate, offset!);\r\n          if (newCoordinate.x >= 0 && newCoordinate.y >= 0\r\n            && newCoordinate.x < size.x && newCoordinate.y < size.y) {\r\n\r\n            const newDistance = nextElement.distance + 1;\r\n            const gridStatus = grid.get(newCoordinate);\r\n            if (!gridStatus) {\r\n              const newElement = {\r\n                coordinate: newCoordinate,\r\n                distance: newDistance,\r\n                id: nextElement.id,\r\n              };\r\n              grid.set(newCoordinate, newElement);\r\n              queue.add(newElement);\r\n            } else if (gridStatus.distance === newDistance && gridStatus.id !== nextElement.id) {\r\n              const newElement: Territory = {\r\n                id: null,\r\n                coordinate: newCoordinate,\r\n                distance: newDistance,\r\n              };\r\n              grid.set(newCoordinate, newElement);\r\n              queue.add(newElement);\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n\r\n    // imgCreator(0, grid);\r\n    const currentCount: { [key: number]: number } = {};\r\n    for (let i = 0; i < size.x; i++) {\r\n      for (let j = 0; j < size.y; j++) {\r\n        const status = grid.get({\r\n          x: i,\r\n          y: j,\r\n        });\r\n        if (status === undefined) {\r\n          await outputCallback(\"\" + i + \" \" + j);\r\n        } else if (!status.id) {\r\n          continue;\r\n        } else if (status.coordinate.x === 0 || status.coordinate.y === 0\r\n          || status.coordinate.x === size.x - 1 || status.coordinate.y === size.y - 1) {\r\n          currentCount[status.id] = 0;\r\n        } else {\r\n          if (!(status.id in currentCount)) {\r\n            currentCount[status.id] = 1;\r\n          } else if (currentCount[status.id] !== 0) {\r\n            currentCount[status.id]++;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const bestArea = new SimpleBest<number>(maxNumber);\r\n    for (const key of Object.keys(currentCount)) {\r\n      bestArea.add(currentCount[parseInt(key, 10)]);\r\n    }\r\n    await outputCallback(bestArea.currentBest);\r\n\r\n\r\n\r\n  },\r\n  async ({lines, outputCallback}) => {\r\n    function manhattan(a: Coordinate, b: Coordinate) {\r\n      return Math.abs(a.x - b.x) + Math.abs(a.y - b.y);\r\n    }\r\n    const points = parsePoints(lines);\r\n    const { minX, minY, size } = getBoundaries(points);\r\n    const maxDistance = 10000;\r\n    let count = 0;\r\n    for (let i = 0; i < size.x; i++) {\r\n      for (let j = 0; j < size.y; j++) {\r\n        const distanceSum = points.map((p) => manhattan(p, {\r\n          x: i + minX.currentBest!,\r\n          y: j + minY.currentBest!,\r\n        })).reduce((acc, curr) => acc + curr);\r\n        if (distanceSum < maxDistance) {\r\n          count++;\r\n        }\r\n      }\r\n    }\r\n    await outputCallback(count);\r\n  },\r\n  { key: \"chronal-coordinates\", title: \"Chronal Coordinates\", stars: 2, }\r\n);\r\n\r\nfunction getBoundaries(points: Coordinate[]) {\r\n  const minComparator = (a: number, b: number) => b - a;\r\n  const maxComparator = (a: number, b: number) => a - b;\r\n  const minX = new SimpleBest<number>(minComparator);\r\n  const maxX = new SimpleBest<number>(maxComparator);\r\n  const minY = new SimpleBest<number>(minComparator);\r\n  const maxY = new SimpleBest<number>(maxComparator);\r\n  points.forEach((p) => {\r\n    minX.add(p.x);\r\n    maxX.add(p.x);\r\n    minY.add(p.y);\r\n    maxY.add(p.y);\r\n  });\r\n  const size = {\r\n    x: (maxX.currentBest! - minX.currentBest! + 1),\r\n    y: (maxY.currentBest! - minY.currentBest! + 1),\r\n  };\r\n  return { minX, minY, size };\r\n}\r\n\r\nfunction parsePoints(lines: string[]): Coordinate[] {\r\n  return lines.map((l) => l.replace(/ /g, \"\").split(\",\")).map((couple) => {\r\n    return {\r\n      x: parseInt(couple[0], 10),\r\n      y: parseInt(couple[1], 10),\r\n    };\r\n  });\r\n}\r\n","import { DefaultListDictionaryString } from \"../../../support/data-structure\";\r\n// import { log } from \"@/support/log\";\r\nimport { oldEntryForFile, entryForFile } from \"../../entry\";\r\n\r\nclass Graph {\r\n    private nodes: { [key: string]: Node } = {};\r\n    constructor(lines: string[]) {\r\n        lines.forEach((line) => {\r\n            const split = line.split(\" \");\r\n            const dependency = split[1];\r\n            const nodeName = split[7];\r\n            this.ensureNode(dependency);\r\n            this.ensureNode(nodeName);\r\n\r\n            this.nodes[nodeName].dependentFrom(this.nodes[dependency]);\r\n        });\r\n    }\r\n\r\n    public isDone(): boolean {\r\n        for (const key of Object.keys(this.nodes)) {\r\n            const node = this.nodes[key];\r\n            if (node.wip || !node.isDone) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n\r\n    }\r\n\r\n    public getNextNode(): Node | null {\r\n        const candidates = [];\r\n        for (const key of Object.keys(this.nodes)) {\r\n            const node = this.nodes[key];\r\n            if (!node.isDone && !node.wip && !node.hasDependencies()) {\r\n                candidates.push(node);\r\n            }\r\n        }\r\n        if (candidates.length === 0) {\r\n            return null;\r\n        }\r\n        const result = candidates.sort((a, b) => a.name.localeCompare(b.name))[0];\r\n        result.wip = true;\r\n        return result;\r\n    }\r\n    private ensureNode(name: string) {\r\n        if (!(name in this.nodes)) {\r\n            this.nodes[name] = new Node(name);\r\n        }\r\n    }\r\n}\r\nclass Node {\r\n    public dependencies: Node[] = [];\r\n    public isDone: boolean = false;\r\n    public wip: boolean = false;\r\n    constructor(public name: string) {\r\n\r\n    }\r\n\r\n    public dependentFrom(other: Node) {\r\n        this.dependencies.push(other);\r\n    }\r\n\r\n    public duration(): number {\r\n        return this.name.toLowerCase().charCodeAt(0) - \"a\".charCodeAt(0) + 61;\r\n    }\r\n\r\n    public remove(): void {\r\n        this.isDone = true;\r\n    }\r\n\r\n    public hasDependencies(): boolean {\r\n        return this.dependencies.some((d) => !d.isDone);\r\n    }\r\n}\r\nexport const entry = entryForFile(\r\n    async ({lines, outputCallback}) => {\r\n        const graph = new Graph(lines);\r\n        const nodes = [];\r\n        while (true) {\r\n            const node = graph.getNextNode();\r\n            if (node === null) {\r\n                break;\r\n            } else {\r\n                node.isDone = true;\r\n                nodes.push(node.name);\r\n            }\r\n        }\r\n        await outputCallback(nodes.join(\"\"));\r\n    },\r\n    async ({lines, outputCallback}) => {\r\n        const graph = new Graph(lines);\r\n        const howManyWorkers = 5;\r\n        const workers = new Array<Node | null>(howManyWorkers);\r\n        for (let i = 0; i < howManyWorkers; i++) {\r\n            workers[i] = null;\r\n        }\r\n        const callbacks = new DefaultListDictionaryString<() => Promise<void>>();\r\n        let done = false;\r\n        let currentSecond = 0;\r\n        while (!done) {\r\n            const call = callbacks.get(\"\" + currentSecond);\r\n            for (const c of call) {\r\n                await c();\r\n            }\r\n            callbacks.remove(\"\" + currentSecond);\r\n            if (graph.isDone()) {\r\n                done = true;\r\n            } else {\r\n                for (let i = 0; i < howManyWorkers; i++) {\r\n                    if (workers[i] === null) {\r\n                        const nextNode = graph.getNextNode();\r\n                        if (nextNode !== null) {\r\n                            workers[i] = nextNode;\r\n                            const workerIndex = i;\r\n                            const targetTime = (currentSecond + nextNode.duration());\r\n                            await outputCallback(\"Adding to target \" + targetTime + \" node \" + nextNode.name);\r\n                            callbacks.add(\"\" + targetTime, async () => {\r\n                                await outputCallback(\"Node \" + nextNode.name + \" done\");\r\n                                nextNode.isDone = true;\r\n                                nextNode.wip = false;\r\n                                workers[workerIndex] = null;\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                currentSecond++;\r\n            }\r\n        }\r\n        await outputCallback(currentSecond);\r\n    },\r\n    { key: \"the-sum-of-its-parts\", title: \"The Sum of Its Parts\", stars: 2, }\r\n);\r\n","import { oldEntryForFile, entryForFile } from \"../../entry\";\r\n// import { log } from \"@/support/log\";\r\n\r\nclass Node {\r\n    public nodes: Node[] = [];\r\n    public metadata: number[] = [];\r\n\r\n    public value(): number {\r\n        if (this.nodes.length === 0) {\r\n            let sum = 0;\r\n            this.metadata.forEach((m) => sum += m);\r\n            return sum;\r\n        } else {\r\n            const nodes = this.nodes;\r\n            return this.metadata.map((m) => {\r\n                const index = m - 1;\r\n                if (index >= 0 && nodes[index] !== undefined) {\r\n                    const subValue = nodes[index].value();\r\n                    return subValue;\r\n                } else {\r\n                    return 0;\r\n                }\r\n            }).reduce((acc, curr) => acc + curr, 0);\r\n        }\r\n    }\r\n}\r\n\r\nfunction getTree(tokens: string[], startIndex: number, outputCallback: (s: any) => void): [Node, number] {\r\n    let numberOfChildren = parseInt(tokens[startIndex], 10);\r\n    const numberOfMetadata = parseInt(tokens[startIndex + 1], 10);\r\n    startIndex += 2;\r\n    if (numberOfChildren === 0) {\r\n        const metadata = tokens.slice(startIndex, startIndex + numberOfMetadata);\r\n        const parsedMetadata = metadata.map((m) => parseInt(m, 10));\r\n        if (parsedMetadata.some(isNaN)) {\r\n            outputCallback(parsedMetadata);\r\n        }\r\n        const node = new Node();\r\n        node.metadata = parsedMetadata;\r\n        node.nodes = [];\r\n        return [node, startIndex + numberOfMetadata];\r\n    } else {\r\n        const node = new Node();\r\n        while (numberOfChildren > 0) {\r\n            const [child, newStart] = getTree(tokens, startIndex, outputCallback);\r\n            node.nodes.push(child);\r\n            startIndex = newStart;\r\n            numberOfChildren--;\r\n        }\r\n        const metadata = tokens.slice(startIndex, startIndex + numberOfMetadata).map((e) => parseInt(e, 10));\r\n        if (metadata.some(isNaN)) {\r\n            outputCallback(tokens.slice(startIndex, startIndex + numberOfMetadata));\r\n        }\r\n        node.metadata = metadata;\r\n        return [node, startIndex + numberOfMetadata];\r\n    }\r\n}\r\n\r\nexport const entry = entryForFile(\r\n    async ({lines, outputCallback}) => {\r\n        const line = lines[0];\r\n        const tokens = line.split(\" \");\r\n\r\n        const calcMetadataSum = (argTree: Node): number => {\r\n            let sum = 0;\r\n            argTree.nodes.forEach((node) => {\r\n                sum += calcMetadataSum(node);\r\n            });\r\n            argTree.metadata.forEach((m) => {\r\n                sum += m;\r\n            });\r\n            return sum;\r\n        };\r\n\r\n        async function printMetadata(argTree: Node) {\r\n            await outputCallback(argTree.metadata);\r\n            for (const n of argTree.nodes) {\r\n                await printMetadata(n);\r\n            }\r\n        }\r\n\r\n        const [tree, endIndex] = getTree(tokens, 0, outputCallback);\r\n        await printMetadata(tree);\r\n        await outputCallback(\"\" + endIndex + \" \" + tokens.length);\r\n        await outputCallback(calcMetadataSum(tree));\r\n    },\r\n    async ({lines, outputCallback}) => {\r\n        const line = lines[0];\r\n        const tokens = line.split(\" \");\r\n        const [tree, endIndex] = getTree(tokens, 0, outputCallback);\r\n        await outputCallback(tree.value());\r\n    },\r\n    { key: \"memory-maneuver\", title: \"Memory Maneuver\", stars: 2, }\r\n);\r\n","import { oldEntryForFile, entryForFile } from \"../../entry\";\r\nimport { CircularDoubleLinkedNode } from \"../../../support/data-structure\";\r\nimport { SimpleBest, maxNumber } from \"../../../support/best\";\r\n// import { log } from \"@/support/log\";\r\n\r\nclass Game {\r\n    private marbleNodes: CircularDoubleLinkedNode<number> | null = null;\r\n    private nextMarble: number = 0;\r\n    private scores: number[];\r\n    private lastPlayer: number = 0;\r\n\r\n    constructor(private numberOfPlayers: number, private lastMarble: number) {\r\n        this.scores = new Array<number>(numberOfPlayers);\r\n        for (let i = 0; i < numberOfPlayers; i++) {\r\n            this.scores[i] = 0;\r\n        }\r\n    }\r\n\r\n    public addMarble(playerID: number | null = null): boolean {\r\n        if (playerID === null) {\r\n            playerID = this.lastPlayer;\r\n        }\r\n        const marble = this.nextMarble++;\r\n        if (marble === 0 || marble % 23 !== 0) {\r\n            if (marble === 0) {\r\n                this.marbleNodes = new CircularDoubleLinkedNode<number>(marble);\r\n            } else {\r\n                this.marbleNodes = this.marbleNodes!.next.append(marble);\r\n            }\r\n        } else {\r\n            let currentScore = marble;\r\n            let currentHead = this.marbleNodes!;\r\n            for (let i = 0; i < 6; i++) {\r\n                currentHead = currentHead.prev;\r\n            }\r\n            currentScore += currentHead.removePrevious();\r\n            this.marbleNodes = currentHead;\r\n            this.scores[playerID] += currentScore;\r\n        }\r\n        this.lastPlayer = playerID;\r\n        return marble !== this.lastMarble;\r\n    }\r\n\r\n    public switchPlayer() {\r\n        this.lastPlayer = (this.lastPlayer + 1) % this.numberOfPlayers;\r\n    }\r\n\r\n    public highestScores(): number {\r\n        const max = new SimpleBest<number>(maxNumber);\r\n        this.scores.forEach((s) => max.add(s));\r\n        return max.currentBest!;\r\n    }\r\n\r\n}\r\n\r\nexport const entry = entryForFile(\r\n    async ({lines, outputCallback}) => {\r\n        const tokens = lines[0].split(\" \");\r\n        const players = parseInt(tokens[0], 10);\r\n        const lastMarble = parseInt(tokens[6], 10);\r\n        const game = new Game(players, lastMarble);\r\n        while (game.addMarble()) {\r\n            game.switchPlayer();\r\n        }\r\n        await outputCallback(game.highestScores());\r\n    },\r\n    async ({lines, outputCallback}) => {\r\n        const tokens = lines[0].split(\" \");\r\n        const players = parseInt(tokens[0], 10);\r\n        const lastMarble = parseInt(tokens[6], 10) * 100;\r\n        const game = new Game(players, lastMarble);\r\n        while (game.addMarble()) {\r\n            game.switchPlayer();\r\n        }\r\n        await outputCallback(game.highestScores());\r\n    },\r\n    { key: \"marble-mania\", title: \"Marble Mania\", stars: 2, }\r\n);\r\n","import { oldEntryForFile, entryForFile } from \"../../entry\";\r\nimport { Coordinate, sumCoordinate, getBoundaries, Bounds } from \"../../../support/geometry\";\r\n// import { log } from \"@/support/log\";\r\n\r\nclass MovablePoint {\r\n\r\n    public static FromLine(line: string): MovablePoint {\r\n        line = line.replace(/ /g, \"\");\r\n        const firstPart = line.slice(line.indexOf(\"<\") + 1, line.indexOf(\">\"));\r\n        let secondPart = line.slice(line.indexOf(\">\") + 1);\r\n        secondPart = secondPart.slice(secondPart.indexOf(\"<\") + 1, secondPart.indexOf(\">\"));\r\n        const coordinateTokens = firstPart.split(\",\");\r\n        const speedTokens = secondPart.split(\",\");\r\n        return new MovablePoint(\r\n            {\r\n                x: parseInt(coordinateTokens[0], 10),\r\n                y: parseInt(coordinateTokens[1], 10),\r\n            },\r\n            {\r\n                x: parseInt(speedTokens[0], 10),\r\n                y: parseInt(speedTokens[1], 10),\r\n            },\r\n        );\r\n\r\n    }\r\n    constructor(\r\n        public coordinates: Coordinate,\r\n        public speed: Coordinate,\r\n    ) {\r\n\r\n    }\r\n\r\n    public move(): MovablePoint {\r\n        return new MovablePoint(\r\n            sumCoordinate(this.coordinates, this.speed),\r\n            this.speed,\r\n        );\r\n    }\r\n}\r\n\r\nexport const entry = entryForFile(\r\n    async ({lines, outputCallback}) => {\r\n        let points = lines.map((line) => MovablePoint.FromLine(line));\r\n        let lastBoundaries: Bounds | null = null;\r\n        let lastPoints: typeof points | null = null;\r\n        let done = false;\r\n        function getArea(size: Coordinate) {\r\n            return size.x * size.y;\r\n        }\r\n        while (!done) {\r\n            const newPoints = points.map((p) => p.move());\r\n            const boundaries = getBoundaries(newPoints.map((p) => p.coordinates));\r\n            if (lastBoundaries === null) {\r\n                lastBoundaries = boundaries;\r\n                lastPoints = newPoints;\r\n            } else {\r\n                if (getArea(lastBoundaries.size) < getArea(boundaries.size)) {\r\n                    done = true;\r\n                } else {\r\n                    lastBoundaries = boundaries;\r\n                    lastPoints = newPoints;\r\n                }\r\n            }\r\n            points = newPoints;\r\n        }\r\n        const mappedPoints = lastPoints!.map((p) => p.coordinates)\r\n            .map((c) => ({\r\n                x: c.x - lastBoundaries!.topLeft.x,\r\n                y: c.y - lastBoundaries!.topLeft.y\r\n            }))\r\n            .sort((a, b) => (a.y - b.y) * 100000 + a.x - b.x);\r\n        const dataMatrix: string[][] = [];\r\n        for (let y = 0; y < lastBoundaries!.size.y; y++) {\r\n            const l = [];\r\n            for (let x = 0; x < lastBoundaries!.size.x; x++) {\r\n                l.push(\" \");\r\n            }\r\n            dataMatrix.push(l);\r\n        }\r\n        mappedPoints.forEach((p) => {\r\n            dataMatrix[p.y][p.x] = \"#\";\r\n        });\r\n        for (const l of dataMatrix) {\r\n            await outputCallback(l.join(\"\"));\r\n        }\r\n    },\r\n    async ({lines, outputCallback}) => {\r\n        let points = lines.map((line) => MovablePoint.FromLine(line));\r\n        let lastBoundaries: Bounds | null = null;\r\n        let lastPoints: typeof points | null = null;\r\n        let done = false;\r\n        function getArea(size: Coordinate) {\r\n            return size.x * size.y;\r\n        }\r\n        let iterationCounter = 0;\r\n        while (!done) {\r\n            iterationCounter++;\r\n            const newPoints = points.map((p) => p.move());\r\n            const boundaries = getBoundaries(newPoints.map((p) => p.coordinates));\r\n            if (lastBoundaries === null) {\r\n                lastBoundaries = boundaries;\r\n                lastPoints = newPoints;\r\n            } else {\r\n                if (getArea(lastBoundaries.size) < getArea(boundaries.size)) {\r\n                    done = true;\r\n                } else {\r\n                    lastBoundaries = boundaries;\r\n                    lastPoints = newPoints;\r\n                }\r\n            }\r\n            points = newPoints;\r\n        }\r\n        await outputCallback(iterationCounter - 1);\r\n    },\r\n    { key: \"the-stars-align\", title: \"The Stars Align\", stars: 2, }\r\n);\r\n","import { CustomBest, maxNumber } from \"../../../support/best\";\r\nimport { Coordinate } from \"../../../support/geometry\";\r\nimport { oldEntryForFile, entryForFile } from \"../../entry\";\r\nimport { BigInteger } from \"big-integer\";\r\nimport bigInt from \"big-integer\";\r\nimport { forEachAsync } from \"../../../support/async\";\r\n\r\nclass FuelGrid {\r\n\r\n    private sumTable: BigInteger[][] | null = null;\r\n    constructor(private seed: number, private outputCallback: (s: any) => void) {\r\n    }\r\n\r\n    public getRackID(c: Coordinate) {\r\n        return c.x + 10;\r\n    }\r\n\r\n    public populate(size: number) {\r\n        const table: BigInteger[][] = [];\r\n        const originalTable: BigInteger[][] = [];\r\n        let countPositive = 0;\r\n        let countNegative = 0;\r\n        for (let y = 0; y < size; y++) {\r\n            const line: BigInteger[] = [];\r\n            const originalLine: BigInteger[] = [];\r\n            for (let x = 0; x < size; x++) {\r\n                const currentValue = bigInt(this.getFuelStatus({ x, y }));\r\n                originalLine.push(currentValue);\r\n                if (currentValue.lesser(0)) {\r\n                    countNegative++;\r\n                } else if (currentValue.greater(0)) {\r\n                    countPositive++;\r\n                }\r\n                if (currentValue.abs().greater(5)) {\r\n                    throw Error(\"WTF?\");\r\n                }\r\n                let currentSum = currentValue;\r\n                if (x > 0) {\r\n                    currentSum = currentSum.add(line[x - 1]);\r\n                    if (y > 0) {\r\n                        currentSum = currentSum.subtract(table[y - 1][x - 1]);\r\n                    }\r\n                }\r\n                if (y > 0) {\r\n                    currentSum = currentSum.add(table[y - 1][x]);\r\n                }\r\n                line.push(currentSum);\r\n            }\r\n            table.push(line);\r\n            originalTable.push(originalLine);\r\n        }\r\n        this.sumTable = table;\r\n        // this.printTable(originalTable);\r\n        // this.outputCallback(\"\");\r\n        // this.printTable(table);\r\n    }\r\n\r\n    public getAreaSum(topLeft: Coordinate, size: Coordinate) {\r\n        if (this.sumTable === null) {\r\n            throw Error(\"Table not populated!\");\r\n        }\r\n\r\n        size = {\r\n            x: size.x - 1,\r\n            y: size.y - 1\r\n        };\r\n\r\n        let area = this.sumTable[topLeft.y + size.y][topLeft.x + size.x];\r\n        if (topLeft.y - 1 >= 0) {\r\n            area = area.subtract(this.sumTable[topLeft.y - 1][topLeft.x + size.x]);\r\n            if (topLeft.x - 1 >= 0) {\r\n                area = area.add(this.sumTable[topLeft.y - 1][topLeft.x - 1]);\r\n            }\r\n        }\r\n        if (topLeft.x - 1 >= 0) {\r\n            area = area.subtract(this.sumTable[topLeft.y + size.y][topLeft.x - 1]);\r\n        }\r\n\r\n        return area;\r\n\r\n        // return this.sumTable[topLeft.y + size.y][topLeft.x + size.x]\r\n        //     .subtract(this.sumTable[topLeft.y + size.y][topLeft.x])\r\n        //     .subtract(this.sumTable[topLeft.y][topLeft.x + size.x])\r\n        //     .add(this.sumTable[topLeft.y][topLeft.x]);\r\n    }\r\n\r\n\r\n    public getFuelStatus(c: Coordinate, throwIfMissing: boolean = false) {\r\n        const id = this.getRackID(c);\r\n        let powerLevel = id * c.y;\r\n        powerLevel += this.seed;\r\n        powerLevel *= id;\r\n        if (powerLevel < 100) {\r\n            powerLevel = 0;\r\n        } else {\r\n            powerLevel = Math.floor(powerLevel / 100) % 10;\r\n        }\r\n        powerLevel -= 5;\r\n        return powerLevel;\r\n    }\r\n\r\n    private printTable(table: BigInteger[][]) {\r\n        const output = table.map((line) => {\r\n            return line.map((c) => (\"\" + c).padStart(8, \" \")).join(\" \");\r\n        }).join(\"\\n\");\r\n        this.outputCallback(output);\r\n    }\r\n\r\n    // public getFuelSumForTopLeft(c: Coordinate, cellSize: number) {\r\n    //     let sum = 0;\r\n    //     for (let dx = 0; dx < cellSize; dx++) {\r\n    //         for (let dy = 0; dy < cellSize; dy++) {\r\n    //             sum += this.getFuelStatus({\r\n    //                 x: c.x + dx,\r\n    //                 y: c.y + dy\r\n    //             });\r\n    //         }\r\n    //     }\r\n    //     return sum;\r\n    // }\r\n}\r\n\r\nasync function main(lines: string[], outputCallback: ((s: any) => void), cellSizes: number[]) {\r\n    const serial = parseInt(lines[0], 10);\r\n    const grid = new FuelGrid(serial, outputCallback);\r\n    const size = 300;\r\n    grid.populate(size);\r\n    const bestPoint = new CustomBest<BigInteger, Coordinate & { iteration: number }>(\r\n        (a, b) => a.subtract(b).toJSNumber()\r\n    );\r\n    await forEachAsync(cellSizes, async (cellSize) => {\r\n        await outputCallback(\"Iteration \" + cellSize);\r\n        for (let x = 0; x < size - (cellSize - 1); x++) {\r\n            for (let y = 0; y < size - (cellSize - 1); y++) {\r\n                bestPoint.add({\r\n                    value: { x, y, iteration: cellSize },\r\n                    key: grid.getAreaSum({ x, y }, { x: cellSize, y: cellSize })\r\n                });\r\n            }\r\n        }\r\n    });\r\n    await outputCallback(\r\n        `Coordinate: ${JSON.stringify(bestPoint.currentBest!.value)} with ${bestPoint.currentBest!.key}`\r\n    );\r\n}\r\n\r\nexport const entry = entryForFile(\r\n    async ({lines, outputCallback}) => {\r\n        await main(lines, outputCallback, [3]);\r\n    },\r\n    async ({lines, outputCallback}) => {\r\n        const cellSizes: number[] = [];\r\n        for (let i = 1; i < 301; i++) {\r\n            cellSizes.push(i);\r\n        }\r\n        await main(lines, outputCallback, cellSizes);\r\n    },\r\n    { key: \"chronal-charge\", title: \"Chronal Charge\", stars: 2, }\r\n);\r\n","import { oldEntryForFile, entryForFile } from \"../../entry\";\r\nimport { DoubleLinkedNode } from \"../../../support/data-structure\";\r\nimport { howManySameAtEnd } from \"../../../support/sequences\";\r\n\r\nenum PlantStatus {\r\n    full = \"#\",\r\n    empty = \".\"\r\n}\r\n\r\nfunction toPlantStatus(s: string) {\r\n    if (s === \"#\") {\r\n        return PlantStatus.full;\r\n    } else {\r\n        return PlantStatus.empty;\r\n    }\r\n}\r\n\r\ninterface Pattern {\r\n    pattern: PlantStatus[];\r\n    result: PlantStatus;\r\n}\r\n\r\nclass Greenhouse {\r\n    private start: DoubleLinkedNode<PlantStatus> | null = null;\r\n    private end: DoubleLinkedNode<PlantStatus> | null = null;\r\n\r\n    constructor(initialStatus: PlantStatus[], private patterns: Pattern[], private startIndex: number = 0) {\r\n        // this.startIndex = 0;\r\n        initialStatus.forEach((s) => {\r\n            if (this.start === null) {\r\n                this.start = new DoubleLinkedNode<PlantStatus>(s);\r\n                this.end = this.start;\r\n            } else {\r\n                this.end = this.end!.append(s);\r\n            }\r\n        });\r\n        this.fixEmptyPots();\r\n    }\r\n\r\n    public get status() {\r\n        return {\r\n            status: this.start!.visitToRight(),\r\n            startIndex: this.startIndex\r\n        };\r\n    }\r\n\r\n    public get sum() {\r\n        const status = this.status;\r\n        const filled = status\r\n            .status\r\n            .map((e, index) => ({\r\n                index: index + status.startIndex,\r\n                value: e\r\n            }))\r\n            .filter((e) => e.value === PlantStatus.full)\r\n            .map((e) => e.index);\r\n        const sum = filled.reduce((acc, next) => acc + next);\r\n        return sum;\r\n    }\r\n\r\n    public passGeneration(): Greenhouse {\r\n        const newStatus: PlantStatus[] = [PlantStatus.empty, PlantStatus.empty];\r\n        let e = this.start!.next!.next!;\r\n        while (e.next!.next !== null) {\r\n            const nextFive = e.prev!.prev!.visitToRight(5);\r\n            if (nextFive.length !== 5) {\r\n                break;\r\n            }\r\n            const found = this.patterns.some((p) => {\r\n                let foundDifferent: boolean = false;\r\n                for (let i = 0; i < nextFive.length; i++) {\r\n                    if (p.pattern[i] !== nextFive[i]) {\r\n                        foundDifferent = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (foundDifferent) {\r\n                    return false;\r\n                } else {\r\n                    newStatus.push(p.result);\r\n                    return true;\r\n                }\r\n            });\r\n            if (!found) {\r\n                newStatus.push(PlantStatus.empty);\r\n            }\r\n            e = e.next!;\r\n        }\r\n        const newGreenhouse = new Greenhouse(newStatus, this.patterns, this.startIndex);\r\n        newGreenhouse.fixEmptyPots();\r\n        return newGreenhouse;\r\n        // this.fixEmptyPots();\r\n    }\r\n\r\n    public toString(): string {\r\n        if (this.start === null) {\r\n            return \"empty\";\r\n        } else {\r\n            return `${this.start.visitToRight().join(\"\")} ${this.startIndex}`;\r\n        }\r\n    }\r\n\r\n    public fixEmptyPots() {\r\n        const emptyBufferSize = 4;\r\n        let consecutiveEmptyPots = 0;\r\n        let e = this.start;\r\n        while (e !== null && e.value === PlantStatus.empty) {\r\n            consecutiveEmptyPots++;\r\n            e = e.next;\r\n        }\r\n        while (consecutiveEmptyPots < emptyBufferSize) {\r\n            this.start = this.start!.prepend(PlantStatus.empty);\r\n            this.startIndex--;\r\n            consecutiveEmptyPots++;\r\n        }\r\n        while (consecutiveEmptyPots > emptyBufferSize) {\r\n            this.start!.removeNext();\r\n            this.startIndex++;\r\n            consecutiveEmptyPots--;\r\n        }\r\n\r\n        consecutiveEmptyPots = 0;\r\n        e = this.end;\r\n        while (e !== null && e.value === PlantStatus.empty) {\r\n            consecutiveEmptyPots++;\r\n            e = e.prev;\r\n        }\r\n        while (consecutiveEmptyPots < emptyBufferSize) {\r\n            this.end = this.end!.append(PlantStatus.empty);\r\n            consecutiveEmptyPots++;\r\n        }\r\n        while (consecutiveEmptyPots > emptyBufferSize) {\r\n            this.end!.removePrev();\r\n            consecutiveEmptyPots--;\r\n        }\r\n    }\r\n}\r\n\r\nexport const entry = entryForFile(\r\n    async ({lines, outputCallback}) => {\r\n        let greenhouse = parseLines(lines);\r\n        for (let i = 0; i < 20; i++) {\r\n            greenhouse = greenhouse.passGeneration();\r\n        }\r\n        const sum = greenhouse.sum;\r\n        await outputCallback(sum);\r\n    },\r\n    async ({lines, outputCallback}) => {\r\n        let greenhouse = parseLines(lines);\r\n        let lastSum: number | null = null;\r\n        const diffs: number[] = [];\r\n        const generations = 50000000000;\r\n        for (let i = 1; i < 1000; i++) {\r\n            greenhouse = greenhouse.passGeneration();\r\n            const sum = greenhouse.sum;\r\n            if (lastSum) {\r\n                diffs.push(sum - lastSum);\r\n            }\r\n            lastSum = sum;\r\n            if (diffs.length > 20 && howManySameAtEnd(diffs) >= 20) {\r\n                const step = diffs[diffs.length - 1];\r\n                const todo = generations - i;\r\n                await outputCallback(sum + todo * step);\r\n                return;\r\n            }\r\n        }\r\n        await outputCallback(\"No pattern found\");\r\n        await outputCallback(JSON.stringify(diffs));\r\n    },\r\n    { key: \"subterranean\", title: \"Subterranean Substainability\", stars: 2, embeddedData: \"subterranean-substainability/subterranean\" }\r\n);\r\nfunction parseLines(lines: string[]): Greenhouse {\r\n    const initialState = lines[0]\r\n        .slice(lines[0].indexOf(\":\") + 2)\r\n        .trim()\r\n        .split(\"\")\r\n        .map((e) => e === \"#\" ? PlantStatus.full : PlantStatus.empty);\r\n    const patterns: Pattern[] = lines\r\n        .slice(2)\r\n        .map((l) => l.trim())\r\n        .filter((l) => l.indexOf(\">\") > 0)\r\n        .map((l) => l.replace(/ /g, \"\").replace(/>/g, \"\").split(\"=\"))\r\n        .map((couple) => ({\r\n            result: toPlantStatus(couple[1]),\r\n            pattern: couple[0].split(\"\").map((p) => toPlantStatus(p))\r\n        }));\r\n    const greenhouse = new Greenhouse(initialState, patterns);\r\n    return greenhouse;\r\n}\r\n\r\n","import { Drawable, entryForFile, ScreenPrinter } from \"../../entry\";\r\nimport { FixedSizeMatrix } from \"../../../support/matrix\";\r\nimport {\r\n    CCoordinate,\r\n    Coordinate,\r\n    Rotation,\r\n    rotate,\r\n    directions,\r\n    manhattanDistance,\r\n    scalarCoordinates,\r\n    sumCoordinate,\r\n    serialization\r\n} from \"../../../support/geometry\";\r\n\r\ntype InputCell = \" \" | CartDirections | \"|\" | \"-\" | \"/\" | \"\\\\\" | \"+\";\r\ntype CartDirections = \"^\" | \">\" | \"v\" | \"<\";\r\n\r\nfunction parseLines(lines: string[]): Field {\r\n    const inputMatrix = new FixedSizeMatrix<InputCell>({ x: lines[0].length, y: lines.length });\r\n    inputMatrix.setFlatData(lines\r\n        .filter((l) => l.trim().length > 0)\r\n        .map((l) => l.split(\"\").map((c) => c as InputCell)).flat()\r\n    );\r\n    return new Field(inputMatrix);\r\n\r\n}\r\n\r\nfunction isInputCart(input: InputCell): input is CartDirections {\r\n    return [\"^\", \">\", \"v\", \"<\"].indexOf(input) >= 0;\r\n}\r\n\r\nfunction inputToDirection(input: CartDirections): CCoordinate {\r\n    switch (input) {\r\n        case \"<\":\r\n            return directions.left;\r\n        case \">\":\r\n            return directions.right;\r\n        case \"^\":\r\n            return directions.up;\r\n        case \"v\":\r\n            return directions.down;\r\n    }\r\n}\r\n\r\nclass Cart {\r\n    private intersectionsPassed: number = 0;\r\n\r\n    private crashed = false;\r\n\r\n    private readonly intersectionRotations: Rotation[] = [\r\n        \"Counterclockwise\", \"None\", \"Clockwise\"\r\n    ];\r\n\r\n    constructor(public position: Coordinate, public direction: CCoordinate) {\r\n\r\n    }\r\n\r\n    public toString() {\r\n        if (this.direction.y > 0) {\r\n            return \"v\";\r\n        } else if (this.direction.y < 0) {\r\n            return \"^\";\r\n        } else if (this.direction.x > 0) {\r\n            return \">\";\r\n        } else {\r\n            return \"<\";\r\n        }\r\n    }\r\n\r\n    public handleInput(inputGetter: (c: Coordinate) => InputCell): void {\r\n        if (this.crashed) {\r\n            return;\r\n        }\r\n        this.position = this.direction.sum(this.position);\r\n        const input = inputGetter(this.position);\r\n        switch (input) {\r\n            case \"-\":\r\n            case \"|\":\r\n                break;\r\n            case \"/\":\r\n            case \"\\\\\":\r\n                this.handleTurn(input);\r\n                break;\r\n            case \"+\":\r\n                this.handleIntersection();\r\n                break;\r\n\r\n        }\r\n    }\r\n\r\n    public crash() {\r\n        this.crashed = true;\r\n    }\r\n\r\n    public isCrashed() {\r\n        return this.crashed;\r\n    }\r\n\r\n    private handleIntersection() {\r\n        const rotation = this.intersectionRotations[(this.intersectionsPassed++) % this.intersectionRotations.length];\r\n        this.rotate(rotation);\r\n    }\r\n    private rotate(rotation: Rotation) {\r\n        this.direction = rotate(this.direction, rotation);\r\n    }\r\n\r\n    private handleTurn(turn: \"\\\\\" | \"/\") {\r\n        const rotation = this.getRotation(turn);\r\n        this.rotate(rotation);\r\n    }\r\n\r\n    private getRotation(turn: string) {\r\n        if (turn === \"/\") {\r\n            if (this.direction.x === 0) {\r\n                return \"Clockwise\";\r\n            } else {\r\n                return \"Counterclockwise\";\r\n            }\r\n        } else {\r\n            if (this.direction.y === 0) {\r\n                return \"Clockwise\";\r\n            } else {\r\n                return \"Counterclockwise\";\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface Crash {\r\n    carts: Cart[];\r\n    position: Coordinate;\r\n}\r\n\r\nclass Field {\r\n\r\n    public get crashes() {\r\n        return [...this.crashList];\r\n    }\r\n    public get ticks() {\r\n        return this.internalTicks;\r\n    }\r\n    private readonly carts: Cart[] = [];\r\n    private internalTicks = 0;\r\n\r\n    private readonly crashList: Crash[] = [];\r\n    constructor(private matrix: FixedSizeMatrix<InputCell>) {\r\n        matrix.onEveryCell((coordinate, cell) => {\r\n            if (cell && isInputCart(cell)) {\r\n                const cartDirection = inputToDirection(cell);\r\n                this.carts.push(new Cart(coordinate, cartDirection));\r\n                this.hideCart(coordinate);\r\n            }\r\n        });\r\n    }\r\n\r\n    public get remainingCarts() {\r\n        return this.carts.filter((c) => !c.isCrashed());\r\n    }\r\n\r\n    public hasCrashes() {\r\n        return this.crashList.length > 0;\r\n    }\r\n\r\n    public tick() {\r\n        this.moveCarts();\r\n        this.incrementTicks();\r\n    }\r\n\r\n    public toString(skipCarts: boolean = false) {\r\n        return this.matrix.toString((e, coordinate) => {\r\n            if (!e) {\r\n                return \" \";\r\n            }\r\n            if (!coordinate || skipCarts) {\r\n                return e;\r\n            }\r\n            const matchingCarts = this.carts.filter((cart) => manhattanDistance(cart.position, coordinate) === 0);\r\n            if (matchingCarts.length === 0) {\r\n                return e;\r\n            } else if (matchingCarts.length === 1) {\r\n                return matchingCarts[0].toString();\r\n            } else {\r\n                return \"X\";\r\n            }\r\n        });\r\n    }\r\n\r\n    public toDrawable(size: Coordinate, skipCarts: boolean = false): Drawable[] {\r\n        const squareSize = Math.floor(Math.min(size.x / this.matrix.size.x, size.y / this.matrix.size.y));\r\n        const padding = 3;\r\n\r\n        const result: Drawable[] = [];\r\n        this.matrix.onEveryCellSync((c, e) => {\r\n            if (!e) {\r\n                return;\r\n            }\r\n            const baseCoordinates = scalarCoordinates(c, squareSize);\r\n            const matchingCarts = this.carts.filter((cart) => manhattanDistance(cart.position, c) === 0);\r\n            if (matchingCarts.length === 1) {\r\n                e = matchingCarts[0].toString();\r\n            } else if (matchingCarts.length > 1) {\r\n                result.push({\r\n                    id: serialization.serialize(c),\r\n                    c,\r\n                    color: \"red\",\r\n                    type: \"rectangle\",\r\n                    size: {x: squareSize, y: squareSize},\r\n                });\r\n                return;\r\n            }\r\n            switch (e) {\r\n                case \" \":\r\n                    return;\r\n                case \"+\":\r\n                    result.push({\r\n                        type: \"rectangle\",\r\n                        c: sumCoordinate(baseCoordinates, {x: 0, y: padding}),\r\n                        color: \"white\",\r\n                        size: {x: squareSize, y: squareSize - padding * 2},\r\n                        id: serialization.serialize(c) + \"-\"\r\n                    });\r\n                    result.push({\r\n                        type: \"rectangle\",\r\n                        c: sumCoordinate(baseCoordinates, {x: padding, y: 0}),\r\n                        color: \"white\",\r\n                        size: {x: squareSize - padding * 2, y: squareSize},\r\n                        id: serialization.serialize(c) + \"|\"\r\n                    });\r\n                    break;\r\n                case \"|\":\r\n                    result.push({\r\n                        type: \"rectangle\",\r\n                        c: sumCoordinate(baseCoordinates, {x: padding, y: 0}),\r\n                        color: \"white\",\r\n                        size: {x: squareSize - padding * 2, y: squareSize},\r\n                        id: serialization.serialize(c) + \"|\"\r\n                    });\r\n                    break;\r\n                case \"-\":\r\n                    result.push({\r\n                        type: \"rectangle\",\r\n                        c: sumCoordinate(baseCoordinates, {x: 0, y: padding}),\r\n                        color: \"white\",\r\n                        size: {x: squareSize, y: squareSize - padding * 2},\r\n                        id: serialization.serialize(c) + \"-\"\r\n                    });\r\n                    break;\r\n                case \"/\":\r\n                    result.push({\r\n                        type: \"points\",\r\n                        id: serialization.serialize(c),\r\n                        color: \"white\",\r\n                        points: [\r\n                            { x: baseCoordinates.x, y: baseCoordinates.y + squareSize - padding},\r\n                            { x: baseCoordinates.x + squareSize - padding, y: baseCoordinates.y},\r\n                            { x: baseCoordinates.x + squareSize, y: baseCoordinates.y + padding},\r\n                            { x: baseCoordinates.x + padding, y: baseCoordinates.y + squareSize}\r\n                        ]\r\n                    });\r\n                    break;\r\n                case \"\\\\\":\r\n                    result.push({\r\n                        type: \"points\",\r\n                        id: serialization.serialize(c),\r\n                        color: \"white\",\r\n                        points: [\r\n                            { x: baseCoordinates.x, y: baseCoordinates.y + padding},\r\n                            { x: baseCoordinates.x +  padding, y: baseCoordinates.y},\r\n                            { x: baseCoordinates.x + squareSize, y: baseCoordinates.y + squareSize - padding},\r\n                            { x: baseCoordinates.x + squareSize - padding, y: baseCoordinates.y + squareSize}\r\n                        ]\r\n                    });\r\n                    break;\r\n                case \">\":\r\n                    result.push({\r\n                        type: \"points\",\r\n                        id: serialization.serialize(c),\r\n                        color: \"pink\",\r\n                        points: [\r\n                            baseCoordinates,\r\n                            {x: baseCoordinates.x + squareSize, y: baseCoordinates.y + squareSize / 2},\r\n                            {x: baseCoordinates.x, y: baseCoordinates.y + squareSize}\r\n                        ]\r\n                    });\r\n                    break;\r\n                case \"<\":\r\n                    result.push({\r\n                        type: \"points\",\r\n                        id: serialization.serialize(c),\r\n                        color: \"pink\",\r\n                        points: [\r\n                            {x: baseCoordinates.x + squareSize, y: baseCoordinates.y},\r\n                            {x: baseCoordinates.x, y: baseCoordinates.y + squareSize / 2},\r\n                            {x: baseCoordinates.x + squareSize, y: baseCoordinates.y + squareSize}\r\n                        ]\r\n                    });\r\n                    break;\r\n                case \"^\":\r\n                    result.push({\r\n                        type: \"points\",\r\n                        id: serialization.serialize(c),\r\n                        color: \"pink\",\r\n                        points: [\r\n                            {x: baseCoordinates.x + squareSize / 2, y: baseCoordinates.y},\r\n                            {x: baseCoordinates.x, y: baseCoordinates.y + squareSize},\r\n                            {x: baseCoordinates.x + squareSize, y: baseCoordinates.y + squareSize},\r\n                        ]\r\n                    });\r\n                    break;\r\n                case \"v\":\r\n                    result.push({\r\n                        type: \"points\",\r\n                        id: serialization.serialize(c),\r\n                        color: \"pink\",\r\n                        points: [\r\n                            {x: baseCoordinates.x + squareSize / 2, y: baseCoordinates.y + squareSize},\r\n                            {x: baseCoordinates.x, y: baseCoordinates.y},\r\n                            {x: baseCoordinates.x + squareSize, y: baseCoordinates.y},\r\n                        ]\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    private isVertical(cell: InputCell | undefined) {\r\n        if (!cell) {\r\n            return false;\r\n        } else {\r\n            return cell === \"|\" || cell === \"\\\\\" || cell === \"/\" || cell === \"+\" || isInputCart(cell);\r\n        }\r\n    }\r\n\r\n    private isHorizontal(cell: InputCell | undefined) {\r\n        if (!cell) {\r\n            return false;\r\n        } else {\r\n            return cell === \"-\" || cell === \"\\\\\" || cell === \"/\" || cell === \"+\" || isInputCart(cell);\r\n        }\r\n    }\r\n    private hideCart(coordinate: Coordinate) {\r\n        const up = this.matrix.get(directions.up.sum(coordinate));\r\n        const down = this.matrix.get(directions.down.sum(coordinate));\r\n        const left = this.matrix.get(directions.left.sum(coordinate));\r\n        const right = this.matrix.get(directions.right.sum(coordinate));\r\n        if (this.isVertical(up) && this.isVertical(down)) {\r\n            if (this.isHorizontal(left) && this.isHorizontal(right)) {\r\n                this.matrix.set(coordinate, \"+\");\r\n            } else {\r\n                this.matrix.set(coordinate, \"|\");\r\n            }\r\n        } else if (this.isHorizontal(left) && this.isHorizontal(right)) {\r\n            this.matrix.set(coordinate, \"-\");\r\n        } else {\r\n            throw new Error(\"Don't know what to put here :( \" + JSON.stringify(coordinate));\r\n        }\r\n    }\r\n    private incrementTicks() {\r\n        this.internalTicks++;\r\n    }\r\n\r\n    private getOrderedCarts(): Cart[] {\r\n        return this.carts.filter((e) => !e.isCrashed()).sort((a, b) => {\r\n            if (a.position.y === b.position.y) {\r\n                return a.position.x - b.position.x;\r\n            } else {\r\n                return a.position.y - b.position.y;\r\n            }\r\n        });\r\n    }\r\n    private moveCarts() {\r\n        const cartList = this.getOrderedCarts();\r\n        for (const cart of cartList) {\r\n            cart.handleInput((coordinate) => this.matrix.get(coordinate)!);\r\n            this.checkCollision(cart.position, cartList);\r\n        }\r\n    }\r\n    private checkCollision(position: Coordinate, candidates: Cart[]) {\r\n        const colliding = candidates.filter((c) => manhattanDistance(c.position, position) === 0);\r\n        if (colliding.length === 0) {\r\n            throw new Error(\"There should at least be one cart here\");\r\n        } else if (colliding.length > 1) {\r\n            colliding.forEach((cart) => cart.crash());\r\n            this.crashList.push({\r\n                carts: colliding,\r\n                position\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport const mineCartMadness = entryForFile(\r\n    async ({ lines, outputCallback, isCancelled, pause, screen }) => {\r\n        const field = parseLines(lines);\r\n        let printer: ScreenPrinter | null = null;\r\n        if (screen) {\r\n            printer = await screen.requireScreen({x: 1600, y: 1600});\r\n            await outputCallback(\"Running...\");\r\n        }\r\n        if (printer) {\r\n            printer.replace(field.toDrawable({x: 1600, y: 1600}, false));\r\n        } else {\r\n            await outputCallback(field.toString(true), true);\r\n        }\r\n        await pause();\r\n        while (!isCancelled || !isCancelled()) {\r\n            if (printer) {\r\n                printer.replace(field.toDrawable({x: 1600, y: 1600}));\r\n            } else {\r\n                await outputCallback([\r\n                    \" \",\r\n                    field.toString(false)\r\n                ], true);\r\n            }\r\n            field.tick();\r\n            if (field.hasCrashes()) {\r\n                break;\r\n            }\r\n            await pause();\r\n        }\r\n        if (printer) {\r\n            printer.replace(field.toDrawable({x: 1600, y: 1600}));\r\n            await outputCallback(\"Crash: \" + JSON.stringify(field.crashes[0].position));\r\n        } else {\r\n            await outputCallback([\r\n                \"Crash: \" + JSON.stringify(field.crashes[0].position),\r\n                field.toString(false)\r\n            ], true);\r\n        }\r\n    },\r\n    async ({ lines, outputCallback, isCancelled, pause }) => {\r\n        const field = parseLines(lines);\r\n        await outputCallback(field.toString(true), true);\r\n        await pause();\r\n        while (!isCancelled || !isCancelled()) {\r\n            await outputCallback([\r\n                \"Remaining carts: \" + field.remainingCarts.length,\r\n                field.toString(false)\r\n            ], true);\r\n            field.tick();\r\n            if (field.remainingCarts.length === 1) {\r\n                break;\r\n            }\r\n            await pause();\r\n        }\r\n        await outputCallback([\r\n            \"Last cart: \" + JSON.stringify(field.remainingCarts[0].position),\r\n            field.toString(false)\r\n        ], true);\r\n    },\r\n    {\r\n        key: \"mine-cart-madness\",\r\n        title: \"Mine Cart Madness\",\r\n        stars: 2,\r\n        customComponent: \"pause-and-run\",\r\n        embeddedData: \"mine-cart-madness/input\"\r\n    }\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\n\r\nfunction moveElf(position: number, recipes: number[]) {\r\n    return (position + 1 + recipes[position]) % recipes.length;\r\n}\r\n\r\nexport const entry = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const interestingRecipes = 10;\r\n        const numberOfSteps = parseInt(lines[0], 10);\r\n        const recipes = [3, 7];\r\n        let currentFirst = 0;\r\n        let currentSecond = 1;\r\n        while (recipes.length < numberOfSteps + interestingRecipes) {\r\n            const result = recipes[currentFirst] + recipes[currentSecond];\r\n            if (result < 10) {\r\n                recipes.push(result);\r\n            } else {\r\n                const first = Math.floor(result / 10);\r\n                const second = result % 10;\r\n                recipes.push(first);\r\n                recipes.push(second);\r\n            }\r\n            currentFirst = moveElf(currentFirst, recipes);\r\n            currentSecond = moveElf(currentSecond, recipes);\r\n        }\r\n\r\n        const output = [];\r\n        for (let i = 0; i < interestingRecipes; i++) {\r\n            output.push(recipes[numberOfSteps + i]);\r\n        }\r\n\r\n        await outputCallback(output.join(\"\"));\r\n    },\r\n    async ({ lines, outputCallback, pause }) => {\r\n        const targetPattern = lines[0].split(\"\").map((e) => parseInt(e, 10));\r\n        let memory: number[] = [];\r\n        function checkIfSame(target: number[], nestedMemory: number[]) {\r\n            if (target.length !== nestedMemory.length) {\r\n                return false;\r\n            }\r\n            for (let i = 0; i < target.length; i++) {\r\n                if (target[i] !== nestedMemory[i]) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        function addMemory(nestedMemory: number[], target: number[], newElement: number): number[] {\r\n            if (nestedMemory.length < target.length) {\r\n                return nestedMemory.concat([newElement]);\r\n            } else {\r\n                return addMemory(nestedMemory.slice(1), target, newElement);\r\n            }\r\n        }\r\n\r\n        const recipes = [3, 7];\r\n        let currentFirst = 0;\r\n        let currentSecond = 1;\r\n\r\n        let iteration = 0;\r\n\r\n        while (true) {\r\n            if (++iteration % 10000 === 0) {\r\n                await outputCallback(\"Iteration \" + iteration + \" done\", true);\r\n            }\r\n            const result = recipes[currentFirst] + recipes[currentSecond];\r\n            if (result < 10) {\r\n                recipes.push(result);\r\n                memory = addMemory(memory, targetPattern, result);\r\n                if (checkIfSame(targetPattern, memory)) {\r\n                    await outputCallback(recipes.length - targetPattern.length);\r\n                    return;\r\n                }\r\n            } else {\r\n                const first = Math.floor(result / 10);\r\n                const second = result % 10;\r\n                recipes.push(first);\r\n                memory = addMemory(memory, targetPattern, first);\r\n                if (checkIfSame(targetPattern, memory)) {\r\n                    await outputCallback(recipes.length - targetPattern.length);\r\n                    return;\r\n                }\r\n                recipes.push(second);\r\n                memory = addMemory(memory, targetPattern, second);\r\n                if (checkIfSame(targetPattern, memory)) {\r\n                    await outputCallback(recipes.length - targetPattern.length);\r\n                    return;\r\n                }\r\n            }\r\n            currentFirst = moveElf(currentFirst, recipes);\r\n            currentSecond = moveElf(currentSecond, recipes);\r\n        }\r\n    },\r\n    { key: \"chocolate-charts\", title: \"Chocolate Charts\", stars: 2, }\r\n);\r\n","import { entryForFile, OutputCallback } from \"../../entry\";\r\nimport { Coordinate, sumCoordinate, Bounds, isInBounds, ascendingCompare } from \"../../../support/geometry\";\r\nimport { ascending } from \"../../../support/best\";\r\nimport { Queue } from \"../../../support/data-structure\";\r\nimport { __values } from \"tslib\";\r\n\r\nclass EditableField {\r\n    public cells: EditableFieldType[][];\r\n    constructor(baseField: Field, units: Units) {\r\n        this.cells = baseField.cells.map((line, y) => line.split(\"\").map((cell, x) => {\r\n            return cell as FieldType;\r\n        }));\r\n\r\n        units.units.forEach((unit) => {\r\n            if (unit.isAlive) {\r\n                this.cells[unit.coordinates.y][unit.coordinates.x] = unit;\r\n            }\r\n        });\r\n    }\r\n\r\n    public get(c: Coordinate): EditableFieldType {\r\n        return this.cells[c.y][c.x];\r\n    }\r\n\r\n    public set(c: Coordinate, v: EditableFieldType) {\r\n        this.cells[c.y][c.x] = v;\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.cells.map((line) => line.map((cell) => {\r\n            if (isFieldType(cell)) {\r\n                return cell;\r\n            } else if (isUnit(cell)) {\r\n                return cell.unitType;\r\n            } else {\r\n                return \"\" + cell;\r\n            }\r\n        }).join(\"\")).join(\"\\n\");\r\n    }\r\n}\r\n\r\ntype EditableFieldType = Unit | FieldType | number;\r\n\r\nfunction isUnit(e: EditableFieldType): e is Unit {\r\n    return (e as Unit).coordinates !== undefined;\r\n}\r\n\r\nconst adjacentOffsets: Coordinate[] = [\r\n    { x: -1, y: 0 }, { x: 1, y: 0 }, { x: 0, y: 1 }, { x: 0, y: -1 }\r\n];\r\n\r\nfunction adjacentCoordinates(c: Coordinate, bounds: Bounds): Coordinate[] {\r\n    return adjacentOffsets.map((offset) => sumCoordinate(c, offset)).filter((result) => isInBounds(result, bounds));\r\n}\r\n\r\nfunction isFieldType(e: EditableFieldType): e is FieldType {\r\n    return !isUnit(e) && (e as FieldType).substr !== undefined;\r\n}\r\n\r\nfunction isNumber(e: EditableFieldType): e is number {\r\n    return !isUnit(e) && !isFieldType(e);\r\n}\r\n\r\nclass Field {\r\n    public cells: string[];\r\n    public size: { width: number; height: number; };\r\n\r\n    constructor(inputLines: string[]) {\r\n        this.size = {\r\n            width: inputLines[0].length,\r\n            height: inputLines.length\r\n        };\r\n        this.cells = inputLines.map((line) => line.replace(/[GE]/g, \".\"));\r\n    }\r\n\r\n    public toString() {\r\n        return this.cells.join(\"\\n\");\r\n    }\r\n}\r\n\r\ntype FieldType = \"#\" | \".\";\r\ntype UnitType = \"G\" | \"E\";\r\n\r\ntype WorldType = FieldType | UnitType;\r\n\r\nfunction defaultPower(t: UnitType): number {\r\n    return 3;\r\n}\r\n\r\nclass Units {\r\n\r\n    public static fromLines(lines: string[], powerGenerator?: typeof defaultPower): Units {\r\n        return new Units(\r\n            lines.flatMap(\r\n                (line, y) => line.split(\"\").map(\r\n                    (cell, x) => cell === \"G\" || cell === \"E\" ? { type: cell as UnitType, coordinate: { x, y } } : null\r\n                ).filter((u) => u !== null)\r\n            ).map((u) => new Unit(\r\n                u!.coordinate,\r\n                u!.type,\r\n                powerGenerator ? powerGenerator(u!.type) : defaultPower(u!.type)\r\n            ))\r\n        );\r\n    }\r\n    constructor(public units: Unit[]) {\r\n    }\r\n\r\n\r\n    public sort(): Units {\r\n        return new Units(this.units.filter((u) => u.isAlive).sort((a, b) => a.compare(b)));\r\n    }\r\n}\r\n\r\nclass Unit {\r\n    // public attackPower = 3;\r\n    public hitpoints = 200;\r\n    constructor(public coordinates: Coordinate, public unitType: UnitType, public attackPower: number = 3) {\r\n    }\r\n\r\n    public get isAlive(): boolean { return this.hitpoints > 0; }\r\n\r\n    public suffersAttack(value: number) {\r\n        this.hitpoints -= value;\r\n    }\r\n\r\n    public compare(other: Unit) {\r\n        if (other.coordinates.y === this.coordinates.y) {\r\n            return ascending(this.coordinates.x, other.coordinates.x);\r\n        } else {\r\n            return ascending(this.coordinates.y, other.coordinates.y);\r\n        }\r\n    }\r\n}\r\n\r\nasync function calculateScore(\r\n    field: Field,\r\n    units: Units,\r\n    outputCallback: OutputCallback,\r\n    pause: () => Promise<void>\r\n): Promise<[number, number, number]> {\r\n    const bounds = {\r\n        topLeft: { x: 0, y: 0 },\r\n        size: { x: field.size.width, y: field.size.height }\r\n    };\r\n    function attackInRange(unit: Unit, editableField: EditableField): boolean {\r\n        const rangePositions = adjacentCoordinates(unit.coordinates, bounds);\r\n        const enemiesInRange = rangePositions\r\n            .map((c) => editableField.get(c))\r\n            .filter((c) => isUnit(c) && c.unitType !== unit.unitType)\r\n            .map((c) => c as Unit);\r\n        if (enemiesInRange.length > 0) {\r\n            const enemyToAttack = enemiesInRange.sort((a, b) => {\r\n                if (a.hitpoints === b.hitpoints) {\r\n                    return ascendingCompare(a.coordinates, b.coordinates);\r\n                } else {\r\n                    return ascending(a.hitpoints, b.hitpoints);\r\n                }\r\n            })[0];\r\n            enemyToAttack.suffersAttack(unit.attackPower);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    let i = -1;\r\n    while (true) {\r\n        i++;\r\n        for (const unit of units.units) {\r\n            await pause();\r\n            if (!unit.isAlive) {\r\n                continue;\r\n            }\r\n            const editableField = new EditableField(field, units);\r\n            editableField.set(unit.coordinates, 0);\r\n            if (attackInRange(unit, editableField)) {\r\n                continue;\r\n            } else {\r\n                const positionsToVisit = new Queue<Coordinate>();\r\n                positionsToVisit.add(unit.coordinates);\r\n                let foundAt: number | null = null;\r\n                const interestingPositions: Coordinate[] = [];\r\n                while (!positionsToVisit.isEmpty) {\r\n                    const currentPosition = positionsToVisit.get()!;\r\n                    const currentValue = editableField.get(currentPosition);\r\n                    if (!isNumber(currentValue)) {\r\n                        throw Error(\"At current position there wasn't a value\");\r\n                    }\r\n                    if (foundAt && currentValue > foundAt) {\r\n                        break;\r\n                    }\r\n                    const inRangeCoordinates = adjacentCoordinates(currentPosition, bounds);\r\n                    inRangeCoordinates.forEach((c) => {\r\n                        const cell = editableField.get(c);\r\n                        if (cell === \".\") {\r\n                            editableField.set(c, currentValue + 1);\r\n                            positionsToVisit.add(c);\r\n                        } else if (isUnit(cell) && cell.unitType !== unit.unitType) {\r\n                            foundAt = currentValue;\r\n                            interestingPositions.push(currentPosition);\r\n                        } else {\r\n                            return;\r\n                        }\r\n                    });\r\n                }\r\n                if (interestingPositions.length <= 0) {\r\n                    continue;\r\n                }\r\n                const targetPosition = interestingPositions.sort((a, b) => ascendingCompare(a, b))[0];\r\n                const interestingFirstSteps: Coordinate[] = [];\r\n                if ((editableField.get(targetPosition) as number) === 1) {\r\n                    interestingFirstSteps.push(targetPosition);\r\n                } else {\r\n                    const stepQueue = new Queue<Coordinate>();\r\n                    stepQueue.add(targetPosition);\r\n                    while (!stepQueue.isEmpty) {\r\n                        const nextStep = stepQueue.get()!;\r\n                        const nextStepValue = editableField.get(nextStep);\r\n                        if (!isNumber(nextStepValue)) {\r\n                            throw Error(\"Expected number!\");\r\n                        }\r\n                        if (nextStepValue === 1) {\r\n                            interestingFirstSteps.push(nextStep);\r\n                        } else if (nextStepValue > 0) {\r\n                            const inRange = adjacentCoordinates(nextStep, bounds);\r\n                            inRange.forEach((c) => {\r\n                                const v = editableField.get(c);\r\n                                if (isNumber(v) && v === nextStepValue - 1) {\r\n                                    stepQueue.add(c);\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                const moveTo = interestingFirstSteps.sort((a, b) => ascendingCompare(a, b))[0];\r\n                unit.coordinates = moveTo;\r\n                attackInRange(unit, new EditableField(field, units));\r\n            }\r\n        }\r\n        units = units.sort();\r\n        const newEditable = new EditableField(field, units);\r\n        const outputLines = newEditable.toString().split(\"\\n\");\r\n        units.units.forEach(\r\n            (u) => outputLines[u.coordinates.y] = outputLines[u.coordinates.y].concat(\r\n                \" \",\r\n                `${u.unitType}-${u.hitpoints}`\r\n            )\r\n        );\r\n        await outputCallback(outputLines.join(\"\\n\"));\r\n        if (\r\n            units.units.filter((u) => u.unitType === \"E\").length === 0\r\n            || units.units.filter((u) => u.unitType === \"G\").length === 0) {\r\n            const gameScore = i * units.units.map((u) => u.hitpoints).reduce((acc, value) => acc + value, 0);\r\n            return [i, gameScore, units.units.filter((u) => u.unitType === \"E\").length];\r\n            // await outputCallback(`Combat done at round ${i} with value ${gameScore}!`);\r\n            // break;\r\n        }\r\n    }\r\n}\r\n\r\nfunction wrapOutputToClean(outputCallback: OutputCallback, cleanEveryNOutput: number): OutputCallback {\r\n    let currentCount = 0;\r\n    return async (line: any, shouldClear?: boolean): Promise<void> => {\r\n        currentCount++;\r\n        let forceShouldClear = false;\r\n        if (currentCount >= cleanEveryNOutput || shouldClear) {\r\n            forceShouldClear = true;\r\n        }\r\n        await outputCallback(line, forceShouldClear);\r\n    };\r\n}\r\n\r\nexport const entry = entryForFile(\r\n    async ({ lines, outputCallback, pause }) => {\r\n        const field = new Field(lines);\r\n        const units = Units.fromLines(lines).sort();\r\n\r\n        const [round, gameScore] = await calculateScore(\r\n            field,\r\n            units,\r\n            wrapOutputToClean(outputCallback, 1),\r\n            pause\r\n        );\r\n\r\n        await outputCallback(`Combat done at round ${round} with value ${gameScore}!`);\r\n\r\n    },\r\n    async ({ lines, outputCallback, pause }) => {\r\n        const field = new Field(lines);\r\n\r\n        let attackPower = 11;\r\n        while (true) {\r\n            await outputCallback(\"Trying with \" + attackPower);\r\n            const units = Units.fromLines(lines, ((t) => t === \"E\" ? attackPower : 3)).sort();\r\n            const startingElves = units.units.filter((u) => u.unitType === \"E\").length;\r\n            const [round, gameScore, survivors] = await calculateScore(\r\n                field,\r\n                units,\r\n                wrapOutputToClean(outputCallback, 1),\r\n                pause\r\n            );\r\n            if (startingElves === survivors) {\r\n                await outputCallback(\r\n                    `First win at attack power ${attackPower} in ${round} rounds with score ${gameScore}`\r\n                );\r\n                break;\r\n            } else {\r\n                attackPower++;\r\n            }\r\n        }\r\n    },\r\n    { key: \"beverage-bandits\", title: \"Beverage Bandits\", stars: 2, embeddedData: \"beverage-bandits/online-input\" }\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\nimport { groupBy } from \"../../../support/sequences\";\r\n\r\nexport type OpCode =\r\n    \"addr\" | \"addi\" |\r\n    \"mulr\" | \"muli\" |\r\n    \"banr\" | \"bani\" |\r\n    \"borr\" | \"bori\" |\r\n    \"setr\" | \"seti\" |\r\n    \"gtir\" | \"gtri\" | \"gtrr\" |\r\n    \"eqir\" | \"eqri\" | \"eqrr\";\r\n\r\nconst codeList: OpCode[] = [\r\n    \"addr\", \"addi\",\r\n    \"mulr\", \"muli\",\r\n    \"banr\", \"bani\",\r\n    \"borr\", \"bori\",\r\n    \"setr\", \"seti\",\r\n    \"gtir\", \"gtri\", \"gtrr\",\r\n    \"eqir\", \"eqri\", \"eqrr\"\r\n];\r\n\r\nexport class Instruction {\r\n\r\n    public static fromLines(lines: string[], mapping: (s: string) => OpCode): Instruction[] {\r\n        lines = lines.map((l) => l.replace(/\\/\\/.*/g, \"\"));\r\n        const instructions = lines.map((line, index) => {\r\n            let g = line.split(\" \").map((l) => l.trim()).filter((l) => l.length > 0);\r\n            if (g.length < 4) {\r\n                g = g.fill(\"0\", g.length, 4);\r\n            }\r\n            const p = (s: string) => parseInt(s, 10);\r\n            return new Instruction(mapping(g[0]), p(g[1]), p(g[2]), p(g[3]), index);\r\n        });\r\n        return instructions;\r\n    }\r\n    constructor(\r\n        public code: OpCode | number,\r\n        public a: number,\r\n        public b: number,\r\n        public output: number,\r\n        public lineNumber?: number\r\n    ) { }\r\n\r\n    public setCode(code: OpCode): Instruction {\r\n        return new Instruction(code, this.a, this.b, this.output);\r\n    }\r\n\r\n    public allCodes(): Instruction[] {\r\n        return codeList.map((code) => this.setCode(code));\r\n    }\r\n\r\n    public toString() {\r\n        return `${this.code} ${this.a} ${this.b} ${this.output}`;\r\n    }\r\n}\r\n\r\nexport class MutableMachine {\r\n    constructor(public registers = [0, 0, 0, 0], public instructionPointerRegister: number) {\r\n    }\r\n\r\n    public sameAs(other: Machine): boolean {\r\n        if (this.registers.length !== other.registers.length) {\r\n            return false;\r\n        }\r\n        return this.registers\r\n            .map((e, i) => this.registers[i] === other.registers[i])\r\n            .reduce((acc, v) => acc && v, true);\r\n    }\r\n\r\n    public get nextInstructionAddress(): number {\r\n        return this.registers[this.instructionPointerRegister];\r\n    }\r\n\r\n    public isExecutable(instructionRange: number): boolean {\r\n        const newI = this.nextInstructionAddress;\r\n        return newI >= 0 && newI < instructionRange;\r\n    }\r\n\r\n\r\n    public execute(instruction: Instruction) {\r\n        const calculatedValue = this.calculateValue(instruction);\r\n        this.set(\r\n            instruction.output,\r\n            calculatedValue\r\n        );\r\n    }\r\n\r\n    private set(registerAddress: number, value: number) {\r\n        const newRegisters = this.registers;\r\n        newRegisters[registerAddress] = value;\r\n        newRegisters[this.instructionPointerRegister]++;\r\n    }\r\n\r\n    private calculateValue(instruction: Instruction): number {\r\n        const i = instruction;\r\n        switch (i.code) {\r\n            case \"addr\":\r\n                return this.registers[i.a] + this.registers[i.b];\r\n            case \"addi\":\r\n                return this.registers[i.a] + i.b;\r\n            case \"mulr\":\r\n                return this.registers[i.a] * this.registers[i.b];\r\n            case \"muli\":\r\n                return this.registers[i.a] * i.b;\r\n            case \"banr\":\r\n                return this.registers[i.a] & this.registers[i.b];\r\n            case \"bani\":\r\n                return this.registers[i.a] & i.b;\r\n            case \"borr\":\r\n                return this.registers[i.a] | this.registers[i.b];\r\n            case \"bori\":\r\n                return this.registers[i.a] | i.b;\r\n\r\n            case \"setr\":\r\n                return this.registers[i.a];\r\n            case \"seti\":\r\n                return i.a;\r\n\r\n            case \"gtir\":\r\n                return i.a > this.registers[i.b] ? 1 : 0;\r\n            case \"gtri\":\r\n                return this.registers[i.a] > i.b ? 1 : 0;\r\n            case \"gtrr\":\r\n                return this.registers[i.a] > this.registers[i.b] ? 1 : 0;\r\n\r\n            case \"eqir\":\r\n                return i.a === this.registers[i.b] ? 1 : 0;\r\n            case \"eqri\":\r\n                return this.registers[i.a] === i.b ? 1 : 0;\r\n            case \"eqrr\":\r\n                return this.registers[i.a] === this.registers[i.b] ? 1 : 0;\r\n            default:\r\n                throw RangeError(\"Cannot execute instruction if no op code is given\");\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport class Machine {\r\n    constructor(public registers = [0, 0, 0, 0], public instructionPointerRegister?: number) {\r\n    }\r\n\r\n    public sameAs(other: Machine): boolean {\r\n        if (this.registers.length !== other.registers.length) {\r\n            return false;\r\n        }\r\n        return this.registers\r\n            .map((e, i) => this.registers[i] === other.registers[i])\r\n            .reduce((acc, v) => acc && v, true);\r\n    }\r\n\r\n    public get nextInstructionAddress(): number {\r\n        if (this.instructionPointerRegister === undefined) {\r\n            return 0;\r\n        } else {\r\n            return this.registers[this.instructionPointerRegister];\r\n        }\r\n    }\r\n\r\n    public isExecutable(instructionRange: number): boolean {\r\n        if (this.instructionPointerRegister === undefined) {\r\n            return true;\r\n        } else {\r\n            const newI = this.nextInstructionAddress;\r\n            return newI >= 0 && newI < instructionRange;\r\n        }\r\n    }\r\n\r\n\r\n    public execute(instruction: Instruction): Machine {\r\n        if (instruction.output < 0 || instruction.output > this.registers.length) {\r\n            throw RangeError(\"Output outside of valid range\");\r\n        }\r\n        const calculatedValue = this.calculateValue(instruction);\r\n        return this.set(\r\n            instruction.output,\r\n            calculatedValue\r\n        );\r\n    }\r\n\r\n    private set(registerAddress: number, value: number): Machine {\r\n        const newRegisters = Array.from(this.registers);\r\n        newRegisters[registerAddress] = value;\r\n        if (this.instructionPointerRegister !== undefined) {\r\n            newRegisters[this.instructionPointerRegister]++;\r\n        }\r\n        return new Machine(newRegisters, this.instructionPointerRegister);\r\n    }\r\n\r\n    private calculateValue(instruction: Instruction): number {\r\n        const r = (...ns: number[]) => {\r\n            for (const n of ns) {\r\n                if (n < 0 || n > this.registers.length) {\r\n                    throw RangeError(\"Register address out of range\");\r\n                }\r\n            }\r\n        };\r\n        const i = instruction;\r\n        function rab() {\r\n            r(i.a, i.b);\r\n        }\r\n        function ra() {\r\n            r(i.a);\r\n        }\r\n        function rb() {\r\n            r(i.b);\r\n        }\r\n\r\n        const existing = (n: number): number => n;\r\n\r\n        switch (i.code) {\r\n            case \"addr\":\r\n                rab();\r\n                return existing(this.registers[i.a] + this.registers[i.b]);\r\n            case \"addi\":\r\n                ra();\r\n                return existing(this.registers[i.a] + i.b);\r\n            case \"mulr\":\r\n                rab();\r\n                return existing(this.registers[i.a] * this.registers[i.b]);\r\n            case \"muli\":\r\n                ra();\r\n                return existing(this.registers[i.a] * i.b);\r\n            case \"banr\":\r\n                rab();\r\n                return existing(this.registers[i.a] & this.registers[i.b]);\r\n            case \"bani\":\r\n                ra();\r\n                return existing(this.registers[i.a] & i.b);\r\n            case \"borr\":\r\n                rab();\r\n                return existing(this.registers[i.a] | this.registers[i.b]);\r\n            case \"bori\":\r\n                ra();\r\n                return existing(this.registers[i.a] | i.b);\r\n\r\n            case \"setr\":\r\n                ra();\r\n                return existing(this.registers[i.a]);\r\n            case \"seti\":\r\n                return existing(i.a);\r\n\r\n            case \"gtir\":\r\n                return existing(i.a > this.registers[i.b] ? 1 : 0);\r\n            case \"gtri\":\r\n                return existing(this.registers[i.a] > i.b ? 1 : 0);\r\n            case \"gtrr\":\r\n                return existing(this.registers[i.a] > this.registers[i.b] ? 1 : 0);\r\n\r\n            case \"eqir\":\r\n                return existing(i.a === this.registers[i.b] ? 1 : 0);\r\n            case \"eqri\":\r\n                return existing(this.registers[i.a] === i.b ? 1 : 0);\r\n            case \"eqrr\":\r\n                return existing(this.registers[i.a] === this.registers[i.b] ? 1 : 0);\r\n            default:\r\n                throw RangeError(\"Cannot execute instruction if no op code is given\");\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\ninterface Calibration {\r\n    before: Machine;\r\n    after: Machine;\r\n    instruction: Instruction;\r\n}\r\n\r\nconst isTokenValid = (token: Calibration, i: Instruction): boolean => {\r\n    try {\r\n        if (token.before.execute(i).sameAs(token.after)) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    } catch (RangeError) {\r\n        return true;\r\n    }\r\n};\r\n\r\n\r\nexport const entry = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const testMachineFactory = () => new Machine([0, 1, 2, 3]);\r\n        const testCreator = (opCode: OpCode, a: number, b: number, e: number) =>\r\n            ({ i: new Instruction(opCode, a, b, 3), e });\r\n\r\n        const tests = [\r\n            testCreator(\"addr\", 0, 1, 1), // 0\r\n            testCreator(\"addr\", 0, 1, 1),\r\n            testCreator(\"addr\", 1, 1, 2),\r\n            testCreator(\"addi\", 1, 3, 4),\r\n            testCreator(\"addi\", 2, 4, 6),\r\n            testCreator(\"mulr\", 2, 0, 0), // 5\r\n            testCreator(\"mulr\", 2, 1, 2),\r\n            testCreator(\"muli\", 0, 6, 0),\r\n            testCreator(\"muli\", 2, 5, 10),\r\n            testCreator(\"banr\", 1, 2, 0),\r\n            testCreator(\"bani\", 1, 8, 0), // 10\r\n            testCreator(\"banr\", 1, 3, 1),\r\n            testCreator(\"bani\", 1, 9, 1),\r\n            testCreator(\"borr\", 1, 2, 3),\r\n            testCreator(\"bori\", 1, 8, 9),\r\n            testCreator(\"setr\", 1, 8, 1), // 15\r\n            testCreator(\"setr\", 2, 20, 2),\r\n            testCreator(\"seti\", 8, 0, 8),\r\n            testCreator(\"gtir\", 4, 2, 1),\r\n            testCreator(\"gtir\", 2, 2, 0),\r\n            testCreator(\"gtri\", 2, 1, 1),\r\n            testCreator(\"gtri\", 2, 3, 0),\r\n            testCreator(\"gtri\", 3, 8, 0),\r\n            testCreator(\"gtrr\", 3, 3, 0),\r\n            testCreator(\"gtrr\", 3, 2, 1),\r\n            testCreator(\"eqir\", 4, 2, 0),\r\n            testCreator(\"eqir\", 2, 2, 1),\r\n            testCreator(\"eqri\", 2, 1, 0),\r\n            testCreator(\"eqri\", 2, 3, 0),\r\n            testCreator(\"eqri\", 3, 8, 0),\r\n            testCreator(\"eqrr\", 3, 3, 1),\r\n            testCreator(\"eqrr\", 3, 2, 0)\r\n        ];\r\n\r\n        let i = 0;\r\n        for (const test of tests) {\r\n            const m = testMachineFactory();\r\n            try {\r\n                const r = m.execute(test.i);\r\n                if (r.registers[3] !== test.e) {\r\n                    await outputCallback(`Test ${i} failed`);\r\n                }\r\n            } catch (RangeError) {\r\n                await outputCallback(`Test ${i} was out of range`);\r\n            }\r\n            i++;\r\n        }\r\n        const calibrationTokens: Calibration[] = parseCalibrationTokens(lines);\r\n        const result = calibrationTokens.map<number>((token) => {\r\n            const validCodes = token.instruction.allCodes().map<number>((instruction) => {\r\n                return isTokenValid(token, instruction) ? 1 : 0;\r\n            }).reduce((acc, v) => acc + v, 0);\r\n            if (validCodes >= 3) {\r\n                return 1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        }).reduce((acc, v) => acc + v, 0);\r\n        await outputCallback(\"Ambigous instructions: \" + result);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const calibrationTokens = parseCalibrationTokens(lines);\r\n        const mapping: { [key: number]: OpCode } = {};\r\n        let done: boolean = false;\r\n        while (!done) {\r\n            done = true;\r\n            calibrationTokens.forEach((token) => {\r\n                if (typeof token.instruction.code === \"number\") {\r\n                    if (mapping[token.instruction.code]) {\r\n                        token.instruction.code = mapping[token.instruction.code];\r\n                    } else {\r\n                        const toBeMapped = codeList.filter((e) => Object.values(mapping).indexOf(e) === -1);\r\n                        const valid = toBeMapped.filter((code) =>\r\n                            isTokenValid(token, token.instruction.setCode(code)));\r\n                        if (valid.length === 0) {\r\n                            throw new Error(\"No valid instruction\");\r\n                        } else if (valid.length === 1) {\r\n                            done = false;\r\n                            mapping[token.instruction.code] = valid[0];\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        await outputCallback(\"Calibration done\");\r\n        const puzzleLines = parseLines(lines).puzzleLines.filter((l) => l.trim().length > 0);\r\n        const instructions = Instruction.fromLines(puzzleLines, ((s) => mapping[parseInt(s, 10)]));\r\n\r\n        let m = new Machine();\r\n        let ln = 0;\r\n        for (const ins of instructions) {\r\n            try {\r\n                m = m.execute(ins);\r\n            } catch (RangeError) {\r\n                await outputCallback(\"Error on line \" + ln);\r\n                break;\r\n            }\r\n            ln++;\r\n        }\r\n\r\n        await outputCallback(\"First register: \" + m.registers[0]);\r\n    },\r\n    { key: \"chronal-classification\", title: \"Chronal Classification\", stars: 2, }\r\n);\r\n\r\nfunction parseCalibrationTokens(lines: string[]) {\r\n    const { calibrationLines, puzzleLines } = parseLines(lines);\r\n    const groupped = groupBy(calibrationLines, 3);\r\n    function getList(l: string): number[] {\r\n        return l.slice(l.indexOf(\"[\") + 1, l.indexOf(\"]\")).replace(/ /g, \"\").split(\",\").map((e) => parseInt(e, 10));\r\n    }\r\n    const calibrationTokens: Calibration[] = groupped.map((group) => {\r\n        const encodedInstruction = group[1].split(\" \").filter((e) => e.length >= 1).map((e) => parseInt(e, 10));\r\n        return {\r\n            before: new Machine(getList(group[0])),\r\n            after: new Machine(getList(group[2])),\r\n            instruction: new Instruction(\r\n                encodedInstruction[0],\r\n                encodedInstruction[1],\r\n                encodedInstruction[2],\r\n                encodedInstruction[3]\r\n            )\r\n        };\r\n    });\r\n    return calibrationTokens;\r\n}\r\n\r\nfunction parseLines(lines: string[]) {\r\n    let calibrationLines: string[];\r\n    let puzzleLines: string[];\r\n    (() => {\r\n        const complete = lines.map((l) => l.trim()).join(\"\\n\");\r\n        const splitLine = complete.indexOf(\"\\n\\n\\n\");\r\n        calibrationLines = complete.slice(0, splitLine + 1).split(\"\\n\").filter((l) => l.trim().length >= 1);\r\n        puzzleLines = complete.slice(splitLine + 4).split(\"\\n\");\r\n    })();\r\n    return { calibrationLines, puzzleLines };\r\n}\r\n","import { entryForFile } from \"../../entry\";\r\nimport { Coordinate, CCoordinate, getBoundaries, Bounds, isInBounds } from \"../../../support/geometry\";\r\n\r\ntype Cell = \".\" | \"|\" | \"~\" | \"#\";\r\n\r\nfunction scanLineToClay(line: string): CCoordinate[] {\r\n    const [xs, ys] = line.split(\", \").sort().map((e) => e.replace(/^.=/, \"\")).map(rangeToValues);\r\n\r\n    return xs.flatMap((x) => ys.map((y) => new CCoordinate(x, y)));\r\n}\r\n\r\nclass World {\r\n\r\n    public get reachedCells(): number {\r\n        return this.state.flatMap((row) => row.filter((e) => e === \"|\" || e === \"~\")).length;\r\n    }\r\n    public get dryCells(): number {\r\n        return this.state.flatMap((row) => row.filter((e) => e === \"~\")).length;\r\n    }\r\n    public bounds: Bounds;\r\n    private state: Cell[][];\r\n\r\n    private readonly left = new CCoordinate(-1, 0);\r\n    private readonly right = new CCoordinate(1, 0);\r\n    private readonly down = new CCoordinate(0, 1);\r\n\r\n    private interestingCoordinates: CCoordinate[] = [];\r\n    public constructor(clayCells: CCoordinate[]) {\r\n        this.bounds = getBoundaries(clayCells);\r\n        this.bounds.topLeft.x -= 1;\r\n        this.bounds.size.x += 2;\r\n        this.state = new Array(this.bounds.size.y).fill(0).map((e) => new Array(this.bounds.size.x).fill(\".\"));\r\n        clayCells.forEach((c) => this.setCell(c, \"#\"));\r\n    }\r\n\r\n    public getCell(c: CCoordinate) {\r\n        c = c.diff(this.bounds.topLeft);\r\n        return this.state[c.y][c.x];\r\n    }\r\n\r\n    public setCell(c: CCoordinate, cell: Cell) {\r\n        c = c.diff(this.bounds.topLeft);\r\n        this.state[c.y][c.x] = cell;\r\n    }\r\n\r\n    public addWater(): boolean {\r\n        const waterCoordinate = new CCoordinate(500, this.bounds.topLeft.y);\r\n        this.setCell(waterCoordinate, \"|\");\r\n        this.interestingCoordinates.push(waterCoordinate);\r\n        return this.takeTurn();\r\n    }\r\n\r\n\r\n    public toString(): string {\r\n        return this.state.map((e) => e.join(\"\")).join(\"\\n\");\r\n    }\r\n\r\n    private takeTurn(): boolean {\r\n        const oldWaterState = this.toString();\r\n        for (const coordinate of this.interestingCoordinates) {\r\n\r\n            const cell = this.getCell(coordinate);\r\n            if (cell === \"|\") {\r\n                const downer = coordinate.sum({ x: 0, y: 1 });\r\n                if (downer.isInBounds(this.bounds)) {\r\n                    const downerCell = this.getCell(downer);\r\n                    if (downerCell === \".\") {\r\n                        this.setCell(downer, \"|\");\r\n                        this.interestingCoordinates.push(downer);\r\n                    } else if (downerCell === \"~\" || downerCell === \"#\") {\r\n                        this.fillTowards(coordinate, this.left, \"|\");\r\n                        this.fillTowards(coordinate, this.right, \"|\");\r\n                        if (this.isStable(coordinate)) {\r\n                            this.fillTowards(coordinate, this.left, \"~\");\r\n                            this.fillTowards(coordinate, this.right, \"~\");\r\n                            this.setCell(coordinate, \"~\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //     }\r\n        // }\r\n        const newState = this.toString();\r\n        return oldWaterState === newState;\r\n    }\r\n\r\n    private fillTowards(c: CCoordinate, direction: CCoordinate, fillWith: Cell): void {\r\n        const current = this.getCell(c);\r\n        if (current !== \"|\") {\r\n            return;\r\n        }\r\n        const downer = this.down.sum(c);\r\n        if (downer.isInBounds(this.bounds)) {\r\n            const downerCell = this.getCell(downer);\r\n            if (downerCell === \"|\" || downerCell === \".\") {\r\n                return;\r\n            }\r\n        } else {\r\n            return;\r\n        }\r\n        const next = direction.sum(c);\r\n        if (!next.isInBounds(this.bounds)) {\r\n            return;\r\n        } else {\r\n            const nextCell = this.getCell(next);\r\n            if (nextCell === \".\") {\r\n                this.setCell(next, fillWith);\r\n                this.interestingCoordinates.push(next);\r\n            }\r\n            return this.fillTowards(next, direction, fillWith);\r\n        }\r\n    }\r\n\r\n    private isClosedOn(c: Coordinate, direction: CCoordinate): boolean {\r\n        const downer = this.down.sum(c);\r\n        if (downer.isInBounds(this.bounds)) {\r\n            const downerCell = this.getCell(downer);\r\n            if (downerCell === \".\" || downerCell === \"|\") {\r\n                return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n        const next = direction.sum(c);\r\n        if (!next.isInBounds(this.bounds)) {\r\n            return false;\r\n        } else {\r\n            const nextCell = this.getCell(next);\r\n            if (nextCell === \"#\") {\r\n                return true;\r\n            } else {\r\n                return this.isClosedOn(next, direction);\r\n            }\r\n        }\r\n    }\r\n\r\n    private isStable(c: Coordinate): boolean {\r\n        return this.isClosedOn(c, this.left) && this.isClosedOn(c, this.right);\r\n    }\r\n\r\n\r\n\r\n    private getStateSummary(): Array<[Cell, number]> {\r\n        return this.state\r\n            .flatMap((row) => row\r\n                .map((c, index) => c === \"|\" || c === \"~\" ? [c, index] as [Cell, number] : null)\r\n                .filter((e) => e !== null)) as Array<[Cell, number]>;\r\n    }\r\n}\r\n\r\nfunction rangeToValues(exp: string): number[] {\r\n    if (exp.indexOf(\"..\") < 0) {\r\n        return [parseInt(exp, 10)];\r\n    } else {\r\n        const [starts, ends] = exp.split(\"..\").map((e) => parseInt(e, 10));\r\n        return Array(ends - starts + 1).fill(0).map((e, index) => starts + index);\r\n    }\r\n}\r\n\r\nexport const entry = entryForFile(\r\n    async ({ lines, outputCallback, pause }) => {\r\n        const clayCoordinates = lines.flatMap(scanLineToClay);\r\n        const world = new World(clayCoordinates);\r\n        let done = false;\r\n        let iteration = 0;\r\n        while (!done) {\r\n            done = world.addWater();\r\n            if (++iteration % 10 === 0) {\r\n                await outputCallback(world.toString(), true);\r\n            } else {\r\n                await pause();\r\n            }\r\n        }\r\n        await outputCallback(world.reachedCells, true);\r\n        await outputCallback(world.toString());\r\n    },\r\n    async ({ lines, outputCallback, pause }) => {\r\n        const clayCoordinates = lines.flatMap(scanLineToClay);\r\n        const world = new World(clayCoordinates);\r\n        let done = false;\r\n        let iteration = 0;\r\n        while (!done) {\r\n            done = world.addWater();\r\n            if (++iteration % 100 === 0) {\r\n                await outputCallback(world.toString(), true);\r\n            } else {\r\n                await pause();\r\n            }\r\n        }\r\n        await outputCallback(world.dryCells, true);\r\n        await outputCallback(world.toString());\r\n    },\r\n    { key: \"reservoir-research\", title: \"Reservoir Research\", stars: 2, embeddedData: \"reservoir-research/reservoir-research\"}\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\nimport { FixedSizeMatrix } from \"../../../support/matrix\";\r\nimport { CCoordinate, Coordinate, directions, directionList } from \"../../../support/geometry\";\r\n\r\nimport wu from \"wu\";\r\n\r\ntype Cell = \".\" | \"|\" | \"#\";\r\n\r\nfunction isCell(s: string): s is Cell {\r\n    return s === \".\" || s === \"|\" || s === \"#\";\r\n}\r\n\r\ninterface WorldConstructor {\r\n    cells?: Cell[][];\r\n    data?: FixedSizeMatrix<Cell>;\r\n    minute: number;\r\n}\r\n\r\nconst worldStates = new Set<string>();\r\nconst worldStateList: string[] = [];\r\nconst worldStateMap = new Map<string, World>();\r\nlet worldStateLoop: string[] = [];\r\n\r\nclass World {\r\n\r\n    public get resourceValue(): number {\r\n        let lumberTally = 0;\r\n        let treeTally = 0;\r\n        const interesting = this.data.data.forEach((e) => {\r\n            if (e === \"|\") {\r\n                treeTally++;\r\n            } else if (e === \"#\") {\r\n                lumberTally++;\r\n            }\r\n        });\r\n        return lumberTally * treeTally;\r\n    }\r\n\r\n    public static fromLines(lines: string[]): World {\r\n        return new World({\r\n            cells: lines.map((line) => line.split(\"\").map((e) => isCell(e) ? e : \".\")),\r\n            minute: 0\r\n        });\r\n    }\r\n    public minute: number;\r\n    private size: CCoordinate;\r\n    private data: FixedSizeMatrix<Cell>;\r\n    private constructor({ cells, data, minute }: WorldConstructor) {\r\n        this.minute = minute;\r\n        if (cells) {\r\n            this.size = new CCoordinate(cells[0].length, cells.length);\r\n            this.data = new FixedSizeMatrix<Cell>(this.size);\r\n            for (let x = 0; x < this.size.x; x++) {\r\n                for (let y = 0; y < this.size.y; y++) {\r\n                    this.data.set({ x, y }, cells[y][x]);\r\n                }\r\n            }\r\n        } else if (data) {\r\n            this.size = new CCoordinate(data.size.x, data.size.y);\r\n            this.data = data;\r\n        } else {\r\n            throw Error();\r\n        }\r\n    }\r\n\r\n    public takeTurns(howMany: number): World {\r\n        let world: World = this;\r\n        if (worldStateLoop.length > 0) {\r\n            // alert(\"Loop length: \" + worldStateLoop.length);\r\n            const loopBaseIndex = worldStateLoop.indexOf(this.toString());\r\n            const targetIndex = (loopBaseIndex + howMany) % worldStateLoop.length;\r\n            // worldStateLoop.map((l) => worldStateMap.get(l)!.resourceValue).forEach((e) => console.log(e));\r\n            return worldStateMap.get(worldStateLoop[targetIndex])!;\r\n        }\r\n        while (howMany-- > 0) {\r\n            const newWorld = new World({ data: world.data.copy(), minute: world.minute + 1 });\r\n            for (let x = 0; x < world.size.x; x++) {\r\n                for (let y = 0; y < world.size.y; y++) {\r\n                    const adjacents = Array.from(world.adjacent({ x, y }));\r\n                    const oldCell = world.data.get({ x, y })!;\r\n                    newWorld.data.set({ x, y }, this.calculateNew(oldCell, adjacents));\r\n                }\r\n            }\r\n            world = newWorld;\r\n            const state = world.toString();\r\n            if (worldStates.has(state)) {\r\n                worldStateLoop = worldStateList.slice(worldStateList.indexOf(state));\r\n                return world.takeTurns(howMany);\r\n            } else {\r\n                worldStates.add(state);\r\n                worldStateList.push(state);\r\n                worldStateMap.set(state, world);\r\n            }\r\n\r\n        }\r\n        return world;\r\n    }\r\n\r\n    public toString() {\r\n        return wu(this.data.overRows()).map((row) => row.join(\"\")).toArray().join(\"\\n\");\r\n    }\r\n\r\n    private calculateNew(old: Cell, adjacents: Cell[]): Cell {\r\n        switch (old) {\r\n            case \".\":\r\n                if (adjacents.filter((e) => e === \"|\").length >= 3) {\r\n                    return \"|\";\r\n                }\r\n                return \".\";\r\n            case \"|\":\r\n                if (adjacents.filter((e) => e === \"#\").length >= 3) {\r\n                    return \"#\";\r\n                }\r\n                return \"|\";\r\n            case \"#\":\r\n                if (adjacents.filter((e) => e === \"#\").length >= 1 && adjacents.filter((e) => e === \"|\").length >= 1) {\r\n                    return \"#\";\r\n                }\r\n                return \".\";\r\n        }\r\n    }\r\n\r\n    private *adjacent(c: Coordinate): Iterable<Cell> {\r\n        for (const direction of directionList) {\r\n            if (direction.sum(c).isInBounds(this.size)) {\r\n                yield this.data.get(direction.sum(c))!;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const entry = entryForFile(\r\n    async ({ lines, outputCallback, isCancelled, pause }) => {\r\n        let world = World.fromLines(lines);\r\n        await outputCallback([\"Initial state\", world.toString()]);\r\n        let iteration = 1;\r\n        while (!isCancelled!()) {\r\n            world = world.takeTurns(1);\r\n            await outputCallback([`Minute ${iteration++}`, world.toString(), world.resourceValue], true);\r\n            await pause();\r\n        }\r\n    },\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const world = World.fromLines(lines);\r\n        await outputCallback([\"Initial state\", world.toString()]);\r\n        const iteration = 1;\r\n        const target = 1000000000;\r\n        const newWorld = world.takeTurns(target);\r\n        await outputCallback([newWorld.resourceValue, newWorld.toString()], true);\r\n        // const turnsPerIteration = 5000;\r\n        // while (!isCancelled!()) {\r\n        //     let subIteration = 0;\r\n        //     const perSub = 10;\r\n        //     while (perSub * subIteration < turnsPerIteration) {\r\n        //         world = world.takeTurns(perSub);\r\n        //         await pause();\r\n        //         subIteration++;\r\n        //     }\r\n        //     await outputCallback([\r\n        //         `Minute ${iteration * turnsPerIteration}/${target}`,\r\n        //         `${iteration * turnsPerIteration / target}`,\r\n        //         world.toString(),\r\n        //         world.resourceValue\r\n        //     ], true);\r\n        //     iteration++;\r\n        // }\r\n    },\r\n    {\r\n        key: \"settlers-of-the-north-pole\",\r\n        title: \"Settlers of the North Pole\",\r\n        stars: 2,\r\n        customComponent: \"pause-and-run\",\r\n        embeddedData: \"settlers-of-the-north-pole/input\"\r\n    }\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\nimport { groupBy } from \"../../../support/sequences\";\r\nimport { Machine, Instruction, OpCode } from \"./chronal-classification\";\r\n\r\nexport const entry = entryForFile(\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const pointer = parseInt(lines[0][4], 10);\r\n        let machine = new Machine([0, 0, 0, 0, 0, 0], pointer);\r\n        const instructions = Instruction.fromLines(lines.slice(1), (s) => s as OpCode);\r\n        let iterations = 0;\r\n        while (machine.isExecutable(instructions.length)) {\r\n            const instruction = instructions[machine.nextInstructionAddress];\r\n            const oldMachine = machine;\r\n            machine = machine.execute(instruction);\r\n            const modVal = (++iterations) % 56197;\r\n            if (modVal <= 30) {\r\n                await outputCallback(`{${oldMachine.nextInstructionAddress}} ${JSON.stringify(oldMachine.registers)} | ${instruction} -> ${JSON.stringify(machine.registers)} => [${machine.instructionPointerRegister}] ${machine.nextInstructionAddress}`);\r\n            } else if (modVal === 31) {\r\n                await outputCallback(null);\r\n            } else if (iterations % 100 === 0) {\r\n                await pause();\r\n            }\r\n            if (isCancelled && isCancelled()) {\r\n                await outputCallback(\"Stopped!\");\r\n                break;\r\n            }\r\n        }\r\n        await outputCallback(`Result: ${machine.registers[0]}`);\r\n    },\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const pointer = parseInt(lines[0][4], 10);\r\n        let machine = new Machine([1, 0, 0, 0, 0, 0], pointer);\r\n        const instructions = Instruction.fromLines(lines.slice(1), (s) => s as OpCode);\r\n        let iterations = 0;\r\n        const print = 30;\r\n        // const iterationBatch = 56197;\r\n        const iterationBatch = 1;\r\n        while (machine.isExecutable(instructions.length)) {\r\n            const instruction = instructions[machine.nextInstructionAddress];\r\n            if (machine.nextInstructionAddress === 1) {\r\n                await outputCallback({registers: machine.registers});\r\n                break;\r\n            }\r\n            const oldMachine = machine;\r\n            machine = machine.execute(instruction);\r\n            const modVal = (++iterations) % iterationBatch;\r\n            if (modVal <= print) {\r\n                await outputCallback(`{${oldMachine.nextInstructionAddress}} ${JSON.stringify(oldMachine.registers)} | ${instruction} -> ${JSON.stringify(machine.registers)} => [${machine.instructionPointerRegister}] ${machine.nextInstructionAddress}`);\r\n            } else if (modVal === print + 1) {\r\n                await outputCallback(null);\r\n            } else if (iterations % 100 === 0) {\r\n                await pause();\r\n            }\r\n            if (isCancelled && isCancelled()) {\r\n                await outputCallback(\"Stopped!\");\r\n                break;\r\n            }\r\n        }\r\n        await outputCallback(`Result: ${machine.registers[0]}`);\r\n\r\n        // by looking at the code, it calculates the sum of divisors; here's the one I used, translated:\r\n        /*\r\n 0 goto 17\r\n 1 b = 1\r\n 2 c = 1\r\n 3 e = b * c\r\n 4 eqrr e = (e == d)\r\n 5 goto 6 + e\r\n 6 goto 8\r\n 7 a = a + b\r\n 8 c++\r\n 9 e = c > d\r\n10 goto 11 + e\r\n11 goto 3\r\n12 b++\r\n13 e = b > d\r\n14 goto 15 + e\r\n15 goto 2\r\n16 exit\r\n17 d = d + 2\r\n18 d = d * d\r\n19 d = 19 * d\r\n20 d = d * 11\r\n21 e = e + 8\r\n22 e = e * 22\r\n23 e = e + 13\r\n24 d = e + d\r\n25 goto 26 + a\r\n26 goto 1\r\n27 e = 27\r\n28 e = e * 28\r\n29 e = e + 29\r\n30 e = e * 30\r\n31 e = e * 14\r\n32 e = e * 32\r\n33 d = e + d\r\n34 a = 0\r\n35 goto 1\r\n        */\r\n\r\n        // the setup of the values is the one in lines 27-34 (the first entry used 17-24); then it's just a question\r\n        // of calculating sum of divisors, I used the console directly, here's the function:\r\n        /*\r\nlet divisorSum = (c) => {\r\n    let sum = 0;\r\n    for (let i = 1; i <= c; i++) {\r\n        if (c % i === 0) {\r\n            sum += i;\r\n        }\r\n    }\r\n    return sum;\r\n}\r\n        */\r\n    },\r\n    {\r\n        key: \"go-with-the-flow\",\r\n        title: \"Go with the flow\",\r\n        stars: 2,\r\n        customComponent: \"pause-and-run\",\r\n        embeddedData: \"go-with-the-flow/go-with-the-flow\"\r\n    }\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\nimport { NotImplementedError } from \"../../../support/error\";\r\nimport { CCoordinate, directions, manhattanDistance, Coordinate, ascendingCompare } from \"../../../support/geometry\";\r\nimport { UnknownSizeField } from \"../../../support/field\";\r\nimport { FixedSizeMatrix } from \"../../../support/matrix\";\r\nimport { calculateDistances } from \"../../../support/labyrinth\";\r\n\r\ntype DirectionGroup = Directions[];\r\ntype Directions = Array<string | DirectionGroup>;\r\n\r\nconst parseGroup = (line: string, index: number): [DirectionGroup, number] => {\r\n    const groups: string[] = [];\r\n    let currentGroup: string[] = [];\r\n    index++;\r\n    let openCount = 0;\r\n    while (index < line.length) {\r\n        const currentChar = line[index];\r\n        if (openCount > 0) {\r\n            currentGroup.push(line[index]);\r\n            if (currentChar === \"(\") {\r\n                openCount++;\r\n            } else if (currentChar === \")\") {\r\n                openCount--;\r\n            }\r\n        } else {\r\n            if (currentChar === \"(\") {\r\n                openCount++;\r\n                currentGroup.push(currentChar);\r\n            } else if (currentChar === \")\") {\r\n                break;\r\n            } else if (currentChar === \"|\") {\r\n                groups.push(currentGroup.join(\"\"));\r\n                currentGroup = [];\r\n            } else {\r\n                currentGroup.push(currentChar);\r\n            }\r\n        }\r\n        index++;\r\n    }\r\n    if (line[index] !== \")\") {\r\n        throw new Error(\"Error while parsing, group not ended\");\r\n    }\r\n    groups.push(currentGroup.join(\"\"));\r\n    return [groups.map((group) => parse(group)), index];\r\n};\r\n\r\nconst isGroup = (d: (string | DirectionGroup)): d is DirectionGroup => {\r\n    return Array.isArray(d);\r\n};\r\n\r\n// if (stateCache) {\r\n//     const serializedCoordinate = serializeCoordinate(state);\r\n//     const serializedGroup = serializeDirectionGroup(firstElement);\r\n//     if (stateCache.has(serializedCoordinate)) {\r\n//         const directionCache = stateCache.get(serializedCoordinate)!;\r\n//         if (directionCache.has(serializedGroup)) {\r\n//             console.log(\"Found in cache!\");\r\n//             const states = directionCache.get(serializedGroup)!;\r\n//             for (const state of states) {\r\n//                 await visitCallback(null, state);\r\n//             }\r\n//             return;\r\n//         }\r\n//     }\r\n// }\r\n\r\n// if (stateCache) {\r\n//     if (!stateCache.has(serializedCoordinate)) {\r\n//         stateCache.set(serializedCoordinate, new Map<string, Coordinate[]>());\r\n//     }\r\n//     stateCache.get(serializedCoordinate)!.set(serializedGroup, states);\r\n// }\r\n\r\nconst bfsVisit = async <T>(\r\n    dirs: Directions,\r\n    index: number,\r\n    visitCallback: (token: string | null, state: T) => Promise<T>,\r\n    argState: T,\r\n    areStateEqual?: (a: T, b: T) => boolean,\r\n): Promise<void> => {\r\n    if (index >= dirs.length) {\r\n        await visitCallback(null, argState);\r\n        return;\r\n    }\r\n    const firstElement = dirs[index];\r\n    if (isGroup(firstElement)) {\r\n        let states: T[] = [];\r\n        for (const group of firstElement) {\r\n            await bfsVisit(group, 0, async (token, state) => {\r\n                const resultState = await visitCallback(token, state);\r\n                if (token === null) {\r\n                    states.push(resultState);\r\n                }\r\n                return resultState;\r\n            }, argState, areStateEqual);\r\n        }\r\n        if (areStateEqual) {\r\n            states = deduplicateStates(states, areStateEqual);\r\n        }\r\n        for (const s of states) {\r\n            await bfsVisit(dirs, index + 1, visitCallback, s, areStateEqual);\r\n        }\r\n    } else {\r\n        await bfsVisit(dirs, index + 1, visitCallback, await visitCallback(firstElement, argState), areStateEqual);\r\n    }\r\n};\r\n\r\nconst deduplicateStates = <T, >(states: T[], areStatesEqual: (a: T, b: T) => boolean): T[] => {\r\n    for (let i = 0; i < states.length; i++) {\r\n        const toKeep = states[i];\r\n        states = states.filter((e, index) => index <= i || !areStatesEqual(toKeep, e));\r\n    }\r\n    return states;\r\n};\r\n\r\nconst dfsVisit = async <T>(\r\n    dirs: Directions,\r\n    visitCallback: (token: string | null, state: T) => Promise<T>,\r\n    argState: T\r\n): Promise<void> => {\r\n    if (dirs.length === 0) {\r\n        await visitCallback(null, argState);\r\n        return;\r\n    }\r\n    const firstElement = dirs[0];\r\n    if (isGroup(firstElement)) {\r\n        for (const group of firstElement) {\r\n            await dfsVisit(group, async (token, state) => {\r\n                if (token === null) {\r\n                    await dfsVisit(dirs.slice(1), visitCallback, state);\r\n                    return state;\r\n                }\r\n                return await visitCallback(token, state);\r\n            }, argState);\r\n        }\r\n    } else {\r\n        await dfsVisit(dirs.slice(1), visitCallback, await visitCallback(firstElement, argState));\r\n    }\r\n};\r\n\r\nconst parse = (line: string): Directions => {\r\n    if (line.startsWith(\"^\")) {\r\n        line = line.slice(1);\r\n    }\r\n    if (line.endsWith(\"$\")) {\r\n        line = line.slice(0, -1);\r\n    }\r\n    let i = 0;\r\n    const dirs: Directions = [];\r\n    while (i < line.length) {\r\n        if (line[i] !== \"(\") {\r\n            dirs.push(line[i]);\r\n        } else {\r\n            const [group, endIndex] = parseGroup(line, i);\r\n            i = endIndex;\r\n            dirs.push(group);\r\n        }\r\n        i++;\r\n    }\r\n    return dirs;\r\n};\r\n\r\nconst directionMapper = (a: string): CCoordinate => {\r\n    switch (a.toUpperCase()) {\r\n        case \"W\":\r\n            return directions.left;\r\n        case \"E\":\r\n            return directions.right;\r\n        case \"N\":\r\n            return directions.up;\r\n        case \"S\":\r\n            return directions.down;\r\n        default:\r\n            throw new Error(\"Invalid direction \" + a);\r\n    }\r\n};\r\n\r\ninterface Door {\r\n    from: Coordinate;\r\n    to: Coordinate;\r\n}\r\n\r\nconst toRoomCoordinates = (coordinate: Coordinate): Coordinate => {\r\n    return {\r\n        x: coordinate.x * 2,\r\n        y: coordinate.y * 2\r\n    };\r\n};\r\n\r\nconst buildRoom = (field: UnknownSizeField<\"#\">, doors: Door[]): FixedSizeMatrix<string> => {\r\n    const baseMatrix = field.toMatrix();\r\n    const resultMatrix = new FixedSizeMatrix<string>({ x: baseMatrix.size.x * 2 + 1, y: baseMatrix.size.y * 2 + 1 });\r\n    resultMatrix.fill(\"#\");\r\n    resultMatrix.setDelta(baseMatrix.delta.sum(baseMatrix.delta).sum({ x: -1, y: -1 }));\r\n    baseMatrix.onEveryCell((coordinate, cell) => {\r\n        if (cell) {\r\n            resultMatrix.set(toRoomCoordinates(coordinate), \".\");\r\n        }\r\n    }\r\n    );\r\n    doors.forEach((door) => {\r\n        const from = toRoomCoordinates(door.from);\r\n        const to = toRoomCoordinates(door.to);\r\n        const dx = (to.x - from.x) / 2;\r\n        const dy = (to.y - from.y) / 2;\r\n        const cell = dy === 0 ? \"|\" : \"-\";\r\n        resultMatrix.set(new CCoordinate(dx, dy).sum(from), cell);\r\n    });\r\n    return resultMatrix;\r\n};\r\n\r\nexport const aRegularMap = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n\r\n        const field = new UnknownSizeField<\"#\">();\r\n        field.set({ x: 0, y: 0 }, \"#\");\r\n        const parsed = parse(lines[0]);\r\n        let newCellCount = 0;\r\n        let alreadyVisited = 0;\r\n        let nullTokens = 0;\r\n        const doors: Door[] = [];\r\n        await bfsVisit(parsed, 0, async (token, state) => {\r\n            if (token === null) {\r\n                nullTokens++;\r\n                if (nullTokens > 0 && nullTokens % 1000 === 0) {\r\n                    await outputCallback(`Closing group ${nullTokens / 1000}k`);\r\n                }\r\n                return state;\r\n            }\r\n            const direction = directionMapper(token);\r\n            const newPosition = direction.sum(state);\r\n            doors.push({ from: state, to: newPosition });\r\n            if (field.get(newPosition) === null) {\r\n                newCellCount++;\r\n                field.set(newPosition, \"#\");\r\n                if (newCellCount > 0 && newCellCount % 100 === 0) {\r\n                    const matrix = field.toMatrix();\r\n                    await outputCallback(matrix.toString((e) => e || \".\"));\r\n                    await outputCallback(matrix.size);\r\n                }\r\n            } else {\r\n                alreadyVisited++;\r\n                if (alreadyVisited > 0 && alreadyVisited % 1000 === 0) {\r\n                    await outputCallback(`Already visited rising to ${alreadyVisited / 1000}k`);\r\n                }\r\n            }\r\n            return newPosition;\r\n        }, { x: 0, y: 0 }\r\n            , (a, b) => manhattanDistance(a, b) === 0\r\n        );\r\n\r\n        const resultRoom = buildRoom(field, doors);\r\n\r\n        await outputCallback(resultRoom.toString((e) => e || \" \"));\r\n        const distances = calculateDistances(\r\n            (coordinate) => field.get(coordinate),\r\n            (start, end) => (start.distance || 0) + manhattanDistance(start.coordinate, end),\r\n            (c) => {\r\n                const from = doors.filter((d) => manhattanDistance(d.from, c) === 0).map((e) => e.to);\r\n                const to = doors.filter((d) => manhattanDistance(d.to, c) === 0).map((e) => e.from);\r\n                const all = [...from, ...to];\r\n                const unique = new Set<string>();\r\n                const result: Coordinate[] = [];\r\n                all.forEach((i) => {\r\n                    const key = JSON.stringify({ x: i.x, y: i.y });\r\n                    if (unique.has(key)) {\r\n                        return;\r\n                    }\r\n                    unique.add(key);\r\n                    result.push(i);\r\n                });\r\n                return result;\r\n            },\r\n            { x: 0, y: 0 }\r\n        );\r\n\r\n        const maxDistance = distances.list.map((e) => e.distance).reduce((acc, next) => Math.max(acc || 0, next || 0));\r\n        await outputCallback(maxDistance);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const field = new UnknownSizeField<\"#\">();\r\n        field.set({ x: 0, y: 0 }, \"#\");\r\n        const parsed = parse(lines[0]);\r\n        let newCellCount = 0;\r\n        let alreadyVisited = 0;\r\n        let nullTokens = 0;\r\n        const doors: Door[] = [];\r\n        await bfsVisit(parsed, 0, async (token, state) => {\r\n            if (token === null) {\r\n                nullTokens++;\r\n                if (nullTokens > 0 && nullTokens % 1000 === 0) {\r\n                    await outputCallback(`Closing group ${nullTokens / 1000}k`);\r\n                }\r\n                return state;\r\n            }\r\n            const direction = directionMapper(token);\r\n            const newPosition = direction.sum(state);\r\n            doors.push({ from: state, to: newPosition });\r\n            if (field.get(newPosition) === null) {\r\n                newCellCount++;\r\n                field.set(newPosition, \"#\");\r\n                if (newCellCount > 0 && newCellCount % 100 === 0) {\r\n                    const matrix = field.toMatrix();\r\n                    await outputCallback(matrix.toString((e) => e || \".\"));\r\n                    await outputCallback(matrix.size);\r\n                }\r\n            } else {\r\n                alreadyVisited++;\r\n                if (alreadyVisited > 0 && alreadyVisited % 1000 === 0) {\r\n                    await outputCallback(`Already visited rising to ${alreadyVisited / 1000}k`);\r\n                }\r\n            }\r\n            return newPosition;\r\n        }, { x: 0, y: 0 }\r\n            , (a, b) => manhattanDistance(a, b) === 0\r\n        );\r\n\r\n        const resultRoom = buildRoom(field, doors);\r\n\r\n        await outputCallback(resultRoom.toString((e) => e || \" \"));\r\n        const distances = calculateDistances(\r\n            (coordinate) => field.get(coordinate),\r\n            (start, end) => (start.distance || 0) + manhattanDistance(start.coordinate, end),\r\n            (c) => {\r\n                const from = doors.filter((d) => manhattanDistance(d.from, c) === 0).map((e) => e.to);\r\n                const to = doors.filter((d) => manhattanDistance(d.to, c) === 0).map((e) => e.from);\r\n                const all = [...from, ...to];\r\n                const unique = new Set<string>();\r\n                const result: Coordinate[] = [];\r\n                all.forEach((i) => {\r\n                    const key = JSON.stringify({ x: i.x, y: i.y });\r\n                    if (unique.has(key)) {\r\n                        return;\r\n                    }\r\n                    unique.add(key);\r\n                    result.push(i);\r\n                });\r\n                return result;\r\n            },\r\n            { x: 0, y: 0 }\r\n        );\r\n\r\n        const interestingDistances = distances\r\n            .list\r\n            .map((e) => e.distance)\r\n            .filter((d) => (d !== null && d >= 1000))\r\n            .length;\r\n        await outputCallback(interestingDistances);\r\n    },\r\n    { key: \"a-regular-map\", title: \"A Regular Map\", stars: 2, embeddedData: \"a-regular-map/index\" }\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\nimport { Machine, Instruction, OpCode, MutableMachine } from \"./chronal-classification\";\r\n\r\nexport const chronalConversion = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const pointer = parseInt(lines[0][4], 10);\r\n        const machine = new MutableMachine([103548, 0, 0, 0, 0, 0], pointer);\r\n        const instructions = Instruction.fromLines(lines.slice(1), (s) => s as OpCode);\r\n        while (machine.isExecutable(instructions.length)) {\r\n            const instruction = instructions[machine.nextInstructionAddress];\r\n            machine.execute(instruction);\r\n            if (machine.nextInstructionAddress === instructions.length - 3) {\r\n                await outputCallback(machine.registers[4]);\r\n            }\r\n        }\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const pointer = parseInt(lines[0][4], 10);\r\n        const uniques = new Set<number>();\r\n        let lastFour: number = 0;\r\n        let iterations = 0;\r\n        const machine = new MutableMachine([103549, 0, 0, 0, 0, 0], pointer);\r\n        const instructions = Instruction.fromLines(lines.slice(1), (s) => s as OpCode);\r\n        if (instructions[28].code !== \"eqrr\") {\r\n            await outputCallback(\"Sorry, this solution is hardcoded on my input\");\r\n            throw new Error(\"Sorry, this solution is hardcoded on my input\");\r\n        }\r\n        while (machine.isExecutable(instructions.length)) {\r\n            const instruction = instructions[machine.nextInstructionAddress];\r\n            if (instruction.lineNumber === 28) {\r\n                if (++iterations % 10 === 0) {\r\n                    await outputCallback(`New comparison, ${iterations.toString().padStart(6, \" \")}`);\r\n                }\r\n                const fourValue = machine.registers[4];\r\n                if (uniques.has(fourValue)) {\r\n                    break;\r\n                }\r\n                uniques.add(fourValue);\r\n                lastFour = fourValue;\r\n            }\r\n            machine.execute(instruction);\r\n        }\r\n        await outputCallback(\"Last four: \" + lastFour);\r\n    },\r\n    { key: \"chronal-conversion\", title: \"Chronal Conversion\", stars: 2, }\r\n);\r\n","import { Coordinate, sumCoordinate, manhattanDistance, getSurrounding, getBoundaries, CCoordinate, isInBounds } from \"../../../support/geometry\";\r\nimport { FixedSizeMatrix } from \"../../../support/matrix\";\r\nimport wu from \"wu\";\r\n\r\nimport Graph from \"node-dijkstra\";\r\nimport { entryForFile } from \"../../entry\";\r\n\r\ninterface Input {\r\n    target: Coordinate;\r\n    depth: number;\r\n}\r\n\r\nconst parseLines = (lines: string[]): Input => {\r\n    const [x, y] = lines[1].split(\" \")[1].split(\",\").map((e) => parseInt(e, 10));\r\n    return {\r\n        depth: parseInt(lines[0].split(\" \")[1], 10),\r\n        target: { x, y }\r\n    };\r\n};\r\n\r\nexport const buildMatrix = (input: Input, delta?: number | Coordinate): FixedSizeMatrix<number> => {\r\n    if (!delta) {\r\n        delta = { x: 1, y: 1 };\r\n    } else {\r\n        if ((delta as Coordinate).x === undefined) {\r\n            const nDelta = delta as number;\r\n            delta = { x: nDelta, y: nDelta };\r\n        }\r\n    }\r\n    return new FixedSizeMatrix<number>(sumCoordinate(input.target, delta as Coordinate));\r\n};\r\n\r\nexport const fillMatrix = (matrix: FixedSizeMatrix<number>, input: Input): void => {\r\n    for (let x = 0; x < matrix.size.x; x++) {\r\n        for (let y = 0; y < matrix.size.y; y++) {\r\n            if (x === 0 && y === 0) {\r\n                matrix.set({ x, y }, input.depth);\r\n            } else if (manhattanDistance({ x, y }, input.target) === 0) {\r\n                matrix.set(input.target, input.depth);\r\n            } else if (x === 0) {\r\n                matrix.set({ x, y }, erode(y * 48271, input));\r\n            } else if (y === 0) {\r\n                matrix.set({ x, y }, erode(x * 16807, input));\r\n            } else {\r\n                matrix.set({ x, y }, erode(matrix.get({ x: x - 1, y })! * matrix.get({ x, y: y - 1 })!, input));\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nconst erode = (n: number, input: Input): number => {\r\n    return (n + input.depth) % 20183;\r\n};\r\n\r\nexport type ErosionLevel = 0 | 1 | 2;\r\n\r\nconst createErosionMatrix = (matrix: FixedSizeMatrix<number>): FixedSizeMatrix<ErosionLevel> => {\r\n    const newMatrix = new FixedSizeMatrix<ErosionLevel>(matrix.size);\r\n    matrix.onEveryCell((coordinate, cell) => {\r\n        if (cell !== undefined) {\r\n            newMatrix.set(coordinate, (cell % 3) as ErosionLevel);\r\n        }\r\n    });\r\n    return newMatrix;\r\n};\r\n\r\nexport type Tool = \"climb\" | \"light\" | \"none\";\r\n\r\nexport interface Node { coordinate: Coordinate; tool: Tool; }\r\n\r\nexport const serializeNode = ({ coordinate, tool }: Node): string => `${coordinate.x},${coordinate.y},${tool}`;\r\nexport const deserializeNode = (serialized: string): Node => {\r\n    const [x, y, tool] = serialized.split(\",\");\r\n    if (tool !== \"climb\" && tool !== \"light\" && tool !== \"none\") {\r\n        throw new Error(\"Invalid tool\");\r\n    }\r\n    return {\r\n        coordinate: {\r\n            x: parseInt(x, 10),\r\n            y: parseInt(y, 10)\r\n        },\r\n        tool\r\n    };\r\n};\r\n\r\nconst getValidTools = (erosionLevel: ErosionLevel): Tool[] => {\r\n    switch (erosionLevel) {\r\n        case 0:\r\n            return [\"climb\", \"light\"];\r\n        case 1:\r\n            return [\"climb\", \"none\"];\r\n        case 2:\r\n            return [\"light\", \"none\"];\r\n    }\r\n};\r\n\r\nconst tools: Tool[] = [\"climb\", \"light\", \"none\"];\r\n\r\ninterface NodePaths { [key: string]: number; }\r\n\r\ninterface PathNode {\r\n    serialized: string;\r\n    node: Node;\r\n    distance: number | null;\r\n}\r\n\r\nclass CustomGraph {\r\n    private readonly _nodeMap = new Map<string, NodePaths>();\r\n\r\n    public addNode(node: Node, neighbours: Array<{ node: Node, weight: number }>) {\r\n        this._nodeMap.set(\r\n            serializeNode(node),\r\n            neighbours.reduce((acc: NodePaths, next) => {\r\n                acc[serializeNode(next.node)] = next.weight;\r\n                return acc;\r\n            }, {})\r\n        );\r\n    }\r\n\r\n    public path(startNode: Node, endNode: Node, options?: { cost?: boolean }):\r\n        number | null {\r\n        const toVisit: PathNode[] = wu(this._nodeMap.keys()).map((key) => ({\r\n            serialized: key,\r\n            node: deserializeNode(key),\r\n            distance: null\r\n        })).toArray();\r\n        const endSerialized = serializeNode(endNode);\r\n        wu(toVisit)\r\n            .filter((e) =>\r\n                e.node.tool === startNode.tool &&\r\n                manhattanDistance(e.node.coordinate, startNode.coordinate) === 0\r\n            ).forEach((e) => e.distance = 0);\r\n        while (toVisit.length > 0) {\r\n            const candidateDistance = wu(toVisit)\r\n                .filter((n) => n.distance !== null)\r\n                .map((d) => d.distance)\r\n                .reduce((acc, next) => Math.min(acc!, next!))\r\n                ;\r\n            if (candidateDistance === null) {\r\n                break;\r\n            }\r\n            const candidateNode =\r\n                wu(toVisit.map((e, i) => ({ e, i })))\r\n                    .find((e) => e.e.distance === candidateDistance);\r\n            if (candidateNode === undefined || candidateNode.e.distance === null) {\r\n                throw new Error(\"Could not find node :(\");\r\n            }\r\n            if (endSerialized === candidateNode.e.serialized) {\r\n                return candidateNode.e.distance;\r\n            }\r\n            const neighbours = this._nodeMap.get(candidateNode.e.serialized);\r\n            if (neighbours) {\r\n                Object.keys(neighbours).forEach((key) => {\r\n                    const serializedNode = key;\r\n                    const toVisitNode = wu(toVisit).find((node) => node.serialized === serializedNode);\r\n                    if (toVisitNode !== undefined) {\r\n                        toVisitNode.distance = candidateNode.e.distance! + neighbours[key];\r\n                        if (toVisitNode.serialized === endSerialized) {\r\n                            return toVisitNode.distance;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            toVisit.splice(candidateNode.i, 1);\r\n        }\r\n        return null;\r\n    }\r\n\r\n}\r\n\r\nexport const matrixSerializer = (e: 0 | 1 | 2 | undefined): \".\" | \"=\" | \"|\" | \"X\" => {\r\n    switch (e) {\r\n        case 0:\r\n            return \".\";\r\n        case 1:\r\n            return \"=\";\r\n        case 2:\r\n            return \"|\";\r\n        default:\r\n            return \"X\";\r\n    }\r\n};\r\nexport const modeMaze = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const input = parseLines(lines);\r\n        const erosionMatrix = createErosionMatrixFromInput(input);\r\n        await outputCallback(erosionMatrix.toString(matrixSerializer));\r\n        let sum = 0;\r\n        erosionMatrix.onEveryCell((coordinate, cell) => {\r\n            sum = sum + (cell || 0);\r\n        });\r\n        await outputCallback(sum);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const input = parseLines(lines);\r\n        const erosionMatrix = createErosionMatrixFromInput(input);\r\n\r\n        const resultPath = calculatePath(erosionMatrix, input.target);\r\n\r\n        for (const step of resultPath.path) {\r\n            await outputCallback(step);\r\n        }\r\n        await outputCallback(resultPath.cost);\r\n\r\n        new Map<string, number>().keys();\r\n    },\r\n    { key: \"mode-maze\", title: \"Mode Maze\", stars: 2, }\r\n);\r\n\r\nexport function createErosionMatrixFromInput(input: Input, delta: number | Coordinate = 100) {\r\n    const matrix = buildMatrix(input, delta);\r\n    fillMatrix(matrix, input);\r\n    const erosionMatrix = createErosionMatrix(matrix);\r\n    return erosionMatrix;\r\n}\r\n\r\nexport function calculatePath(\r\n    erosionMatrix: FixedSizeMatrix<ErosionLevel>,\r\n    target: Coordinate\r\n): { path: string[], cost: number } {\r\n    const weightedGraph = new Graph();\r\n    erosionMatrix.onEveryCell((coordinate, erosionLevel) => {\r\n        if (erosionLevel !== undefined) {\r\n            const validTools = getValidTools(erosionLevel);\r\n            validTools.forEach((tool) => {\r\n                const neighbours = getSurrounding(coordinate);\r\n                const neighbourNodes: Array<{\r\n                    node: Node;\r\n                    weight: number;\r\n                }> = neighbours.map((nCoord) => {\r\n                    const nErosion = erosionMatrix.get(nCoord);\r\n                    if (nErosion !== undefined) {\r\n                        const nTools = getValidTools(nErosion);\r\n                        if (nTools.indexOf(tool) >= 0) {\r\n                            return {\r\n                                node: {\r\n                                    coordinate: nCoord,\r\n                                    tool\r\n                                },\r\n                                weight: 1\r\n                            };\r\n                        }\r\n                    }\r\n                    return null;\r\n                }).filter((e) => e !== null)\r\n                    .map((e) => e!);\r\n                validTools.forEach((otherTool) => {\r\n                    if (otherTool !== tool) {\r\n                        neighbourNodes.push({ node: { coordinate, tool: otherTool }, weight: 7 });\r\n                    }\r\n                });\r\n                weightedGraph.addNode(serializeNode({ coordinate, tool }), neighbourNodes.reduce((acc: {\r\n                    [key: string]: number;\r\n                },                                                                                next) => {\r\n                    acc[serializeNode(next.node)] = next.weight;\r\n                    return acc;\r\n                }, {}));\r\n            });\r\n        }\r\n    });\r\n    const resultPath =\r\n        weightedGraph.path(\r\n            serializeNode({ coordinate: { x: 0, y: 0 }, tool: \"light\" }),\r\n            serializeNode({ coordinate: target, tool: \"light\" }),\r\n            { cost: true }\r\n        );\r\n    return resultPath as { path: string[], cost: number };\r\n}\r\n","import { entryForFile } from \"../../entry\";\r\nimport { Coordinate, Coordinate3d, euclidean3dDistance, manhattanDistance } from \"../../../support/geometry\";\r\nimport { hexManhattanDistance } from \"../../../support/hex-geometry\";\r\n\r\ninterface NanobotInfo {\r\n    coordinate: Coordinate3d;\r\n    radius: number;\r\n}\r\n\r\nconst parseLines = (lines: string[]): NanobotInfo[] => {\r\n    return lines.map((line) => {\r\n        const [posToken, rToken] = line.split(\", \");\r\n        const [x, y, z] = posToken.split(\"=\")[1].slice(1, -1).split(\",\").map((e) => parseInt(e, 10));\r\n        const radius = parseInt(rToken.split(\"=\")[1], 10);\r\n        return {\r\n            coordinate: {x, y, z},\r\n            radius\r\n        };\r\n    });\r\n};\r\n\r\nexport const experimentalEmergencyTransportation = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const nanobotInfo = parseLines(lines);\r\n        await outputCallback(nanobotInfo);\r\n        const bestNanobot = nanobotInfo.reduce((acc, next) => {\r\n            if (acc.radius > next.radius) {\r\n                return acc;\r\n            } else {\r\n                return next;\r\n            }\r\n        });\r\n\r\n        const nanobotsInRange = nanobotInfo\r\n            .map((nanobot) => ({\r\n                bot: nanobot.coordinate,\r\n                r: nanobot.radius,\r\n                distance: manhattanDistance(nanobot.coordinate, bestNanobot.coordinate)\r\n            }))\r\n            .filter((e) => e.distance <= bestNanobot.radius)\r\n            ;\r\n        await outputCallback(nanobotsInRange.length);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const nanobotInfo = parseLines(lines);\r\n        const distanceRanges = nanobotInfo.map((e) => ({\r\n            distance: manhattanDistance({x: 0, y: 0, z: 0}, e.coordinate),\r\n            radius: e.radius\r\n        })).map((e) => ({\r\n            start: Math.max(0, e.distance - e.radius),\r\n            end: e.distance + e.radius\r\n        }));\r\n        const segments = distanceRanges.flatMap((e) => [\r\n            {pos: e.start, value: 1},\r\n            {pos: e.end, value: -1}\r\n        ]).sort((a, b) => a.pos - b.pos);\r\n        let maxCount = 0;\r\n        let currentCount = 0;\r\n        let bestPos = null;\r\n        let bestEnd = null;\r\n        let updateBestEnd = false;\r\n        segments.forEach((e) => {\r\n            currentCount += e.value;\r\n            if (currentCount > maxCount) {\r\n                updateBestEnd = true;\r\n                maxCount = currentCount;\r\n                bestPos = e.pos;\r\n            } else if (updateBestEnd) {\r\n                bestEnd = e.pos;\r\n                updateBestEnd = false;\r\n            }\r\n        });\r\n        await outputCallback({bestPos, bestEnd});\r\n    },\r\n    { key: \"experimental-emergency-transportation\", title: \"Experimental Emergency Transportation\", stars: 2, }\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\n\r\ninterface Abilities {\r\n    type: AbilityType;\r\n    damageType: string;\r\n}\r\n\r\ntype AbilityType = \"immune\" | \"weak\";\r\n\r\ninterface Group {\r\n    units: number;\r\n    hp: number;\r\n    damage: number;\r\n    damageType: string;\r\n    initiative: number;\r\n    abilities: Abilities[];\r\n    army: string;\r\n}\r\n\r\ninterface Army {\r\n    name: string;\r\n    groups: Group[];\r\n}\r\n\r\ninterface FightOrder {\r\n    group: Group;\r\n    target: Group | null;\r\n}\r\n\r\nconst fillWithTarget = (groups: Group[]): FightOrder[] => {\r\n    const targetable = [...groups];\r\n    return groups.map((group) => {\r\n        const candidates = targetable\r\n            .map((g, index) => ({ group: g, index }))\r\n            .filter((g) => g.group.army !== group.army)\r\n            .map((g) => ({\r\n                group: g.group,\r\n                damage: getDamage(group, g.group),\r\n                index: g.index\r\n            }))\r\n            .filter((e) => e.damage > 0)\r\n            .sort((a, b) => (b.damage - a.damage));\r\n\r\n\r\n        const target = candidates.length === 0 ? null : candidates[0];\r\n        if (target !== null) {\r\n            targetable.splice(target.index, 1);\r\n        }\r\n        return {\r\n            group,\r\n            target: target !== null ? target.group : null\r\n        };\r\n    });\r\n};\r\n\r\nconst getFightOrder = (armies: Army[]): FightOrder[] => {\r\n    const chooseOrder = armies.flatMap((army) => army.groups).map((g) => ({\r\n        effectivePower: getEffectivePower(g),\r\n        group: g\r\n    })).sort((a, b) => {\r\n        if (a.effectivePower === b.effectivePower) {\r\n            return b.group.initiative - a.group.initiative;\r\n        }\r\n        return b.effectivePower - a.effectivePower;\r\n    });\r\n    const withTarget = fillWithTarget(chooseOrder.map((e) => e.group));\r\n    return withTarget.sort((a, b) => b.group.initiative - a.group.initiative);\r\n};\r\n\r\nconst getEffectivePower = (group: Group): number => {\r\n    return group.units * group.damage;\r\n};\r\n\r\nconst getDamage = (group: Group, target: Group): number => {\r\n    const immunities = target.abilities.filter((a) => a.type === \"immune\").map((e) => e.damageType);\r\n    if (immunities.indexOf(group.damageType) >= 0) {\r\n        return 0;\r\n    }\r\n    const basePower = getEffectivePower(group);\r\n    const weaknesses = target.abilities.filter((a) => a.type === \"weak\").map((e) => e.damageType);\r\n    if (weaknesses.indexOf(group.damageType) >= 0) {\r\n        return basePower * 2;\r\n    }\r\n    return basePower;\r\n};\r\n\r\nconst fightRound = (armies: Army[]): void => {\r\n    const fightOrder = getFightOrder(armies);\r\n    fightOrder.forEach((element) => {\r\n        if (element.group.units > 0 && element.target !== null) {\r\n            const damage = getDamage(element.group, element.target);\r\n            element.target.units -= Math.max(Math.floor(damage / element.target.hp), 0);\r\n        }\r\n    });\r\n    armies.forEach((army) => army.groups = army.groups.filter((e) => e.units > 0));\r\n};\r\n\r\nconst parseAbilities = (section: string): Abilities[] => {\r\n    const singleSections = section.split(\"; \");\r\n    return singleSections.flatMap((single) => {\r\n        const tokens = single.split(\" \");\r\n        const type = tokens[0];\r\n        const damageTypes = tokens.slice(2).map((e) => e.endsWith(\",\") ? e.slice(0, -1) : e);\r\n        return damageTypes.map((damageType) => {\r\n            return {\r\n                type: type as AbilityType,\r\n                damageType\r\n            };\r\n        });\r\n    });\r\n};\r\n\r\nconst parseGroups = (lines: string[], army: string): Group[] => {\r\n    return lines.map((line) => {\r\n        const tokens = line.split(\" \");\r\n        const units = parseInt(tokens[0], 10);\r\n        const hp = parseInt(tokens[tokens.indexOf(\"hit\") - 1], 10);\r\n        const damageWordIndex = tokens.lastIndexOf(\"damage\");\r\n        const damage = parseInt(tokens[damageWordIndex - 2], 10);\r\n        const damageType = tokens[damageWordIndex - 1];\r\n        const initiativeIndex = tokens.lastIndexOf(\"initiative\") + 1;\r\n        const initiative = parseInt(tokens[initiativeIndex], 10);\r\n        const abilitySection = line.indexOf(\"(\") >= 0 ? line.slice(line.indexOf(\"(\") + 1, line.indexOf(\")\")) : \"\";\r\n        return {\r\n            units,\r\n            hp,\r\n            damage,\r\n            initiative,\r\n            damageType,\r\n            abilities: parseAbilities(abilitySection),\r\n            army\r\n        };\r\n    });\r\n};\r\n\r\nconst parseLines = (lines: string[]): Army[] => {\r\n    return lines.join(\"\\n\").split(\"\\n\\n\").map((rawArmy) => {\r\n        const armyLines = rawArmy.split(\"\\n\");\r\n        const name = armyLines[0].trim().slice(0, -1);\r\n        return {\r\n            name,\r\n            groups: parseGroups(armyLines.slice(1), name)\r\n        };\r\n    });\r\n};\r\n\r\nexport const serialize = (armies: Army[]): string => {\r\n    return armies.map((a) => [a.name + \":\"].concat(\r\n        a.groups\r\n            .map((g) => g.units)\r\n            .map((u, i) => `Group ${i} contains ${u} units`)\r\n    ).join(\"\\n\")).join(\"\\n\");\r\n};\r\n\r\nexport const boostArmy = (army: Army, amount: number) => {\r\n    army.groups.forEach((group) => group.damage += amount);\r\n};\r\n\r\nconst countUnits = (armies: Army[]): number => {\r\n    return armies.reduce((acc, next) => acc + next.groups.reduce((a, n) => a + n.units, 0), 0);\r\n};\r\n\r\nexport const immuneSystemSimulator20XX = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const armies = parseLines(lines);\r\n        await outputCallback(serialize(armies));\r\n        while (armies.filter((a) => a.groups.length > 0).length > 1) {\r\n            fightRound(armies);\r\n            await outputCallback(serialize(armies));\r\n        }\r\n        const winningArmy = armies.filter((e) => e.groups.length > 0)[0];\r\n        await outputCallback(`Army ${winningArmy.name} won with ${winningArmy.groups.reduce((acc, next) => acc + next.units, 0)} units`);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const armies = parseLines(lines);\r\n        let hasImmuneWon = false;\r\n        const immuneSystemArmyName = \"Immune System\";\r\n        let boostingBy = 0;\r\n        while (!hasImmuneWon) {\r\n            let isDraw = false;\r\n            boostingBy++;\r\n            const clonedArmies = armies.map((army) => ({\r\n                ...army,\r\n                groups: army.groups.map((group) => ({ ...group }))\r\n            }));\r\n            boostArmy(clonedArmies.filter((army) => army.name === immuneSystemArmyName)[0], boostingBy);\r\n            while (clonedArmies.filter((a) => a.groups.length > 0).length > 1) {\r\n                const lastUnits = countUnits(clonedArmies);\r\n                fightRound(clonedArmies);\r\n                const newUnits = countUnits(clonedArmies);\r\n                if (lastUnits === newUnits) {\r\n                    isDraw = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (isDraw) {\r\n                await outputCallback(\"Draw!\");\r\n                continue;\r\n            }\r\n            const winningArmy = clonedArmies.filter((e) => e.groups.length > 0)[0];\r\n            hasImmuneWon = winningArmy.name === immuneSystemArmyName;\r\n            if (boostingBy % 1 === 0) {\r\n                await outputCallback(boostingBy);\r\n                await outputCallback(`${winningArmy.name} won by ${countUnits([winningArmy])} units`);\r\n            }\r\n        }\r\n        await outputCallback(\"Min boost: \" + boostingBy);\r\n    },\r\n    { key: \"immune-system-simulator-20xx\", title: \"Immune System Simulator 20XX\", stars: 2, }\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\nimport { Stack } from \"linq-typescript\";\r\nimport wu from \"wu\";\r\n\r\ninterface Coordinate {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n    t: number;\r\n}\r\n\r\nconst manhattanDistance = (a: Coordinate, b: Coordinate) => [\r\n    (e: Coordinate) => e.x,\r\n    (e: Coordinate) => e.y,\r\n    (e: Coordinate) => e.z,\r\n    (e: Coordinate) => e.t\r\n].map((e) => Math.abs(e(a) - e(b))).reduce((acc, next) => acc + next);\r\n\r\nconst parseLines = (lines: string[]): Coordinate[] => {\r\n    return lines.map(deserializeNode);\r\n};\r\n\r\nconst deserializeNode = (line: string): Coordinate => {\r\n        const [x, y, z, t] = line.trim().split(\",\").map((e) => parseInt(e, 10));\r\n        return { x, y, z, t };\r\n};\r\n\r\nclass Graph {\r\n    private readonly nodeMap: Map<string, Set<string>> = new Map<string, Set<string>>();\r\n\r\n    public addNode(node: Coordinate): void {\r\n        const key = this.serializeNode(node);\r\n        if (!this.nodeMap.has(key)) {\r\n            this.nodeMap.set(key, new Set<string>());\r\n        }\r\n    }\r\n\r\n    public addEdge(a: Coordinate, b: Coordinate): void {\r\n        this.addDirectEdge(a, b);\r\n        this.addDirectEdge(b, a);\r\n    }\r\n\r\n    public visit(a: Coordinate | string): Coordinate[] {\r\n        if (typeof a === \"string\") {\r\n            a = this.deserializeNode(a);\r\n        }\r\n        const visited = new Set<string>();\r\n        const toVisit = new Stack<string>();\r\n        toVisit.push(this.serializeNode(a));\r\n        while (true) {\r\n            const next = toVisit.pop();\r\n            if (next === undefined) {\r\n                break;\r\n            }\r\n            if (visited.has(next)) {\r\n                continue;\r\n            }\r\n            visited.add(next);\r\n            const neighbours = this.nodeMap.get(next) || new Set<string>();\r\n            neighbours.forEach((neighbour) => {\r\n                if (!visited.has(neighbour)) {\r\n                    toVisit.push(neighbour);\r\n                }\r\n            });\r\n        }\r\n        return wu(visited.values()).map((e) => this.deserializeNode(e)).toArray();\r\n    }\r\n\r\n    public findConstellations(): Coordinate[][] {\r\n        const allNodes = [...this.nodeMap.keys()];\r\n        const toVisit = new Stack<string>(allNodes);\r\n        const visited = new Set<string>();\r\n        const constellations: Coordinate[][] = [];\r\n        while (true) {\r\n            const next = toVisit.pop();\r\n            if (next === undefined) {\r\n                break;\r\n            }\r\n            if (visited.has(next)) {\r\n                continue;\r\n            }\r\n            const constellation = this.visit(next);\r\n            constellation.forEach((e) => visited.add(this.serializeNode(e)));\r\n            constellations.push(constellation);\r\n        }\r\n        return constellations;\r\n    }\r\n\r\n    private serializeNode(node: Coordinate): string {\r\n        return `${node.x},${node.y},${node.z},${node.t}`;\r\n    }\r\n\r\n    private deserializeNode(line: string): Coordinate {\r\n        return deserializeNode(line);\r\n    }\r\n\r\n    private getNodeList(a: Coordinate): Set<string> {\r\n        return this.nodeMap.get(this.serializeNode(a))!;\r\n    }\r\n\r\n    private addDirectEdge(a: Coordinate, b: Coordinate): void {\r\n        this.addNode(a);\r\n        const nodeList = this.getNodeList(a);\r\n        nodeList.add(this.serializeNode(b));\r\n    }\r\n}\r\n\r\nexport const fourDimensionalAdventure = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const points = parseLines(lines);\r\n\r\n        const graph = new Graph();\r\n        for (let outer = 0; outer < points.length; outer++) {\r\n            graph.addNode(points[outer]);\r\n            for (let inner = outer + 1; inner < points.length; inner++) {\r\n                if (manhattanDistance(points[outer], points[inner]) <= 3) {\r\n                    graph.addEdge(points[outer], points[inner]);\r\n                }\r\n            }\r\n        }\r\n\r\n        const constellations = graph.findConstellations();\r\n        await outputCallback(constellations.length);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        throw Error(\"Not implemented\");\r\n    },\r\n    { key: \"four-dimensional-adventure\", title: \"Four-Dimensional Adventure\", stars: 2, }\r\n);\r\n","import { entry as frequencyEntry } from \"./frequency\";\r\nimport { entry as inventoryEntry } from \"./inventory\";\r\nimport { entry as matterSliceEntry } from \"./no-matter-how-you-slice-it\";\r\nimport { entry as reposeRecordEntry } from \"./repose-record\";\r\nimport { entry as alchemicalReduction } from \"./alchemical-reduction\";\r\nimport { entry as chronalCoordinates } from \"./chronal-coordinates\";\r\nimport { entry as sumParts } from \"./the-sum-of-its-parts\";\r\nimport { entry as memoryManeuver } from \"./memory-maneuver\";\r\nimport { entry as marbleMania } from \"./marble-mania\";\r\nimport { entry as starsAlign } from \"./the-stars-align\";\r\nimport { entry as chronalCharge } from \"./chronal-charge\";\r\nimport { entry as subterranean } from \"./subterranean\";\r\nimport { mineCartMadness } from \"./mine-cart-madness\";\r\nimport { entry as chocolateCharts } from \"./chocolate-charts\";\r\nimport { entry as beverageBandits } from \"./beverage-bandits\";\r\nimport { entry as chronalClassification } from \"./chronal-classification\";\r\nimport { entry as reservoirResearch } from \"./reservoir-research\";\r\nimport { entry as settlers } from \"./settlers-of-the-north-pole\";\r\nimport { entry as flow } from \"./go-with-the-flow\";\r\nimport { aRegularMap } from \"./a-regular-map\";\r\nimport { chronalConversion } from \"./chronal-conversion\";\r\nimport { modeMaze } from \"./mode-maze\";\r\nimport { experimentalEmergencyTransportation } from \"./experimental-emergency-transportation\";\r\nimport { immuneSystemSimulator20XX } from \"./immune-system-simulator-20xx\";\r\nimport { fourDimensionalAdventure } from \"./four-dimensional-adventure\";\r\nimport { embedAll } from \"../../entry\";\r\n\r\nexport const entries = embedAll([\r\n        frequencyEntry,\r\n        inventoryEntry,\r\n        matterSliceEntry,\r\n        reposeRecordEntry,\r\n        alchemicalReduction,\r\n        chronalCoordinates,\r\n        sumParts,\r\n        memoryManeuver,\r\n        marbleMania,\r\n        starsAlign,\r\n        chronalCharge,\r\n        subterranean,\r\n        mineCartMadness,\r\n        chocolateCharts,\r\n        beverageBandits,\r\n        chronalClassification,\r\n        reservoirResearch,\r\n        settlers,\r\n        flow,\r\n        aRegularMap,\r\n        chronalConversion,\r\n        modeMaze,\r\n        experimentalEmergencyTransportation,\r\n        immuneSystemSimulator20XX,\r\n        fourDimensionalAdventure,\r\n    ]);\r\n","import { entryForFile } from \"../../entry\";\r\n\r\nconst fuelCalculator = (mass: number) => Math.floor(mass / 3) - 2;\r\nconst intelligentFuelCalculator = (mass: number): number => {\r\n    const requirement = Math.floor(mass / 3) - 2;\r\n    if (requirement <= 0) {\r\n        return 0;\r\n    } else {\r\n        return requirement + intelligentFuelCalculator(requirement);\r\n    }\r\n};\r\n\r\nexport const entry = entryForFile(\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const requirement = lines\r\n            .map((line) => parseInt(line, 10))\r\n            .map(fuelCalculator)\r\n            .reduce((acc, next) => acc + next, 0);\r\n\r\n        await outputCallback(`Result: ${requirement}`);\r\n    },\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const requirement = lines\r\n            .map((line) => parseInt(line, 10))\r\n            .map(intelligentFuelCalculator)\r\n            .reduce((acc, next) => acc + next, 0);\r\n\r\n        await outputCallback(`Result: ${requirement}`);\r\n    },\r\n    { key: \"rocket-tyranny\", title: \"The Tyranny of the Rocket Equation\", stars: 2, embeddedData: true}\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\n\r\nconst parse = (lines: string[]) => {\r\n    const joined = lines.join(\"\").split(\",\");\r\n    return joined.map((e) => parseInt(e, 10));\r\n};\r\n\r\nfunction handleSum(instructionPointer: number, memory: number[]): [number, number[]] {\r\n    return handleCode(instructionPointer, (a, b) => a + b, memory);\r\n}\r\n\r\nfunction handleMult(instructionPointer: number, memory: number[]): [number, number[]] {\r\n    return handleCode(instructionPointer, (a, b) => a * b, memory);\r\n}\r\n\r\nfunction handleCode(\r\n    instructionPointer: number,\r\n    aggregator: ((a: number, b: number) => number),\r\n    memory: number[]\r\n): [number, number[]] {\r\n    const firstParameter = memory[memory[instructionPointer + 1]];\r\n    const secondParameter = memory[memory[instructionPointer + 2]];\r\n    const storageAddress = memory[instructionPointer + 3];\r\n    memory = [...memory];\r\n    memory[storageAddress] = aggregator(firstParameter, secondParameter);\r\n    return iterate(instructionPointer + 4, memory);\r\n}\r\n\r\nfunction iterate(instructionPointer: number, memory: number[]): [number, number[]] {\r\n    const code = memory[instructionPointer];\r\n    switch (code) {\r\n        case 99:\r\n            return [instructionPointer, memory];\r\n        case 1:\r\n            return handleSum(instructionPointer, memory);\r\n        case 2:\r\n            return handleMult(instructionPointer, memory);\r\n        default:\r\n            throw Error(\"Code \" + code + \" not valid\");\r\n    }\r\n}\r\n\r\nexport const programAlarm = entryForFile(\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const memory = parse(lines);\r\n        const [_, result] = iterate(0, memory);\r\n        await outputCallback(`Result: ${result[0]}`);\r\n        // const requirement = lines\r\n        //     .map(line => parseInt(line, 10))\r\n        //     .map(fuelCalculator)\r\n        //     .reduce((acc, next) => acc + next, 0);\r\n\r\n        // await outputCallback(`Result: ${requirement}`);\r\n    },\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const memory = parse(lines);\r\n        for (let i = 0; i < 100; i++) {\r\n            for (let j = 0; j < 100; j++) {\r\n                memory[1] = i;\r\n                memory[2] = j;\r\n                try {\r\n                    const [_, result] = iterate(0, memory);\r\n                    if (result[0] === 19690720) {\r\n                        await outputCallback(`Result: ${i}${j < 10 ? \"0\" : \"\"}${j}`);\r\n                        return;\r\n                    }\r\n\r\n                } catch { }\r\n            }\r\n        }\r\n    },\r\n    { key: \"program-alarm\", title: \"1202 Program Alarm\", stars: 2, embeddedData: \"program-alarm/input\"}\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\nimport { Coordinate, directions, sumCoordinate } from \"../../../support/geometry\";\r\nimport wu from \"wu\";\r\nimport { range } from \"../../../support/sequences\";\r\n\r\ninterface Movement {\r\n    direction: \"L\" | \"R\" | \"D\" | \"U\";\r\n    length: number;\r\n}\r\n\r\ninterface StepCoordinate {\r\n    step: number;\r\n    coordinate: Coordinate;\r\n}\r\n\r\nfunction mapDirection(direction: Movement[\"direction\"]): Coordinate {\r\n    switch (direction) {\r\n        case \"D\":\r\n            return directions.down;\r\n        case \"U\":\r\n            return directions.up;\r\n        case \"L\":\r\n            return directions.left;\r\n        case \"R\":\r\n            return directions.right;\r\n    }\r\n}\r\n\r\nfunction updatePosition(position: Coordinate, movement: Movement): Coordinate[] {\r\n    const directionCoordinate = mapDirection(movement.direction);\r\n    return wu(range(movement.length)).map((i) => {\r\n        position = sumCoordinate(position, directionCoordinate);\r\n        return position;\r\n    }).toArray();\r\n}\r\n\r\nfunction parseWire(s: string) {\r\n    return s.split(\",\").map((e) => ({\r\n        direction: e[0],\r\n        length: parseInt(e.slice(1), 10)\r\n    }) as Movement);\r\n}\r\n\r\ntype Cell = undefined | \"b\" | \"a\" | \"+\";\r\n\r\nfunction getIntersection<T, U>(a: T[], b: T[], comparer: (a: T, b: T) => number, mapper: (a: T, b: T) => U): U[] {\r\n    a = [...a];\r\n    b = [...b];\r\n    const result = [];\r\n    let aIndex = 0;\r\n    let bIndex = 0;\r\n    while (aIndex < a.length - 1 && bIndex < b.length - 1) {\r\n        const comparison = comparer(a[aIndex], b[bIndex]);\r\n        if (comparison === 0) {\r\n            result.push(mapper(a[aIndex], b[bIndex]));\r\n            aIndex++;\r\n            bIndex++;\r\n        } else if (comparison < 0) {\r\n            aIndex++;\r\n        } else {\r\n            bIndex++;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nexport const crossedWires = entryForFile(\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const firstWire = parseWire(lines[0]);\r\n        const secondWire = parseWire(lines[1]);\r\n\r\n        const comparer = (a: Coordinate, b: Coordinate) => a.x === b.x ? (b.y - a.y) : b.x - a.x;\r\n        const firstCoordinates = getCoordinates({ x: 0, y: 0 }, firstWire).sort(comparer);\r\n        await outputCallback(\"Got first\");\r\n        const secondCoordinates = getCoordinates({ x: 0, y: 0 }, secondWire).sort(comparer);\r\n        await outputCallback(\"Got second\");\r\n\r\n        const intersection = getIntersection(firstCoordinates, secondCoordinates, comparer, (a, b) => a);\r\n\r\n        const minDistance = intersection\r\n            .map((i) => Math.abs(i.x) + Math.abs(i.y))\r\n            .reduce((acc, next) => Math.min(acc, next));\r\n\r\n        await outputCallback(`Result: ${minDistance}`);\r\n    },\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const firstWire = parseWire(lines[0]);\r\n        const secondWire = parseWire(lines[1]);\r\n\r\n        const comparer = (a: StepCoordinate, b: StepCoordinate) =>\r\n            a.coordinate.x === b.coordinate.x ?\r\n                (b.coordinate.y - a.coordinate.y)\r\n                : b.coordinate.x - a.coordinate.x;\r\n        const firstCoordinates = getCoordinates({ x: 0, y: 0 }, firstWire);\r\n        const sortedFirst = firstCoordinates.map((c, i) => ({ coordinate: c, step: i + 1 })).sort(comparer);\r\n        await outputCallback(\"Got first\");\r\n        const secondCoordinates = getCoordinates({ x: 0, y: 0 }, secondWire);\r\n        const sortedSecond = secondCoordinates.map((c, i) => ({ coordinate: c, step: i + 1 })).sort(comparer);\r\n        await outputCallback(\"Got second\");\r\n\r\n        const intersection = getIntersection(\r\n            sortedFirst,\r\n            sortedSecond,\r\n            comparer,\r\n            (a, b) => ({ coordinate: a.coordinate, first: a.step, second: b.step })\r\n        );\r\n        const result = intersection.map((e) => e.first + e.second).reduce((acc, next) => Math.min(acc, next));\r\n        await outputCallback(`Result: ${result}`);\r\n    },\r\n    { key: \"crossed-wires\", title: \"Crossed Wires\", stars: 2, embeddedData: \"crossed-wires/crossed-wires\"}\r\n);\r\n\r\nfunction getCoordinates(currentPosition: Coordinate, movements: Movement[]) {\r\n    const coordinates = movements.flatMap((m) => {\r\n        const positions = updatePosition(currentPosition, m);\r\n        currentPosition = positions[positions.length - 1];\r\n        return positions;\r\n    });\r\n    return coordinates;\r\n}\r\n","import { entryForFile } from \"../../entry\";\r\n\r\nfunction isValidPassword(n: number, maxRepeating: number): boolean {\r\n    const stringed = n.toString();\r\n    let hasSame = false;\r\n    let repeating = 0;\r\n    for (let i = 0; i < stringed.length - 1; i++) {\r\n        if (stringed[i] === stringed[i + 1]) {\r\n            hasSame = true;\r\n            if (repeating === 0) {\r\n                repeating = 2;\r\n            } else {\r\n                repeating++;\r\n            }\r\n            if (repeating > maxRepeating) {\r\n                hasSame = false;\r\n            }\r\n        } else {\r\n            if (hasSame) {\r\n                break;\r\n            }\r\n            repeating = 0;\r\n        }\r\n    }\r\n    if (!hasSame) {\r\n        return false;\r\n    }\r\n\r\n    let prev = n % 10;\r\n    n = Math.floor(n / 10);\r\n    while (n > 0) {\r\n        const next = n % 10;\r\n        if (prev < next) {\r\n            return false;\r\n        }\r\n        prev = next;\r\n        n = Math.floor(n / 10);\r\n    }\r\n    return true;\r\n}\r\n\r\nexport const secureContainer = entryForFile(\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        await calculate(lines, 6, outputCallback);\r\n    },\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        await calculate(lines, 2, outputCallback);\r\n    },\r\n    { key: \"secure-container\", title: \"Secure Container\", stars: 2, embeddedData: true}\r\n);\r\n\r\nasync function calculate(\r\n    lines: string[],\r\n    maxRepeating: number,\r\n    outputCallback: (outputLine: any, shouldClear?: boolean | undefined) => Promise<void>\r\n) {\r\n    const min = parseInt(lines[0], 10);\r\n    const max = parseInt(lines[1], 10);\r\n    let current = min;\r\n    let count = 0;\r\n    while (current <= max) {\r\n        if (isValidPassword(current, maxRepeating)) {\r\n            count++;\r\n        }\r\n        current++;\r\n    }\r\n    await outputCallback(`Result: ${count}`);\r\n}\r\n","import { voidIsPromise } from \"./async\";\r\n\r\nexport type Memory = number[];\r\n\r\ntype ParameterMode = \"Position\" | \"Immediate\" | \"Relative\";\r\ninterface Operation {\r\n    code: number;\r\n    parameterModes: ParameterMode[];\r\n    parameters: number;\r\n}\r\n\r\nconst parameterMap: { [key: number]: number } = {\r\n    1: 3,\r\n    2: 3,\r\n    3: 1,\r\n    4: 1,\r\n    5: 2,\r\n    6: 2,\r\n    7: 3,\r\n    8: 3,\r\n    9: 1\r\n};\r\n\r\nfunction parseOperation(op: number): Operation {\r\n    const code = op % 100;\r\n    const parameters = parameterMap[code];\r\n    let modes = Math.floor(op / 100);\r\n    const parameterModes: ParameterMode[] = [];\r\n    while (modes > 0) {\r\n        if (modes % 10 === 0) {\r\n            parameterModes.push(\"Position\");\r\n        } else if (modes % 10 === 1) {\r\n            parameterModes.push(\"Immediate\");\r\n        } else if (modes % 10 === 2) {\r\n            parameterModes.push(\"Relative\");\r\n        }\r\n        modes = Math.floor(modes / 10);\r\n    }\r\n    let missing = parameters - parameterModes.length;\r\n    while (missing > 0) {\r\n        parameterModes.push(\"Position\");\r\n        missing--;\r\n    }\r\n    return {\r\n        code,\r\n        parameterModes,\r\n        parameters\r\n    };\r\n}\r\n\r\nasync function executeInstruction(\r\n    pointer: number,\r\n    memory: Memory,\r\n    input: () => Promise<number>,\r\n    output: (x: number) => void,\r\n    data: Data\r\n): Promise<[number, Memory]> {\r\n    const copy = [...memory];\r\n    const op = getMemoryAddress(memory, pointer);\r\n    const operation = parseOperation(op);\r\n    if (operationExecutorMap[operation.code]) {\r\n        let newPointer = await operationExecutorMap[operation.code](operation, pointer, copy, input, output, data);\r\n        if (!newPointer && newPointer !== 0) {\r\n            newPointer = pointer + operation.parameters + 1;\r\n        }\r\n        return [newPointer, copy];\r\n    } else {\r\n        throw Error(\"Operation not valid: \" + operation.code);\r\n    }\r\n}\r\n\r\nexport function inputGenerator(inputList: number[]) {\r\n    let i = 0;\r\n    return async () => {\r\n        if (i > inputList.length) {\r\n            throw new Error(\"Input is empty\");\r\n        }\r\n        return inputList[i++];\r\n    };\r\n}\r\n\r\ninterface Data {\r\n    relativeBase: number;\r\n}\r\n\r\nfunction memoryDump(memory: Memory, address: number): string {\r\n    return memory.map((cell, index) => {\r\n        if (index === address) {\r\n            return `->${cell}`;\r\n        } else {\r\n            return cell ? cell.toString() : \"0\";\r\n        }\r\n    }).map((cell, index) => (index % 10 === 0) ? `${index}: ${cell}` : cell).join(\" | \");\r\n}\r\n\r\ninterface ExecutionArgs {\r\n    memory: Memory;\r\n    input: () => Promise<number>;\r\n    output: (x: number) => void;\r\n    close?: () => void | Promise<void>;\r\n    data?: Data;\r\n    debug?: (e: any) => Promise<void>;\r\n    next?: () => Promise<void>;\r\n}\r\n\r\nexport async function execute({ memory, input, output, close, data, debug, next }: ExecutionArgs): Promise<Memory> {\r\n    if (!data) {\r\n        data = {\r\n            relativeBase: 0\r\n        };\r\n    }\r\n    let instructionPointer = 0;\r\n    if (debug) {\r\n        await debug(memoryDump(memory, instructionPointer));\r\n    }\r\n    while ((getMemoryAddress(memory, instructionPointer) % 100) !== 99) {\r\n        try {\r\n            [instructionPointer, memory] = await executeInstruction(instructionPointer, memory, input, output, data);\r\n            if (next) {\r\n                await next();\r\n            }\r\n        } catch (e) {\r\n            if (isStopExecution(e)) {\r\n                break;\r\n            }\r\n            throw e;\r\n        }\r\n        if (debug) {\r\n            await debug(memoryDump(memory, instructionPointer));\r\n        }\r\n    }\r\n    if (close) {\r\n        const closeResult = close();\r\n        if (voidIsPromise(closeResult)) {\r\n            await closeResult;\r\n        }\r\n    }\r\n    return memory;\r\n}\r\n\r\nclass StopExecution extends Error {\r\n    public readonly flag = \"IS_STOP_EXECUTION\";\r\n}\r\n\r\nfunction isStopExecution(e: unknown): e is StopExecution {\r\n    return (e as StopExecution).flag === \"IS_STOP_EXECUTION\";\r\n}\r\n\r\nexport function stopExecution() {\r\n    throw new StopExecution();\r\n}\r\n\r\nexport function parseMemory(line: string): Memory {\r\n    const memory = line.split(\",\").map((e) => parseInt(e, 10));\r\n    return memory;\r\n}\r\n\r\nfunction getMemoryAddress(memory: Memory, address: number): number {\r\n    if (address < 0) {\r\n        throw new InterpreterError(\"Address out of range\", \"NegativeAddress\");\r\n    }\r\n    const value = memory[address];\r\n    if (!value) {\r\n        return 0;\r\n    } else {\r\n        return value;\r\n    }\r\n}\r\n\r\nfunction getParameter(address: number, memory: Memory, parameterMode: ParameterMode, data: Data): number {\r\n    switch (parameterMode) {\r\n        case \"Position\":\r\n            return getMemoryAddress(memory, getMemoryAddress(memory, address));\r\n        case \"Immediate\":\r\n            return getMemoryAddress(memory, address);\r\n        case \"Relative\":\r\n            return getMemoryAddress(memory, getMemoryAddress(memory, address) + data.relativeBase);\r\n\r\n    }\r\n}\r\n\r\ntype ErrorCode = \"NegativeAddress\" | \"WriteError\";\r\n\r\nexport class InterpreterError extends Error {\r\n    public readonly errorType: string;\r\n    // public readonly errorCode: ErrorCode;\r\n    constructor(message: string, public readonly errorCode: ErrorCode) {\r\n        super(message);\r\n        this.errorType = \"InterpreterError\";\r\n\r\n    }\r\n}\r\n\r\nexport function isInterpretedError(e: Error): e is InterpreterError {\r\n    if ((e as InterpreterError).errorType === \"InterpreterError\") {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\ntype OperationExecutor = (\r\n    operation: Operation,\r\n    instructionPointer: number,\r\n    memory: Memory,\r\n    input: () => Promise<number>,\r\n    output: (x: number) => void | Promise<void>,\r\n    data: Data\r\n) => Promise<number | void>;\r\n\r\nfunction getOperationParameter(n: number, address: number, memory: Memory, operation: Operation, data: Data) {\r\n    return getParameter(address + n, memory, operation.parameterModes[n - 1], data);\r\n}\r\n\r\nfunction getParameters(address: number, memory: Memory, operation: Operation, data: Data): number[] {\r\n    const params = [];\r\n    for (let i = 0; i < operation.parameters; i++) {\r\n        params.push(getOperationParameter(i + 1, address, memory, operation, data));\r\n    }\r\n    return params;\r\n}\r\n\r\nfunction writeMemory(\r\n    memory: Memory,\r\n    parameterNumber: number,\r\n    address: number,\r\n    operation: Operation,\r\n    data: Data,\r\n    result: number\r\n) {\r\n    switch (operation.parameterModes[parameterNumber - 1]) {\r\n        case \"Immediate\":\r\n            throw new InterpreterError(\"Cannot write in immediate mode\", \"WriteError\");\r\n        case \"Position\":\r\n            memory[getMemoryAddress(memory, address + parameterNumber)] = result;\r\n            break;\r\n        case \"Relative\":\r\n            memory[data.relativeBase + getMemoryAddress(memory, address + parameterNumber)] = result;\r\n            break;\r\n        default:\r\n            throw new InterpreterError(\"Cannot find parameter mode\", \"WriteError\");\r\n    }\r\n}\r\n\r\nconst operationExecutorMap: { [key: number]: OperationExecutor } = {\r\n    1: async (operation, instructionPointer, memory, input, output, data) => {\r\n        const [firstParameter, secondParameter] = getParameters(instructionPointer, memory, operation, data);\r\n        writeMemory(memory, 3, instructionPointer, operation, data, firstParameter + secondParameter);\r\n    },\r\n    2: async (operation, instructionPointer, memory, input, output, data) => {\r\n        const [firstParameter, secondParameter] = getParameters(instructionPointer, memory, operation, data);\r\n        writeMemory(memory, 3, instructionPointer, operation, data, firstParameter * secondParameter);\r\n    },\r\n    3: async (operation, instructionPointer, memory, input, output, data) => {\r\n        writeMemory(memory, 1, instructionPointer, operation, data, await input());\r\n    },\r\n    4: async (operation, instructionPointer, memory, input, output, data) => {\r\n        const [parameter] = getParameters(instructionPointer, memory, operation, data);\r\n        const result = output(parameter);\r\n        if (voidIsPromise(result)) {\r\n            await result;\r\n        }\r\n    },\r\n    5: async (operation, instructionPointer, memory, input, output, data) => {\r\n        const [parameter, ret] = getParameters(instructionPointer, memory, operation, data);\r\n        if (parameter !== 0) {\r\n            return ret;\r\n        }\r\n    },\r\n    6: async (operation, instructionPointer, memory, input, output, data) => {\r\n        const [parameter, ret] = getParameters(instructionPointer, memory, operation, data);\r\n        if (parameter === 0) {\r\n            return ret;\r\n        }\r\n    },\r\n    7: async (operation, instructionPointer, memory, input, output, data) => {\r\n        const [firstParameter, secondParameter] = getParameters(instructionPointer, memory, operation, data);\r\n        let result: number = 0;\r\n        if (firstParameter < secondParameter) {\r\n            result = 1;\r\n        }\r\n        writeMemory(memory, 3, instructionPointer, operation, data, result);\r\n    },\r\n    8: async (operation, instructionPointer, memory, input, output, data) => {\r\n        const [firstParameter, secondParameter] = getParameters(instructionPointer, memory, operation, data);\r\n        let result: number = 0;\r\n        if (firstParameter === secondParameter) {\r\n            result = 1;\r\n        }\r\n        writeMemory(memory, 3, instructionPointer, operation, data, result);\r\n    },\r\n    9: async (operation, instructionPointer, memory, input, output, data) => {\r\n        const [firstParameter] = getParameters(instructionPointer, memory, operation, data);\r\n        data.relativeBase += firstParameter;\r\n    }\r\n};\r\n","import { entryForFile } from \"../../entry\";\r\nimport { execute } from \"../../../support/intcode\";\r\nexport const sunnyAsteroids = entryForFile(\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const memory = lines[0].split(\",\").map((e) => parseInt(e, 10));\r\n        const output: number[] = [];\r\n        await execute({\r\n            memory,\r\n            input: (() => {\r\n                const isFirst = true;\r\n                return async () => { if (isFirst) { return 1; } else { throw Error(); } };\r\n            })(),\r\n            output: (e: number) => output.push(e),\r\n            debug: outputCallback\r\n        });\r\n        // await outputCallback(output[output.length - 1]);\r\n        await outputCallback(output);\r\n    },\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const memory = lines[0].split(\",\").map((e) => parseInt(e, 10));\r\n        const output: number[] = [];\r\n        await execute({\r\n            memory,\r\n            input: (() => {\r\n                const isFirst = true;\r\n                return async () => { if (isFirst) { return 5; } else { throw Error(); } };\r\n            })(),\r\n            output: (e: number) => output.push(e)\r\n        });\r\n        await outputCallback(output);\r\n    },\r\n    { key: \"sunny-asteroids\", title: \"Sunny with a Change of Asteroids\", stars: 2, embeddedData: \"sunny-asteroids/sunny-asteroids\"}\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\nimport { Tree } from \"../../../support/data-structure\";\r\n\r\ninterface Planet {\r\n    code: string;\r\n    distance: number | null;\r\n    orbiting: string | null;\r\n}\r\n\r\ntype PlanetChain = Tree<Planet>;\r\n\r\ninterface Orbit {\r\n    center: string;\r\n    orbiting: string;\r\n}\r\n\r\nfunction parseLine(line: string): Orbit {\r\n    const tokenized = line.trim().split(\")\");\r\n    return {\r\n        center: tokenized[0],\r\n        orbiting: tokenized[1]\r\n    };\r\n}\r\n\r\ninterface NodeMap { [key: string]: Planet; }\r\n\r\nfunction fillDistance(nodeMap: NodeMap, code: string | null) {\r\n    if (code == null) {\r\n        return;\r\n    }\r\n    const node = nodeMap[code];\r\n    if (node.distance !== null) {\r\n        return;\r\n    }\r\n    const parentCode = node.orbiting;\r\n    if (parentCode === null) {\r\n        node.distance = 1;\r\n        return;\r\n    }\r\n    const parentNode = nodeMap[parentCode];\r\n    if (parentNode.distance !== null) {\r\n        node.distance = parentNode.distance + 1;\r\n        return;\r\n    }\r\n    fillDistance(nodeMap, parentCode);\r\n    node.distance = parentNode.distance! + 1;\r\n}\r\n\r\nfunction getChain(start: string, nodeMap: NodeMap): string[] {\r\n    let currentNode = nodeMap[start];\r\n    const result: string[] = [];\r\n    while (currentNode.orbiting !== null) {\r\n        result.push(currentNode.orbiting);\r\n        currentNode = nodeMap[currentNode.orbiting];\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction getFirstIntersection(a: string[], b: string[]): string {\r\n    const otherSet = new Set<string>(b);\r\n    for (const planet of a) {\r\n        if (otherSet.has(planet)) {\r\n            return planet;\r\n        }\r\n    }\r\n    throw new Error(\"Not intersection found!\");\r\n}\r\n\r\nexport const universalObritMap = entryForFile(\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const nodes: NodeMap = {};\r\n\r\n        const center = \"COM\";\r\n        nodes[center] = {\r\n            code: center,\r\n            distance: 0,\r\n            orbiting: null\r\n        };\r\n\r\n        // const chain = new Tree<Planet>(nodes[center]);\r\n\r\n        lines.forEach((line) => {\r\n            const orbit = parseLine(line);\r\n            nodes[orbit.orbiting] = {\r\n                code: orbit.orbiting,\r\n                distance: null,\r\n                orbiting: orbit.center\r\n            };\r\n        });\r\n        Object.keys(nodes).forEach((n) => fillDistance(nodes, n));\r\n\r\n        const sum = Object.values(nodes).map((n) => n.distance!).reduce((acc, next) => acc + next);\r\n        await outputCallback(sum);\r\n    },\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const nodes: NodeMap = {};\r\n\r\n        const center = \"COM\";\r\n        nodes[center] = {\r\n            code: center,\r\n            distance: 0,\r\n            orbiting: null\r\n        };\r\n\r\n        lines.forEach((line) => {\r\n            const orbit = parseLine(line);\r\n            nodes[orbit.orbiting] = {\r\n                code: orbit.orbiting,\r\n                distance: null,\r\n                orbiting: orbit.center\r\n            };\r\n        });\r\n\r\n\r\n        const mine = \"YOU\";\r\n        const santa = \"SAN\";\r\n\r\n        const mineChain = getChain(mine, nodes);\r\n        const santaChain = getChain(santa, nodes);\r\n\r\n        const firstIntersection = getFirstIntersection(mineChain, santaChain);\r\n\r\n        const result = mineChain.indexOf(firstIntersection) + santaChain.indexOf(firstIntersection);\r\n        await outputCallback(result);\r\n    },\r\n    { key: \"universal-orbit-map\", title: \"Universal Orbit Map\", stars: 2, embeddedData: \"universal-orbit-map/universal-orbit-map\"}\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\nimport { parseMemory, execute, inputGenerator } from \"../../../support/intcode\";\r\nimport { forEachAsync } from \"../../../support/async\";\r\nimport { programAlarm } from \"./program-alarm\";\r\n\r\ninterface Connector {\r\n    input: () => Promise<number>;\r\n    output: (e: number) => void;\r\n    close: () => void;\r\n}\r\n\r\nfunction generateConnector(startingInput: number[], additionalOutput?: (e: number) => void): Connector {\r\n    const outputBuffer: number[] = [...startingInput];\r\n    let nextReadIndex = 0;\r\n    let resolver: ((e: number) => void) | null = null;\r\n    let rejector: (() => void) | null = null;\r\n    let isClosed: boolean = false;\r\n    const output = (e: number) => {\r\n        outputBuffer.push(e);\r\n        if (additionalOutput) {\r\n            additionalOutput(e);\r\n        }\r\n        if (resolver !== null) {\r\n            resolver(outputBuffer[nextReadIndex++]);\r\n        }\r\n    };\r\n    const input = async (): Promise<number> => {\r\n        if (isClosed) {\r\n            throw Error(\"Input is closed\");\r\n        }\r\n        if (nextReadIndex < outputBuffer.length) {\r\n            return outputBuffer[nextReadIndex++];\r\n        } else {\r\n            const promise = new Promise<number>((resolve, reject) => {\r\n                resolver = resolve;\r\n                rejector = reject;\r\n            });\r\n            return await promise;\r\n        }\r\n    };\r\n    const close = () => {\r\n        isClosed = true;\r\n        if (rejector) {\r\n            rejector();\r\n        }\r\n    };\r\n\r\n    return { output, input, close };\r\n}\r\n\r\nfunction generatePermutations<T>(l: T[]): T[][] {\r\n    const res: T[][] = [];\r\n    if (l.length === 0) {\r\n        return [[]];\r\n    }\r\n\r\n    for (let i = 0; i < l.length; i++) {\r\n        const subs = generatePermutations(l.slice(0, i).concat(l.slice(i + 1, l.length)));\r\n        for (const sub of subs) {\r\n            const full = [l[i]].concat(sub);\r\n            res.push(full);\r\n        }\r\n    }\r\n    return res;\r\n}\r\nexport const amplificationCircuit = entryForFile(\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const baseMemory = parseMemory(lines[0]);\r\n        const permutations = generatePermutations([0, 1, 2, 3, 4]);\r\n        let currentMax = Number.NEGATIVE_INFINITY;\r\n        // permutations = [[0, 1, 2, 3, 4]];\r\n        permutations.forEach((permutation) => {\r\n            let signal = 0;\r\n            for (const id of permutation) {\r\n                const input = inputGenerator([id, signal]);\r\n                const promiseResult = execute({ memory: baseMemory, input, output: (e) => signal = e });\r\n            }\r\n            currentMax = Math.max(currentMax, signal);\r\n        });\r\n        await outputCallback(currentMax);\r\n    },\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const baseMemory = parseMemory(lines[0]);\r\n        const permutations = generatePermutations([9, 8, 7, 6, 5]);\r\n        let currentMax = Number.NEGATIVE_INFINITY;\r\n        // permutations = [[0, 1, 2, 3, 4]];\r\n        await forEachAsync(permutations, async (permutation) => {\r\n            const programs = permutation.map((i) => ({\r\n                memory: baseMemory,\r\n                phase: i,\r\n                isLast: false,\r\n                hasExecuted: false,\r\n                inConnector: null as (Connector | null),\r\n                outConnector: null as (Connector | null)\r\n            }));\r\n            programs[programs.length - 1].isLast = true;\r\n\r\n            for (let i = 1; i < programs.length; i++) {\r\n                const connector = generateConnector([programs[i].phase]);\r\n                programs[i - 1].outConnector = connector;\r\n                programs[i].inConnector = connector;\r\n            }\r\n\r\n            let output: number | null = null;\r\n            const loopConnector = generateConnector([programs[0].phase, 0], (e) => output = e);\r\n            programs[0].inConnector = loopConnector;\r\n            programs[programs.length - 1].outConnector = loopConnector;\r\n\r\n            const promises = programs.map((program) => {\r\n                return execute({\r\n                    memory: baseMemory,\r\n                    input: program.inConnector!.input,\r\n                    output: program.outConnector!.output,\r\n                    close: program.outConnector!.close\r\n                });\r\n            });\r\n\r\n            await Promise.all(promises);\r\n\r\n            if (output == null) {\r\n                throw new Error(\"No outpu!\");\r\n            }\r\n            currentMax = Math.max(currentMax, output);\r\n        });\r\n        await outputCallback(currentMax);\r\n    },\r\n    { key: \"amplification-circuit\", title: \"Amplification Circuit\", stars: 2, embeddedData: \"amplification-circuit/input\"}\r\n);\r\n\r\n","import { entryForFile } from \"../../entry\";\r\nimport { FixedSizeMatrix } from \"../../../support/matrix\";\r\nimport wu from \"wu\";\r\nimport { forEachAsync } from \"../../../support/async\";\r\n\r\nexport const spaceImageFormat = entryForFile(\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const width = 25;\r\n        const height = 6;\r\n        const input = lines[0].split(\"\").map((e) => parseInt(e, 10));\r\n        const inputSize = input.length;\r\n        const layerSize = width * height;\r\n        const layers: Array<FixedSizeMatrix<number>> = [];\r\n        for (let i = 0; i < inputSize; i += layerSize) {\r\n            const newLayer = new FixedSizeMatrix<number>({ x: width, y: height });\r\n            newLayer.setFlatData(input.slice(i, i + layerSize));\r\n            layers.push(newLayer);\r\n        }\r\n\r\n        const smallestLayer = layers.map((layer) => ({\r\n            zeros: layer.data.filter((e) => e === 0).length,\r\n            data: layer.data\r\n        })).sort((a, b) => a.zeros - b.zeros)[0].data;\r\n        const ones = smallestLayer.filter((e) => e === 1).length;\r\n        const twos = smallestLayer.filter((e) => e === 2).length;\r\n        await outputCallback(ones * twos);\r\n    },\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const width = 25;\r\n        const height = 6;\r\n        const input = lines[0].split(\"\").map((e) => parseInt(e, 10));\r\n        const inputSize = input.length;\r\n        const layerSize = width * height;\r\n        const layers: Array<FixedSizeMatrix<number>> = [];\r\n        for (let i = 0; i < inputSize; i += layerSize) {\r\n            const newLayer = new FixedSizeMatrix<number>({ x: width, y: height });\r\n            newLayer.setFlatData(input.slice(i, i + layerSize));\r\n            layers.push(newLayer);\r\n        }\r\n\r\n        const result = new FixedSizeMatrix<number>({ x: width, y: height });\r\n        for (let x = 0; x < width; x++) {\r\n            for (let y = 0; y < height; y++) {\r\n                let currentLayer = 0;\r\n                while (layers[currentLayer].get({ x, y }) === 2) {\r\n                    currentLayer++;\r\n                }\r\n                result.set({ x, y }, layers[currentLayer].get({ x, y })!);\r\n            }\r\n        }\r\n\r\n        const output = wu(result.overRows())\r\n            .map((row) => row.map((e) => e === 0 ? \" \" : \"X\").join(\"\"))\r\n            .toArray();\r\n\r\n        await forEachAsync(output, async (row) => await outputCallback(row));\r\n    },\r\n    { key: \"space-image-format\", title: \"Space Image Format\", stars: 2, embeddedData: true}\r\n);\r\n\r\n","import { entryForFile } from \"../../entry\";\r\nimport { execute, parseMemory } from \"../../../support/intcode\";\r\nexport const sensorBoost = entryForFile(\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const source = lines[0];\r\n        const memory = parseMemory(source);\r\n        const output: number[] = [];\r\n        await execute({\r\n            memory, input: async () => 1, output: (e) => {\r\n                output.push(e);\r\n            }, close: () => { }\r\n        });\r\n\r\n        await outputCallback(output);\r\n    },\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const source = lines[0];\r\n        const memory = parseMemory(source);\r\n        const output: number[] = [];\r\n        await execute({\r\n            memory, input: async () => 2, output: (e) => {\r\n                output.push(e);\r\n            }, close: () => { }\r\n        });\r\n\r\n        await outputCallback(output);\r\n    },\r\n    { key: \"sensor-boost\", title: \"Sensor Boost\", stars: 2, embeddedData: \"sensor-boost/sensor-boost\"}\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\nimport { FixedSizeMatrix } from \"../../../support/matrix\";\r\nimport wu from \"wu\";\r\nimport { Coordinate, diffCoordinate } from \"../../../support/geometry\";\r\n\r\ntype Cell = \".\" | \"#\";\r\n\r\ntype Grid = FixedSizeMatrix<Cell>;\r\n\r\nfunction parseInput(lines: string[]): Grid {\r\n    lines = lines.map((l) => l.trim()).filter((l) => !l.startsWith(\"--\"));\r\n    const rawCells = lines.map((l) => l.split(\"\").map((c) => c === \"#\" ? c : \".\"));\r\n    const width = rawCells[0].length;\r\n    const height = rawCells.length;\r\n    const matrix = new FixedSizeMatrix<Cell>({ x: width, y: height });\r\n    matrix.setFlatData(rawCells.flatMap((c) => c));\r\n    return matrix;\r\n}\r\n\r\ninterface Asteroid {\r\n    coordinate: Coordinate;\r\n    canSee?: Asteroid[];\r\n}\r\n\r\ninterface Visible {\r\n    asteroid: Asteroid;\r\n    isHidden?: boolean;\r\n}\r\n\r\ninterface Coefficients {\r\n    m: number;\r\n    q: number;\r\n}\r\n\r\nfunction fillVisibilities(asteroids: Asteroid[]) {\r\n    asteroids.forEach((asteroid) => fillVisibility(asteroid, asteroids));\r\n}\r\n\r\nfunction fillVisibility(asteroid: Asteroid, asteroids: Asteroid[]) {\r\n    const asteroidsWithVisibility = asteroids.map<Visible>((e) => ({ asteroid: e, isHidden: false }));\r\n    asteroidsWithVisibility.forEach((otherAsteroid) => {\r\n        if (otherAsteroid.isHidden !== true) {\r\n            const mainVector = diffCoordinate(otherAsteroid.asteroid.coordinate, asteroid.coordinate);\r\n            asteroidsWithVisibility.forEach((candidate) => {\r\n                if (candidate.isHidden !== true) {\r\n                    if (candidate.asteroid === asteroid) {\r\n                        candidate.isHidden = true;\r\n                    } else if (candidate.asteroid !== otherAsteroid.asteroid) {\r\n                        const candidateVector = diffCoordinate(candidate.asteroid.coordinate, asteroid.coordinate);\r\n                        if (mainVector.x === 0) {\r\n                            if (candidateVector.x !== 0) {\r\n                                return;\r\n                            }\r\n                        }\r\n                        if (mainVector.x === 0) {\r\n                            if (candidateVector.x === 0) {\r\n                                if (mainVector.y === 0) {\r\n                                    candidate.isHidden = candidateVector.y === 0;\r\n                                } else {\r\n                                    const coeff = candidateVector.y / mainVector.y;\r\n                                    candidate.isHidden = coeff > 1;\r\n                                }\r\n                            }\r\n                        } else if (mainVector.y === 0) {\r\n                            if (candidateVector.y === 0) {\r\n                                const coeff = candidateVector.x / mainVector.x;\r\n                                candidate.isHidden = coeff > 1;\r\n                            }\r\n                        } else {\r\n                            const xCoeff = candidateVector.x / mainVector.x;\r\n                            const yCoeff = candidateVector.y / mainVector.y;\r\n                            if (xCoeff === yCoeff && xCoeff > 1) {\r\n                                candidate.isHidden = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n    asteroid.canSee = asteroidsWithVisibility.filter((a) => a.isHidden !== true).map((e) => e.asteroid);\r\n}\r\n\r\n\r\nexport const monitoringStation = entryForFile(\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const asteroids = getVisibilities(lines);\r\n        const maxVisibility = asteroids.reduce((acc, next) => Math.max(acc, (next.canSee || []).length), 0);\r\n        await outputCallback(maxVisibility);\r\n    },\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        let asteroids = getAsteroids(lines);\r\n        fillVisibilities(asteroids);\r\n        const station = asteroids.reduce((acc, next) => {\r\n            if (next.canSee && next.canSee.length > acc.canSee!.length) {\r\n                return next;\r\n            } else {\r\n                return acc;\r\n            }\r\n        });\r\n\r\n        await outputCallback(`Station: (${station.coordinate.x}, ${station.coordinate.y})`);\r\n        const topVisible =\r\n            station.canSee!\r\n                .filter((e) => e.coordinate.x === station.coordinate.x)\r\n                .map((e) => e.coordinate.y)\r\n                .join(\" \");\r\n        await outputCallback(`Can see on top: ${topVisible}`);\r\n\r\n        let howManyKilled = 0;\r\n        const howManyToKill = 200;\r\n        while (howManyKilled < howManyToKill) {\r\n            const visible = station.canSee!;\r\n            const killList = visible\r\n                .map((e) => ({\r\n                    e,\r\n                    polar: Math.atan2(station.coordinate.y - e.coordinate.y, -e.coordinate.x + station.coordinate.x)\r\n                }))\r\n                .map((e) => ({ ...e, polar: e.polar < Math.PI / 2 ? e.polar + (2 * Math.PI) : e.polar }))\r\n                .map((e) => ({ ...e, polar: -e.polar }))\r\n                .sort((a, b) => b.polar - a.polar);\r\n            if (killList.length === 0) {\r\n                await outputCallback(\"I'm done without having killed enough :(\");\r\n                break;\r\n            }\r\n\r\n            for (const toKill of killList) {\r\n                const killedCoordinate = `(${toKill.e.coordinate.x}, ${toKill.e.coordinate.y})`;\r\n                await outputCallback(`${howManyKilled + 1}) Killed: ${killedCoordinate}`);\r\n                asteroids = asteroids\r\n                    .filter((e) =>\r\n                        e.coordinate.x !== toKill.e.coordinate.x ||\r\n                        e.coordinate.y !== toKill.e.coordinate.y\r\n                    );\r\n                howManyKilled++;\r\n                if (howManyKilled === howManyToKill) {\r\n                    break;\r\n                }\r\n            }\r\n            fillVisibilities(asteroids);\r\n        }\r\n    },\r\n    { key: \"monitoring-station\", title: \"Monitoring Station\", stars: 2, embeddedData: \"monitoring-station/input\"}\r\n);\r\n\r\nfunction getVisibilities(lines: string[]) {\r\n    const asteroids = getAsteroids(lines);\r\n    fillVisibilities(asteroids);\r\n    return asteroids;\r\n}\r\n\r\nfunction getAsteroids(lines: string[]) {\r\n    const grid = parseInput(lines);\r\n    let y = 0;\r\n    const asteroids = wu(grid.overRows()).map((row) => {\r\n        const mapped = row\r\n            .map((cell, x) => ({ cell, x, y }))\r\n            .filter((e) => e.cell === \"#\")\r\n            .map<Asteroid>((e) => ({ coordinate: { x: e.x, y: e.y } }));\r\n        y++;\r\n        return mapped;\r\n    }).reduce((acc, next) => acc.concat(next), []);\r\n    return asteroids;\r\n}\r\n\r\n","import { entryForFile } from \"../../entry\";\r\nimport { FixedSizeMatrix } from \"../../../support/matrix\";\r\n\r\nimport * as geometry from \"../../../support/geometry\";\r\nimport { Coordinate, CCoordinate, rotate, Rotation } from \"../../../support/geometry\";\r\nimport { execute, parseMemory } from \"../../..//support/intcode\";\r\nimport { ascending } from \"../../../support/best\";\r\nimport wu from \"wu\";\r\n\r\ntype Color = \"Black\" | \"White\";\r\n\r\ntype Cell = \"#\" | \".\";\r\n\r\n\r\ninterface Step {\r\n    coordinate: Coordinate;\r\n    color: Color;\r\n}\r\n\r\nfunction deserializeRotation(n: number): Rotation {\r\n    if (n === 1) {\r\n        return \"Counterclockwise\";\r\n    } else {\r\n        return \"Clockwise\";\r\n    }\r\n}\r\n\r\n\r\nfunction serializeColor(c: Color): number {\r\n    return c === \"White\" ? 1 : 0;\r\n}\r\n\r\nfunction deserializeColor(n: number): Color {\r\n    return n === 1 ? \"White\" : \"Black\";\r\n}\r\n\r\n\r\nexport const spacePolice = entryForFile(\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        let currentDirection = geometry.directions.up;\r\n        let currentPos = { x: 0, y: 0 };\r\n\r\n        const steps: Step[] = [];\r\n\r\n        const input = async () => {\r\n            const filtered = steps.filter((e) => e.coordinate.x === currentPos.x && e.coordinate.y === currentPos.y);\r\n            if (filtered.length === 0) {\r\n                return serializeColor(\"Black\");\r\n            }\r\n            return serializeColor(filtered[filtered.length - 1].color);\r\n        };\r\n\r\n        let isPaint = true;\r\n\r\n        const output = (n: number) => {\r\n            if (isPaint) {\r\n                steps.push({ coordinate: currentPos, color: deserializeColor(n) });\r\n                isPaint = false;\r\n            } else {\r\n                const rotation = deserializeRotation(n);\r\n                currentDirection = rotate(currentDirection, rotation);\r\n                currentPos = currentDirection.sum(currentPos);\r\n                isPaint = true;\r\n            }\r\n        };\r\n\r\n        const memory = parseMemory(lines[0]);\r\n\r\n        await execute({ memory, input, output, close: async () => await outputCallback(\"Closing down\") });\r\n\r\n        const sorted = steps\r\n            .map((e, i) => ({ e, i }))\r\n            .sort((a, b) => (stepComparer(a, b)) * -1).map((e) => e.e);\r\n        let last: Step | null = null;\r\n        const distinct: Step[] = [];\r\n        sorted.forEach((s) => {\r\n            if (last === null || geometry.ascendingCompare(last.coordinate, s.coordinate) !== 0) {\r\n                distinct.push(s);\r\n                last = s;\r\n            }\r\n        });\r\n\r\n        await outputCallback(\"How many: \" + distinct.length);\r\n    },\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        let currentDirection = geometry.directions.up;\r\n        let currentPos = { x: 0, y: 0 };\r\n\r\n        const steps: Step[] = [{ color: \"White\", coordinate: currentPos }];\r\n\r\n        const input = async () => {\r\n            const filtered = steps.filter((e) => e.coordinate.x === currentPos.x && e.coordinate.y === currentPos.y);\r\n            if (filtered.length === 0) {\r\n                return serializeColor(\"Black\");\r\n            }\r\n            return serializeColor(filtered[filtered.length - 1].color);\r\n        };\r\n\r\n        let isPaint = true;\r\n\r\n        const output = (n: number) => {\r\n            if (isPaint) {\r\n                steps.push({ coordinate: currentPos, color: deserializeColor(n) });\r\n                isPaint = false;\r\n            } else {\r\n                const rotation = deserializeRotation(n);\r\n                currentDirection = rotate(currentDirection, rotation);\r\n                currentPos = currentDirection.sum(currentPos);\r\n                isPaint = true;\r\n            }\r\n        };\r\n\r\n        const memory = parseMemory(lines[0]);\r\n\r\n        await execute({ memory, input, output, close: async () => await outputCallback(\"Closing down\") });\r\n\r\n        const sorted = steps.map((e, i) => ({ e, i })).sort((a, b) => stepComparer(a, b) * -1).map((e) => e.e);\r\n        let last: Step | null = null;\r\n        const distinct: Step[] = [];\r\n        sorted.forEach((s) => {\r\n            if (last === null || geometry.ascendingCompare(last.coordinate, s.coordinate) !== 0) {\r\n                distinct.push(s);\r\n                last = s;\r\n            }\r\n        });\r\n\r\n        const boundaries = geometry.getBoundaries(sorted.map((s) => s.coordinate));\r\n        const grid = new FixedSizeMatrix<Cell>(boundaries.size);\r\n        for (let x = 0; x < grid.size.x; x++) {\r\n            for (let y = 0; y < grid.size.y; y++) {\r\n                grid.set({ x, y: grid.size.y - y }, \".\");\r\n            }\r\n        }\r\n        steps.forEach((s) => {\r\n            const c = geometry.diffCoordinate(s.coordinate, boundaries.topLeft);\r\n            grid.set(\r\n                { x: c.x, y: c.y },\r\n                s.color === \"Black\" ? \".\" : \"#\"\r\n            );\r\n        });\r\n        const outRows = wu(grid.overRows()).map((row) => row.reverse().join(\"\")).toArray();\r\n\r\n        for (const row of outRows) {\r\n            await outputCallback(row);\r\n        }\r\n\r\n    },\r\n    { key: \"space-police\", title: \"Space Police\", stars: 2, embeddedData: true}\r\n);\r\nfunction stepComparer(a: { e: Step; i: number; }, b: { e: Step; i: number; }) {\r\n    if (geometry.ascendingCompare(a.e.coordinate, b.e.coordinate) === 0) {\r\n        return ascending(a.i, b.i);\r\n    } else {\r\n        return geometry.ascendingCompare(a.e.coordinate, b.e.coordinate);\r\n    }\r\n}\r\n\r\n","import { entryForFile } from \"../../entry\";\r\n\r\ninterface Coordinate3D {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n}\r\n\r\ninterface Planet {\r\n    position: Coordinate3D;\r\n    velocity: Coordinate3D;\r\n}\r\n\r\nfunction addCoordinate(a: Coordinate3D, b: Coordinate3D): Coordinate3D {\r\n    return {\r\n        x: a.x + b.x,\r\n        y: a.y + b.y,\r\n        z: a.z + b.z\r\n    };\r\n}\r\n\r\nfunction opposite(a: Coordinate3D): Coordinate3D {\r\n    return {\r\n        x: -a.x,\r\n        y: -a.y,\r\n        z: -a.z\r\n    };\r\n}\r\n\r\nconst emptyCoordinate = {\r\n    x: 0,\r\n    y: 0,\r\n    z: 0\r\n};\r\n\r\nconst baseCoordinates = {\r\n    x: { ...emptyCoordinate, x: 1 },\r\n    y: { ...emptyCoordinate, y: 1 },\r\n    z: { ...emptyCoordinate, z: 1 }\r\n};\r\n\r\n\r\nfunction parsePlanets(lines: string[]): Planet[] {\r\n    const res = lines.map((line) => {\r\n        const coordinates = line\r\n            .trim()\r\n            .slice(1, line.length - 1)\r\n            .split(\",\")\r\n            .map((c) => c.trim().split(\"=\"))\r\n            .map((c) => ({\r\n                name: c[0],\r\n                value: parseInt(c[1], 10)\r\n            }));\r\n        const get = (s: string): number => coordinates.filter((e) => e.name === s)[0].value;\r\n        return {\r\n            position: {\r\n                x: get(\"x\"),\r\n                y: get(\"y\"),\r\n                z: get(\"z\")\r\n            },\r\n            velocity: {\r\n                x: 0,\r\n                y: 0,\r\n                z: 0\r\n            }\r\n        };\r\n    });\r\n    return res;\r\n}\r\n\r\nfunction updater(p: Planet, o: Planet, extractor: (p: Planet) => number, toUpdate: Coordinate3D) {\r\n    const pExtracted = extractor(p);\r\n    const oExtracted = extractor(o);\r\n    if (pExtracted < oExtracted) {\r\n        p.velocity = addCoordinate(p.velocity, toUpdate);\r\n    } else if (pExtracted > oExtracted) {\r\n        p.velocity = addCoordinate(p.velocity, opposite(toUpdate));\r\n    }\r\n}\r\n\r\ninterface UpdaterArgs {\r\n    positionExtractor: (p: Planet) => number;\r\n    velocityExtractor: (p: Planet) => number;\r\n    toUpdate: Coordinate3D;\r\n}\r\n\r\nconst baseUpdaters: UpdaterArgs[] = [\r\n    {\r\n        positionExtractor: (p) => p.position.x,\r\n        velocityExtractor: (p) => p.velocity.x,\r\n        toUpdate: baseCoordinates.x\r\n    },\r\n    {\r\n        positionExtractor: (p) => p.position.y,\r\n        velocityExtractor: (p) => p.velocity.y,\r\n        toUpdate: baseCoordinates.y\r\n    },\r\n    {\r\n        positionExtractor: (p) => p.position.z,\r\n        velocityExtractor: (p) => p.velocity.z,\r\n        toUpdate: baseCoordinates.z\r\n    },\r\n];\r\n\r\n\r\nfunction gravityStep(planets: Planet[], updaters: UpdaterArgs[] = baseUpdaters): Planet[] {\r\n    const outputPlanets = planets.map((p) => ({ ...p }));\r\n    outputPlanets.forEach((p, i) => {\r\n        planets.forEach((o, j) => {\r\n            if (i !== j) {\r\n                updaters.forEach((args) => updater(p, o, args.positionExtractor, args.toUpdate));\r\n                // updater(p, o, e => e.position.x, baseCoordinates.x);\r\n                // updater(p, o, e => e.position.y, baseCoordinates.y);\r\n                // updater(p, o, e => e.position.z, baseCoordinates.z);\r\n            }\r\n        });\r\n    });\r\n    outputPlanets.forEach((p) => p.position = addCoordinate(p.position, p.velocity));\r\n    return outputPlanets;\r\n}\r\n\r\nfunction getSum(c: Coordinate3D): number {\r\n    return Math.abs(c.x) + Math.abs(c.y) + Math.abs(c.z);\r\n}\r\n\r\nfunction getEnergy(planet: Planet) {\r\n    return getSum(planet.velocity) * getSum(planet.position);\r\n}\r\n\r\nfunction serializeCoordinates(c: Coordinate3D): string {\r\n    return `<x=${c.x}, y=${c.y}, z=${c.z}>`;\r\n}\r\n\r\nfunction serializePlanet(planet: Planet): string {\r\n    return `pos=${serializeCoordinates(planet.position)}, vel=${serializeCoordinates(planet.velocity)}`;\r\n}\r\n\r\nfunction serializeTuple(coordinates: number[]): string {\r\n    return coordinates.join(\"|\");\r\n}\r\n\r\nfunction gcd(a: number, b: number): number {\r\n  let t = 0;\r\n  if (a < b) {\r\n      t = b;\r\n      b = a;\r\n      a = t;\r\n  }\r\n//   a < b && (t = b, b = a, a = t); // swap them if a < b\r\n  t = a % b;\r\n  return t ? gcd(b, t) : b;\r\n}\r\n\r\nfunction lcm(a: number, b: number) {\r\n  return a / gcd(a, b) * b;\r\n}\r\n\r\nconst getLcm = lcm;\r\n\r\n// function getLcm(a: number, b: number): number {\r\n//     return mathjs.lcm(a, b);\r\n// }\r\n\r\nexport const nBodyProblem = entryForFile(\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        let planets = parsePlanets(lines);\r\n        const steps = 1000;\r\n        for (let i = 0; i < steps; i++) {\r\n            planets = gravityStep(planets);\r\n        }\r\n        await outputCallback(planets.map(serializePlanet));\r\n        await outputCallback(\" \");\r\n        await outputCallback(`Energy after ${steps} steps`);\r\n        await outputCallback(planets.map(getEnergy));\r\n        await outputCallback(`Total: `);\r\n        await outputCallback(planets.map(getEnergy).reduce((a, b) => a + b));\r\n\r\n    },\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const updaters = baseUpdaters;\r\n        const planets = parsePlanets(lines);\r\n        const repetitions = updaters.map((u) => {\r\n            let step = 0;\r\n            const values = new Set<string>();\r\n            let currentPlanets = planets;\r\n            while (true) {\r\n                const key = serializeTuple(\r\n                    currentPlanets\r\n                        .map(u.positionExtractor)\r\n                        .concat(currentPlanets.map(u.velocityExtractor))\r\n                );\r\n                if (values.has(key)) {\r\n                    break;\r\n                }\r\n                values.add(key);\r\n                step++;\r\n                currentPlanets = gravityStep(currentPlanets);\r\n            }\r\n            return step;\r\n        });\r\n        const lcmRepetition = repetitions.reduce((a, b) => getLcm(a, b));\r\n\r\n        await outputCallback(\"Starting positions: \");\r\n        await outputCallback(planets.map(serializePlanet));\r\n\r\n        await outputCallback(lcmRepetition);\r\n    },\r\n    { key: \"n-body-problem\", title: \"N-Body Problem\", stars: 2, embeddedData: \"n-body-problem/n-body-problem\"}\r\n);\r\n","import { Drawable, entryForFile, ScreenPrinter } from \"../../entry\";\r\nimport { parseMemory, execute } from \"../../../support/intcode\";\r\nimport { groupBy } from \"../../../support/sequences\";\r\nimport { Coordinate, getBoundaries, diffCoordinate, sumCoordinate, scalarCoordinates, serialization } from \"../../../support/geometry\";\r\nimport { FixedSizeMatrix } from \"../../../support/matrix\";\r\nimport wu from \"wu\";\r\n\r\ntype Tile = \"empty\" | \"wall\" | \"block\" | \"paddle\" | \"ball\";\r\n\r\nconst tileList: Tile[] = [\"empty\", \"wall\", \"block\", \"paddle\", \"ball\"];\r\n\r\ninterface Cell {\r\n    tile: Tile;\r\n    coordinates: Coordinate;\r\n}\r\n\r\nfunction tileSerializer(t: Tile): number {\r\n    return tileList.indexOf(t);\r\n}\r\n\r\nfunction tileDeserializer(n: number): Tile {\r\n    return tileList[n];\r\n}\r\n\r\nfunction parseGroup(e: number[]): Cell {\r\n    return {\r\n        tile: tileDeserializer(e[2]),\r\n        coordinates: {\r\n            x: e[0],\r\n            y: e[1]\r\n        }\r\n    };\r\n}\r\n\r\nfunction tileVisualize(t: Tile): string {\r\n    switch (t) {\r\n        case \"ball\":\r\n            return \"o\";\r\n        case \"block\":\r\n            return \"*\";\r\n        case \"empty\":\r\n            return \" \";\r\n        case \"paddle\":\r\n            return \"-\";\r\n        case \"wall\":\r\n            return \"#\";\r\n    }\r\n}\r\n\r\nfunction tileColor(t: Tile): string {\r\n    switch (t) {\r\n        case \"ball\":\r\n            return \"white\";\r\n        case \"block\":\r\n            return \"black\";\r\n        case \"empty\":\r\n            return \"transparent\";\r\n        case \"paddle\":\r\n            return \"yellow\";\r\n        case \"wall\":\r\n            return \"white\";\r\n    }\r\n}\r\n\r\nexport const carePackage = entryForFile(\r\n    async ({ lines, outputCallback, pause, isCancelled, screen, setAutoStop }) => {\r\n        setAutoStop();\r\n        const memory = parseMemory(lines[0]);\r\n        const output: number[] = [];\r\n        await execute({ memory, input: async () => { throw new Error(\"No input\"); }, output: (e) => output.push(e) });\r\n\r\n        const tiles = parseTiels(output);\r\n        const blocks = tiles.filter((e) => e.tile === \"block\");\r\n\r\n        if (screen) {\r\n            const printer = await screen.requireScreen({x: 300, y: 300});\r\n            const visualization = screenMapTiles(tiles, {x: 300, y: 300});\r\n            printer.replace(visualization);\r\n        } else {\r\n            const visualization = visualizeTiles(tiles);\r\n            await outputCallback(visualization);\r\n        }\r\n\r\n        await outputCallback(\"Blocks: \");\r\n        await outputCallback(blocks.length);\r\n    },\r\n    async ({ lines, outputCallback, pause, isCancelled, screen, setAutoStop }) => {\r\n        setAutoStop();\r\n        const memory = parseMemory(lines[0]);\r\n        memory[0] = 2;\r\n        let currentPaddleX = 0;\r\n        let currentBallX = 0;\r\n        let output: number[] = [];\r\n        const tiles: Cell[] = [];\r\n        let score: number = 0;\r\n        let printer: ScreenPrinter | undefined;\r\n        if (screen) {\r\n            printer = await screen.requireScreen({x: 300, y: 300});\r\n        }\r\n        await execute({\r\n            memory, input: async () => {\r\n                if (tiles.length > 0) {\r\n                    ({ currentPaddleX, currentBallX } =\r\n                        await updateTileFeedback(\r\n                            tiles, currentPaddleX, currentBallX, score, outputCallback, pause, printer\r\n                        )\r\n\r\n                    );\r\n                }\r\n                const res = Math.sign(currentBallX - currentPaddleX);\r\n                return res;\r\n            }, output: async (e) => {\r\n                output.push(e);\r\n                if (output.length === 3) {\r\n                    if (output[0] === -1 && output[1] === 0) { // is score\r\n                        score = output[2];\r\n                        if (tiles.length > 0) {\r\n                            ({ currentPaddleX, currentBallX } =\r\n                                await updateTileFeedback(\r\n                                    tiles, currentPaddleX, currentBallX, score, outputCallback, pause, printer\r\n                                )\r\n                            );\r\n                        }\r\n                    } else { // is tile\r\n                        const tile = parseGroup(output);\r\n                        const matching =\r\n                            tiles.filter((t) =>\r\n                                t.coordinates.x === tile.coordinates.x &&\r\n                                t.coordinates.y === tile.coordinates.y\r\n                            );\r\n                        if (matching.length > 0) {\r\n                            matching[0].tile = tile.tile;\r\n                        } else {\r\n                            tiles.push(tile);\r\n                        }\r\n                    }\r\n                    output = [];\r\n                }\r\n            }\r\n        });\r\n        await outputCallback(score);\r\n    },\r\n    {\r\n        key: \"care-package\",\r\n        title: \"Care Package\",\r\n        stars: 2,\r\n        embeddedData: true,\r\n        customComponent: \"pause-and-run\"\r\n    }\r\n);\r\n\r\nasync function updateTileFeedback(\r\n    tiles: Cell[],\r\n    currentPaddleX: number,\r\n    currentBallX: number,\r\n    score: number,\r\n    outputCallback: (outputLine: any, shouldClear?: boolean | undefined) => Promise<void>,\r\n    pause: () => Promise<void>,\r\n    screen?: ScreenPrinter\r\n) {\r\n    currentPaddleX = tiles.filter((t) => t.tile === \"paddle\")[0].coordinates.x;\r\n    currentBallX = tiles.filter((t) => t.tile === \"ball\")[0].coordinates.x;\r\n    await outputCallback(null);\r\n    if (screen) {\r\n        await screen.replace(screenMapTiles(tiles, {x: 300, y: 300}));\r\n        await outputCallback(`Score: ${score}`);\r\n    } else {\r\n        const visualization = visualizeTiles(tiles) + `\\n\\nScore: ${score}`;\r\n        await outputCallback(visualization);\r\n    }\r\n    await pause();\r\n    return { currentPaddleX, currentBallX };\r\n}\r\n\r\nfunction visualizeTiles(tiles: Cell[]) {\r\n    const boundaries = getBoundaries(tiles.map((t) => t.coordinates));\r\n    const grid = new FixedSizeMatrix<string>(sumCoordinate(boundaries.size, boundaries.topLeft));\r\n    tiles.forEach((t) => grid.set(t.coordinates, tileVisualize(t.tile)));\r\n    const visualization = wu(grid.overRows()).map((row) => row.join(\"\")).toArray().join(\"\\n\");\r\n    return visualization;\r\n}\r\n\r\nfunction screenMapTiles(tiles: Cell[], size: Coordinate): Drawable[] {\r\n    const boundaries = getBoundaries(tiles.map((t) => t.coordinates));\r\n    const sizes = {x: Math.floor(size.x / boundaries.size.x), y: Math.floor(size.y / boundaries.size.y)};\r\n    const squareSize = Math.min(sizes.x, sizes.y);\r\n    if (squareSize === 0) {\r\n        return [];\r\n    }\r\n\r\n    return tiles.map((tile) => {\r\n        let coordinates = {x: tile.coordinates.x * squareSize, y: tile.coordinates.y * squareSize};\r\n        let padding: number = 0;\r\n        if (squareSize >= 6) {\r\n            const maxPadding = Math.floor(squareSize / 4);\r\n            padding = Math.min(maxPadding, 4);\r\n        }\r\n        coordinates = sumCoordinate(coordinates, {x: padding, y: padding});\r\n        const drawableSize = {x: squareSize - 2 * padding, y: squareSize - 2 * padding};\r\n        return {\r\n            id: serialization.serialize(tile.coordinates),\r\n            color: tileColor(tile.tile),\r\n            type: \"rectangle\",\r\n            c: coordinates,\r\n            size: drawableSize\r\n        } as Drawable;\r\n    });\r\n}\r\n\r\nfunction parseTiels(output: number[]) {\r\n    return groupBy(output, 3).map(parseGroup);\r\n}\r\n","import { entryForFile } from \"../../entry\";\r\nimport { setTimeoutAsync, mapAsync } from \"../../../support/async\";\r\n\r\ninterface Element {\r\n    name: string;\r\n    amount: number;\r\n}\r\n\r\ninterface Chain {\r\n    target: Element;\r\n    needs: Element[];\r\n}\r\n\r\nfunction serializeElement(e: Element): string {\r\n    return `${e.amount} ${e.name}`;\r\n}\r\n\r\nfunction serializeChain(c: Chain): string {\r\n    return `${c.needs.map(serializeElement).join(\", \")} => ${serializeElement(c.target)}`;\r\n}\r\n\r\nfunction serializeChains(c: Chain[]): string {\r\n    return c.map(serializeChain).join(\"\\n\");\r\n}\r\n\r\nfunction parseElement(raw: string): Element {\r\n    const [amount, name] = raw.trim().split(\" \");\r\n    return { amount: parseInt(amount, 10), name };\r\n}\r\n\r\nfunction parseLine(line: string): Chain {\r\n    const [left, right] = line.split(\"=>\").map((e) => e.trim());\r\n\r\n    const needs = left.split(\",\").map((e) => e.trim()).map(parseElement);\r\n    const target = parseElement(right);\r\n    return { needs, target };\r\n}\r\n\r\nfunction parseLines(lines: string[]): Chain[] {\r\n    return lines.filter((l) => !l.startsWith(\"--\")).map((l) => l.trim()).filter((l) => l.length > 0).map(parseLine);\r\n}\r\n\r\nconst targetName = \"FUEL\";\r\nconst baseName = \"ORE\";\r\n\r\ninterface OrePrice {\r\n    toCreate: number;\r\n    youNeed: number;\r\n}\r\n\r\ninterface CalculatedPrices { [key: string]: OrePrice; }\r\n\r\nclass Remaining {\r\n    private readonly remainingMap: { [key: string]: number } = {};\r\n\r\n    public add(e: Element) {\r\n        this.ensure(e.name);\r\n        this.remainingMap[e.name] += e.amount;\r\n    }\r\n\r\n    public askFor(e: Element): number {\r\n        this.ensure(e.name);\r\n        const howManyCanTake = Math.min(this.remainingMap[e.name], e.amount);\r\n        this.remainingMap[e.name] -= howManyCanTake;\r\n        return howManyCanTake;\r\n    }\r\n\r\n    private ensure(k: string) {\r\n        if (!this.remainingMap[k]) {\r\n            this.remainingMap[k] = 0;\r\n        }\r\n    }\r\n}\r\n\r\nlet i = 0;\r\n\r\nasync function oreRequirement(target: Element, c: Chain[], r: Remaining, d?: Debug): Promise<OrePrice> {\r\n    i++;\r\n    const closed = i;\r\n    const log = async (s: any) => {\r\n        const intLog = (d && d.log) || (async () => { });\r\n        if (closed === 1) {\r\n            await intLog(\"ID: \" + closed);\r\n            await intLog(s);\r\n        }\r\n    };\r\n    await log(\"Trying to build:\");\r\n    await log(target);\r\n    if (target.name === baseName) {\r\n        await log(\"Trying to build ore, done with requirements:\");\r\n        const res = { toCreate: target.amount, youNeed: target.amount };\r\n        await log(res);\r\n        return res;\r\n    }\r\n    await log(\"Trying with remainings\");\r\n    await log((r as any)._remainingMap);\r\n    const howManyRequired = target.amount - r.askFor(target);\r\n    if (howManyRequired === 0) {\r\n        await log(\"Everything found in remaining\");\r\n        return {\r\n            toCreate: target.amount,\r\n            youNeed: 0\r\n        };\r\n    }\r\n    await log(\"Only some found in remaining, new required:\");\r\n    await log(howManyRequired);\r\n    await log(\"New remaining:\");\r\n    await log((r as any)._remainingMap);\r\n    const chain = c.filter((e) => e.target.name === target.name)[0];\r\n    const howManyNeedToBuild = Math.ceil(howManyRequired / chain.target.amount);\r\n    await log(\r\n        `Recipe says how to build ${chain.target.amount}, need ${howManyRequired}, building ${howManyNeedToBuild}`\r\n    );\r\n    const needs = chain.needs.map((n) => ({ name: n.name, amount: n.amount * howManyNeedToBuild }));\r\n    await log(`New needs:`);\r\n    await log(JSON.stringify(needs));\r\n    const prices = await mapAsync(needs, async (n) => ({ price: await oreRequirement(n, c, r, d), element: n }));\r\n    // prices.forEach((p) => {\r\n    //     if (p.price.toCreate > p.element.amount) {\r\n    //         r.add({ name: p.element.name, amount: p.price.toCreate - p.element.amount });\r\n    //     }\r\n    // });\r\n    r.add({ name: target.name, amount: howManyNeedToBuild * chain.target.amount - howManyRequired });\r\n    await log(\"Updated remaining:\");\r\n    await log((r as any)._remainingMap);\r\n    const finalResult = {\r\n        toCreate: target.amount,\r\n        youNeed: prices.map((p) => p.price.youNeed).reduce((a, b) => a + b)\r\n    };\r\n    await log(\"Final result:\");\r\n    await log(finalResult);\r\n    return finalResult;\r\n}\r\n\r\n\r\ninterface Debug {\r\n    pause?: () => Promise<void>;\r\n    log?: (s: any) => Promise<void>;\r\n}\r\n\r\nexport const spaceStoichiometry = entryForFile(\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const chains = parseLines(lines);\r\n        await outputCallback(serializeChains(chains));\r\n        // const amount = await getPrice(targetName, chains, { log: outputCallback, pause: pause });\r\n        const remain = new Remaining();\r\n        const amount = await oreRequirement(\r\n            chains.filter((e) => e.target.name === targetName)[0].target,\r\n            chains,\r\n            remain\r\n        );\r\n        await outputCallback(amount);\r\n        await outputCallback(\"Remaining:\");\r\n        await outputCallback((remain as any)._remainingMap);\r\n    },\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const chains = parseLines(lines);\r\n        let current: number = 0;\r\n        let targetAmount = 1;\r\n        const storageOres = 1000000000000;\r\n        const target = chains.filter((e) => e.target.name === targetName)[0].target;\r\n        while (current < storageOres) {\r\n            targetAmount *= 2;\r\n            const newTarget = { ...target, amount: targetAmount };\r\n            current = (await oreRequirement(newTarget, chains, new Remaining())).youNeed;\r\n            await outputCallback(\"Current guess:\");\r\n            await outputCallback({ targetAmount, current });\r\n        }\r\n        let under = Math.floor(targetAmount / 2);\r\n        let over = targetAmount;\r\n        let guess = Math.floor((under + over) / 2);\r\n        while (under < over) {\r\n            // target.amount = guess;\r\n            const newTarget = { ...target, amount: guess };\r\n            const needed = (await oreRequirement(newTarget, chains, new Remaining())).youNeed;\r\n            if (needed === storageOres) {\r\n                break;\r\n            } else if (needed > storageOres) {\r\n                over = guess;\r\n            } else if (needed < storageOres) {\r\n                under = guess;\r\n            }\r\n            guess = Math.floor((under + over) / 2);\r\n            await outputCallback(\"New status:\");\r\n            await outputCallback({ under, over, guess });\r\n            if (guess === under) {\r\n                break;\r\n            }\r\n        }\r\n        await outputCallback(\"You can create \" + guess);\r\n        // const amount = await oreRequirement(target, chains, remain);\r\n        // await outputCallback(amount);\r\n        // await outputCallback(\"Remaining:\");\r\n        // await outputCallback((remain as any)._remainingMap);\r\n    },\r\n    { key: \"space-stoichiometry\", title: \"Space Stoichiometry\", stars: 2, embeddedData: \"space-stoichiometry/input\"}\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\nimport {\r\n    Coordinate,\r\n    getBoundaries,\r\n    diffCoordinate,\r\n    manhattanDistance,\r\n    getSurrounding\r\n} from \"../../../support/geometry\";\r\nimport { parseMemory, execute, stopExecution } from \"../../../support/intcode\";\r\nimport { FixedSizeMatrix } from \"../../../support/matrix\";\r\nimport { Queue } from \"../../../support/data-structure\";\r\nimport { List } from \"linq-typescript\";\r\ntype Tile = \"#\" | \".\";\r\n\r\ninterface Cell {\r\n    coordinate: Coordinate;\r\n    tile: Tile;\r\n}\r\n\r\ninterface CellWithDistance extends Cell {\r\n    distance: number | null;\r\n}\r\n\r\nexport const commands = {\r\n    up: 1,\r\n    down: 2,\r\n    left: 3,\r\n    right: 4\r\n};\r\n\r\n\r\ninterface Dictionary<T> { [key: string]: T; }\r\n\r\ntype CellMap = Dictionary<Cell>;\r\n\r\nexport function getCandidates(\r\n    distances: Dictionary<CellWithDistance>,\r\n    cellGetter: (c: Coordinate) => Cell | undefined\r\n): CellWithDistance[] {\r\n    const candidates = Object.values(distances)\r\n        .filter((e) => e.tile === \".\")\r\n        .filter((e) => e.distance !== null)\r\n        .filter((candidate) => {\r\n            const target = getEmptySurrounded(candidate, cellGetter);\r\n            return target !== null && target !== undefined;\r\n        })\r\n        .sort((a, b) => a.distance! - b.distance!);\r\n    return candidates;\r\n}\r\n\r\nexport class Field {\r\n\r\n    public static fromSerialization(serialization: string): Field {\r\n        const lines = serialization.trim().split(\"\\n\");\r\n        const matrix = lines.map((l) => l.trim().split(\"\"));\r\n        const cells: Cell[] = matrix.flatMap((line, lineIndex) => line.map((cell, cellIndex) => {\r\n            if (cell === \".\" || cell === \"#\") {\r\n                return {\r\n                    coordinate: {\r\n                        x: cellIndex,\r\n                        y: lineIndex\r\n                    },\r\n                    tile: cell\r\n                } as Cell;\r\n            } else {\r\n                return null;\r\n            }\r\n        })).filter((c) => c).map((c) => c!);\r\n        return new Field(cells);\r\n\r\n    }\r\n    private cells: CellMap = {};\r\n\r\n    constructor(startingCells: Cell[]) {\r\n        startingCells.forEach((c) => this.setCell(c));\r\n    }\r\n\r\n    public setCell(c: Cell) {\r\n        this.cells[coordinateToKey(c.coordinate)] = c;\r\n    }\r\n\r\n    public getCell(c: Coordinate): Cell | undefined {\r\n        return this.cells[coordinateToKey(c)];\r\n    }\r\n\r\n    public findCommandsToNearestUnkown(c: Coordinate): Array<[number, Coordinate]> {\r\n        const distances = this.getDistances(c);\r\n        const nearest = this.findNearestToDiscover(c, distances);\r\n        if (nearest === null) {\r\n            return [];\r\n        }\r\n        return this.findCommandsForUnkown({ ...nearest, from: c, distances });\r\n    }\r\n\r\n    public findNearestToDiscover(\r\n        c: Coordinate,\r\n        distances: Dictionary<CellWithDistance>\r\n    ): { lastKnown: CellWithDistance, unknown: Coordinate } | null {\r\n        const candidates = getCandidates(distances, this.getCell.bind(this));\r\n        if (candidates.length === 0) {\r\n            return null;\r\n        }\r\n        const candidate = candidates[0];\r\n        const target = getEmptySurrounded(candidate, this.getCell.bind(this));\r\n        if (!target) {\r\n            throw new Error(\"This should not happen, target was already ensured\");\r\n        }\r\n        return { lastKnown: candidate, unknown: target.coordinate };\r\n    }\r\n\r\n    public findCommandsForUnkown(\r\n        { from, lastKnown, unknown, distances }: {\r\n            from: Coordinate,\r\n            lastKnown: CellWithDistance,\r\n            unknown: Coordinate,\r\n            distances: Dictionary<CellWithDistance>\r\n        }\r\n    ): Array<[number, Coordinate]> {\r\n        let currentCell = lastKnown;\r\n        const localCommands: Array<[number, Coordinate]> =\r\n            [[this.getCommand(currentCell.coordinate, unknown), unknown]];\r\n        while (manhattanDistance(currentCell.coordinate, from) !== 0) {\r\n            const canGo = new List(\r\n                getSurrounding(currentCell.coordinate)\r\n                    .map((l) => distances[coordinateToKey(l)])\r\n            )\r\n                .where((c) => c !== undefined && c.distance !== null)\r\n                .where((c) => c.distance === currentCell.distance! - 1)\r\n                .firstOrDefault();\r\n            if (canGo === undefined) {\r\n                return [];\r\n            }\r\n            localCommands.push([this.getCommand(canGo.coordinate, currentCell.coordinate), currentCell.coordinate]);\r\n            currentCell = canGo;\r\n        }\r\n        return localCommands.reverse();\r\n    }\r\n\r\n    public getDistances(coordinate: Coordinate): Dictionary<CellWithDistance> {\r\n        const cellMap: { [key: string]: CellWithDistance } = {};\r\n        Object.values(this.cells)\r\n            .filter((c) => c.tile === \".\")\r\n            .forEach((c) => cellMap[coordinateToKey(c.coordinate)] = {\r\n                ...c,\r\n                distance: null\r\n            });\r\n        const startingCell = cellMap[coordinateToKey(coordinate)];\r\n        if (!startingCell) {\r\n            return cellMap;\r\n        }\r\n        startingCell.distance = 0;\r\n        const visitingQueue = new Queue<CellWithDistance>();\r\n        visitingQueue.add(startingCell);\r\n        while (!visitingQueue.isEmpty) {\r\n            const toVisit = visitingQueue.get();\r\n            if (toVisit === null) {\r\n                break;\r\n            }\r\n            const next = getSurrounding(toVisit.coordinate).map((c) => cellMap[coordinateToKey(c)]);\r\n            next.forEach((cell) => {\r\n                if (cell && cell.distance === null && cell.tile === \".\") {\r\n                    cell.distance = toVisit.distance! + 1;\r\n                    visitingQueue.add(cell);\r\n                }\r\n            });\r\n        }\r\n        return cellMap;\r\n    }\r\n\r\n    public getCommand(from: Coordinate, to: Coordinate): number {\r\n        if (manhattanDistance(from, to) !== 1) {\r\n            throw new RangeError(\"Cannot move to distant cell\");\r\n        }\r\n        if (from.x > to.x) {\r\n            return commands.left;\r\n        } else if (from.x < to.x) {\r\n            return commands.right;\r\n        } else if (from.y > to.y) {\r\n            return commands.up;\r\n        } else if (from.y < to.y) {\r\n            return commands.down;\r\n        } else {\r\n            throw new Error(\"Something went wrong :(\");\r\n        }\r\n    }\r\n\r\n    public toString() {\r\n        const boundaries = getBoundaries(Object.values(this.cells).map((c) => c.coordinate));\r\n        const matrix = new FixedSizeMatrix<string>(boundaries.size);\r\n        matrix.fill(undefined);\r\n        Object.values(this.cells).forEach((c) => matrix.set(diffCoordinate(c.coordinate, boundaries.topLeft), c.tile));\r\n        return matrix.toString((e) => e ? e : \" \");\r\n    }\r\n\r\n    public getDistance(from: Coordinate, to: Coordinate): number | null {\r\n        const distances = this.getDistances(from);\r\n        const distance = distances[coordinateToKey(to)];\r\n        if (!distance || !distance.distance) {\r\n            return null;\r\n        } else {\r\n            return distance.distance!;\r\n        }\r\n    }\r\n\r\n    private canMove(from: Coordinate, to: Coordinate): boolean {\r\n        const fromCell = this.getCell(from);\r\n        const toCell = this.getCell(to);\r\n        if (!fromCell || !toCell) {\r\n            return false;\r\n        }\r\n        if (fromCell.tile !== \".\" || toCell.tile !== \".\") {\r\n            return false;\r\n        }\r\n        const distance = manhattanDistance(fromCell.coordinate, toCell.coordinate);\r\n        if (distance !== 1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\nfunction getEmptySurrounded(candidate: CellWithDistance, cellGetter: (c: Coordinate) => Cell | undefined) {\r\n    const surrounding = new List(\r\n        getSurrounding(candidate.coordinate)\r\n            .map((c) => ({ coordinate: c, cell: cellGetter(c) }))\r\n    );\r\n    const target = surrounding.where((s) => !s.cell).firstOrDefault();\r\n    return target;\r\n}\r\n\r\nexport function coordinateToKey(c: Coordinate): string {\r\n    return `${c.x}|${c.y}`;\r\n}\r\n\r\nexport function keyToCoordinate(s: string): Coordinate {\r\n    const [x, y] = s.split(\"|\");\r\n    return {\r\n        x: parseInt(x, 10),\r\n        y: parseInt(y, 10)\r\n    };\r\n}\r\n\r\nexport const oxygenSystem = entryForFile(\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const cells: Cell[] = [{\r\n            coordinate: { x: 0, y: 0 },\r\n            tile: \".\"\r\n        }];\r\n\r\n        const field = new Field(cells);\r\n        let currentPosition: Coordinate = { x: 0, y: 0 };\r\n        let movingTo: Coordinate | null = currentPosition;\r\n        let suggestedCommands: Array<[number, Coordinate]> = [];\r\n        const program = parseMemory(lines[0]);\r\n        let oxygenPosition: Coordinate | null = null;\r\n        let currentIteration = 0;\r\n        await execute({\r\n            memory: program, input: async () => {\r\n                await pause();\r\n                let answer: number = -1;\r\n                if (suggestedCommands.length > 0) {\r\n                    const [command, position] = suggestedCommands.pop()!;\r\n                    movingTo = position;\r\n                    answer = command;\r\n                } else {\r\n                    const suggestion = field.findCommandsToNearestUnkown(currentPosition);\r\n                    if (!suggestion || suggestion.length === 0) {\r\n                        stopExecution();\r\n                    } else {\r\n                        suggestedCommands = suggestion.reverse();\r\n                    }\r\n                    const [command, position] = suggestedCommands.pop()!;\r\n                    movingTo = position;\r\n                    answer = command;\r\n                }\r\n                return answer;\r\n            },\r\n            output: async (n) => {\r\n                switch (n) {\r\n                    case 0:\r\n                        field.setCell({ coordinate: movingTo!, tile: \"#\" });\r\n                        movingTo = null;\r\n                        break;\r\n                    case 1:\r\n                        currentPosition = movingTo!;\r\n                        field.setCell({ coordinate: movingTo!, tile: \".\" });\r\n                        movingTo = null;\r\n                        break;\r\n                    case 2:\r\n                        currentPosition = movingTo!;\r\n                        field.setCell({ coordinate: currentPosition, tile: \".\" });\r\n                        movingTo = null;\r\n                        oxygenPosition = currentPosition;\r\n                        break;\r\n                }\r\n                if (currentIteration++ % 100 === 0) {\r\n                    await outputCallback(field.toString(), true);\r\n                }\r\n            }\r\n        });\r\n\r\n        await outputCallback(field.toString());\r\n\r\n        const distance = field.getDistance({ x: 0, y: 0 }, oxygenPosition!);\r\n        await outputCallback(distance);\r\n    },\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const cells: Cell[] = [{\r\n            coordinate: { x: 0, y: 0 },\r\n            tile: \".\"\r\n        }];\r\n\r\n        const field = new Field(cells);\r\n        let currentPosition: Coordinate = { x: 0, y: 0 };\r\n        let movingTo: Coordinate | null = currentPosition;\r\n        let suggestedCommands: Array<[number, Coordinate]> = [];\r\n        const program = parseMemory(lines[0]);\r\n        let oxygenPosition: Coordinate | null = null;\r\n        await execute({\r\n            memory: program, input: async () => {\r\n                await pause();\r\n                let answer: number = -1;\r\n                if (suggestedCommands.length > 0) {\r\n                    const [command, position] = suggestedCommands.pop()!;\r\n                    movingTo = position;\r\n                    answer = command;\r\n                } else {\r\n                    const suggestion = field.findCommandsToNearestUnkown(currentPosition);\r\n                    if (!suggestion || suggestion.length === 0) {\r\n                        stopExecution();\r\n                    } else {\r\n                        suggestedCommands = suggestion.reverse();\r\n                    }\r\n                    const [command, position] = suggestedCommands.pop()!;\r\n                    movingTo = position;\r\n                    answer = command;\r\n                }\r\n                return answer;\r\n            },\r\n            output: async (n) => {\r\n                switch (n) {\r\n                    case 0:\r\n                        field.setCell({ coordinate: movingTo!, tile: \"#\" });\r\n                        movingTo = null;\r\n                        break;\r\n                    case 1:\r\n                        currentPosition = movingTo!;\r\n                        field.setCell({ coordinate: movingTo!, tile: \".\" });\r\n                        movingTo = null;\r\n                        break;\r\n                    case 2:\r\n                        currentPosition = movingTo!;\r\n                        field.setCell({ coordinate: currentPosition, tile: \".\" });\r\n                        movingTo = null;\r\n                        oxygenPosition = currentPosition;\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n\r\n        await outputCallback(field.toString());\r\n\r\n        const distance = field.getDistance({ x: 0, y: 0 }, oxygenPosition!);\r\n        const distances = Object.values(field.getDistances(oxygenPosition!));\r\n        await outputCallback(\r\n            distances\r\n                .filter((d) => d !== null)\r\n                .map((d) => d.distance!)\r\n                .reduce((a, b) => Math.max(a, b))\r\n        );\r\n    },\r\n    { key: \"oxygen-system\", title: \"Oxygen System\", stars: 2, embeddedData: true, suggestedDelay: 0}\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\nimport { List } from \"linq-typescript\";\r\nimport wu from \"wu\";\r\nimport { serializeTime } from \"../../../support/time\";\r\n\r\nconst basePattern = [0, 1, 0, -1];\r\n\r\nexport function applyPattern(elements: number[], pattern: Pattern) {\r\n    return elements.map((_, position) =>\r\n        Math.abs(\r\n            elements\r\n                .map((element, index) => ({ element, index }))\r\n                .reduce((acc, next) => (acc + next.element * pattern.get(next.index, position)), 0)\r\n            % 10)\r\n    );\r\n}\r\n\r\nexport async function applyPatternIteratively(\r\n    elements: number[],\r\n    pattern: Pattern,\r\n    howManyTimes: number,\r\n    debug?: (n: number) => Promise<void>\r\n) {\r\n    let current = 0;\r\n    while (current++ < howManyTimes) {\r\n        elements = applyPattern(elements, pattern);\r\n        if (debug) {\r\n            await debug(current);\r\n        }\r\n    }\r\n    return elements;\r\n}\r\n\r\nexport class Pattern {\r\n\r\n    public get length() {\r\n        return this.localBasePattern.length;\r\n    }\r\n\r\n    public static default(): Pattern {\r\n        return new Pattern(basePattern);\r\n    }\r\n\r\n    public delta: number = 1;\r\n    constructor(private localBasePattern: number[]) {\r\n\r\n    }\r\n\r\n    public get(index: number, position: number): number {\r\n        const factor = position + 1;\r\n        const realIndex = Math.floor((index + this.delta) / factor);\r\n        return this.localBasePattern[realIndex % basePattern.length];\r\n    }\r\n}\r\n\r\nfunction parseLines(lines: string[]): number[] {\r\n    return lines[0].split(\"\").map((l) => parseInt(l, 10));\r\n}\r\n\r\n\r\n\r\nexport const flawedFrequencyTransmission = entryForFile(\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const input = parseLines(lines);\r\n        const result = await applyPatternIteratively(input, Pattern.default(), 100);\r\n        await outputCallback(new List(result).take(8).toArray().join(\"\"));\r\n    },\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const input = parseLines(lines);\r\n        const repeatedInput = Array.from({ length: 10000 }, () => input).flat();\r\n        const interestingDigits = parseInt(input.slice(0, 7).join(\"\"), 10);\r\n        let iterationTime: number | null = null;\r\n        for (let iteration = 0; iteration < 100; iteration++) {\r\n            const startIterationTime = new Date().getTime();\r\n            for (let d = repeatedInput.length - 1; d >= interestingDigits; d--) {\r\n                let s = repeatedInput[d];\r\n                if (d + 1 < repeatedInput.length) {\r\n                    s += repeatedInput[d + 1];\r\n                }\r\n                repeatedInput[d] = s;\r\n            }\r\n            for (let d = interestingDigits; d < repeatedInput.length; d++) {\r\n                repeatedInput[d] = Math.abs(repeatedInput[d]) % 10;\r\n            }\r\n            iterationTime = new Date().getTime() - startIterationTime;\r\n            await outputCallback(\"Done iteration \" + iteration);\r\n        }\r\n        await outputCallback(repeatedInput.slice(interestingDigits, interestingDigits + 8).join(\"\"));\r\n    },\r\n    { key: \"flawed-frequency-transmission\", title: \"Flawed Frequency Transmission\", stars: 2, embeddedData: true}\r\n);\r\n","import { entryForFile, simpleOutputCallbackFactory } from \"../../entry\";\r\nimport { parseMemory, execute } from \"../../../support/intcode\";\r\nimport { FixedSizeMatrix } from \"../../../support/matrix\";\r\nimport { getSurrounding, Coordinate, CCoordinate, directions, rotate } from \"../../../support/geometry\";\r\nimport { groupBy, subsequenceGenerator } from \"../../../support/sequences\";\r\n\r\nexport type Movement = \"R\" | \"L\" | number | \"A\" | \"B\" | \"C\";\r\n\r\ninterface RobotContext {\r\n    position: Coordinate;\r\n    direction: CCoordinate;\r\n}\r\n\r\nfunction getRobotDirection(s: string): CCoordinate | null {\r\n    switch (s) {\r\n        case \"^\":\r\n            return directions.up;\r\n        case \"<\":\r\n            return directions.left;\r\n        case \"v\":\r\n            return directions.down;\r\n        case \">\":\r\n            return directions.right;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport class Field {\r\n\r\n    public get width() {\r\n        return this.matrix.size.x;\r\n    }\r\n\r\n    public get height() {\r\n        return this.matrix.size.y;\r\n    }\r\n\r\n    public static fromBuffer(buffer: string[]): Field {\r\n        const fieldLines = buffer.join(\"\").split(\"\\n\").filter((e) => e.length > 0);\r\n        return new Field(fieldLines);\r\n    }\r\n    private readonly matrix: FixedSizeMatrix<string>;\r\n    constructor(rows: string[]) {\r\n        const width = rows[0].length;\r\n        const height = rows.length;\r\n        this.matrix = new FixedSizeMatrix<string>({ x: width, y: height });\r\n        const flatData = rows.join(\"\").split(\"\");\r\n        this.matrix.setFlatData(flatData);\r\n    }\r\n\r\n    public onEveryCell<T>(callback: (c: Coordinate, e: string) => Promise<T | undefined>): Promise<T | undefined> {\r\n        return this.matrix.onEveryCell(async (c, e) => await callback(c, e!));\r\n    }\r\n\r\n    public get(c: Coordinate): string {\r\n        return this.matrix.get(c)!;\r\n    }\r\n\r\n    public async getIntersections() {\r\n        const intersections: Coordinate[] = [];\r\n        await this.onEveryCell(async ({ x, y }, cell) => {\r\n            if (cell && cell === \"#\") {\r\n                const isIntersection = this.isIntersection({ x, y });\r\n                if (isIntersection) {\r\n                    intersections.push({ x, y });\r\n                }\r\n            }\r\n        });\r\n        return intersections;\r\n    }\r\n\r\n    public async getAlignment(): Promise<number> {\r\n        const intersections: Coordinate[] = await this.getIntersections();\r\n        const alignment = intersections.reduce((acc, next) => acc + next.x * next.y, 0);\r\n        return alignment;\r\n    }\r\n\r\n    public async getMovements(shouldDebug?: boolean): Promise<Movement[]> {\r\n        let currentPosition: RobotContext | undefined = await this.onEveryCell(async (c, cell) => {\r\n            if (cell) {\r\n                const direction = getRobotDirection(cell);\r\n                if (direction !== null) {\r\n                    return { position: c, direction };\r\n                }\r\n            }\r\n        });\r\n        if (!currentPosition) {\r\n            throw new Error(\"Could not find the robot\");\r\n        }\r\n        this.matrix.set(currentPosition.position, \"#\");\r\n        const movements: Movement[] = [];\r\n        let currentSteps = 0;\r\n        let shouldClear = true;\r\n        while (true) {\r\n            const forward = this.moveForward(currentPosition);\r\n            if (forward !== null) {\r\n                currentSteps++;\r\n                const isNextIntersection = this.isIntersection(forward.position);\r\n                if (shouldClear) {\r\n                    this.matrix.set(currentPosition.position, \".\");\r\n                }\r\n                shouldClear = !isNextIntersection;\r\n                currentPosition = forward;\r\n                continue;\r\n            }\r\n            if (currentSteps > 0) {\r\n                movements.push(currentSteps);\r\n                currentSteps = 0;\r\n            }\r\n            const right = this.tryRight(currentPosition);\r\n            if (right !== null) {\r\n                movements.push(\"R\");\r\n                currentPosition = { ...currentPosition, direction: right.direction };\r\n                continue;\r\n            }\r\n            const left = this.tryLeft(currentPosition);\r\n            if (left !== null) {\r\n                movements.push(\"L\");\r\n                currentPosition = { ...currentPosition, direction: left.direction };\r\n                continue;\r\n            }\r\n            break;\r\n        }\r\n        return movements;\r\n    }\r\n\r\n    public toString() {\r\n        return this.matrix.toString((e) => e!);\r\n    }\r\n\r\n    private isIntersection({ x, y }: Coordinate): boolean {\r\n        return getSurrounding({ x, y }).map((c) => this.get({ x: c.x, y: c.y })).every((e) => e === \"#\");\r\n    }\r\n\r\n    private tryLeft(context: RobotContext): RobotContext | null {\r\n        return this.moveForward({ ...context, direction: rotate(context.direction, \"Counterclockwise\") });\r\n    }\r\n\r\n    private tryRight(context: RobotContext): RobotContext | null {\r\n        return this.moveForward({ ...context, direction: rotate(context.direction, \"Clockwise\") });\r\n    }\r\n\r\n    private moveForward(context: RobotContext): RobotContext | null {\r\n        const newCellPosition = context.direction.sum(context.position);\r\n        const cell = this.matrix.get(newCellPosition);\r\n        if (cell !== \"#\") {\r\n            return null;\r\n        }\r\n        return { ...context, position: newCellPosition };\r\n    }\r\n}\r\n\r\nexport const setAndForget = entryForFile(\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const memory = parseMemory(lines[0]);\r\n        const buffer: string[] = [];\r\n        await execute({\r\n            memory, input: async () => {throw new Error(\"Why did you call me?\"); }, output: async (n) => {\r\n                const c = String.fromCharCode(n);\r\n                buffer.push(c);\r\n            }\r\n        });\r\n        const field = Field.fromBuffer(buffer);\r\n        const alignment = await field.getAlignment();\r\n        // await outputCallback(buffer.join(\"\"));\r\n        await outputCallback(field.toString());\r\n        await outputCallback(`Alignment: ${alignment}`);\r\n\r\n    },\r\n    async ({ lines, outputCallback, pause, isCancelled }) => {\r\n        const memory = parseMemory(lines[0]);\r\n        const buffer: string[] = [];\r\n        await execute({\r\n            memory, input: async () => {throw new Error(\"Why did you call me?\"); }, output: async (n) => {\r\n                const c = String.fromCharCode(n);\r\n                buffer.push(c);\r\n            }\r\n        });\r\n        const field = Field.fromBuffer(buffer);\r\n        const movements = await field.getMovements();\r\n\r\n        const serializedMovements = /*movements.join(\",\");//*/groupBy(movements, 2).map((g) => `${g[0]}${g[1]}`).join(\"\\n\");\r\n        await outputCallback(serializedMovements);\r\n        const functions = await findCompressed(movements.map((e) => e.toString()), outputCallback);\r\n        if (functions === null) {\r\n            await outputCallback(\"Nothing found!\");\r\n            return;\r\n        }\r\n\r\n        const toSend = [\r\n            functions.replaced,\r\n            functions.aCandidate.join(\",\"),\r\n            functions.bCandidate.join(\",\"),\r\n            functions.cCandidate.join(\",\"),\r\n            \"n\\n\"\r\n        ].join(\"\\n\").split(\"\").map((c) =>  c.charCodeAt(0));\r\n\r\n        memory[0] = 2;\r\n        let nextSend = 0;\r\n\r\n        const answer: number[] = [];\r\n\r\n        await outputCallback(\"Running program\");\r\n\r\n        await execute({memory, input: async () => {\r\n            if (nextSend >= toSend.length) {\r\n                throw new Error(\"Why are you asking me for input?\");\r\n            }\r\n            return toSend[nextSend++];\r\n        }, output: async (n) => {\r\n            answer.push(n);\r\n        }});\r\n\r\n        await outputCallback(answer[answer.length - 1]);\r\n    },\r\n    {key: \"set-and-forget\", title: \"Set and Forget\", stars: 2, embeddedData: true}\r\n);\r\n\r\nconst findCandidates = <T, >(e: T[], except: T[]): T[][] => {\r\n    let start = 0;\r\n    while (except.indexOf(e[start]) >= 0) {\r\n        start++;\r\n    }\r\n    const results: T[][] = [];\r\n    let end = start + 1;\r\n\r\n    while (end < e.length && (end - start) <= 20) {\r\n        if (except.indexOf(e[end]) >= 0) {\r\n            break;\r\n        }\r\n        results.push(e.slice(start, end));\r\n        end++;\r\n    }\r\n    // if (results.length === 0) {\r\n    //     throw new Error(\"No candidates found\");\r\n    // }\r\n    return results;\r\n};\r\n\r\nexport function smartCompression(movements: string[]): any {\r\n    const aCandidates = findCandidates(movements, []);\r\n    for (const candidate of aCandidates) {\r\n        const aReplaced = replaceCandidate(movements, candidate, \"A\");\r\n        console.log(movements.join(\" \"));\r\n        console.log(candidate.join(\" \"));\r\n        console.log(aReplaced.join(\" \"));\r\n        const bCandidates = findCandidates(aReplaced, [\"A\"]);\r\n        for (const bCandidate of bCandidates) {\r\n            const bReplaced = replaceCandidate(aReplaced, bCandidate, \"B\");\r\n            const cCandidates = findCandidates(bReplaced, [\"A\", \"B\"]);\r\n            for (const cCandidate of cCandidates) {\r\n                const finalReplace = replaceCandidate(bReplaced, cCandidate, \"C\");\r\n                if (finalReplace.filter((e) => e !== \"A\" && e !== \"B\" && e !== \"C\").length > 0) {\r\n                    continue;\r\n                }\r\n                if (finalReplace.length > 20) {\r\n                    continue;\r\n                }\r\n                return finalReplace;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport async function findCompressed(\r\n    movements: string[],\r\n    outputCallback: (outputLine: any, shouldClear?: boolean | undefined) => Promise<void>\r\n): Promise<null | {\r\n        replaced: string,\r\n        aCandidate: string[],\r\n        bCandidate: string[],\r\n        cCandidate: string[],\r\n}> {\r\n    let currentIteration = 0;\r\n    const totalIterations = movements.length * (movements.length + 1) / 2;\r\n    for (const aCandidate of subsequenceGenerator(movements)) {\r\n        await outputCallback(\"Iteration \" + (++currentIteration) + \" over \" + totalIterations);\r\n        if (isCandidateTooLong(aCandidate)) {\r\n            continue;\r\n        }\r\n        const aReplaced = replaceCandidate(movements, aCandidate, \"A\");\r\n        for (const bCandidate of subsequenceGenerator(aReplaced)) {\r\n            if (isCandidateTooLong(bCandidate)) {\r\n                continue;\r\n            }\r\n            if (bCandidate.indexOf(\"A\") >= 0) {\r\n                continue;\r\n            }\r\n            const bReplaced = replaceCandidate(aReplaced, bCandidate, \"B\");\r\n            for (const cCandidate of subsequenceGenerator(bReplaced)) {\r\n                if (isCandidateTooLong(cCandidate)) {\r\n                    continue;\r\n                }\r\n                if (cCandidate.indexOf(\"A\") >= 0 || cCandidate.indexOf(\"B\") >= 0) {\r\n                    continue;\r\n                }\r\n                const cReplaced = replaceCandidate(bReplaced, cCandidate, \"C\");\r\n                if (cReplaced.filter((e) => [\"A\", \"B\", \"C\"].indexOf(e.toString()) >= 0).length === cReplaced.length) {\r\n                    await outputCallback(\"Found!\");\r\n                    return {\r\n                        replaced: cReplaced.join(\",\"),\r\n                        aCandidate,\r\n                        bCandidate,\r\n                        cCandidate\r\n                    };\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction isCandidateTooLong(candidate: Array<Movement | string>) {\r\n    return candidate.join(\",\").length > 20;\r\n}\r\n\r\nfunction replaceCandidate(movements: string[], candidate: Array<Movement | string>, candidateName: string): string[] {\r\n    const serializedMovements = movements.join(\",\");\r\n    const serializedCandidate = candidate.join(\",\");\r\n    const re = new RegExp(serializedCandidate, \"g\");\r\n    const replaced = serializedMovements.replace(re, candidateName);\r\n    const newMovements = replaced.split(\",\");\r\n    return newMovements;\r\n}\r\n","import { entryForFile } from \"../../entry\";\r\nimport { FixedSizeMatrix } from \"../../../support/matrix\";\r\nimport { calculateDistances, CellWithDistance } from \"../../../support/labyrinth\";\r\nimport { manhattanDistance, getSurrounding, Coordinate, CCoordinate, getDirection } from \"../../../support/geometry\";\r\n\r\nconst parseLines = (lines: string[]): FixedSizeMatrix<string> => {\r\n    const xSize = lines[0].length;\r\n    const ySize = lines.length;\r\n    const matrix = new FixedSizeMatrix<string>({x: xSize, y: ySize});\r\n    matrix.setFlatData(lines.map((e) => e.trim().split(\"\")).flat());\r\n    return matrix;\r\n};\r\n\r\ntype FixedCell = \"#\" | \".\";\r\n\r\nconst isFixedCell = (e: string): e is FixedCell => {\r\n    return e === \"#\" || e === \".\";\r\n};\r\n\r\ntype RawKey = string;\r\n\r\nconst isRawKey = (e: string): e is RawKey => {\r\n    return !isFixedCell(e) && e.toLowerCase() === e;\r\n};\r\n\r\nexport const manyWorldInterpretation = entryForFile(\r\n    async ({ lines, outputCallback, pause, setAutoStop, resultOutputCallback }) => {\r\n        setAutoStop();\r\n        const matrix = parseLines(lines);\r\n        const matrixStart = matrix.findOneWithCoordinate((e, c) => e === \"@\");\r\n        if (matrixStart === null) {\r\n            throw new Error(\"Cannot find start\");\r\n        }\r\n        matrix.set(matrixStart, \".\");\r\n        let expectedOpenDoors = 0;\r\n        await matrix.onEveryCell((c, e) => {\r\n            if (e && isRawKey(e)) {\r\n                expectedOpenDoors++;\r\n            }\r\n        });\r\n        await outputCallback(expectedOpenDoors);\r\n        let iterations = 0;\r\n        await resultOutputCallback(\r\n            await traverseMatrix(\r\n                matrix,\r\n                [matrixStart],\r\n                [],\r\n                expectedOpenDoors,\r\n                new Map<string, number>(),\r\n                async () => {\r\n                    await pause();\r\n                    iterations++;\r\n                    if (iterations % 1000 === 0) {\r\n                        console.log(`Iterations: ${iterations / 1000}k`);\r\n                    }\r\n                }\r\n            ));\r\n    },\r\n    async ({ lines, outputCallback, pause, setAutoStop, resultOutputCallback }) => {\r\n        setAutoStop();\r\n        const matrix = parseLines(lines);\r\n        const matrixStart = matrix.findOneWithCoordinate((e, c) => e === \"@\");\r\n        if (matrixStart === null) {\r\n            throw new Error(\"Cannot find start\");\r\n        }\r\n        matrix.set(matrixStart, \"#\");\r\n        getSurrounding(matrixStart).forEach((s) => matrix.set(s, \"#\"));\r\n        const matrixStarts = [1, -1].flatMap((x) => [1, -1].map((y) => ({x: matrixStart.x + x, y: matrixStart.y + y})));\r\n        let expectedOpenDoors = 0;\r\n        await matrix.onEveryCell((c, e) => {\r\n            if (e && isRawKey(e)) {\r\n                expectedOpenDoors++;\r\n            }\r\n        });\r\n        await outputCallback(expectedOpenDoors);\r\n        let iterations = 0;\r\n        await resultOutputCallback(\r\n            await traverseMatrix(\r\n                matrix,\r\n                matrixStarts,\r\n                [],\r\n                expectedOpenDoors,\r\n                new Map<string, number>(),\r\n                async () => {\r\n                    await pause();\r\n                    iterations++;\r\n                    if (iterations % 1000 === 0) {\r\n                        console.log(`Iterations: ${iterations / 1000}k`);\r\n                    }\r\n                }\r\n            ));\r\n    },\r\n    { key: \"many-worlds-interpretation\", title: \"Many-Worlds Interpration\", stars: 2, embeddedData: true }\r\n);\r\n\r\ntype Cache = Map<string, number>;\r\n\r\nconst serializeState = (coordinate: Coordinate[], openDoors: string[]) => {\r\n    return JSON.stringify({cs: coordinate.map((c) => ({x: c.x, y: c.y})), d: openDoors.sort()});\r\n};\r\n\r\nasync function traverseMatrix(\r\n    matrix: FixedSizeMatrix<string>,\r\n    matrixStarts: Coordinate[],\r\n    openDoors: string[],\r\n    expectedOpenDoors: number,\r\n    cache: Cache,\r\n    debug?: () => Promise<void>): Promise<number> {\r\n    if (debug) {\r\n        await debug();\r\n    }\r\n    const serializedState = serializeState(matrixStarts, openDoors);\r\n    const cachedValue = cache.get(serializedState);\r\n    if (cachedValue !== undefined) {\r\n        return cachedValue;\r\n    }\r\n\r\n    const reachableKeys =\r\n        matrixStarts.flatMap((matrixStart, index) => {\r\n            return calculateDistances((e) => matrix.get(e), (start, end) => {\r\n                const origin = start.cell;\r\n                if (!isFixedCell(origin) &&\r\n                    openDoors.indexOf(origin) < 0 &&\r\n                    openDoors.indexOf(origin.toUpperCase()) < 0) {\r\n                    return null;\r\n                }\r\n                const destination = matrix.get(end);\r\n                if (!destination ||\r\n                    (destination !== \".\" &&\r\n                        destination.toUpperCase() === destination &&\r\n                        openDoors.indexOf(destination) < 0)\r\n                    || destination === \"#\") {\r\n                    return null;\r\n                }\r\n                return manhattanDistance(start.coordinate, end) + (start.distance || 0);\r\n            }, getSurrounding, matrixStart!).list\r\n                .filter((e) => isRawKey(e.cell))\r\n                .filter((e) => openDoors.indexOf(e.cell.toUpperCase()) < 0)\r\n                .map((e) => ({reachable: e, startIndex: index}));\r\n        });\r\n\r\n    if (reachableKeys.length === 0) {\r\n        if (openDoors.length !== expectedOpenDoors) {\r\n            throw new Error(\"Did not open all doors\");\r\n        }\r\n        return 0;\r\n    }\r\n    // console.log({depth, branching: reachableKeys.length});\r\n    const nestedTotals: number[] = [];\r\n    for (const cell of reachableKeys) {\r\n        const newOpenDoors = openDoors.concat([cell.reachable.cell.toUpperCase()]);\r\n        const nestedDistance = await traverseMatrix(\r\n            matrix,\r\n            matrixStarts.map((start, index) => index === cell.startIndex ? cell.reachable.coordinate : start),\r\n            newOpenDoors,\r\n            expectedOpenDoors,\r\n            cache,\r\n            debug);\r\n        nestedTotals.push(nestedDistance + cell.reachable.distance!);\r\n    }\r\n    const bestNestedTotal = nestedTotals.reduce((acc, next) => Math.min(acc, next), Number.POSITIVE_INFINITY);\r\n    cache.set(serializedState, bestNestedTotal);\r\n    return bestNestedTotal;\r\n}\r\n\r\n","import { entryForFile } from \"../../entry\";\r\nimport { parseMemory, execute, Memory } from \"../../../support/intcode\";\r\nimport { FixedSizeMatrix } from \"../../../support/matrix\";\r\nimport { UnknownSizeField } from \"../../../support/field\";\r\nimport { Coordinate, CCoordinate, manhattanDistance } from \"../../../support/geometry\";\r\n\r\ninterface BeamOutput {\r\n    field: UnknownSizeField<\"#\" | \".\">;\r\n    size: Coordinate;\r\n}\r\n\r\nconst left = new CCoordinate(-1, 0);\r\nconst right = new CCoordinate(1, 0);\r\n\r\ninterface RowInfo {\r\n    rowStart: number;\r\n    rowLength: number;\r\n}\r\n\r\ntype RowMapData = Array<RowInfo | undefined>;\r\n\r\nconst serializePoint = (c: Coordinate): string => {\r\n    return `${c.x},${c.y}`;\r\n};\r\n\r\n\r\n\r\nexport const tractorBeam = entryForFile(\r\n    async ({ lines, outputCallback, pause }) => {\r\n        const memory = parseMemory(lines[0]);\r\n        let howManyPulled = 0;\r\n        for (let x = 0; x < 50; x++) {\r\n            for (let y = 0; y < 50; y++) {\r\n                const toServe = [x, y];\r\n                let nextToServe = 0;\r\n                await execute({\r\n                    memory,\r\n                    input: async () => {\r\n                        await pause();\r\n                        return toServe[nextToServe++];\r\n                    },\r\n                    output: async (n) => {\r\n                        howManyPulled += n;\r\n                        await pause();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        await outputCallback(howManyPulled);\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const memory = parseMemory(lines[0]);\r\n\r\n        let startPoint = {x: 3, y: 4};\r\n        const delta = new CCoordinate(1, 1);\r\n\r\n        const rowData: RowMapData = [];\r\n\r\n        const expectedSize = 100;\r\n\r\n        while (true) {\r\n            startPoint = delta.sum(startPoint);\r\n            if (!await isPulled(memory, startPoint)) {\r\n                if (await isPulled(memory, left.sum(startPoint))) {\r\n                    startPoint = left.sum(startPoint);\r\n                } else if (await isPulled(memory, right.sum(startPoint))) {\r\n                    startPoint = right.sum(startPoint);\r\n                } else {\r\n                    throw new Error(\"Could not find start point\");\r\n                }\r\n            }\r\n\r\n            console.log(\"Sure point: \" + JSON.stringify(startPoint));\r\n\r\n            let rowStart = startPoint;\r\n            while (await isPulled(memory, rowStart)) {\r\n                rowStart = left.sum(rowStart);\r\n            }\r\n            rowStart = right.sum(rowStart);\r\n\r\n            console.log(\"Left start: \" + serializePoint(rowStart));\r\n\r\n            const lastRowInfo = await setRowData(memory, rowStart, rowData);\r\n            if (\r\n                lastRowInfo.rowLength >= expectedSize &&\r\n                rowStart.x >= expectedSize &&\r\n                rowStart.y >= expectedSize\r\n                ) {\r\n                    const interestingTopRow = rowStart.y - expectedSize + 1;\r\n                    const topRowInfo = rowData[interestingTopRow];\r\n                    if (topRowInfo) {\r\n                        const deltaX = rowStart.x - topRowInfo.rowStart;\r\n                        console.log({\r\n                            top: interestingTopRow,\r\n                            topStart: topRowInfo.rowStart,\r\n                            topLength: topRowInfo.rowLength,\r\n                            delta: deltaX,\r\n                        });\r\n                        if (topRowInfo.rowLength - deltaX >= expectedSize) {\r\n                            await outputCallback({x: rowStart.x, y: interestingTopRow});\r\n                            return;\r\n                        }\r\n                    }\r\n            }\r\n            startPoint = rowStart;\r\n        }\r\n\r\n    },\r\n    { key: \"tractor-beam\", title: \"Tractor Beam\", stars: 2, embeddedData: true}\r\n);\r\n\r\nconst setRowData = async (memory: Memory, rowStart: Coordinate, rowData: RowMapData): Promise<RowInfo> => {\r\n    let length = 0;\r\n    const start = rowStart.x;\r\n    while (await isPulled(memory, rowStart)) {\r\n        length++;\r\n        rowStart = right.sum(rowStart);\r\n    }\r\n    const rowDataEntry = {\r\n        rowStart: start,\r\n        rowLength: length\r\n    };\r\n    rowData[rowStart.y] = rowDataEntry;\r\n    return rowDataEntry;\r\n};\r\n\r\nconst isRowLongEnough = async (\r\n    memory: Memory,\r\n    startPoint: Coordinate,\r\n    long: number\r\n): Promise<boolean> => {\r\n    for (let i = 0; i < long; i++) {\r\n        if (!await isPulled(memory, startPoint)) {\r\n            return false;\r\n        }\r\n        startPoint = right.sum(startPoint);\r\n    }\r\n    return true;\r\n};\r\n\r\nconst isPulled = async (memory: Memory, coordinate: Coordinate): Promise<boolean> => {\r\n    const toServe = [coordinate.x, coordinate.y];\r\n    let nextToServe = 0;\r\n    let result = false;\r\n    await execute({\r\n        memory,\r\n        input: async () => toServe[nextToServe++],\r\n        output: async (n) => result = (n === 1)\r\n    });\r\n    return result;\r\n};\r\n\r\nconst enlarge = async (\r\n    memory: Memory,\r\n    output: BeamOutput,\r\n    toSize: Coordinate\r\n): Promise<void> => {\r\n    const toFill: Coordinate[] = [];\r\n    const newSize = {\r\n        x: Math.max(toSize.x, output.size.x),\r\n        y: Math.max(toSize.y, output.size.y)\r\n    };\r\n    for (let x = Math.max(Math.min(output.size.x, toSize.x) - 1, 0); x < newSize.x; x++) {\r\n        for (let y = Math.max(Math.min(output.size.y, toSize.y) - 1, 0); y < newSize.y; y++) {\r\n            if (x >= output.size.x || y >= output.size.y) {\r\n                toFill.push({x, y});\r\n            }\r\n        }\r\n    }\r\n    await fillField(memory, output, toFill);\r\n    output.size = newSize;\r\n\r\n};\r\n\r\nconst fillField = async (\r\n    memory: Memory,\r\n    output: BeamOutput,\r\n    toFill: Coordinate[]\r\n): Promise<void> => {\r\n    for (const coordinate of toFill) {\r\n        const toServe = [coordinate.x, coordinate.y];\r\n        let nextToServe = 0;\r\n        await execute({\r\n            memory,\r\n            input: async () => toServe[nextToServe++],\r\n            output: async (n) => {\r\n                if (n === 1) {\r\n                    output.field.set(coordinate, \"#\");\r\n                } else {\r\n                    output.field.set(coordinate, \".\");\r\n                }\r\n            }\r\n        });\r\n    }\r\n};\r\n","import { entryForFile } from \"../../entry\";\r\nimport { FixedSizeMatrix } from \"../../../support/matrix\";\r\nimport { Coordinate, getSurrounding, manhattanDistance } from \"../../../support/geometry\";\r\nimport { NotImplementedError } from \"../../../support/error\";\r\nimport { calculateDistances, calculateDistancesGenericCoordinates } from \"../../../support/labyrinth\";\r\n\r\nconst getPortalCoordinateAndClean = (c: Coordinate, matrix: FixedSizeMatrix<string>): {f: Coordinate, p: string} => {\r\n    const firstLetter = matrix.get(c);\r\n    matrix.set(c, \" \");\r\n    const firstNeighbours = getSurrounding(c)\r\n        .map((ci) => ({c, cell: matrix.get(ci)}))\r\n        .filter((e) => e.cell && (e.cell === \".\" || isLetter(e.cell)))\r\n    ;\r\n    if (firstNeighbours.length === 1) {\r\n        const secondLetter = firstNeighbours[0];\r\n        matrix.set(secondLetter.c, \" \");\r\n        const floorNeighbour = getSurrounding(secondLetter.c)\r\n        .map((ci) => ({\r\n                c: ci,\r\n                cell: matrix.get(ci)\r\n            }))\r\n        .filter((e) => e.cell === \".\")[0].c;\r\n        return {\r\n            f: floorNeighbour,\r\n            p: [firstLetter, secondLetter.cell!].sort().join(\"\")\r\n        };\r\n    } else {\r\n        const secondLetter = firstNeighbours.filter((e) => isLetter(e.cell!))[0];\r\n        matrix.set(secondLetter.c, \" \");\r\n        const floor = firstNeighbours.filter((e) => !isLetter(e.cell!))[0].c;\r\n        return {\r\n            f: floor,\r\n            p: [firstLetter, secondLetter.cell!].sort().join(\"\")\r\n        };\r\n    }\r\n};\r\n\r\nconst isLetter = (s: string): boolean => {\r\n    return s.toLowerCase() !== s || s.toUpperCase() !== s;\r\n};\r\n\r\nconst serializeCoordinate = (c: Coordinate): string => {\r\n    return `${c.x}|${c.y}`;\r\n};\r\n\r\nexport const analyzeMatrix = (matrix: FixedSizeMatrix<string>): {\r\n    portals: Array<{c: Coordinate, name: string}>,\r\n    start: Coordinate,\r\n    end: Coordinate} => {\r\n        let start: Coordinate | null = null;\r\n        let end: Coordinate | null = null;\r\n        const portals: Array<{c: Coordinate, name: string}> = [];\r\n        for (let x = 0; x < matrix.size.x; x++) {\r\n            for (let y = 0; y < matrix.size.y; y++) {\r\n                const cell = matrix.get({x, y});\r\n                if (cell && cell.toLowerCase() !== cell) {\r\n                    const {f: floor, p: name} = getPortalCoordinateAndClean({x, y}, matrix);\r\n                    if (name === \"AA\") {\r\n                        start = floor;\r\n                    } else if (name === \"ZZ\") {\r\n                        end = floor;\r\n                    }\r\n                    portals.push({c: floor, name});\r\n                }\r\n            }\r\n        }\r\n\r\n        if (start === null || end === null) {\r\n            throw new Error(\"No start or end found, parsing went wrong\");\r\n        }\r\n        return {portals, start, end};\r\n};\r\n\r\nconst getBorder = (matrix: FixedSizeMatrix<string>): Border => {\r\n    const midX = Math.floor(matrix.size.x / 2);\r\n    const topLeft: Coordinate = {\r\n        x: 0,\r\n        y: 0\r\n    };\r\n    const bottomRight: Coordinate = {\r\n        x: 0,\r\n        y: 0\r\n    };\r\n    for (let y = 0; y < matrix.size.y; y++) {\r\n        const cell = matrix.get({x: midX, y});\r\n        if (cell !== \" \") {\r\n            topLeft.y = y;\r\n            break;\r\n        }\r\n    }\r\n    for (let y = matrix.size.y - 1; y >= 0; y--) {\r\n        const cell = matrix.get({x: midX, y});\r\n        if (cell !== \" \") {\r\n            bottomRight.y = y;\r\n            break;\r\n        }\r\n    }\r\n\r\n    const midY = Math.floor(matrix.size.y / 2);\r\n\r\n    for (let x = 0; x < matrix.size.x; x++) {\r\n        const cell = matrix.get({x, y: midY});\r\n        if (cell !== \" \") {\r\n            topLeft.x = x;\r\n            break;\r\n        }\r\n    }\r\n    for (let x = matrix.size.x - 1; x >= 0; x--) {\r\n        const cell = matrix.get({x, y: midY});\r\n        if (cell !== \" \") {\r\n            bottomRight.x = x;\r\n            break;\r\n        }\r\n    }\r\n    return {\r\n        topLeft,\r\n        bottomRight\r\n    };\r\n};\r\n\r\ninterface Border {\r\n    topLeft: Coordinate;\r\n    bottomRight: Coordinate;\r\n}\r\n\r\nconst isInBorder = (c: Coordinate, b: Border): boolean => {\r\n    return (c.x === b.topLeft.x || c.x === b.bottomRight.x) || (c.y === b.topLeft.y || c.y === b.bottomRight.y);\r\n};\r\n\r\n\r\nexport const donutMaze = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const matrix = parseLines(lines);\r\n        const {portals, start, end} = analyzeMatrix(matrix);\r\n        const portalMap = createPortalMap(portals);\r\n        const distances = calculateDistances(\r\n            (c) => matrix.get(c),\r\n            (s, _) => (s.distance || 0) + 1,\r\n            (c) => {\r\n                return getSurrounding(c).map((coordinate) => {\r\n                    const n = matrix.get(coordinate);\r\n                    if (n === \".\") {\r\n                        return coordinate;\r\n                    }\r\n                    const portaled = portalMap.get(serializeCoordinate(c));\r\n                    if (portaled === undefined) {\r\n                        return null;\r\n                    }\r\n                    return portaled;\r\n                }).filter((e) => e !== null).map((e) => e!);\r\n            },\r\n            start\r\n        );\r\n        await outputCallback(distances.map(end));\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const matrix = parseLines(lines);\r\n        const {portals, start, end} = analyzeMatrix(matrix);\r\n        const portalMap = createPortalMap(portals);\r\n\r\n        const border = getBorder(matrix);\r\n\r\n        let found = false;\r\n        let maxDepth = 0;\r\n\r\n        while (!found) {\r\n            await outputCallback(\"Trying with depth \" + maxDepth);\r\n            const distances = calculateDistancesGenericCoordinates(\r\n                (c) => matrix.get(c),\r\n                (s, _) => (s.distance || 0) + 1,\r\n                (c) => {\r\n                    return getSurrounding(c).map((coordinate) => {\r\n                        const n = matrix.get(coordinate);\r\n                        if (n === \".\") {\r\n                            return {...coordinate, depth: c.depth};\r\n                        }\r\n                        const portaled = portalMap.get(serializeCoordinate(c));\r\n                        if (portaled === undefined) {\r\n                            return null;\r\n                        }\r\n                        const depthIncrement = isInBorder(c, border) ? -1 : 1;\r\n                        const newDepth = c.depth + depthIncrement;\r\n                        if (newDepth < 0 || newDepth > maxDepth) {\r\n                            return null;\r\n                        }\r\n                        return {...portaled, depth: newDepth};\r\n                    }).filter((e) => e !== null).map((e) => e!);\r\n                },\r\n                {x: start.x, y: start.y, depth: 0},\r\n                (e) => `${e.x}|${e.y}|${e.depth}`\r\n            );\r\n            const endDistance = distances.map({...end, depth: 0});\r\n            if (endDistance !== null) {\r\n                await outputCallback(endDistance);\r\n                found = true;\r\n                return;\r\n            }\r\n            maxDepth++;\r\n        }\r\n    },\r\n    { key: \"donut-maze\", title: \"Donut Maze\", stars: 2, embeddedData: true}\r\n);\r\n\r\nfunction parseLines(lines: string[]): FixedSizeMatrix<string> {\r\n    const matrix = new FixedSizeMatrix<string>({ x: lines[0].length, y: lines.length });\r\n    matrix.setFlatData(lines.flatMap((e) => e.split(\"\")));\r\n    return matrix;\r\n}\r\n\r\nfunction createPortalMap(portals: Array<{ c: Coordinate; name: string; }>): Map<string, Coordinate> {\r\n    const portalNameMap = new Map<string, Coordinate[]>();\r\n    portals.forEach((portal) => {\r\n        let l = portalNameMap.get(portal.name);\r\n        if (l === undefined) {\r\n            l = [];\r\n            portalNameMap.set(portal.name, l);\r\n        }\r\n        l.push(portal.c);\r\n    });\r\n    const portalMap = new Map<string, Coordinate>();\r\n    [...portalNameMap.keys()]\r\n        .filter((k) => k !== \"AA\" && k !== \"ZZ\")\r\n        .map((k) => portalNameMap.get(k)!)\r\n        .forEach((ls) => {\r\n            if (ls.length !== 2) {\r\n                throw new Error(\"Parsing went wrong, \" + ls.length);\r\n            }\r\n            portalMap.set(serializeCoordinate(ls[0]), { x: ls[1].x, y: ls[1].y });\r\n            portalMap.set(serializeCoordinate(ls[1]), { x: ls[0].x, y: ls[0].y });\r\n        });\r\n    return portalMap;\r\n}\r\n","import { entryForFile, Pause } from \"../../entry\";\r\nimport { parseMemory, execute, Memory } from \"../../../support/intcode\";\r\n\r\nexport const springdroidAdventure = entryForFile(\r\n    async ({ lines, outputCallback, pause }) => {\r\n        const program = [\r\n            // \"NOT J J\",\r\n            // \"AND A J\",\r\n            // \"AND C J\",\r\n            // \"NOT J J\",\r\n            // \"OR J T\",\r\n            // \"AND D J\",\r\n            // \"AND T J\",\r\n            \"NOT C T\",\r\n            \"OR T J\",\r\n            \"AND D J\",\r\n            \"NOT A T\",\r\n            \"OR T J\",\r\n            \"WALK\"\r\n        ];\r\n        const memory = parseMemory(lines[0]);\r\n        const output: string[] = await executeAscii(program, memory, pause);\r\n        await outputCallback(output.join(\"\"));\r\n    },\r\n    async ({ lines, outputCallback, pause }) => {\r\n        const program = [\r\n            \"NOT B J\",\r\n            \"NOT E T\",\r\n            \"AND T J\",\r\n\r\n            \"OR T T\",\r\n            \"AND T T\",\r\n\r\n            \"AND C T\",\r\n            \"OR F T\",\r\n            \"NOT T T\",\r\n            \"OR T J\",\r\n\r\n            \"NOT A T\",\r\n            \"OR T J\",\r\n            \"AND D J\",\r\n            \"RUN\"\r\n        ];\r\n\r\n        const program2 = [\r\n            \"NOT B J\",\r\n            \"NOT E T\",\r\n            \"AND T J\",\r\n\r\n            \"OR T T\",\r\n            \"AND T T\",\r\n\r\n            \"AND C T\",\r\n            \"OR F T\",\r\n            \"NOT T T\",\r\n            \"OR T J\",\r\n\r\n            \"OR F T\",\r\n            \"AND E T\",\r\n            \"OR T J\",\r\n\r\n            \"NOT A T\",\r\n            \"OR T J\",\r\n            \"AND D J\",\r\n            \"RUN\"\r\n        ];\r\n\r\n        const program3 = [\r\n            \"NOT B J\",\r\n            \"NOT E T\",\r\n            \"AND T J\",\r\n\r\n            \"AND C T\",\r\n            \"OR F T\",\r\n            \"NOT T T\",\r\n            \"OR T J\",\r\n\r\n            \"OR C T\",\r\n            \"OR E T\",\r\n            \"NOT T T\",\r\n            \"OR T J\",\r\n\r\n            \"NOT A T\",\r\n            \"OR T J\",\r\n            \"AND D J\",\r\n            \"RUN\"\r\n        ];\r\n\r\n        const program4 = [\r\n            \"NOT B J\",\r\n            \"NOT E T\",\r\n            \"AND T J\",\r\n\r\n            \"NOT C T\",\r\n            \"NOT T T\",\r\n            \"OR F T\",\r\n            \"NOT T T\",\r\n            \"OR T J\",\r\n\r\n            \"NOT A T\",\r\n            \"OR T J\",\r\n            \"AND D J\",\r\n            \"RUN\",\r\n        ];\r\n\r\n        const program5 = [\r\n            \"OR A T\",\r\n            \"AND B T\",\r\n            \"AND C T\",\r\n            \"NOT T J\",\r\n\r\n            \"OR E T\",\r\n            \"OR H T\",\r\n            \"AND T J\",\r\n\r\n            \"AND D J\",\r\n            \"RUN\",\r\n        ];\r\n        const memory = parseMemory(lines[0]);\r\n        const output: string[] = await executeAscii(program5, memory, pause);\r\n        await outputCallback(output.join(\"\"));\r\n    },\r\n    { key: \"springdroid-adventure\", title: \"Springdroid Adventure\", stars: 2, embeddedData: true}\r\n);\r\n\r\nasync function executeAscii(program: string[], memory: Memory, pause: Pause) {\r\n    const output: string[] = [];\r\n    const input = program.concat([\"\"]).join(\"\\n\").split(\"\").map((e) => e.charCodeAt(0));\r\n    let nextInput = 0;\r\n    let lastTime = 0;\r\n    await execute({\r\n        memory,\r\n        input: async () => {\r\n            return input[nextInput++];\r\n        },\r\n        output: async (n) => {\r\n            if (n > 255) {\r\n                output.push(n.toString());\r\n            } else {\r\n                output.push(String.fromCharCode(n));\r\n            }\r\n        },\r\n        next: async () => {\r\n            const current = new Date().getTime();\r\n            if (current - lastTime > 500) {\r\n                lastTime = current;\r\n                await pause();\r\n            }\r\n        },\r\n    });\r\n    return output;\r\n}\r\n","import { createIntervalPauser } from \"../../../support/run\";\r\nimport { modInverse } from \"../../../support/algebra\";\r\nimport { entryForFile } from \"../../entry\";\r\n\r\ntype Coefficients = {\r\n    a: bigint;\r\n    b: bigint;\r\n};\r\n\r\ntype Operation = {\r\n    type: \"cut\";\r\n    amount: bigint;\r\n} | {\r\n    type: \"deal-into\";\r\n} | {\r\n    type: \"deal-increment\";\r\n    amount: bigint;\r\n};\r\n\r\nconst parse = (lines: string[]): Operation[] => {\r\n    return lines.map((l) => l.trim()).filter((l) => l).map((line) => {\r\n        if (line.startsWith(\"deal into\")) {\r\n            return { type: \"deal-into\" };\r\n        } else if (line.startsWith(\"deal\")) {\r\n            return { type: \"deal-increment\", amount: BigInt(parseInt(line.split(\" \")[3], 10)) };\r\n        } else if (line.startsWith(\"cut\")) {\r\n            return { type: \"cut\", amount: BigInt(parseInt(line.split(\" \")[1], 10)) };\r\n        } else {\r\n            throw new Error(\"Invalid line: \" + line);\r\n        }\r\n    });\r\n};\r\n\r\ntype Context = {\r\n    module: bigint;\r\n};\r\n\r\nconst calculateCoefficients = (current: Coefficients, operation: Operation, context: Context): Coefficients => {\r\n    const mod = context.module;\r\n    const normalize = (v: bigint) => ((v % mod) + mod) % mod;\r\n    switch (operation.type) {\r\n        case \"cut\":\r\n            return {\r\n                a: current.a,\r\n                b: normalize(current.b - operation.amount)\r\n            };\r\n        case \"deal-into\":\r\n            return {\r\n                a: normalize(-current.a),\r\n                b: normalize(-current.b - 1n)\r\n            };\r\n        case \"deal-increment\":\r\n            return {\r\n                a: normalize(current.a * operation.amount),\r\n                b: normalize(current.b * operation.amount)\r\n            };\r\n    }\r\n};\r\n\r\nconst invertCoefficients = (current: Coefficients, context: Context): Coefficients => {\r\n    const a_1 = modInverse(current.a, context.module);\r\n    return {\r\n        a: a_1,\r\n        b: a_1 - a_1 * current.b\r\n    };\r\n};\r\nconst calculateInverseCoefficients = (current: Coefficients, operation: Operation, context: Context): Coefficients => {\r\n    const mod = BigInt(context.module);\r\n    const normalize = (v: bigint) => ((v % mod) + mod) % mod;\r\n    const inverse = (v: bigint) => modInverse(v, mod);\r\n    switch (operation.type) {\r\n        case \"cut\":\r\n            return {\r\n                a: current.a,\r\n                b: normalize(current.b + operation.amount)\r\n            };\r\n        case \"deal-into\":\r\n            return {\r\n                a: normalize(-current.a),\r\n                b: normalize(-current.b - 1n)\r\n            };\r\n        case \"deal-increment\":\r\n            return {\r\n                a: normalize(current.a * inverse(operation.amount)),\r\n                b: normalize(current.b * inverse(operation.amount))\r\n            };\r\n    }\r\n};\r\n\r\nconst compose = (f: Coefficients, g: Coefficients, mod: bigint): Coefficients => {\r\n    const normalize = (v: bigint) => ((v % mod) + mod) % mod;\r\n    return {\r\n        a: normalize(f.a * g.a),\r\n        b: normalize(f.a * g.b + f.b)\r\n    };\r\n};\r\n\r\nconst compow = (f: Coefficients, mod: bigint): Coefficients => compose(f, f, mod);\r\n\r\nexport const slamShuffle = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const input = parse(lines);\r\n        const targetCard = 2019n;\r\n        const context: Context = { module: 10007n };\r\n        let current: Coefficients = { a: 1n, b: 0n };\r\n        for (const operation of input) {\r\n            current = calculateCoefficients(current, operation, context);\r\n        }\r\n        const mod = BigInt(context.module);\r\n        const normalize = (v: bigint) => ((v % mod) + mod) % mod;\r\n        await resultOutputCallback(Number(normalize(current.a * targetCard + current.b)));\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback, pause }) => {\r\n        const input = parse(lines);\r\n        input.reverse();\r\n        const targetPosition = 2020n;\r\n        const context: Context = { module: 119315717514047n };\r\n\r\n        let iterationCoefficients = { a: 1n, b: 0n };\r\n        for (const operation of input) {\r\n            iterationCoefficients = calculateInverseCoefficients(iterationCoefficients, operation, context);\r\n        }\r\n\r\n        const found = new Set<string>();\r\n\r\n        const maxIterations = 101741582076661;\r\n        let iterations = 101741582076661;\r\n        const operands: Coefficients[] = [];\r\n        while (iterations > 0) {\r\n            let currentSteps = 1;\r\n            let currentCoeff = iterationCoefficients;\r\n            while (currentSteps * 2 <= iterations) {\r\n                currentCoeff = compow(currentCoeff, context.module);\r\n                currentSteps *= 2;\r\n            }\r\n            iterations -= currentSteps;\r\n            operands.push(currentCoeff);\r\n            await outputCallback(1 - iterations / maxIterations);\r\n            await pause();\r\n        }\r\n        await outputCallback(\"------------\");\r\n        const finalOperand = operands.reduce((acc, next) => compose(acc, next, context.module));\r\n        const mod = context.module;\r\n        const normalize = (v: bigint) => Number(((v % mod) + mod) % mod);\r\n        await resultOutputCallback(normalize(finalOperand.a * targetPosition + finalOperand.b));\r\n    },\r\n    {\r\n        key: \"slam-shuffle\",\r\n        title: \"Slam Shuffle\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2,\r\n    }\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\nimport { Memory, parseMemory, execute } from \"../../../support/intcode\";\r\nimport { Queue } from \"../../../support/data-structure\";\r\n\r\ntype PacketSender = (n: number) => (((n: number) => undefined) | undefined);\r\n\r\ninterface Program {\r\n    memory: Memory;\r\n    inputQueue: Queue<Packet | number>;\r\n    address: number;\r\n    packetSender?: PacketSender;\r\n    nextPacket?: Packet;\r\n    resolver?: () => void;\r\n}\r\n\r\ninterface Packet {\r\n    x: number;\r\n    y?: number;\r\n    isFromNat?: boolean;\r\n}\r\n\r\nconst isPacket = (e: Packet | number): e is Packet => {\r\n    return (e as Packet).x !== undefined;\r\n};\r\n\r\nclass ClosingDown extends Error {\r\n    public readonly FLAG = \"ClosingDown\";\r\n    constructor(s: string) {\r\n        super(s);\r\n    }\r\n}\r\n\r\nexport const categorySix = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const memory = parseMemory(lines[0]);\r\n        const programs: Program[] = [...Array(50).keys()].map((i) => ({\r\n            memory,\r\n            inputQueue: new Queue<Packet | number>(),\r\n            address: i\r\n        }));\r\n\r\n        programs.forEach((p) => p.inputQueue.add(p.address));\r\n\r\n        let sentPackets = 0;\r\n        let receivedPackets = 0;\r\n        const iteration = 0;\r\n        let shouldClose = false;\r\n        const emptyPromise = async () => {\r\n            while (!shouldClose) {\r\n                await new Promise<void>((resolve, reject) => resolve());\r\n            }\r\n            await outputCallback(\"NAT closing down\");\r\n        };\r\n        const promises: Array<Promise<any>> = programs.map<Promise<any>>((p) =>\r\n            execute({\r\n                memory: p.memory,\r\n                input: async () => {\r\n                    if (shouldClose) {\r\n                        throw new ClosingDown(`Program ${p.address} closing down`);\r\n                    }\r\n                    if (p.nextPacket !== undefined) {\r\n                        if (p.nextPacket.y === undefined) {\r\n                            throw new Error(\"Packet wasn't full\");\r\n                        }\r\n                        const y = p.nextPacket.y;\r\n                        p.nextPacket = undefined;\r\n                        receivedPackets++;\r\n                        console.log(`Packet received, pkts: ${receivedPackets}/${sentPackets}`);\r\n                        return y;\r\n                    }\r\n                    const res = p.inputQueue.get();\r\n                    if (res === null) {\r\n                        return -1;\r\n                    } else if (isPacket(res)) {\r\n                        p.nextPacket = res;\r\n                        return res.x;\r\n                    } else {\r\n                        return res;\r\n                    }\r\n                },\r\n                output: async (n) => {\r\n                    if (shouldClose) {\r\n                        throw new ClosingDown(`Program ${p.address} closing down`);\r\n                    }\r\n                    if (!p.packetSender) {\r\n                        const address = n;\r\n                        p.packetSender = ((x) => {\r\n                            const packet: Packet = {\r\n                                x\r\n                            };\r\n                            if (address !== 255) {\r\n                                programs[address].inputQueue.add(packet);\r\n                            }\r\n                            return (y) => {\r\n                                if (address === 255) {\r\n                                    console.log(\"Packet: \" + y);\r\n                                    shouldClose = true;\r\n                                } else {\r\n                                    packet.y = y;\r\n                                    sentPackets++;\r\n                                    console.log(`Packet sent, pkts: ${receivedPackets}/${sentPackets}`);\r\n                                }\r\n                                return undefined;\r\n                            };\r\n                        });\r\n                    } else {\r\n                        p.packetSender = p.packetSender(n);\r\n                    }\r\n                },\r\n                close: () => {\r\n                    throw new ClosingDown(`Program ${p.address} is closing down`);\r\n                },\r\n                next: async () => {\r\n                    if (shouldClose) {\r\n                        throw new ClosingDown(`Program ${p.address} closing down`);\r\n                    }\r\n                    const promise = new Promise<void>((resolve, reject) => {\r\n                        p.resolver = resolve;\r\n                    });\r\n                    const otherResolver = programs[(p.address + 1) % programs.length].resolver;\r\n                    if (otherResolver) {\r\n                        otherResolver();\r\n                    }\r\n                    await promise;\r\n                }\r\n            })).concat([emptyPromise()]);\r\n\r\n        try {\r\n            await Promise.all(promises);\r\n        } catch (e) {\r\n            if ((e as ClosingDown).FLAG) {\r\n                // do nothing\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const memory = parseMemory(lines[0]);\r\n        const programs: Program[] = [...Array(50).keys()].map((i) => ({\r\n            memory,\r\n            inputQueue: new Queue<Packet | number>(),\r\n            address: i\r\n        }));\r\n\r\n        programs.forEach((p) => p.inputQueue.add(p.address));\r\n\r\n        let sentPackets = 0;\r\n        let receivedPackets = 0;\r\n        let natPacket: Packet | null = null;\r\n        const iteration = 0;\r\n        let shouldClose = false;\r\n        let lastNatY: number | null = null;\r\n        const isIdle = (): boolean => programs.filter((p) => p.inputQueue.isEmpty).length === programs.length;\r\n        const emptyPromise = async () => {\r\n            while (!shouldClose) {\r\n                if (natPacket === null || !isIdle()) {\r\n                    await new Promise<void>((resolve, reject) => resolve());\r\n                    continue;\r\n                }\r\n                if (natPacket === null) {\r\n                    throw new Error(\"What happened here?\");\r\n                }\r\n                console.log(\"NAT sending package\");\r\n                natPacket.isFromNat = true;\r\n                programs[0].inputQueue.add(natPacket);\r\n                natPacket = null;\r\n            }\r\n            await outputCallback(\"NAT closing down\");\r\n        };\r\n        const promises: Array<Promise<any>> = programs.map<Promise<any>>((p) =>\r\n            execute({\r\n                memory: p.memory,\r\n                input: async () => {\r\n                    if (shouldClose) {\r\n                        throw new ClosingDown(`Program ${p.address} closing down`);\r\n                    }\r\n                    if (p.nextPacket !== undefined) {\r\n                        if (p.nextPacket.y === undefined) {\r\n                            throw new Error(\"Packet wasn't full\");\r\n                        }\r\n                        const y = p.nextPacket.y;\r\n                        if (p.nextPacket.isFromNat) {\r\n                            if (y === lastNatY) {\r\n                                console.log(\"Found duplicate! \" + y);\r\n                                shouldClose = true;\r\n                                throw new ClosingDown(\"Closing down\");\r\n                            }\r\n                            console.log(`From NAT, not duplicate: ${y} !== ${lastNatY} `);\r\n                            lastNatY = y;\r\n                        }\r\n                        p.nextPacket = undefined;\r\n                        receivedPackets++;\r\n                        console.log(`Packet received, pkts: ${receivedPackets}/${sentPackets}`);\r\n                        return y;\r\n                    }\r\n                    const res = p.inputQueue.get();\r\n                    if (res === null) {\r\n                        return -1;\r\n                    } else if (isPacket(res)) {\r\n                        p.nextPacket = res;\r\n                        return res.x;\r\n                    } else {\r\n                        return res;\r\n                    }\r\n                },\r\n                output: async (n) => {\r\n                    if (shouldClose) {\r\n                        throw new ClosingDown(`Program ${p.address} closing down`);\r\n                    }\r\n                    if (!p.packetSender) {\r\n                        const address = n;\r\n                        p.packetSender = ((x) => {\r\n                            const packet: Packet = {\r\n                                x\r\n                            };\r\n                            if (address !== 255) {\r\n                                programs[address].inputQueue.add(packet);\r\n                            } else {\r\n                                console.log(\"Sending packet to NAT\");\r\n                                natPacket = packet;\r\n                            }\r\n                            return (y) => {\r\n                                packet.y = y;\r\n                                sentPackets++;\r\n                                console.log(`Packet sent, pkts: ${receivedPackets}/${sentPackets}`);\r\n                                return undefined;\r\n                            };\r\n                        });\r\n                    } else {\r\n                        p.packetSender = p.packetSender(n);\r\n                    }\r\n                },\r\n                close: () => {\r\n                    throw new ClosingDown(`Program ${p.address} is closing down`);\r\n                },\r\n                next: async () => {\r\n                    if (shouldClose) {\r\n                        throw new ClosingDown(`Program ${p.address} closing down`);\r\n                    }\r\n                    const promise = new Promise<void>((resolve, reject) => {\r\n                        p.resolver = resolve;\r\n                    });\r\n                    const otherResolver = programs[(p.address + 1) % programs.length].resolver;\r\n                    if (otherResolver) {\r\n                        otherResolver();\r\n                    }\r\n                    await promise;\r\n                }\r\n            })).concat([emptyPromise()]);\r\n\r\n        try {\r\n            await Promise.all(promises);\r\n        } catch (e) {\r\n            if ((e as ClosingDown).FLAG) {\r\n                // do nothing\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n    },\r\n    { key: \"category-six\", title: \"Category Six\", stars: 2, embeddedData: true }\r\n);\r\n","import { entryForFile } from \"../../entry\";\r\nimport { FixedSizeMatrix } from \"../../../support/matrix\";\r\nimport { getSurrounding, Coordinate, manhattanDistance, directions, CCoordinate } from \"../../../support/geometry\";\r\nimport { coordinateToKey } from \"./oxygen-system\";\r\n\r\ntype Cell = \"#\" | \".\";\r\n\r\nexport type Planet = FixedSizeMatrix<Cell>;\r\n\r\nexport interface PlanetWithDepth {\r\n    planet: Planet;\r\n    depth: number;\r\n}\r\n\r\nconst parseLines = (lines: string[]): Planet => {\r\n    const size = {y: lines.length, x: lines[0].length};\r\n    const matrix = new FixedSizeMatrix<Cell>(size);\r\n    const flatData = [...lines.join(\"\")];\r\n    if (flatData.filter((e) => e !== \"#\" && e !== \".\").length > 0) {\r\n        throw new Error(\"Invalid input\");\r\n    }\r\n    matrix.setFlatData(flatData.map((e) => e as Cell));\r\n    return matrix;\r\n};\r\n\r\nexport const getInnerAdjacentPositions = (c: Coordinate, innerSize: Coordinate): Coordinate[] => {\r\n    const center = getCenter(innerSize);\r\n    if (isDir(c, center, directions.up)) {\r\n        return range(innerSize.x).map((x) => ({x, y: 0}));\r\n    } else if (isDir(c, center, directions.down)) {\r\n        return range(innerSize.x).map((x) => ({x, y: innerSize.y - 1}));\r\n    } else if (isDir(c, center, directions.left)) {\r\n        return range(innerSize.y).map((y) => ({x: 0, y}));\r\n    } else if (isDir(c, center, directions.right)) {\r\n        return range(innerSize.y).map((y) => ({x: innerSize.x - 1, y}));\r\n    } else {\r\n        throw new Error(\"Invalid inner position\");\r\n    }\r\n};\r\n\r\nexport const getOuterAdjacentPositions = (c: Coordinate, outerSize: Coordinate): Coordinate[] => {\r\n    const center = getCenter(outerSize);\r\n    const result: Coordinate[] = [];\r\n    if (c.x === 0) {\r\n        result.push(directions.left.sum(center));\r\n    }\r\n    if (c.y === 0) {\r\n        result.push(directions.up.sum(center));\r\n    }\r\n    if (c.x === outerSize.x - 1) {\r\n        result.push(directions.right.sum(center));\r\n    }\r\n\r\n    if (c.y === outerSize.y - 1) {\r\n        result.push(directions.down.sum(center));\r\n    }\r\n    return result;\r\n};\r\n\r\nconst bugCounter = (acc: number, next: Cell) => acc + (next === \"#\" ? 1 : 0);\r\n\r\nconst countExternal = (c: Coordinate, main: PlanetWithDepth, outer: PlanetWithDepth): number => {\r\n    const adjacentCellPositions = getOuterAdjacentPositions(c, outer.planet.size);\r\n    const adjacentCells: Cell[] = adjacentCellPositions\r\n        .map((adjacentCellPosition) => outer.planet.get(adjacentCellPosition))\r\n        .filter((cell) => cell !== undefined)\r\n        .map((cell) => cell!);\r\n    return adjacentCells.concat(getSurrounding(c).map((e) => main.planet.get(e)).filter((e) => e).map((e) => e!))\r\n        .reduce(bugCounter, 0);\r\n};\r\n\r\nconst range = (n: number) => [...Array(n).keys()];\r\n\r\nconst isDir = (c: Coordinate, r: Coordinate, direction: CCoordinate): boolean => {\r\n    return manhattanDistance(c, direction.sum(r)) === 0;\r\n};\r\n\r\nconst countInternal = (c: Coordinate, main: PlanetWithDepth, inner: PlanetWithDepth): number => {\r\n    const adjacentCellPositions = getInnerAdjacentPositions(c, inner.planet.size);\r\n    const adjacentCells: Cell[] = adjacentCellPositions\r\n        .map((adjacentCellPosition) => inner.planet.get(adjacentCellPosition))\r\n        .filter((cell) => cell !== undefined)\r\n        .map((cell) => cell!);\r\n    return adjacentCells.concat(\r\n            getSurrounding(c)\r\n            .map((e) => main.planet.get(e))\r\n            .filter((e) => e)\r\n            .map((e) => e!)\r\n        )\r\n        .reduce(bugCounter, 0);\r\n};\r\nexport const countNeighbourBugs = (\r\n    c: Coordinate,\r\n    main: PlanetWithDepth,\r\n    outer: PlanetWithDepth | undefined,\r\n    inner: PlanetWithDepth | undefined\r\n): number => {\r\n    if (isExternalBorderCoordinate(main.planet.size, c) && outer) {\r\n        return countExternal(c, main, outer);\r\n    } else if (isInternalBorderCoordinate(main.planet.size, c) && inner) {\r\n        return countInternal(c, main, inner);\r\n    }\r\n    return getSurrounding(c)\r\n        .map((ci) => main.planet.get(ci))\r\n        .filter((ci) => ci)\r\n        .map((ci) => ci!)\r\n        .reduce(bugCounter, 0);\r\n};\r\n\r\nconst passDepthTime = async (ps: PlanetWithDepth[]): Promise<PlanetWithDepth[]> => {\r\n    ps = extendDepths(ps);\r\n    const result = ps.map((e) => ({\r\n        depth: e.depth,\r\n        planet: e.planet.copy()\r\n    }));\r\n    for (let i = 0; i < ps.length; i++) {\r\n        const outer = ps[i - 1];\r\n        const inner = ps[i + 1];\r\n        const main = ps[i];\r\n        main.planet.onEveryCell((coordinate, cell) => {\r\n            const nBugs = countNeighbourBugs(coordinate, main, outer, inner);\r\n            handleCellTimePass(cell, nBugs, result[i].planet, coordinate);\r\n        });\r\n    }\r\n    return result;\r\n};\r\n\r\nconst passPlanetTime = async (p: Planet): Promise<Planet> => {\r\n    const newPlanet = p.copy();\r\n    await newPlanet.onEveryCell((c, e) => {\r\n        const neighbours = getSurrounding(c);\r\n        const nBugs = neighbours.map((n) => p.get(n)).filter((n) => n === \"#\").length;\r\n        handleCellTimePass(e, nBugs, newPlanet, c);\r\n    });\r\n    return newPlanet;\r\n};\r\n\r\nconst isExternalBorderCoordinate = (size: Coordinate, c: Coordinate): boolean => {\r\n    return c.x === 0 || c.y === 0 || c.x === size.x - 1 || c.y === size.y - 1;\r\n};\r\n\r\nconst isInternalBorderCoordinate = (size: Coordinate, c: Coordinate): boolean => {\r\n    const center = getCenter(size);\r\n\r\n    return manhattanDistance(center, c) === 1;\r\n};\r\n\r\nconst emptyPlanetGenerator = (size: Coordinate): Planet => {\r\n    const flatData: Array<\".\"> = [...Array(size.x * size.y).keys()].map((e) => \".\");\r\n    const matrix = new FixedSizeMatrix<Cell>(size);\r\n    matrix.setFlatData(flatData);\r\n    const center = getCenter(size);\r\n    matrix.set(center, undefined);\r\n    return matrix;\r\n};\r\n\r\nconst getAdditionalDepths = (outer: PlanetWithDepth, inner: PlanetWithDepth): PlanetWithDepth[] => {\r\n    const size = outer.planet.size;\r\n    const externalBorderBugs = outer.planet.reduce(\r\n        (acc, next) => acc + (next.cell === \"#\" && isExternalBorderCoordinate(size, next.coordinate) ? 1 : 0),\r\n        0\r\n    );\r\n    const internalBorderBugs = inner.planet.reduce(\r\n        (acc, next) => acc + (next.cell === \"#\" && isInternalBorderCoordinate(size, next.coordinate) ? 1 : 0),\r\n        0\r\n    );\r\n\r\n    const result: PlanetWithDepth[] = [];\r\n\r\n    if (externalBorderBugs > 0) {\r\n        result.push({planet: emptyPlanetGenerator(size), depth: outer.depth - 1});\r\n    }\r\n    if (internalBorderBugs > 0) {\r\n        result.push({planet: emptyPlanetGenerator(size), depth: inner.depth + 1});\r\n    }\r\n    return result;\r\n};\r\n\r\nconst sortDepths = (planets: PlanetWithDepth[]): PlanetWithDepth[] => {\r\n    return planets.sort((a, b) => a.depth - b.depth);\r\n};\r\n\r\nconst extendDepths = (planets: PlanetWithDepth[]): PlanetWithDepth[] => {\r\n    planets = sortDepths(planets);\r\n    const [outer, inner] = [planets[0], planets[planets.length - 1 ]];\r\n    const additional = getAdditionalDepths(outer, inner);\r\n    additional.forEach((a) => planets.push(a));\r\n    return sortDepths(planets);\r\n};\r\n\r\nconst calculateValue = (p: Planet): number => {\r\n    let total = 0;\r\n    let current = 1;\r\n    for (let y = 0; y < p.size.y; y++) {\r\n        for (let x = 0; x < p.size.x; x++) {\r\n            if (p.get({x, y}) === \"#\") {\r\n                total += current;\r\n            }\r\n            current *= 2;\r\n        }\r\n    }\r\n    return total;\r\n};\r\n\r\nexport const planetOfDiscord = entryForFile(\r\n    async ({ lines, outputCallback }) => {\r\n        const visitedStates = new Set<string>();\r\n        const matrix = parseLines(lines);\r\n        let planet = matrix;\r\n        let iteration = 0;\r\n        while (true) {\r\n            iteration++;\r\n            if (iteration % 1000 === 0) {\r\n                await outputCallback(`Iteration ${iteration / 1000}k`);\r\n            }\r\n            const serializedState = planet.simpleSerialize();\r\n            if (visitedStates.has(serializedState)) {\r\n                break;\r\n            }\r\n            visitedStates.add(serializedState);\r\n            planet = await passPlanetTime(planet);\r\n        }\r\n        await outputCallback(`Found it after ${visitedStates.size}!`);\r\n        await outputCallback(\"Bio: \" + (calculateValue(planet)));\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        const basePlanet = parseLines(lines);\r\n        basePlanet.set({x: 2, y: 2}, undefined);\r\n        let depths: PlanetWithDepth[] = [{planet: basePlanet, depth: 0}];\r\n        for (let i = 0; i < 200; i++) {\r\n            depths = await passDepthTime(depths);\r\n        }\r\n\r\n        // for (const d of depths) {\r\n        //     await outputCallback(\"Depth: \" + d.depth);\r\n        //     await outputCallback(d.planet.toString(e => e || \" \"));\r\n        // }\r\n        await outputCallback(\r\n            depths\r\n                .map((d) => d.planet.reduce((acc, next) => acc + (next.cell === \"#\" ? 1 : 0), 0))\r\n                .reduce((acc, next) => acc + next)\r\n        );\r\n    },\r\n    { key: \"planet-of-discord\", title: \"Planet of Discord\", stars: 2, embeddedData: true}\r\n);\r\n\r\nexport function getCenter(size: Coordinate) {\r\n    return {\r\n        x: Math.floor(size.x / 2),\r\n        y: Math.floor(size.y / 2)\r\n    };\r\n}\r\n\r\nfunction handleCellTimePass(e: string | undefined, nBugs: number, newPlanet: FixedSizeMatrix<Cell>, c: Coordinate) {\r\n    if (e === \"#\") {\r\n        if (nBugs !== 1) {\r\n            newPlanet.set(c, \".\");\r\n        }\r\n    } else if (e === \".\") {\r\n        if (nBugs === 1 || nBugs === 2) {\r\n            newPlanet.set(c, \"#\");\r\n        }\r\n    } else if (e === undefined) {\r\n        // center\r\n    } else {\r\n        throw new Error(\"Invalid cell\");\r\n    }\r\n}\r\n","import { entryForFile } from \"../../entry\";\r\nimport { parseMemory, execute, stopExecution } from \"../../../support/intcode\";\r\nimport { UnknownSizeField } from \"../../../support/field\";\r\nimport { directions, CCoordinate, Coordinate, manhattanDistance } from \"../../../support/geometry\";\r\nimport { Field } from \"./oxygen-system\";\r\nimport { subsetGenerator } from \"../../../support/sequences\";\r\n\r\nexport const cryostasis = entryForFile(\r\n    async ({ lines, outputCallback, additionalInputReader }) => {\r\n        if (!additionalInputReader) {\r\n            await outputCallback(\"This puzzle requires input from the user, cannot run\");\r\n            return;\r\n        }\r\n        const memory = parseMemory(lines[0]);\r\n        const inputBuffer: number[] = [];\r\n        const outputBuffer: number[] = [];\r\n        const exploration = {\r\n            exploringLocation: { x: 0, y: 0 } as (Coordinate | null),\r\n            exploreResult: null as (string | null),\r\n            explored: new Set<string>(),\r\n            field: new UnknownSizeField<string>(),\r\n            currentPosition: { x: 0, y: 0 },\r\n            autoMovements: [] as string[]\r\n        };\r\n\r\n        const inventory = {\r\n            elements: [] as string[],\r\n            isPopulating: false\r\n        };\r\n\r\n        const hacking = {\r\n            isHacking: false,\r\n            subsets: [] as string[][],\r\n            dropping: null as (string[] | null),\r\n            lastDrop: null as (string[] | null),\r\n            fullInventory: [] as string[],\r\n            currentInventory: [] as string[],\r\n            startPosition: null as (Coordinate | null),\r\n            toRecover: [] as string[],\r\n            isTooMuch: null as (\"heavy\" | \"light\" | null)\r\n        };\r\n\r\n        const possibleMovements = {\r\n            populating: false,\r\n            movements: [] as string[]\r\n        };\r\n\r\n        const autoTake = {\r\n            enable: false,\r\n            toTake: [] as string[],\r\n            populating: false\r\n        };\r\n\r\n        const movementMap: { [key: string]: CCoordinate } = {\r\n            north: directions.up,\r\n            south: directions.down,\r\n            east: directions.right,\r\n            west: directions.left\r\n        };\r\n\r\n\r\n        const handleCustomCommand = async (line: string) => {\r\n            await outputCallback(\"\");\r\n            const words = line.toLowerCase().split(\" \").filter((e) => e.length > 0);\r\n            const command = words[1];\r\n            switch (command) {\r\n                case \"map\":\r\n                    const output = createMap(exploration);\r\n                    await outputCallback(output);\r\n                    break;\r\n                case \"inv\":\r\n                    await outputCallback(\"Inventory:\");\r\n                    for (const e of inventory.elements) {\r\n                        await outputCallback(\"* \" + e);\r\n                    }\r\n                    break;\r\n                case \"hack\":\r\n                    if (inventory.elements.length === 0) {\r\n                        await outputCallback(\"Cannot hack without inventory\");\r\n                        break;\r\n                    }\r\n                    autoTake.enable = false;\r\n                    hacking.subsets = [...subsetGenerator(inventory.elements, 0)];\r\n                    hacking.isHacking = true;\r\n                    hacking.fullInventory = [...inventory.elements];\r\n                    hacking.currentInventory = [...inventory.elements];\r\n                    hacking.startPosition = exploration.currentPosition;\r\n                    break;\r\n\r\n                case \"auto-take\":\r\n                    autoTake.enable = !autoTake.enable;\r\n                    await outputCallback(\"Auto take: \" + autoTake.enable);\r\n                    break;\r\n\r\n                case \"dirs\":\r\n                    await outputCallback(\"Doors here lead:\");\r\n                    for (const direction of possibleMovements.movements) {\r\n                        await outputCallback(\"- \" + direction);\r\n                    }\r\n                    break;\r\n\r\n                case \"auto-start\":\r\n                    if (manhattanDistance(exploration.currentPosition, { x: 0, y: 0 }) !== 0) {\r\n                        await outputCallback(\"Can only explore automatically from the start\");\r\n                    } else {\r\n                        exploration.autoMovements = [\r\n                            \"cheat auto-take\",\r\n                            \"east\",\r\n                            \"west\",\r\n                            \"north\",\r\n                            \"north\",\r\n                            \"east\",\r\n                            \"south\",\r\n                            \"south\",\r\n                            \"north\",\r\n                            \"north\",\r\n                            \"east\",\r\n                            \"south\",\r\n                            \"north\",\r\n                            \"north\",\r\n                            \"west\",\r\n                            \"west\",\r\n                            \"east\",\r\n                            \"north\",\r\n                            \"south\",\r\n                            \"east\",\r\n                            \"east\",\r\n                            \"north\",\r\n                            \"north\",\r\n                            \"south\",\r\n                            \"south\",\r\n                            \"south\",\r\n                            \"east\",\r\n                            \"south\",\r\n                            \"north\",\r\n                            \"west\",\r\n                            \"north\",\r\n                            \"west\",\r\n                            \"south\",\r\n                            \"west\",\r\n                            \"south\",\r\n                            \"south\",\r\n                            \"inv\"\r\n                        ];\r\n                    }\r\n                    break;\r\n\r\n\r\n                case \"clear\":\r\n                    await outputCallback(null);\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n            await outputCallback(\"Command?\");\r\n        };\r\n\r\n        const executeCommand = async (line: string) => {\r\n            line.split(\"\").map((e) => e.charCodeAt(0)).forEach((e) => inputBuffer.push(e));\r\n            inputBuffer.push(\"\\n\".charCodeAt(0));\r\n            await outputCallback(\"Executing: \" + line);\r\n        };\r\n        await execute({\r\n            memory,\r\n            input: async () => {\r\n                if (inputBuffer.length === 0) {\r\n                    while (true) {\r\n                        let line: string | null = null;\r\n                        if (autoTake.enable && autoTake.toTake.length > 0) {\r\n                            line = \"take \" + autoTake.toTake.shift()!;\r\n                        } else if (hacking.isHacking) {\r\n                            if (hacking.toRecover.length > 0) {\r\n                                const candidate = hacking.toRecover.shift()!;\r\n                                if (hacking.currentInventory.indexOf(candidate) < 0) {\r\n                                    hacking.currentInventory.push(candidate);\r\n                                    line = \"take \" + candidate;\r\n                                } else {\r\n                                    continue;\r\n                                }\r\n                            } else if (hacking.dropping === null) {\r\n                                if (hacking.subsets.length === 0) {\r\n                                    await outputCallback(\"Hacking failed\");\r\n                                    hacking.isHacking = false;\r\n                                    continue;\r\n                                }\r\n                                if (hacking.isTooMuch === \"light\" && hacking.lastDrop !== null) {\r\n                                    await outputCallback(\"----------------- Too light\");\r\n                                    const length = hacking.subsets.length;\r\n                                    hacking.subsets = hacking.subsets.filter((subset) => {\r\n                                        for (const hasDropped of hacking.lastDrop!) {\r\n                                            if (subset.indexOf(hasDropped) < 0) {\r\n                                                return true;\r\n                                            }\r\n                                        }\r\n                                        return false;\r\n                                    });\r\n                                    const drop = length - hacking.subsets.length;\r\n                                    if (drop > 0) {\r\n                                        await outputCallback(`~~~~~~~~~ Hooray! Dropped ${drop}`);\r\n                                    }\r\n                                    await outputCallback(\"Remaining: \" + hacking.subsets.length);\r\n                                } else if (hacking.isTooMuch === \"heavy\" && hacking.lastDrop !== null) {\r\n                                    await outputCallback(\"----------------- Too heavy\");\r\n                                    const length = hacking.subsets.length;\r\n                                    hacking.subsets = hacking.subsets.filter((subset) => {\r\n                                        for (const wouldDrop of subset) {\r\n                                            if (hacking.lastDrop!.indexOf(wouldDrop) < 0) {\r\n                                                return true;\r\n                                            }\r\n                                        }\r\n                                        return false;\r\n                                    });\r\n                                    const drop = length - hacking.subsets.length;\r\n                                    if (drop > 0) {\r\n                                        await outputCallback(`~~~~~~~~~ Hooray! Dropped ${drop}`);\r\n                                    }\r\n                                    await outputCallback(\"Remaining: \" + hacking.subsets.length);\r\n                                }\r\n                                hacking.dropping = hacking.subsets.shift()!;\r\n                                hacking.lastDrop = [...hacking.dropping];\r\n                                continue;\r\n                            } else if (hacking.dropping.length === 0) {\r\n                                line = \"east\";\r\n                                hacking.dropping = null;\r\n                            } else {\r\n                                const toDrop = hacking.dropping.shift()!;\r\n                                hacking.currentInventory = hacking.currentInventory.filter((e) => e !== toDrop);\r\n                                line = \"drop \" + toDrop;\r\n                            }\r\n                        } else if (exploration.autoMovements.length > 0) {\r\n                            line = exploration.autoMovements.shift()!;\r\n                        } else {\r\n                            line = await additionalInputReader.read();\r\n                        }\r\n                        if (line === null) {\r\n                            stopExecution();\r\n                            continue;\r\n                        }\r\n                        if (line.toLowerCase().startsWith(\"cheat\")) {\r\n                            await handleCustomCommand(line);\r\n                            continue;\r\n                        }\r\n                        if (movementMap[line] !== undefined) {\r\n                            const direction = movementMap[line];\r\n                            exploration.exploringLocation = direction.sum(exploration.currentPosition);\r\n                        }\r\n                        await executeCommand(line);\r\n                        break;\r\n                    }\r\n                }\r\n                return inputBuffer.shift()!;\r\n            },\r\n            output: async (o) => {\r\n                if (\"\\n\".charCodeAt(0) === o) {\r\n                    const line = outputBuffer.map((n) => String.fromCharCode(n)).join(\"\");\r\n                    const trimmed = line.trim();\r\n                    if (trimmed.length === 0) {\r\n                        possibleMovements.populating = false;\r\n                    }\r\n                    if (line.indexOf(\"Pressure-Sensitive Floor\") >= 0) {\r\n                        hacking.isTooMuch = null;\r\n                    }\r\n                    if (line.indexOf(\"loud, robotic voice says \\\"Alert!\") >= 0) {\r\n                        if (line.indexOf(\"are heavier than the detected\") >= 0) {\r\n                            hacking.isTooMuch = \"light\";\r\n                        } else {\r\n                            hacking.isTooMuch = \"heavy\";\r\n                        }\r\n                    }\r\n                    if (line === \"Command?\") {\r\n                        inventory.isPopulating = false;\r\n                        autoTake.populating = false;\r\n                        if (exploration.exploringLocation !== null && exploration.exploreResult !== null) {\r\n                            if (hacking.isHacking) {\r\n                                hacking.isHacking = false;\r\n                                hacking.dropping = null;\r\n                                hacking.subsets = [];\r\n                                hacking.toRecover = [];\r\n                            }\r\n                            exploration.field.set(exploration.exploringLocation, exploration.exploreResult);\r\n                            exploration.explored.add(exploration.exploreResult);\r\n                            exploration.currentPosition = exploration.exploringLocation;\r\n                            exploration.exploringLocation = null;\r\n                            exploration.exploreResult = null;\r\n                        }\r\n                    } else if (possibleMovements.populating) {\r\n                        possibleMovements.movements.push(trimmed.slice(2));\r\n                    } else if (inventory.isPopulating && trimmed.length > 0) {\r\n                        inventory.elements.push(trimmed.slice(2));\r\n                    } else if (autoTake.populating && trimmed.length > 0) {\r\n                        const item = trimmed.slice(2);\r\n                        if ([\r\n                            \"infinite loop\",\r\n                            \"giant electromagnet\",\r\n                            \"escape pod\",\r\n                            \"molten lava\",\r\n                            \"photons\"\r\n                        ].indexOf(item) < 0) {\r\n                            autoTake.toTake.push(item);\r\n                        }\r\n                    } else if (trimmed.startsWith(\"==\")) {\r\n                        if (exploration.exploringLocation !== null && exploration.exploreResult === null) {\r\n                            exploration.exploreResult = trimmed;\r\n                        } else if (exploration.exploreResult !== null) {\r\n                            exploration.exploreResult = null;\r\n                            exploration.exploringLocation = null;\r\n                            if (hacking.isHacking) {\r\n                                // failed exploration\r\n                                hacking.toRecover = [...inventory.elements];\r\n                            }\r\n                        }\r\n                    } else if (trimmed === \"Items in your inventory:\") {\r\n                        inventory.isPopulating = true;\r\n                        inventory.elements = [];\r\n                    } else if (trimmed === \"Items here:\" && autoTake.enable) {\r\n                        autoTake.populating = true;\r\n                        autoTake.toTake = [];\r\n                    } else if (trimmed === \"Doors here lead:\") {\r\n                        possibleMovements.populating = true;\r\n                        possibleMovements.movements = [];\r\n                    }\r\n                    await outputCallback(line);\r\n                    outputBuffer.length = 0;\r\n                } else {\r\n                    outputBuffer.push(o);\r\n                }\r\n            }\r\n        });\r\n\r\n        await outputCallback(\"Program finished\");\r\n        await outputCallback(createMap(exploration));\r\n        additionalInputReader.close();\r\n    },\r\n    async ({ lines, outputCallback }) => {\r\n        throw Error(\"Not implemented\");\r\n    },\r\n    { key: \"cryostasis\", title: \"Cryostasis\", stars: 2, hasAdditionalInput: true, embeddedData: true }\r\n);\r\n\r\nfunction createMap(\r\n    exploration: {\r\n        exploringLocation: Coordinate | null;\r\n        exploreResult: string | null;\r\n        explored: Set<string>;\r\n        field: UnknownSizeField<string>;\r\n        currentPosition: { x: number; y: number; };\r\n        autoMovements: string[];\r\n    }\r\n) {\r\n    const maxLength = [...exploration.explored.values()].reduce((acc, next) => Math.max(acc, next.length), 0);\r\n    const matrix = exploration.field.toMatrix();\r\n    const output = matrix.toString((e) => {\r\n        if (!e) {\r\n            return \"\".padStart(maxLength, \" \");\r\n        }\r\n        const padding = maxLength - e.length;\r\n        return \"\".padStart(Math.floor(padding / 2), \" \") + e + \"\".padEnd(Math.ceil(padding / 2), \" \");\r\n    });\r\n    return output;\r\n}\r\n","import { entry as rocketTyranny } from \"./rocket-tyranny\";\r\nimport { programAlarm } from \"./program-alarm\";\r\nimport { crossedWires } from \"./crossed-wires\";\r\nimport { secureContainer } from \"./secure-container\";\r\nimport { sunnyAsteroids } from \"./sunny-asteroids\";\r\nimport { universalObritMap } from \"./universal-orbit-map\";\r\nimport { amplificationCircuit } from \"./amplification-circuit\";\r\nimport { spaceImageFormat } from \"./space-image-format\";\r\nimport { sensorBoost } from \"./sensor-boost\";\r\nimport { monitoringStation } from \"./monitoring-station\";\r\nimport { spacePolice } from \"./space-police\";\r\nimport { nBodyProblem } from \"./n-body-problem\";\r\nimport { carePackage } from \"./care-package\";\r\nimport { spaceStoichiometry } from \"./space-stoichiometry\";\r\nimport { oxygenSystem } from \"./oxygen-system\";\r\nimport { flawedFrequencyTransmission } from \"./flawed-frequency-transmission\";\r\nimport { setAndForget } from \"./set-and-forget\";\r\nimport { manyWorldInterpretation } from \"./many-worlds-interpretation\";\r\nimport { tractorBeam } from \"./tractor-beam\";\r\nimport { donutMaze } from \"./donut-maze\";\r\nimport { springdroidAdventure } from \"./springroid-adventure\";\r\nimport { slamShuffle } from \"./slam-shuffle\";\r\nimport { categorySix } from \"./category-six\";\r\nimport { planetOfDiscord } from \"./planet-of-discord\";\r\nimport { cryostasis } from \"./cryostasis\";\r\n\r\nexport const entries = [\r\n        rocketTyranny,\r\n        programAlarm,\r\n        crossedWires,\r\n        secureContainer,\r\n        sunnyAsteroids,\r\n        universalObritMap,\r\n        amplificationCircuit,\r\n        spaceImageFormat,\r\n        sensorBoost,\r\n        monitoringStation,\r\n        spacePolice,\r\n        nBodyProblem,\r\n        carePackage,\r\n        spaceStoichiometry,\r\n        oxygenSystem,\r\n        flawedFrequencyTransmission,\r\n        setAndForget,\r\n        manyWorldInterpretation,\r\n        tractorBeam,\r\n        donutMaze,\r\n        springdroidAdventure,\r\n        slamShuffle,\r\n        categorySix,\r\n        planetOfDiscord,\r\n        cryostasis\r\n    ];\r\n","import { Coordinate, serialization } from \"../../../../support/geometry\";\r\nimport { Drawable, Pause, ScreenBuilder, ScreenPrinter } from \"../../../entry\";\r\n\r\nexport const buildVisualizer = (screenBuilder: ScreenBuilder | undefined, pause: Pause): IBinaryBoardingVisualizer => {\r\n    if (screenBuilder) {\r\n        return new RealVisualizer(screenBuilder, pause);\r\n    } else {\r\n        return new DummyVisualizer();\r\n    }\r\n};\r\n\r\nexport interface IBinaryBoardingVisualizer {\r\n    setup(seats: number[]): Promise<void>;\r\n    setSeatOwned(seat: number): Promise<void>;\r\n\r\n}\r\n\r\nclass DummyVisualizer implements IBinaryBoardingVisualizer {\r\n    public async setup(seats: number[]): Promise<void> { }\r\n    public async setSeatOwned(seat: number): Promise<void> { }\r\n\r\n}\r\n\r\nconst constants = (() => {\r\n    const seatSize = {x: 10, y: 3};\r\n    const internalSpacing = {x: 6, y: 3};\r\n    const seatOffset = {x: seatSize.x + internalSpacing.x, y: seatSize.y + internalSpacing.y};\r\n    const columns = 8;\r\n    const expected = 1024;\r\n    const rows = expected / columns;\r\n\r\n    const screenSize = {\r\n        x: columns * seatOffset.x + internalSpacing.x,\r\n        y: rows * seatOffset.y + internalSpacing.y\r\n    };\r\n\r\n    return {\r\n        rows,\r\n        columns,\r\n        internalSpacing,\r\n        seatSize,\r\n        screenSize,\r\n        seatOffset\r\n    };\r\n})();\r\n\r\ntype LocalDrawable = Drawable & {type: \"rectangle\"};\r\n\r\nclass RealVisualizer implements IBinaryBoardingVisualizer {\r\n    private printer!: ScreenPrinter;\r\n    private readonly drawables: {[key: string]: LocalDrawable} = {};\r\n    constructor(\r\n        private readonly screenBuilder: ScreenBuilder,\r\n        private readonly pause: Pause\r\n    ) { }\r\n\r\n    public async setup(seats: number[]): Promise<void> {\r\n        this.printer = await this.screenBuilder.requireScreen(constants.screenSize);\r\n        this.printer.setManualRender();\r\n\r\n        for (const seat of seats) {\r\n            const drawable = this.buildDrawable(seat);\r\n            this.drawables[serialization.serialize(drawable.c)] = drawable.d;\r\n        }\r\n\r\n        await this.printer.replace(Object.values(this.drawables));\r\n        this.printer.forceRender();\r\n        await this.pause();\r\n    }\r\n\r\n    public async setSeatOwned(seat: number): Promise<void> {\r\n        const coordinates = this.getCoordinates(seat);\r\n        const serialized = serialization.serialize(coordinates);\r\n        if (this.drawables[serialized]) {\r\n            this.drawables[serialized].color = \"red\";\r\n        } else {\r\n            const {d: drawable } = this.buildDrawable(seat);\r\n            drawable.color = \"red\";\r\n            this.drawables[serialized] = drawable;\r\n            this.printer.add(drawable);\r\n        }\r\n        await this.printer.forceRender();\r\n        await this.pause();\r\n    }\r\n\r\n    private getCoordinates(seat: number): Coordinate {\r\n        const coordinates = {\r\n            x: Math.floor(seat / constants.rows),\r\n            y: seat % constants.rows\r\n        };\r\n        return coordinates;\r\n    }\r\n\r\n    private buildDrawable(seat: number): {c: Coordinate, d: LocalDrawable} {\r\n        const coordinates = this.getCoordinates(seat);\r\n        const viewCoordinates = {\r\n            x: coordinates.x * constants.seatOffset.x + constants.internalSpacing.x,\r\n            y: coordinates.y * constants.seatOffset.y + constants.internalSpacing.y\r\n        };\r\n        return {\r\n            d: {\r\n                type: \"rectangle\",\r\n                c: viewCoordinates,\r\n                color: \"white\",\r\n                id: seat.toString(),\r\n                size: constants.seatSize\r\n            },\r\n            c: coordinates\r\n        };\r\n    }\r\n}\r\n","import { entryForFile } from \"../../../entry\";\r\nimport { buildVisualizer } from \"./visualizer\";\r\n\r\nexport const binaryBoarding = entryForFile(\r\n    async ({ lines, resultOutputCallback, pause, screen }) => {\r\n        const visualizer = buildVisualizer(screen, pause);\r\n        const boards = lines\r\n            .map((l) => l.split(\"\").map((e) => (e === \"B\" || e === \"R\") ? \"1\" : \"0\").join(\"\"))\r\n            .map((l) => parseInt(l, 2));\r\n        await visualizer.setup(boards);\r\n        const max = boards\r\n            .reduce((acc, next) => Math.max(acc, next));\r\n        await resultOutputCallback(max);\r\n    },\r\n    async ({ lines, resultOutputCallback, pause, screen }) => {\r\n        const visualizer = buildVisualizer(screen, pause);\r\n        const boards = lines\r\n            .map((l) => l.split(\"\").map((e) => (e === \"B\" || e === \"R\") ? \"1\" : \"0\").join(\"\"))\r\n            .map((l) => parseInt(l, 2))\r\n            .sort((a, b) => a - b);\r\n        await visualizer.setup(boards);\r\n        for (let i = 0; i < boards.length - 2; i++) {\r\n                if (boards[i] === boards[i + 1] - 2) {\r\n                    await visualizer.setSeatOwned(boards[i] + 1);\r\n                    await resultOutputCallback(boards[i] + 1);\r\n                    return;\r\n                }\r\n            }\r\n        await resultOutputCallback(\"Didn't find it :(\");\r\n    },\r\n    {\r\n        key: \"binary-boarding\",\r\n        title: \"Binary Boarding\",\r\n        stars: 2,\r\n        supportsQuickRunning: true,\r\n        embeddedData: true\r\n    }\r\n);\r\n","import { Passport, validFields } from \".\";\r\nimport { sumCoordinate } from \"../../../../support/geometry\";\r\nimport { Drawable, Pause, ScreenBuilder, ScreenPrinter } from \"../../../entry\";\r\n\r\nexport interface IPassportProcessingVisualizer {\r\n    setupPassports(passports: Passport[]): Promise<void>;\r\n    setWrongFields(passportIndex: number, fields: string[]): Promise<void>;\r\n    setValid(passportIndex: number): Promise<void>;\r\n}\r\n\r\nexport const buildVisualizer = (screenBuilder: ScreenBuilder | undefined, pause: Pause) => {\r\n    if (screenBuilder) {\r\n        return new PassportProcessingVisualizer(screenBuilder, pause);\r\n    }\r\n    return new DummyVisualizer();\r\n};\r\n\r\nclass DummyVisualizer implements IPassportProcessingVisualizer {\r\n    public async setValid(passportIndex: number): Promise<void> { }\r\n    public async setupPassports(passports: Passport[]): Promise<void> { }\r\n    public async setWrongFields(passportIndex: number, fields: string[]): Promise<void> { }\r\n\r\n}\r\n\r\nconst constants = (() => {\r\n    const fieldFullSize = {x: 10, y: 2};\r\n    const fieldColumns = 2;\r\n    const fieldRows = 4;\r\n    const padding = {x: 2, y: 2};\r\n    const internalSpacing = 2;\r\n    const externalSpacing = 4;\r\n    const passportSize = {\r\n        x: (fieldFullSize.x + internalSpacing) * fieldColumns + internalSpacing + padding.x * 2,\r\n        y: internalSpacing + (fieldFullSize.y + internalSpacing) * fieldRows + internalSpacing + padding.y * 2\r\n    };\r\n    const passportOffset = sumCoordinate(passportSize, {x: externalSpacing, y: externalSpacing});\r\n    const columns = 13;\r\n\r\n    return {\r\n        padding,\r\n        fieldRows,\r\n        internalSpacing,\r\n        externalSpacing,\r\n        fieldOffset: {x: fieldFullSize.x + internalSpacing, y: fieldFullSize.y + internalSpacing},\r\n        passportSize,\r\n        columns,\r\n        passportOffset,\r\n        screenWidth: passportOffset.x * columns + externalSpacing,\r\n        fieldFullSize,\r\n        heightCalculator(entries: number) {\r\n            return Math.ceil(entries / columns) * passportOffset.y + externalSpacing;\r\n        }\r\n    };\r\n\r\n})();\r\n\r\ntype LocalDrawable = Drawable & {type: \"rectangle\"};\r\n\r\nclass PassportProcessingVisualizer implements IPassportProcessingVisualizer {\r\n\r\n    private passportDrawables: Array<{main: LocalDrawable, fields: {[key: string]: LocalDrawable}}> = [];\r\n\r\n    private screenPrinter!: ScreenPrinter;\r\n    constructor(\r\n        private readonly screenBuilder: ScreenBuilder,\r\n        private readonly pause: Pause\r\n    ) { }\r\n\r\n    public async setValid(passportIndex: number): Promise<void> {\r\n        this.passportDrawables[passportIndex].main.color = \"lime\";\r\n        this.screenPrinter.forceRender();\r\n        await this.pause();\r\n    }\r\n    public async setupPassports(passports: Passport[]): Promise<void> {\r\n        this.screenPrinter = await this.screenBuilder.requireScreen({\r\n            x: constants.screenWidth,\r\n            y: constants.heightCalculator(passports.length)\r\n        });\r\n        this.screenPrinter.setManualRender();\r\n        const perRow = Math.ceil(passports.length / constants.columns);\r\n        this.passportDrawables = passports.map((p, index) => {\r\n            const coordinates = {y: Math.floor(index / constants.columns), x: index % constants.columns};\r\n            const viewCoordinates = sumCoordinate({\r\n                x: constants.externalSpacing,\r\n                y: constants.externalSpacing\r\n            }, {\r\n                x: coordinates.x * constants.passportOffset.x,\r\n                y: coordinates.y * constants.passportOffset.y\r\n            });\r\n            const main: LocalDrawable = {\r\n                type: \"rectangle\",\r\n                color: \"white\",\r\n                id: \"passport-\" + index,\r\n                size: constants.passportSize,\r\n                c: viewCoordinates,\r\n            };\r\n            const fields: {[key: string]: LocalDrawable} = {};\r\n            for (let i = 0; i < validFields.length; i++) {\r\n                const fieldCoordinates = {x: Math.floor(i / constants.fieldRows), y: i % constants.fieldRows};\r\n                fields[validFields[i]] = {\r\n                    type: \"rectangle\",\r\n                    color: \"grey\",\r\n                    c: sumCoordinate({\r\n                        x: fieldCoordinates.x * constants.fieldOffset.x +\r\n                            constants.internalSpacing +\r\n                            constants.padding.x,\r\n                        y: fieldCoordinates.y * constants.fieldOffset.y +\r\n                            constants.internalSpacing +\r\n                            constants.padding.y\r\n                    }, viewCoordinates),\r\n                    id: `passport-${index}-field-${validFields[i]}`,\r\n                    size: constants.fieldFullSize\r\n                };\r\n            }\r\n            return {main, fields};\r\n        });\r\n\r\n        const drawables: Drawable[] = [];\r\n        for (const p of this.passportDrawables) {\r\n            drawables.push(p.main);\r\n            Object.values(p.fields).forEach((i) => drawables.push(i));\r\n        }\r\n        await this.screenPrinter.replace(drawables);\r\n        await this.pause();\r\n\r\n    }\r\n    public async setWrongFields(passportIndex: number, fields: string[]): Promise<void> {\r\n        const passport = this.passportDrawables[passportIndex];\r\n        passport.main.color = \"indianred\";\r\n        for (const field of fields) {\r\n            passport.fields[field].color = \"darkred\";\r\n        }\r\n        this.screenPrinter.forceRender();\r\n        await this.pause();\r\n    }\r\n}\r\n","import { entryForFile } from \"../../../entry\";\r\nimport { buildVisualizer } from \"./visualizer\";\r\n\r\nexport interface Passport {[key: string]: string; }\r\n\r\nexport const parseLines = (lines: string[]): Passport[] => {\r\n    const passports: Passport[] = [];\r\n    let currentPassport: Passport = {};\r\n    for (let line of lines) {\r\n        line = line.trim();\r\n        if (!line && Object.keys(currentPassport).length > 0) {\r\n            passports.push(currentPassport);\r\n            currentPassport = {};\r\n        } else {\r\n            const tokens = line.split(\" \").map((t) => t.trim().split(\":\"));\r\n            for (const [field, value] of tokens) {\r\n                currentPassport[field] = value;\r\n            }\r\n        }\r\n    }\r\n    if (Object.keys(currentPassport).length > 0) {\r\n        passports.push(currentPassport);\r\n    }\r\n    return passports;\r\n};\r\n\r\nexport const validFields = [\r\n    \"byr\",\r\n    \"iyr\",\r\n    \"eyr\",\r\n    \"hgt\",\r\n    \"hcl\",\r\n    \"ecl\",\r\n    \"pid\",\r\n    \"cid\"\r\n];\r\n\r\nconst hasPassportValidFields = (passport: Passport): boolean => {\r\n    const expectedKeys = new Set<string>(validFields.slice(0, validFields.length - 1));\r\n    for (const field of Object.keys(passport)) {\r\n        expectedKeys.delete(field);\r\n    }\r\n    return expectedKeys.size === 0;\r\n};\r\n\r\nconst getMissingFields = (passport: Passport): string[] => {\r\n    const expectedKeys = new Set<string>(validFields.slice(0, validFields.length - 1));\r\n    for (const field of Object.keys(passport)) {\r\n        expectedKeys.delete(field);\r\n    }\r\n    return [...expectedKeys.values()];\r\n};\r\n\r\nconst getInvalidFields = (passport: Passport): string[] => {\r\n    const missing = getMissingFields(passport);\r\n    const invalid = Object.keys(passport).filter((field) => !isValidField(field, passport[field]));\r\n    return missing.concat(invalid);\r\n};\r\n\r\nexport const isPassportValid = (passport: Passport): boolean => {\r\n    if (!hasPassportValidFields(passport)) {\r\n        return false;\r\n    }\r\n    for (const field of Object.keys(passport)) {\r\n        if (!isValidField(field, passport[field])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\n\r\nexport const isValidField = (field: string, value: string): boolean => {\r\n        const hasFourDigits = () => value.length === 4;\r\n        const intValue = () => parseInt(value, 10);\r\n        switch (field) {\r\n            case \"byr\":\r\n                if (!hasFourDigits()) {\r\n                    return false;\r\n                }\r\n                if (intValue() < 1920 || intValue() > 2002) {\r\n                    return false;\r\n                }\r\n                break;\r\n\r\n            case \"iyr\":\r\n                if (!hasFourDigits() || intValue() < 2010 || intValue() > 2020) {\r\n                    return false;\r\n                }\r\n                break;\r\n            case \"eyr\":\r\n                if (!hasFourDigits() || intValue() < 2020 || intValue() > 2030) {\r\n                    return false;\r\n                }\r\n                break;\r\n            case \"hgt\":\r\n                const suffix = value.slice(-2);\r\n                const height = parseInt(value.slice(0, -2), 10);\r\n                if (height.toString() !== value.slice(0, -2)) {\r\n                    return false;\r\n                }\r\n                if (suffix === \"cm\") {\r\n                    if (height < 150 || height > 193) {\r\n                        return false;\r\n                    }\r\n                } else if (suffix === \"in\") {\r\n                    if (height < 59 || height > 76) {\r\n                        return false;\r\n                    }\r\n                } else {\r\n                    return false;\r\n                }\r\n                break;\r\n\r\n            case \"hcl\":\r\n                if (!/^#[0-9a-f]{6}$/.test(value)) {\r\n                    return false;\r\n                }\r\n                break;\r\n            case \"ecl\":\r\n                const expectedEyes = [\r\n\"amb\", \"blu\", \"brn\", \"gry\", \"grn\", \"hzl\", \"oth\"\r\n                ];\r\n                if (!expectedEyes.includes(value)) {\r\n                    return false;\r\n                }\r\n                break;\r\n            case \"pid\":\r\n                if (!/^[0-9]{9}$/.test(value)) {\r\n                    console.log(value);\r\n                    return false;\r\n                }\r\n                break;\r\n            case \"cid\":\r\n                break;\r\n            default:\r\n                console.log(\"Invalid field\");\r\n                break;\r\n        }\r\n        return true;\r\n};\r\n\r\nexport const passportProcessing = entryForFile(\r\n    async ({\r\n        lines,\r\n        resultOutputCallback,\r\n        screen,\r\n        pause,\r\n        setAutoStop\r\n    }) => {\r\n        setAutoStop();\r\n        const visualizer = buildVisualizer(screen, pause);\r\n        const passports = parseLines(lines);\r\n        await visualizer.setupPassports(passports);\r\n        let validPassports = 0;\r\n        for (let i = 0; i < passports.length; i++) {\r\n            const passport = passports[i];\r\n            const missing = getMissingFields(passport);\r\n            if (missing.length > 0) {\r\n                await visualizer.setWrongFields(i, missing);\r\n            } else {\r\n                await visualizer.setValid(i);\r\n                validPassports++;\r\n            }\r\n        }\r\n        await resultOutputCallback(validPassports);\r\n    },\r\n    async ({\r\n        lines,\r\n        resultOutputCallback,\r\n        screen,\r\n        pause,\r\n        setAutoStop\r\n    }) => {\r\n        setAutoStop();\r\n        const visualizer = buildVisualizer(screen, pause);\r\n        const passports = parseLines(lines);\r\n        await visualizer.setupPassports(passports);\r\n        let validPassports = 0;\r\n        for (let i = 0; i < passports.length; i++) {\r\n            const passport = passports[i];\r\n            const missing = getInvalidFields(passport);\r\n            if (missing.length > 0) {\r\n                await visualizer.setWrongFields(i, missing);\r\n            } else {\r\n                await visualizer.setValid(i);\r\n                validPassports++;\r\n            }\r\n        }\r\n        await resultOutputCallback(validPassports);\r\n    },\r\n    {\r\n        key: \"passport-processing\",\r\n        title: \"Passport Processing\",\r\n        stars: 2,\r\n        customComponent: \"pause-and-run\",\r\n        suggestedDelay: 20,\r\n        supportsQuickRunning: true,\r\n        embeddedData: true\r\n    }\r\n);\r\n\r\n/*\r\n8:39\r\nOk, let's start today, I've done the scaffolding and read the puzzle.\r\nThe first part seems easy, let's see if it is so\r\n\r\n11 minutes later...\r\nFirst part done at the first try, the parsing went pretty smooth and it was pretty fun,\r\nlet's see about the second\r\n\r\n1 hour later...\r\nOk, turns out I hated the second part. I did a stupid error with regexes (wasn't there\r\nsomething about trying to solve one problem with regexes and having two problems as a\r\nconsequence?), I tried to validate the passport with /[0-9]{6}/, when of course I\r\nshould have used /^[0-9]{6}$/.\r\nHaving one extra valid passport meant I had no clue about what rule was failing,\r\nand that meant double checking all the rules; when I found no issue, I started writing\r\ntests. Luckily, my case was covered in the test cases given in the examples; at the\r\nsame time, it was the last example, so it took some time. In any case, it's done,\r\nlet's forget about this one, shall we?\r\n*/\r\n","import { Coordinate } from \"../../../../support/geometry\";\r\nimport { Drawable, Pause, ScreenBuilder, ScreenPrinter } from \"../../../entry\";\r\n\r\nconst constantsBuilder = ((expectedPasswords: number) => {\r\n    const padding = 10;\r\n\r\n    const columns = 12;\r\n    const spacing = 2;\r\n    const lineHeight = 4;\r\n    const passwordsPerColumn = expectedPasswords / columns;\r\n\r\n    const screenSize = {\r\n        x: 600 + padding * 2,\r\n        y: padding * 2 + passwordsPerColumn * (lineHeight + spacing) + padding * 2\r\n    };\r\n\r\n    const indicatorSize = lineHeight;\r\n    const columnLength = (screenSize.x - padding * 2) / columns;\r\n    return {\r\n        screenSize,\r\n        spacing,\r\n        lineHeight,\r\n        indicatorSize,\r\n        columns,\r\n        padding,\r\n        passwordsPerColumn,\r\n        columnLength,\r\n        lineMaxLength: columnLength - padding - spacing - indicatorSize,\r\n    };\r\n});\r\nexport const buildVisualizer = async (\r\n    screenBuilder: ScreenBuilder | undefined,\r\n    pause: Pause\r\n): Promise<IPasswordPhilosophyVisualizer> =>\r\n    screenBuilder ? new PasswordPhilosophyVisualizer(screenBuilder, pause) : new DummyPasswordPhilosophyVisualizer();\r\n\r\nexport interface IPasswordPhilosophyVisualizer {\r\n    setupPasswords(passwords: string[]): Promise<void>;\r\n    colorPassword(passwordIndex: number, indexes: number[], isValid: boolean): Promise<void>;\r\n}\r\nclass PasswordPhilosophyVisualizer implements IPasswordPhilosophyVisualizer {\r\n    private passwords: Array<Drawable & {type: \"rectangle\"}> = [];\r\n    private indicators: Drawable[] = [];\r\n    private letterSize: number = 0;\r\n    private constants?: ReturnType<typeof constantsBuilder>;\r\n    private printer?: ScreenPrinter;\r\n    constructor(private screenBuilder: ScreenBuilder, private pause: Pause) {\r\n    }\r\n\r\n    public async setupPasswords(passwords: string[]): Promise<void> {\r\n        this.constants = constantsBuilder(passwords.length);\r\n        await this.buildScreen();\r\n        if (this.printer) {\r\n            const maxLength = passwords.reduce((acc, next) => Math.max(acc, next.length), 0);\r\n            this.letterSize = this.constants.lineMaxLength / maxLength;\r\n            this.passwords = passwords.map((password, i) => {\r\n                const columnIndex = Math.floor(i / this.constants!.passwordsPerColumn);\r\n                const rowIndex = Math.floor(i % this.constants!.passwordsPerColumn);\r\n                return {\r\n                    color: \"white\",\r\n                    id: i.toString(),\r\n                    type: \"rectangle\",\r\n                    c: {\r\n                        x: this.constants!.padding +\r\n                            columnIndex * this.constants!.columnLength,\r\n                        y: rowIndex * (this.constants!.lineHeight + this.constants!.spacing) +\r\n                            this.constants!.padding\r\n                    },\r\n                    size: {\r\n                        x: this.constants!.lineMaxLength * (password.length / maxLength),\r\n                        y: this.constants!.lineHeight\r\n                    }\r\n                };\r\n            });\r\n            this.indicators = passwords.map((password, i) => {\r\n                const columnIndex = Math.floor(i / this.constants!.passwordsPerColumn);\r\n                const rowIndex = Math.floor(i % this.constants!.passwordsPerColumn);\r\n                return {\r\n                    color: \"white\",\r\n                    id: i.toString() + \"-indicator\",\r\n                    type: \"rectangle\",\r\n                    c: {\r\n                        x: this.constants!.padding +\r\n                            (columnIndex + 1) * this.constants!.columnLength -\r\n                            this.constants!.padding - this.constants!.indicatorSize,\r\n                        y: rowIndex * (this.constants!.lineHeight + this.constants!.spacing) +\r\n                            this.constants!.padding\r\n                        },\r\n                    size: {x: this.constants!.indicatorSize, y: this.constants!.lineHeight}\r\n                };\r\n\r\n            });\r\n            const drawables = (this.passwords as Drawable[]).concat(this.indicators);\r\n            this.printer.replace(drawables);\r\n            await this.pause(5);\r\n        }\r\n    }\r\n    public async colorPassword(passwordIndex: number, indexes: number[], isValid: boolean): Promise<void> {\r\n        if (this.printer) {\r\n            const drawablePassword = this.passwords[passwordIndex];\r\n            const selectedLetters: Drawable[] = indexes.map((index) => {\r\n                return {\r\n                    type: \"rectangle\",\r\n                    c: {x: drawablePassword.c.x + index * this.letterSize, y: drawablePassword.c.y },\r\n                    color: isValid ? \"lime\" : \"red\",\r\n                    id: `${drawablePassword.id}-letter-${index}`,\r\n                    size: {x: this.letterSize, y: drawablePassword.size.y}\r\n                };\r\n            });\r\n            for (const letter of selectedLetters) {\r\n                this.printer.add(letter);\r\n            }\r\n            this.indicators[passwordIndex].color = isValid ? \"lime\" : \"red\";\r\n            await this.pause();\r\n        }\r\n    }\r\n\r\n    private async buildScreen() {\r\n        if (this.constants) {\r\n            this.printer = await this.screenBuilder.requireScreen(this.constants.screenSize);\r\n        }\r\n    }\r\n}\r\n\r\nclass DummyPasswordPhilosophyVisualizer implements IPasswordPhilosophyVisualizer {\r\n    public async setupPasswords(passwords: string[]): Promise<void> {\r\n    }\r\n    public async colorPassword(passwordIndex: number, indexes: number[], isValid: boolean): Promise<void> {\r\n    }\r\n\r\n}\r\n","/*\r\n8:46\r\nAlright, let's start this.\r\n\r\nSo, the password validation puzzles are back. I haven't actually enjoyed these too much in the previous years,\r\nbut we're still at the second day, nothing exciting expected.\r\nI decided yesterday to try and do visualizations for each day, but I'm actually not sure\r\nwhat I could do here, I'll think about it later.\r\n\r\n8:54\r\nOk, first star done, easy as expected, I think that I've done it in about 6 minutes after the scaffolding.\r\n\r\n9:00\r\nAnd done. I did a stupid error (adding 1 instead of subtracting 1 to the index), losing a lot of time. That's it for the\r\nproblem solving part, not much to optimize here, I'll try and think of a visualization later on\r\n*/\r\n\r\ninterface PasswordLine {\r\n    password: string;\r\n    minRepetitions: number;\r\n    maxRepetitions: number;\r\n    letter: string;\r\n}\r\n\r\nconst parseLines = (lines: string[]): PasswordLine[] =>\r\n    lines.map((line) => {\r\n        const [header, password] = line.split(\": \");\r\n        const [repetitions, letter] = header.split(\" \");\r\n        const [minRepetitions, maxRepetitions] = repetitions.split(\"-\").map((e) => parseInt(e, 10));\r\n        return {\r\n            letter,\r\n            minRepetitions,\r\n            maxRepetitions,\r\n            password\r\n        };\r\n    });\r\n\r\ntype PasswordChecker = (passwordLine: PasswordLine) => [boolean, number[]];\r\n\r\nconst isLineValid: PasswordChecker = (passwordLine) => {\r\n    const repetitions = passwordLine\r\n        .password\r\n        .split(\"\")\r\n        .map((e, i) => ({e, i}))\r\n        .filter((e) => e.e === passwordLine.letter);\r\n    const isValid =\r\n        repetitions.length <= passwordLine.maxRepetitions &&\r\n        repetitions.length >= passwordLine.minRepetitions;\r\n    return [isValid, repetitions.map((e) => e.i)];\r\n};\r\n\r\nconst isLineReallyValid: PasswordChecker = (passwordLine) => {\r\n    const targetIndexes = [passwordLine.minRepetitions, passwordLine.maxRepetitions]\r\n        .map((e) => e - 1);\r\n    const targets = targetIndexes\r\n        .map((e) => passwordLine.password[e]);\r\n    const matching = targets.filter((e) => e === passwordLine.letter).length;\r\n    return [matching === 1, targetIndexes];\r\n};\r\n\r\nimport { entryForFile, Pause, ScreenBuilder } from \"../../../entry\";\r\nimport { buildVisualizer } from \"./visualizer\";\r\n\r\nexport const passwordPhilosophy = entryForFile(\r\n    async ({ lines, resultOutputCallback, screen, pause }) => {\r\n        await runEntry(screen, pause, lines, isLineValid, resultOutputCallback);\r\n    },\r\n    async ({ lines, resultOutputCallback, screen, pause }) => {\r\n        await runEntry(screen, pause, lines, isLineReallyValid, resultOutputCallback);\r\n    },\r\n    {\r\n        key: \"password-philosophy\",\r\n        title: \"Password Philosophy\",\r\n        customComponent: \"pause-and-run\",\r\n        stars: 2,\r\n        suggestedDelay: 20,\r\n        supportsQuickRunning: true,\r\n        embeddedData: true\r\n    }\r\n);\r\n\r\nasync function runEntry(\r\n    screen: ScreenBuilder | undefined,\r\n    pause: Pause,\r\n    lines: string[],\r\n    passwordChecker: PasswordChecker,\r\n    outputCallback: (outputLine: any) => Promise<void>) {\r\n    const visualizer = await buildVisualizer(screen, pause);\r\n    const passwordLines = parseLines(lines);\r\n    await visualizer.setupPasswords(passwordLines.map((l) => l.password));\r\n\r\n    let satisfied = 0;\r\n    for (let i = 0; i < passwordLines.length; i++) {\r\n        const line = passwordLines[i];\r\n        const [isValid, indexes] = passwordChecker(line);\r\n        await visualizer.colorPassword(i, indexes, isValid);\r\n        if (isValid) {\r\n            satisfied++;\r\n        }\r\n    }\r\n    await outputCallback(satisfied);\r\n}\r\n","import { getCoordinateForGrid, multiplyCoordinate, sumCoordinate } from \"../../../../support/geometry\";\r\nimport { Drawable, Pause, ScreenBuilder, ScreenPrinter } from \"../../../entry\";\r\n\r\nconst constants = (() => {\r\n    const columns = 10;\r\n\r\n    const letterColumns = 2;\r\n    const letterRows = 13;\r\n\r\n    const letterSpacing = {x: 4, y: 2};\r\n    const letterSize = {x: 8, y: 4};\r\n    const letterOffset = sumCoordinate(letterSpacing, letterSize);\r\n\r\n    const groupSpacing = {\r\n        x: 4,\r\n        y: 4\r\n    };\r\n    const groupSize = {\r\n        x: letterSpacing.x + letterColumns * letterOffset.x,\r\n        y: letterSpacing.y + letterRows * letterOffset.y\r\n    };\r\n\r\n    const groupOffset = sumCoordinate(groupSize, groupSpacing);\r\n\r\n    return {\r\n        columns,\r\n        groupSize,\r\n        groupSpacing,\r\n        groupOffset,\r\n        letterSize,\r\n        letterOffset,\r\n        letterSpacing,\r\n        letterRows,\r\n        rows: 1,\r\n        screenSizeBuilder(entries: number) {\r\n            return {\r\n                x: columns * groupOffset.x + groupSpacing.x,\r\n                y: 1 * groupOffset.y + groupSpacing.y\r\n            };\r\n        }\r\n    };\r\n})();\r\nexport interface ICustomCustomsVisualizer {\r\n    setup(groups: number): Promise<void>;\r\n    addLetter(group: number, letter: string): Promise<void>;\r\n    setLetters(group: number, letters: Iterable<string>): Promise<void>;\r\n    startGroup(group: number): Promise<void>;\r\n    endGroup(group: number): Promise<void>;\r\n}\r\n\r\nexport const buildVisualizer = (screenBuilder: ScreenBuilder | undefined, pause: Pause) => {\r\n    if (screenBuilder) {\r\n        return new RealVisualizer(screenBuilder, pause);\r\n    } else {\r\n        return new DummyVisualizer();\r\n    }\r\n};\r\n\r\ntype LocalDrawable = Drawable & {type: \"rectangle\"};\r\n\r\nconst clear = \"slategray\";\r\nconst ok = \"lime\";\r\n\r\nclass RealVisualizer implements ICustomCustomsVisualizer {\r\n    private printer!: ScreenPrinter;\r\n    private drawables: Array<{main: LocalDrawable; letters: LocalDrawable[]}> = [];\r\n    constructor(\r\n        private readonly screenBuilder: ScreenBuilder,\r\n        private readonly pause: Pause\r\n    ) {\r\n    }\r\n    public async setLetters(group: number, letters: Iterable<string>): Promise<void> {\r\n        this.clearLetters(group);\r\n        for (const letter of letters) {\r\n            this.drawables[this.getGroupIndex(group)].letters[this.getIndex(letter)].color = ok;\r\n        }\r\n        this.printer.forceRender();\r\n        await this.pause();\r\n    }\r\n\r\n    public async startGroup(group: number): Promise<void> {\r\n        const index = this.getGroupIndex(group);\r\n        this.clearPreviousLetters(index);\r\n    }\r\n    public async endGroup(group: number): Promise<void> {\r\n    }\r\n    public async setup(groups: number): Promise<void> {\r\n        const screenSize = constants.screenSizeBuilder(groups);\r\n        this.printer = await this.screenBuilder.requireScreen(screenSize);\r\n        this.printer.setManualRender();\r\n        for (let i = 0; i < constants.columns; i++) {\r\n            const coordinates = {\r\n                x: i,\r\n                y: 0\r\n            };\r\n            const viewCoordinates = {\r\n                x: constants.groupSpacing.x + constants.groupOffset.x * coordinates.x,\r\n                y: constants.groupSpacing.y + constants.groupOffset.y * coordinates.y\r\n            };\r\n            this.drawables.push({\r\n                main: {\r\n                    type: \"rectangle\",\r\n                    color: \"white\",\r\n                    id: \"main-\" + i.toString(),\r\n                    size: constants.groupSize,\r\n                    c: viewCoordinates\r\n                },\r\n                letters: [...Array(26).keys()].map((iLetter) => {\r\n                    const letterCoordinates = getCoordinateForGrid(iLetter, constants.letterRows);\r\n                    const letterViewCoordinates =\r\n                        sumCoordinate(\r\n                            sumCoordinate(\r\n                                multiplyCoordinate(\r\n                                    letterCoordinates,\r\n                                    constants.letterOffset\r\n                                ),\r\n                                viewCoordinates)\r\n                            ,\r\n                            constants.letterSpacing\r\n                        );\r\n                    return {\r\n                        type: \"rectangle\",\r\n                        size: constants.letterSize,\r\n                        c: letterViewCoordinates,\r\n                        color: clear,\r\n                        id: `${i}-${iLetter}`\r\n                    };\r\n                })\r\n            });\r\n        }\r\n        const totalDrawables = this.drawables.flatMap((d) => [\r\n            d.main\r\n        ].concat(d.letters));\r\n        await this.printer.replace(totalDrawables);\r\n        this.printer.forceRender();\r\n        await this.pause();\r\n    }\r\n    public async addLetter(group: number, letter: string): Promise<void> {\r\n        this.drawables[this.getGroupIndex(group)].letters[this.getIndex(letter)].color = ok;\r\n        this.printer.forceRender();\r\n        await this.pause();\r\n    }\r\n    private getGroupIndex(group: number) {\r\n        return group % constants.columns;\r\n\r\n    }\r\n    private clearPreviousLetters(i: number) {\r\n        const previous = [1].map((k) => i + constants.columns + k).map((e) => e % constants.columns);\r\n        for (const p of previous) {\r\n            this.clearLetters(p);\r\n        }\r\n    }\r\n\r\n    private clearLetters(p: number) {\r\n        this.drawables[this.getGroupIndex(p)].letters.forEach((l) => l.color = clear);\r\n    }\r\n    private getIndex(letter: string): number {\r\n        return letter.charCodeAt(0) - \"a\".charCodeAt(0);\r\n    }\r\n}\r\n\r\nclass DummyVisualizer implements ICustomCustomsVisualizer {\r\n    public async setLetters(group: number, letters: Iterable<string>): Promise<void> { }\r\n    public async startGroup(group: number): Promise<void> { }\r\n    public async endGroup(group: number): Promise<void> { }\r\n    public async setup(groups: number): Promise<void> { }\r\n    public async addLetter(group: number, letter: string): Promise<void> { }\r\n\r\n}\r\n","import wu from \"wu\";\r\nimport { buildGroupsFromSeparator } from \"../../../../support/sequences\";\r\nimport { entryForFile } from \"../../../entry\";\r\nimport { buildVisualizer } from \"./visualizer\";\r\nconst intersect = <T>(a: Set<T>, b: Set<T>): Set<T> => {\r\n    const result = new Set<T>();\r\n    for (const e of a) {\r\n        if (b.has(e)) {\r\n            result.add(e);\r\n        }\r\n    }\r\n    return result;\r\n};\r\n\r\nconst buildAnswers = (line: string, set?: Set<string> | undefined): Set<string> => {\r\n    if (set === undefined) {\r\n        set = new Set<string>();\r\n    }\r\n    line.split(\"\").forEach((l) => set!.add(l));\r\n    return set;\r\n};\r\n\r\nexport const customCustoms = entryForFile(\r\n    async ({\r\n        lines,\r\n        resultOutputCallback,\r\n        setAutoStop,\r\n        pause,\r\n        screen\r\n    }) => {\r\n        setAutoStop();\r\n        const visualizer = buildVisualizer(screen, pause);\r\n        const groups = [...buildGroupsFromSeparator(lines, (l) => l.length === 0)];\r\n        await visualizer.setup(groups.length);\r\n        let total = 0;\r\n        for (let i = 0; i < groups.length; i++) {\r\n            await visualizer.startGroup(i);\r\n            const group = groups[i];\r\n            const answers = group.reduce((acc, next) => buildAnswers(next, acc), new Set<string>());\r\n            for (const letter of answers) {\r\n                await visualizer.addLetter(i, letter);\r\n            }\r\n            await visualizer.endGroup(i);\r\n            total += answers.size;\r\n        }\r\n        await resultOutputCallback(total);\r\n    },\r\n    async ({\r\n        lines,\r\n        resultOutputCallback,\r\n        setAutoStop,\r\n        screen,\r\n        pause\r\n    }) => {\r\n        setAutoStop();\r\n        const visualizer = buildVisualizer(screen, pause);\r\n        const groups = [...buildGroupsFromSeparator(lines, (l) => l.length === 0)];\r\n        await visualizer.setup(groups.length);\r\n\r\n        let total = 0;\r\n        for (let i = 0; i < groups.length; i++) {\r\n            const group = groups[i];\r\n            await visualizer.startGroup(i);\r\n            let answers: Set<string> | undefined;\r\n            for (const line of group) {\r\n                if (answers === undefined) {\r\n                    answers = buildAnswers(line);\r\n                } else {\r\n                    answers = intersect(answers, buildAnswers(line));\r\n                }\r\n                await visualizer.setLetters(i, answers);\r\n            }\r\n            if (answers) {\r\n                total += answers.size;\r\n            }\r\n        }\r\n\r\n        await resultOutputCallback(total);\r\n    },\r\n    {\r\n        key: \"custom-customs\",\r\n        title: \"Custom Customs\",\r\n        stars: 2,\r\n        suggestedDelay: 10,\r\n        customComponent: \"pause-and-run\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true\r\n    }\r\n);\r\n","import { Coordinate } from \"../../../../support/geometry\";\r\nimport { Drawable, ScreenBuilder } from \"../../../entry\";\r\n\r\nexport type VisualizationStatus = \"discarded\" | \"current\" | \"normal\" | \"found\" | \"dead\" | \"candidate\";\r\nexport interface VisualizeInstruction {status: VisualizationStatus; index: number; maxOrMin?: \"max\" | \"min\"; }\r\nexport type Visualizer = (...data: VisualizeInstruction[]) => Promise<void>;\r\n\r\n\r\nexport async function updateVisualizerFound(i: number, j: number, visualizer: Visualizer | undefined) {\r\n    if (i < j && visualizer) {\r\n        await visualizer({ status: \"found\", index: i }, { status: \"found\", index: j });\r\n    }\r\n}\r\n\r\nexport async function updateVisualizerCurrent(\r\n    visualizer: Visualizer | undefined,\r\n    i: number, visualizerIndex: number,\r\n    maxOrMin: \"max\" | \"min\"\r\n) {\r\n    if (visualizer) {\r\n        await visualizer({ status: \"discarded\", index: i }, { status: \"current\", index: visualizerIndex, maxOrMin });\r\n    }\r\n}\r\n\r\nexport async function seedVisualizer(visualizer: Visualizer | undefined, i: number, j: number) {\r\n    if (visualizer) {\r\n        const seedInstructions: VisualizeInstruction[] = [];\r\n        for (let k = i; k <= j; k++) {\r\n            seedInstructions.push({ status: k === i || k === j ? \"current\" : \"normal\", index: k, maxOrMin: i === k ? \"min\" : \"max\" });\r\n        }\r\n        await visualizer(...seedInstructions);\r\n    }\r\n}\r\n\r\nexport async function buildVisualizer(\r\n    screen: ScreenBuilder | undefined,\r\n    ns: number[],\r\n    start: number,\r\n    pause: () => Promise<void>\r\n) {\r\n    const cellWidth = 2;\r\n    const screenWidth = ns.length * cellWidth * 2 + 20;\r\n    const maxHeight = 120;\r\n    const indicatorHeight = 20;\r\n    const screenHeight = maxHeight + indicatorHeight + 10;\r\n    const xCalculator = (index: number) => index * cellWidth * 2 + 10;\r\n\r\n    return await (screen ? async () => {\r\n        const mapColor = (status: VisualizationStatus): string => {\r\n            switch (status) {\r\n                case \"current\":\r\n                    return \"yellow\";\r\n                case \"discarded\":\r\n                    return \"red\";\r\n                case \"found\":\r\n                    return \"lime\";\r\n                case \"normal\":\r\n                    return \"white\";\r\n                case \"dead\":\r\n                    return \"black\";\r\n                case \"candidate\":\r\n                    return \"cyan\";\r\n            }\r\n        };\r\n        const screenPrinter = await screen.requireScreen({ x: screenWidth, y: screenHeight });\r\n        const drawables: Drawable[] = [];\r\n        const maxValue = ns[ns.length - 1];\r\n        for (let i = 0; i < ns.length; i++) {\r\n            const value = ns[i];\r\n            const height = (value / maxValue) * maxHeight;\r\n            drawables.push({\r\n                c: { x: xCalculator(i), y: indicatorHeight + (maxHeight - height) + 10 },\r\n                color: mapColor(\"normal\"),\r\n                id: i.toString(),\r\n                type: \"rectangle\",\r\n                size: { x: cellWidth, y: height }\r\n            });\r\n        }\r\n        const minCurrent: Drawable = {\r\n            c: { x: xCalculator(start), y: 0 },\r\n            color: mapColor(\"current\"),\r\n            id: \"minCurrent\",\r\n            type: \"rectangle\",\r\n            size: { x: cellWidth, y: indicatorHeight }\r\n        };\r\n        const maxCurrent: Drawable = {\r\n            c: { x: xCalculator(ns.length - 1), y: 0 },\r\n            color: mapColor(\"current\"),\r\n            id: \"maxCurrent\",\r\n            type: \"rectangle\",\r\n            size: { x: cellWidth, y: indicatorHeight }\r\n        };\r\n        const candidateCoordinates: Coordinate = {x: -4, y: 0};\r\n        const candidate: Drawable = {\r\n            c: candidateCoordinates,\r\n            color: mapColor(\"candidate\"),\r\n            id: \"candidate\",\r\n            type: \"rectangle\",\r\n            size: { x: cellWidth, y: indicatorHeight }\r\n        };\r\n        drawables.push(minCurrent);\r\n        drawables.push(maxCurrent);\r\n        await screenPrinter.replace(drawables);\r\n        return async (...data: VisualizeInstruction[]) => {\r\n            for (const instruction of data) {\r\n                if (instruction.index >= 0 && instruction.index < drawables.length) {\r\n                    drawables[instruction.index].color = mapColor(instruction.status);\r\n                    const newX = xCalculator(instruction.index);\r\n                    if (instruction.status === \"current\") {\r\n                        if (instruction.maxOrMin === \"max\") {\r\n                            maxCurrent.c.x = newX;\r\n                        } else {\r\n                            minCurrent.c.x = newX;\r\n                        }\r\n                    } else if (instruction.status === \"candidate\") {\r\n                        if (candidateCoordinates.x < 0) {\r\n                            screenPrinter.add(candidate);\r\n                        }\r\n                        candidateCoordinates.x = newX;\r\n                    }\r\n                }\r\n            }\r\n            await pause();\r\n        };\r\n    } : async () => undefined)();\r\n}\r\n\r\nexport async function updateDeadCandidateVisualizer(visualizer: Visualizer | undefined, i: number) {\r\n    if (visualizer) {\r\n        const toVisualize: VisualizeInstruction[] = [{ status: \"candidate\", index: i }];\r\n        if (i > 0) {\r\n            toVisualize.push({ status: \"dead\", index: i - 1 });\r\n        }\r\n        await visualizer(...toVisualize);\r\n    }\r\n}\r\n","import { entryForFile } from \"../../../entry\";\r\nimport {\r\n    buildVisualizer,\r\n    seedVisualizer,\r\n    updateDeadCandidateVisualizer,\r\n    updateVisualizerCurrent,\r\n    updateVisualizerFound,\r\n    Visualizer\r\n} from \"./visualizer\";\r\n\r\nconst findProd = async (\r\n    ns: number[],\r\n    target: number,\r\n    startFrom: number = 0,\r\n    visualizer?: Visualizer\r\n): Promise<number | null> => {\r\n    let i = startFrom;\r\n    let j = ns.length - 1;\r\n    await seedVisualizer(visualizer, i, j);\r\n    while (ns[i] + ns[j] !== target && i < j) {\r\n        if (ns[i] + ns[j] > target) {\r\n            await updateVisualizerCurrent(visualizer, j, j - 1, \"max\");\r\n            j--;\r\n        } else {\r\n            await updateVisualizerCurrent(visualizer, i, i + 1, \"min\");\r\n            i++;\r\n        }\r\n    }\r\n    await updateVisualizerFound(i, j, visualizer);\r\n    return i < j ? ns[i] * ns[j] : null;\r\n};\r\n\r\nexport const reportRepair = entryForFile(\r\n    async ({\r\n        lines,\r\n        outputCallback,\r\n        resultOutputCallback,\r\n        screen,\r\n        pause,\r\n        setAutoStop\r\n    }) => {\r\n        setAutoStop();\r\n        const ns = lines.map((line) => parseInt(line, 10)).sort((a, b) => a - b);\r\n        console.log(ns);\r\n        const visualizer = await buildVisualizer(screen, ns, 0, pause);\r\n        const result = await findProd(ns, 2020, 0, visualizer);\r\n        await resultOutputCallback(result || \"Not found :(\");\r\n    },\r\n    async ({\r\n        lines,\r\n        outputCallback,\r\n        resultOutputCallback,\r\n        screen,\r\n        pause,\r\n        setAutoStop\r\n    }) => {\r\n        setAutoStop();\r\n        const ns = lines.map((line) => parseInt(line, 10)).sort((a, b) => a - b);\r\n        const visualizer = await buildVisualizer(screen, ns, 1, pause);\r\n        for (let i = 0; i < ns.length; i++) {\r\n            await updateDeadCandidateVisualizer(visualizer, i);\r\n            const result = await findProd(ns, 2020 - ns[i], i + 1, visualizer);\r\n            if (result) {\r\n                await resultOutputCallback(result * ns[i]);\r\n                return;\r\n            }\r\n        }\r\n        await outputCallback(\"Not found :(\");\r\n\r\n    },\r\n    {\r\n        key: \"report-repair\",\r\n        title: \"Report Repair\",\r\n        customComponent: \"pause-and-run\",\r\n        stars: 2 ,\r\n        supportsQuickRunning: true,\r\n        embeddedData: true\r\n    }\r\n);\r\n","import { Coordinate, scalarCoordinates, serialization } from \"../../../../support/geometry\";\r\nimport { Drawable, Pause, ScreenBuilder, ScreenPrinter } from \"../../../entry\";\r\n\r\nexport interface ITobogganTrajectoryVisualizer {\r\n    setupField(grid: string[][], size: Coordinate): Promise<void>;\r\n    moveToboggan(position: Coordinate, collides: boolean): Promise<void>;\r\n    resetField(): Promise<void>;\r\n}\r\n\r\nexport const buildVisualizer = (screenBuilder: ScreenBuilder | undefined, pause: Pause) => {\r\n    if (screenBuilder) {\r\n        return new TobogganVisualizer(screenBuilder, pause);\r\n    } else {\r\n        return new DummyVisualizer();\r\n    }\r\n};\r\n\r\nconst constants = {\r\n    cellSize: 2,\r\n    fullCellSize: {x: 2, y: 2}\r\n};\r\n\r\ninterface Dictionary<T> { [key: string]: T; }\r\n\r\nclass TobogganVisualizer implements ITobogganTrajectoryVisualizer {\r\n    private screen!: ScreenPrinter;\r\n    private readonly trees: Dictionary<Drawable & {type: \"rectangle\"}> = {};\r\n    private readonly player: Drawable & {type: \"rectangle\"} = {\r\n        type: \"rectangle\",\r\n        id: \"player\",\r\n        color: \"white\",\r\n        size: constants.fullCellSize,\r\n        c: {x: 0, y: 0}\r\n    };\r\n    constructor(\r\n        private readonly screenBuilder: ScreenBuilder,\r\n        private readonly pause: Pause\r\n    ) { }\r\n\r\n    public async setupField(grid: string[][], size: Coordinate): Promise<void> {\r\n        this.screen = await this.screenBuilder.requireScreen(scalarCoordinates(size, constants.cellSize));\r\n        for (let x = 0; x < size.x; x++) {\r\n            for (let y = 0; y < size.y; y++) {\r\n                if (grid[y][x] === \"#\") {\r\n                    this.trees[serialization.serialize({x, y})] = {\r\n                        type: \"rectangle\",\r\n                        c: scalarCoordinates({x, y}, constants.cellSize),\r\n                        id: serialization.serialize({x, y}),\r\n                        color: \"lime\",\r\n                        size: constants.fullCellSize\r\n                    };\r\n                }\r\n            }\r\n        }\r\n        this.screen.replace(Object.values(this.trees));\r\n        this.screen.add(this.player);\r\n        await this.pause();\r\n    }\r\n    public async resetField() {\r\n        for (const tree of Object.values(this.trees)) {\r\n            tree.color = \"lime\";\r\n        }\r\n        this.player.c = {x: 0, y: 0};\r\n        await this.pause();\r\n    }\r\n    public async moveToboggan(position: Coordinate, collides: boolean): Promise<void> {\r\n        this.player.c = scalarCoordinates(position, constants.cellSize);\r\n        if (collides) {\r\n            this.trees[serialization.serialize(position)].color = \"red\";\r\n        }\r\n        await this.pause();\r\n    }\r\n\r\n}\r\n\r\nclass DummyVisualizer implements ITobogganTrajectoryVisualizer {\r\n    public async setupField(grid: string[][]): Promise<void> {\r\n    }\r\n    public async moveToboggan(position: Coordinate, collides: boolean): Promise<void> {\r\n    }\r\n    public async resetField() {\r\n    }\r\n\r\n}\r\n","import { CCoordinate, Coordinate } from \"../../../../support/geometry\";\r\nimport { entryForFile } from \"../../../entry\";\r\nimport { buildVisualizer } from \"./visualizer\";\r\n\r\nconst parseLines = (lines: string[]): {grid: string[][], size: Coordinate} => {\r\n    const height = lines.length;\r\n    const width = lines[0].length;\r\n    return {grid: lines.map((line) => line.split(\"\")), size: {x: width, y: height}};\r\n};\r\n\r\nexport const tobogganTrajectory = entryForFile(\r\n    async ({ lines, resultOutputCallback, pause, screen, setAutoStop }) => {\r\n        setAutoStop();\r\n        const visualizer = buildVisualizer(screen, pause);\r\n        const {grid, size} = parseLines(lines);\r\n        await visualizer.setupField(grid, size);\r\n        const slope = new CCoordinate(3, 1);\r\n        let currentCoordinate = {x: 0, y: 0};\r\n        let trees = 0;\r\n        while (currentCoordinate.y < size.y) {\r\n            const collides = grid[currentCoordinate.y][currentCoordinate.x] === \"#\";\r\n            if (collides) {\r\n                trees++;\r\n            }\r\n            await visualizer.moveToboggan(currentCoordinate, collides);\r\n            currentCoordinate = slope.sum(currentCoordinate);\r\n            currentCoordinate.x %= size.x;\r\n        }\r\n        await resultOutputCallback(trees);\r\n    },\r\n    async ({ lines, resultOutputCallback, pause, screen, setAutoStop}) => {\r\n        setAutoStop();\r\n        const visualizer = buildVisualizer(screen, pause);\r\n        const {grid, size} = parseLines(lines);\r\n        await visualizer.setupField(grid, size);\r\n        const candidateSlopes = [\r\n            {x: 1, y: 1},\r\n            {x: 3, y: 1},\r\n            {x: 5, y: 1},\r\n            {x: 7, y: 1},\r\n            {x: 1, y: 2}\r\n        ].map((s) => new CCoordinate(s.x, s.y));\r\n        let result = 1;\r\n        for (const slope of candidateSlopes) {\r\n            await visualizer.resetField();\r\n            let currentCoordinate = {x: 0, y: 0};\r\n            let trees = 0;\r\n            while (currentCoordinate.y < size.y) {\r\n                const collides = grid[currentCoordinate.y][currentCoordinate.x] === \"#\";\r\n                if (collides) {\r\n                    trees++;\r\n                }\r\n                await visualizer.moveToboggan(currentCoordinate, collides);\r\n                currentCoordinate = slope.sum(currentCoordinate);\r\n                currentCoordinate.x %= size.x;\r\n            }\r\n            result *= trees;\r\n        }\r\n        await resultOutputCallback(result);\r\n    },\r\n    {\r\n        key: \"toboggan-trajectory\",\r\n        title: \"Toboggan Trajectory\",\r\n        stars: 2,\r\n        customComponent: \"pause-and-run\",\r\n        suggestedDelay: 50,\r\n        supportsQuickRunning: true,\r\n        embeddedData: true\r\n    }\r\n);\r\n\r\n/*\r\n    8:38\r\n    Ok, let's start\r\n    8:39\r\n    Nice! I like this one, it seems I can do some interesting visualizations later on.\r\n    I'll probably use my field for the second part, but let's do it more simply for the first\r\n    8:46\r\n    Ok, first part done, let's see the second one\r\n    8:50\r\n    Way easier than expected, no field necessary.\r\n    I remembered the third days to be more difficult! So, 12 minutes, would I have been able to\r\n    get in the leaderboard? ... Of course not,\r\n    00:04:56 is the slowest time. Ok, that's it for now, I'll try some visualizations\r\n    later\r\n*/\r\n","import { DefaultListDictionaryString, Queue } from \"../../../../support/data-structure\";\r\nimport { entryForFile } from \"../../../entry\";\r\n\r\ninterface BagRule {\r\n    color: string;\r\n    contains?: Array<{quantity: number; color: string}>;\r\n}\r\n\r\nconst parseContainingBags = (line: string): Array<{quantity: number; color: string}> => {\r\n    const startFrom = line.indexOf(\"contain\") + \"contain\".length;\r\n    line = line.slice(startFrom).trim();\r\n    const bags = line\r\n        .replace(\".\", \"\")\r\n        .split(\", \")\r\n        .map((l) => l.split(\" \"))\r\n        .map((l) => {\r\n            const quantity = parseInt(l[0], 10);\r\n            const color = l.slice(1, 3).join(\" \");\r\n            return {\r\n                quantity,\r\n                color\r\n            };\r\n        });\r\n    return bags;\r\n};\r\n\r\nconst parseLines = (lines: string[]): BagRule[] => {\r\n    return lines.map((line) => {\r\n        const splitIndex = line.indexOf(\"bags\");\r\n        const mainColor = line.slice(0, splitIndex).trim();\r\n        const isEmpty = line.indexOf(\"contain no\") >= 0;\r\n        return {\r\n            color: mainColor,\r\n            contains: isEmpty ? undefined : parseContainingBags(line)\r\n        };\r\n    });\r\n};\r\n\r\nconst toString = (bagRules: BagRule[]): string => {\r\n    return bagRules\r\n        .map((b) => `${b.color} bags contain ${b.contains ?\r\n            b.contains.map((e) => `${e.quantity} ${e.color} bag${e.quantity > 1 ? \"s\" : \"\"}`).join(\",\")\r\n            : \"no other bags\"}.`)\r\n        .join(\"\\n\");\r\n};\r\n\r\nexport const handyHaversacks = entryForFile(\r\n    async ({ lines, resultOutputCallback: resultOutputcallback }) => {\r\n        const reverseRules = new DefaultListDictionaryString<string>();\r\n        const rules = parseLines(lines);\r\n        for (const rule of rules) {\r\n            if (rule.contains) {\r\n                for (const target of rule.contains) {\r\n                    reverseRules.add(target.color, rule.color);\r\n                }\r\n            }\r\n        }\r\n        const results: Set<string> = new Set<string>();\r\n        const mainTarget = \"shiny gold\";\r\n        const toExplore = new Queue<string>();\r\n        toExplore.add(mainTarget);\r\n        while (!toExplore.isEmpty) {\r\n            const newCandidates = reverseRules.get(toExplore.get()!);\r\n            for (const candidate of newCandidates) {\r\n                if (!results.has(candidate)) {\r\n                    if (candidate === mainTarget) {\r\n                        throw new Error(\"Unexpected\");\r\n                    }\r\n                    results.add(candidate);\r\n                    toExplore.add(candidate);\r\n                }\r\n            }\r\n        }\r\n\r\n        await resultOutputcallback(results.size);\r\n    },\r\n    async ({ lines, resultOutputCallback }) => {\r\n        const rules = parseLines(lines);\r\n        const directRules: {[key: string]: Array<{quantity: number; color: string}>} = {};\r\n        for (const rule of rules) {\r\n            directRules[rule.color] = rule.contains || [];\r\n        }\r\n        const result: Array<{quantity: number; color: string}> = [];\r\n        const toExplore = new Queue<{quantity: number; color: string}>();\r\n        toExplore.add({quantity: 1, color: \"shiny gold\"});\r\n        while (true) {\r\n            const current = toExplore.get();\r\n            if (!current) {\r\n                break;\r\n            }\r\n            const hasToHave = directRules[current.color];\r\n            for (const nested of hasToHave) {\r\n                const nestedQuantity = nested.quantity * current.quantity;\r\n                result.push({quantity: nestedQuantity, color: nested.color});\r\n                toExplore.add({quantity: nestedQuantity, color: nested.color});\r\n            }\r\n        }\r\n\r\n        const output = result.reduce((acc, next) => acc + next.quantity, 0);\r\n        await resultOutputCallback(output);\r\n    },\r\n    {\r\n        key: \"handy-haversacks\",\r\n        title: \"Handy Haversacks\",\r\n        stars: 2,\r\n        supportsQuickRunning: true,\r\n        embeddedData: true\r\n    }\r\n);\r\n","type Interceptor = (state: State, beforeOrAfter: \"before\" | \"after\", instruction: number) => Promise<boolean>;\r\ntype InstructionChanger = (currentInstruction: number) => Promise<Instruction>;\r\nexport type Program = Instruction[];\r\nexport class HandheldProgram {\r\n\r\n    public get length() {\r\n        return this.program.length;\r\n    }\r\n    public program: Program;\r\n\r\n    private interceptor?: Interceptor;\r\n    private instructionChanger?: InstructionChanger;\r\n    constructor(program: string[] | Program) {\r\n        if (program.length === 0) {\r\n            this.program = [];\r\n        } else if (typeof program[0] === \"string\") {\r\n            this.program = parseProgram(program as string[]);\r\n        } else {\r\n            this.program = program as Program;\r\n        }\r\n    }\r\n\r\n    public setInterceptor(interceptor: Interceptor) {\r\n        this.interceptor = interceptor;\r\n        return this;\r\n    }\r\n\r\n    public setInstructionChanger(changeInstruction?: InstructionChanger) {\r\n        this.instructionChanger = changeInstruction;\r\n        return this;\r\n    }\r\n\r\n    public async execute(startState?: State): Promise<State> {\r\n        const state = startState ? {...startState} : emptyState();\r\n        while (true) {\r\n            const nextInstructionIndex = state.currentInstruction;\r\n            const nextInstruction = (this.instructionChanger) ?\r\n                    await this.instructionChanger(nextInstructionIndex) :\r\n                        this.program[nextInstructionIndex];\r\n            if (this.interceptor) {\r\n                const shouldContinue = await this.interceptor(state, \"before\", nextInstructionIndex);\r\n                if (!shouldContinue) {\r\n                    break;\r\n                }\r\n            }\r\n            executeInstruction(nextInstruction, state);\r\n            if (this.interceptor) {\r\n                const shouldContinue = await this.interceptor(state, \"after\", nextInstructionIndex);\r\n                if (!shouldContinue) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return state;\r\n\r\n    }\r\n}\r\n\r\nexport interface Instruction {\r\n    op: \"acc\" | \"jmp\" | \"nop\";\r\n    arg: number;\r\n}\r\n\r\nexport interface State {\r\n    acc: number;\r\n    currentInstruction: number;\r\n}\r\n\r\nexport const parseProgram = (lines: string[]): Program => {\r\n    return lines.map((line) => {\r\n        const [op, arg] = line.split(\" \");\r\n        return {\r\n            op: op as \"jmp\" | \"acc\" | \"nop\",\r\n            arg: parseInt(arg, 10)\r\n        };\r\n    });\r\n};\r\n\r\nconst executeInstruction = (instruction: Instruction, state: State) => {\r\n    let shouldChangeInstruction = true;\r\n    switch (instruction.op) {\r\n        case \"acc\":\r\n            state.acc += instruction.arg;\r\n            break;\r\n        case \"jmp\":\r\n            state.currentInstruction += instruction.arg;\r\n            shouldChangeInstruction = false;\r\n            break;\r\n        case \"nop\":\r\n            break;\r\n        default:\r\n            throw new Error(\"Invalid instruction\");\r\n    }\r\n    if (shouldChangeInstruction) {\r\n        state.currentInstruction++;\r\n    }\r\n};\r\n\r\nexport const emptyState = (): State => ({\r\n    acc: 0,\r\n    currentInstruction: 0\r\n});\r\n","import { sumCoordinate } from \"../../../../support/geometry\";\r\nimport { Drawable, Pause, ScreenBuilder, ScreenPrinter } from \"../../../entry\";\r\nimport { Instruction, Program } from \"../support/handheld\";\r\n\r\nexport interface IHandheldHalting {\r\n    setup(program: Program, instances: number): Promise<void>;\r\n    setExecuted(programNumber: number, instruction: number): Promise<void>;\r\n    setStatus(programNumber: number, status: \"loop\" | \"finished\"): Promise<void>;\r\n}\r\n\r\nconst constants = (() => {\r\n    const programSize = {\r\n        x: 50,\r\n        y: 5\r\n    };\r\n    const indicatorSize = {\r\n        x: 0,\r\n        y: programSize.y\r\n    };\r\n    const indicatorSpacing = {\r\n        x: 2,\r\n        y: 0\r\n    };\r\n    const programSpacing = {\r\n        x: 5,\r\n        y: 5\r\n    };\r\n    const programOffset = sumCoordinate(programSize, programSpacing);\r\n    const columns = 7;\r\n    return {\r\n        rows: 0,\r\n        screenSizeBuilder(programs: number) {\r\n            this.rows = Math.ceil(programs / columns);\r\n            return {\r\n                x: programOffset.x * Math.min(columns, programs) + programSpacing.x,\r\n                y: programOffset.y * this.rows + programSpacing.y\r\n            };\r\n        },\r\n        columns,\r\n        programOffset,\r\n        programSize,\r\n        programSpacing,\r\n        indicatorSize,\r\n        indicatorSpacing\r\n    };\r\n})();\r\n\r\nexport const buildVisualizer = (screenBuilder: ScreenBuilder | undefined, pause: Pause) => {\r\n    if (screenBuilder) {\r\n        return new RealVisualizer(screenBuilder, pause);\r\n    } else {\r\n        return new DummyVisualizer();\r\n    }\r\n};\r\n\r\ntype LocalDrawable = Drawable & {type: \"rectangle\"};\r\n\r\nclass RealVisualizer implements IHandheldHalting {\r\n    private printer!: ScreenPrinter;\r\n    // private programDrawables: LocalDrawable[][] = [];\r\n    private programs: Array<{\r\n        drawable: LocalDrawable,\r\n        instructionsToDraw: number\r\n    }> = [];\r\n    private sizeIncrement = 0;\r\n    constructor(\r\n        private readonly screenBuilder: ScreenBuilder,\r\n        private readonly pause: Pause\r\n    ) {\r\n    }\r\n    public async setStatus(programNumber: number, status: \"loop\" | \"finished\"): Promise<void> {\r\n        for (let i = 0; i <= programNumber; i++) {\r\n            this.updateSize(i);\r\n        }\r\n        this.programs[programNumber].drawable.color = status === \"loop\" ? \"red\" : \"lime\";\r\n        this.printer.forceRender();\r\n        await this.pause();\r\n        for (let i = programNumber + 1; i < this.programs.length; i++) {\r\n            this.updateSize(i);\r\n            this.printer.forceRender();\r\n            await this.pause();\r\n        }\r\n    }\r\n    public async setup(program: Instruction[], instances: number, expectedFill: number = 1): Promise<void> {\r\n        const screenSize = constants.screenSizeBuilder(instances);\r\n\r\n        this.sizeIncrement = (constants.programSize.x - 1) / (program.length * expectedFill);\r\n\r\n        this.printer = await this.screenBuilder.requireScreen(screenSize);\r\n        this.printer.setManualRender();\r\n\r\n        const toDraw: Drawable[] = [];\r\n\r\n        for (let i = 0; i < instances; i++) {\r\n            const coordinate = {\r\n                x: i % constants.columns,\r\n                y: Math.floor(i / constants.columns)\r\n            };\r\n            const viewCoordinates = {\r\n                x: coordinate.x * constants.programOffset.x + constants.programSpacing.x,\r\n                y: coordinate.y * constants.programOffset.y + constants.programSpacing.y\r\n            };\r\n\r\n            const drawableProgram: LocalDrawable = {\r\n                c: viewCoordinates,\r\n                color: \"white\",\r\n                id: `program-${i}`,\r\n                size: {...constants.programSize, x: 1},\r\n                type: \"rectangle\"\r\n            };\r\n            toDraw.push(drawableProgram);\r\n            this.programs.push({drawable: drawableProgram, instructionsToDraw: 0});\r\n\r\n            const indicator: LocalDrawable = {\r\n                c: {\r\n                    x: viewCoordinates.x + constants.programSize.x + constants.indicatorSpacing.x,\r\n                    y: viewCoordinates.y\r\n                },\r\n                color: \"white\",\r\n                id: `indicator-${i}`,\r\n                size: constants.indicatorSize,\r\n                type: \"rectangle\"\r\n            };\r\n            toDraw.push(indicator);\r\n        }\r\n\r\n        this.printer.replace(toDraw);\r\n        this.printer.forceRender();\r\n        await this.pause();\r\n    }\r\n\r\n    public async setExecuted(programNumber: number, instruction: number): Promise<void> {\r\n        const p = this.programs[programNumber];\r\n        p.instructionsToDraw++;\r\n        if (p.instructionsToDraw > 20) {\r\n            this.updateSize(programNumber);\r\n            this.printer.forceRender();\r\n            await this.pause();\r\n        }\r\n    }\r\n    private updateSize(programNumber: number) {\r\n        const p = this.programs[programNumber];\r\n        p.drawable.size.x += (this.sizeIncrement * p.instructionsToDraw);\r\n        p.instructionsToDraw = 0;\r\n    }\r\n}\r\n\r\nclass DummyVisualizer implements IHandheldHalting {\r\n    public async setStatus(programNumber: number, status: \"loop\" | \"finished\"): Promise<void> { }\r\n    public async setup(program: Instruction[], instances: number): Promise<void> { }\r\n    public async setExecuted(programNumber: number, instruction: number): Promise<void> { }\r\n\r\n}\r\n","import { entryForFile } from \"../../../entry\";\r\nimport { emptyState, HandheldProgram } from \"../support/handheld\";\r\nimport { buildVisualizer } from \"./visualizer\";\r\n\r\n\r\nexport const handheldHalting = entryForFile(\r\n    async ({\r\n        lines,\r\n        resultOutputCallback,\r\n        screen,\r\n        pause,\r\n        setAutoStop\r\n    }) => {\r\n        setAutoStop();\r\n        const visualizer = buildVisualizer(screen, pause);\r\n        // const program = parseProgram(lines);\r\n        const program = new HandheldProgram(lines);\r\n        await visualizer.setup(program.program, 1, 0.4);\r\n        const executed = new Set<number>();\r\n        await program\r\n            .setInterceptor(async (s, beforeOrAfter) => {\r\n                if (beforeOrAfter === \"after\") {\r\n                    return true;\r\n                }\r\n                if (executed.has(s.currentInstruction)) {\r\n                    await visualizer.setStatus(0, \"loop\");\r\n                    await resultOutputCallback(s.acc);\r\n                    return false;\r\n                } else {\r\n                    executed.add(s.currentInstruction);\r\n                    await visualizer.setExecuted(0, s.currentInstruction);\r\n                    return true;\r\n                }\r\n            })\r\n            .execute();\r\n    },\r\n    async ({\r\n        lines,\r\n        resultOutputCallback,\r\n        screen,\r\n        pause,\r\n        setAutoStop\r\n    }) => {\r\n        setAutoStop();\r\n        const visualizer = buildVisualizer(screen, pause);\r\n        const program = new HandheldProgram(lines);\r\n        const executions = program.program\r\n            .map((inst, index) => ({inst, index}))\r\n            .filter((e) => e.inst.op === \"nop\" || e.inst.op === \"jmp\")\r\n            .map((e, executionIndex) => {\r\n                return {\r\n                    index: e.index,\r\n                    instruction: {\r\n                        op: e.inst.op === \"nop\" ? \"jmp\" : \"nop\" as \"jmp\" | \"nop\" | \"acc\",\r\n                        arg: e.inst.arg\r\n                    },\r\n                    state: emptyState(),\r\n                    stop: false,\r\n                    executed: new Set<number>(),\r\n                    executionIndex\r\n                };\r\n            });\r\n\r\n        await visualizer.setup(program.program, executions.length, 0.25);\r\n        let found = false;\r\n        while (!found) {\r\n            for (const execution of executions) {\r\n                if (found) {\r\n                    return;\r\n                }\r\n                if (execution.stop) {\r\n                    continue;\r\n                }\r\n                execution.state = await\r\n                    program.setInterceptor(async (s, beforeOrAfter, nextInstructionIndex) => {\r\n                        if (beforeOrAfter === \"before\") {\r\n                            if (execution.executed.has(nextInstructionIndex)) {\r\n                                await visualizer.setStatus(execution.executionIndex, \"loop\");\r\n                                execution.stop = true;\r\n                                return false;\r\n                            } else if (nextInstructionIndex < 0 || nextInstructionIndex >= program.length) {\r\n                                await visualizer.setStatus(execution.executionIndex, \"finished\");\r\n                                found = true;\r\n                                await resultOutputCallback(s.acc);\r\n                                return false;\r\n                            } else {\r\n                                return true;\r\n                            }\r\n                        } else {\r\n                            await visualizer.setExecuted(execution.executionIndex, nextInstructionIndex);\r\n                            execution.executed.add(nextInstructionIndex);\r\n                            return false;\r\n                        }\r\n                    })\r\n                    .setInstructionChanger(async (currentInstruction) => {\r\n                        if (currentInstruction === execution.index) {\r\n                            return execution.instruction;\r\n                        }\r\n                        return program.program[currentInstruction];\r\n                    })\r\n                    .execute(execution.state);\r\n            }\r\n        }\r\n    },\r\n    {\r\n        key: \"handheld-halting\",\r\n        title: \"Handheld Halting\",\r\n        stars: 2,\r\n        supportsQuickRunning: true,\r\n        customComponent: \"pause-and-run\",\r\n        embeddedData: true\r\n    }\r\n);\r\n","import { logarithm } from \"../../../../support/algebra\";\r\nimport { Coordinate, sumCoordinate } from \"../../../../support/geometry\";\r\nimport { Drawable, Pause, ScreenBuilder, ScreenPrinter } from \"../../../entry\";\r\n\r\nexport interface IEncodingErrorVisualizer {\r\n    setupInvalidFinder(numbers: number[], preamble: number[]): Promise<void>;\r\n    changeBag(preamble: number[]): Promise<void>;\r\n    setCurrent(index: number): Promise<void>;\r\n    setCalculatedBag(index: number): Promise<void>;\r\n    setWinnerBag(index: number): Promise<void>;\r\n    setInvalid(index: number): Promise<void>;\r\n\r\n    setupWeakness(numbers: number[]): Promise<void>;\r\n    addBagItem(number: number): Promise<void>;\r\n    updateBagSize(index: number, newSize: number): Promise<void>;\r\n    setWrongBag(index: number): Promise<void>;\r\n}\r\n\r\nconst constants = (() => {\r\n    const columns = 20;\r\n    const numberSize = {\r\n        x: 10,\r\n        y: 2\r\n    };\r\n    const numberSpacing = {\r\n        x: 2,\r\n        y: 2\r\n    };\r\n    const numberOffset = sumCoordinate(numberSize, numberSpacing);\r\n\r\n    const bagColumns = 5;\r\n    const bagRows = 5;\r\n    const bagSize = {\r\n        x: numberSpacing.x + numberOffset.x * bagColumns,\r\n        y: numberSpacing.y + numberOffset.y * bagRows\r\n    };\r\n\r\n    return {\r\n        columns,\r\n        number: {\r\n            size: numberSize,\r\n            spacing: numberSpacing,\r\n            offset: numberOffset,\r\n        },\r\n        bag: {\r\n            size: bagSize,\r\n            columns: bagColumns,\r\n            rows: bagRows\r\n        },\r\n        screenSizeBuilder(hasBag: boolean, entries: number[]) {\r\n            const baseSize = hasBag ? sumCoordinate(bagSize, numberSpacing) : numberSpacing;\r\n            const rows = Math.floor(entries.length / columns);\r\n            return {\r\n                x: Math.max(baseSize.x, columns * numberOffset.x + numberSpacing.x),\r\n                y: baseSize.y + numberSpacing.y + rows * numberOffset.y\r\n            };\r\n        },\r\n        bigBagSizeBuilder(entries: number[]) {\r\n            const rows = Math.floor(entries.length / columns);\r\n            return {\r\n                x: columns * numberOffset.x + numberSpacing.x * 2,\r\n                y: rows * numberOffset.y + numberSpacing.y * 2\r\n            };\r\n        },\r\n        weaknessScreenSizeBuilder(entries: number[]) {\r\n            const bs = this.bigBagSizeBuilder(entries);\r\n            const rows = Math.floor(entries.length / columns);\r\n            return {\r\n                x: bs.x,\r\n                y: bs.y + numberSpacing.y + numberOffset.y * rows\r\n            };\r\n        }\r\n    };\r\n})();\r\n\r\nexport const buildVisualizer = (screenBuilder: ScreenBuilder | undefined, pause: Pause) => {\r\n    if (screenBuilder) {\r\n        return new RealVisualizer(screenBuilder, pause);\r\n    } else {\r\n        return new DummyVisualizer();\r\n    }\r\n};\r\n\r\ntype LocalDrawable = Drawable & {type: \"rectangle\"};\r\n\r\nclass RealVisualizer implements IEncodingErrorVisualizer {\r\n    private printer!: ScreenPrinter;\r\n\r\n    private bagItems: LocalDrawable[] = [];\r\n    private drawableNumbers: LocalDrawable[] = [];\r\n\r\n    private k = 10000;\r\n    private maxLog = Number.MAX_VALUE;\r\n    constructor(\r\n        private readonly screenBuilder: ScreenBuilder,\r\n        private readonly pause: Pause\r\n    ) {\r\n    }\r\n\r\n    public async setupWeakness(numbers: number[]) {\r\n        this.printer = await this.screenBuilder.requireScreen(constants.weaknessScreenSizeBuilder(numbers));\r\n        this.printer.setManualRender();\r\n        const maxNumber = numbers.reduce((acc, next) => Math.max(acc, next));\r\n\r\n        this.maxLog = Math.log2(maxNumber + this.k);\r\n        const bagSize = constants.bigBagSizeBuilder(numbers);\r\n        const bag: LocalDrawable = {\r\n            c: constants.number.spacing,\r\n            id: \"bag\",\r\n            color: \"darkblue\",\r\n            size: bagSize,\r\n            type: \"rectangle\"\r\n        };\r\n        this.bagItems = [];\r\n\r\n        this.drawableNumbers = numbers.map((n, i) => {\r\n            const coordinates = {\r\n                x: i % constants.columns,\r\n                y: Math.floor(i / constants.columns)\r\n            };\r\n            const viewCoordinates = {\r\n                x: constants.number.spacing.x + constants.number.offset.x * coordinates.x,\r\n                y: bag.c.y + bag.size.y + constants.number.spacing.y + constants.number.offset.y * coordinates.y,\r\n            };\r\n            return {\r\n                c: viewCoordinates,\r\n                color: \"white\",\r\n                id: `n-${i}`,\r\n                size: {\r\n                    x: this.calculateNumberSize(n),\r\n                    y: constants.number.size.y\r\n                },\r\n                type: \"rectangle\"\r\n            } as LocalDrawable;\r\n        });\r\n\r\n        this.printer.replace([bag].concat(this.bagItems).concat(this.drawableNumbers));\r\n        this.printer.forceRender();\r\n        await this.pause();\r\n    }\r\n\r\n    public async addBagItem(number: number) {\r\n        const newIndex = this.bagItems.length;\r\n        const coordinates = {\r\n            x: newIndex % constants.columns,\r\n            y: Math.floor(newIndex / constants.columns)\r\n        };\r\n        const viewCoordinates = {\r\n            x: constants.number.spacing.x * 2 + coordinates.x * constants.number.offset.x,\r\n            y: constants.number.spacing.y * 2 + coordinates.y * constants.number.offset.y,\r\n        };\r\n        const newItem: LocalDrawable = {\r\n            id: `bag-item-${newIndex}`,\r\n            color: \"white\",\r\n            size: {\r\n                x: this.calculateNumberSize(number),\r\n                y: constants.number.size.y\r\n            },\r\n            type: \"rectangle\",\r\n            c: viewCoordinates\r\n        };\r\n        this.bagItems.push(newItem);\r\n        await this.printer.add(newItem);\r\n        this.printer.forceRender();\r\n        await this.pause();\r\n    }\r\n\r\n    public async updateBagSize(index: number, newSize: number) {\r\n        this.bagItems[index].size.x = this.calculateNumberSize(newSize);\r\n    }\r\n\r\n    public async setWrongBag(index: number) {\r\n        this.bagItems[index].color = \"red\";\r\n        this.printer.forceRender();\r\n        await this.pause();\r\n    }\r\n\r\n    public async setInvalid(index: number): Promise<void> {\r\n        this.drawableNumbers[index].color = \"red\";\r\n        this.printer.forceRender();\r\n        await this.pause();\r\n    }\r\n    public async setWinnerBag(index: number): Promise<void> {\r\n        this.bagItems[index].color = \"lime\";\r\n        this.printer.forceRender();\r\n        await this.pause(10);\r\n    }\r\n\r\n    public async setCalculatedBag(index: number): Promise<void> {\r\n        this.bagItems[index].color = \"grey\";\r\n        this.printer.forceRender();\r\n        await this.pause();\r\n    }\r\n\r\n    public async changeBag(preamble: number[]) {\r\n        if (preamble.length !== 25) {\r\n            throw new Error(\"Cannot run without 25 items in preamble\");\r\n        }\r\n        for (let i = 0; i < preamble.length; i++) {\r\n            this.bagItems[i].size.x = this.calculateNumberSize(preamble[i]);\r\n            this.bagItems[i].color = \"white\";\r\n        }\r\n        this.printer.forceRender();\r\n        await this.pause();\r\n    }\r\n\r\n    public async setCurrent(index: number) {\r\n        this.drawableNumbers[index].color = \"pink\";\r\n        if (index > 0) {\r\n            this.drawableNumbers[index - 1].color = \"lime\";\r\n        }\r\n        this.printer.forceRender();\r\n        await this.pause();\r\n    }\r\n\r\n    public async setupInvalidFinder(numbers: number[], preamble: number[]) {\r\n        this.printer = await this.screenBuilder.requireScreen(constants.screenSizeBuilder(true, numbers));\r\n        this.printer.setManualRender();\r\n        if (preamble.length !== 25) {\r\n            throw new Error(\"Cannot run without 25 items in preamble\");\r\n        }\r\n        const maxNumber = numbers.reduce((acc, next) => Math.max(acc, next));\r\n        this.maxLog = Math.log2(maxNumber + this.k);\r\n        const bag: LocalDrawable = {\r\n            c: constants.number.spacing,\r\n            id: \"bag\",\r\n            color: \"darkblue\",\r\n            size: constants.bag.size,\r\n            type: \"rectangle\"\r\n        };\r\n        this.bagItems = preamble.map((n, i) => {\r\n            const coordinates = {\r\n                x: i % constants.bag.columns,\r\n                y: Math.floor(i / constants.bag.columns)\r\n            };\r\n            const viewCoordinates = {\r\n                x: bag.c.x + coordinates.x * constants.number.offset.x + constants.number.spacing.x,\r\n                y: bag.c.y + coordinates.y * constants.number.offset.y + constants.number.spacing.y\r\n            };\r\n            return {\r\n                c: viewCoordinates,\r\n                color: \"white\",\r\n                id: `bag-${i}`,\r\n                size: {\r\n                    x: this.calculateNumberSize(n),\r\n                    y: constants.number.size.y\r\n                },\r\n                type: \"rectangle\"\r\n            } as LocalDrawable;\r\n        });\r\n\r\n        this.drawableNumbers = numbers.map((n, i) => {\r\n            const coordinates = {\r\n                x: i % constants.columns,\r\n                y: Math.floor(i / constants.columns)\r\n            };\r\n            const viewCoordinates = {\r\n                x: constants.number.spacing.x + constants.number.offset.x * coordinates.x,\r\n                y: bag.c.y + bag.size.y + constants.number.spacing.y + constants.number.offset.y * coordinates.y,\r\n            };\r\n            return {\r\n                c: viewCoordinates,\r\n                color: i < 25 ? \"grey\" : \"white\",\r\n                id: `n-${i}`,\r\n                size: {\r\n                    x: this.calculateNumberSize(n),\r\n                    y: constants.number.size.y\r\n                },\r\n                type: \"rectangle\"\r\n            } as LocalDrawable;\r\n        });\r\n\r\n        this.printer.replace([bag].concat(this.bagItems).concat(this.drawableNumbers));\r\n        this.printer.forceRender();\r\n        await this.pause();\r\n    }\r\n\r\n    private calculateNumberSize(n: number): number {\r\n        return Math.max(constants.number.size.x * (Math.log2(n + this.k) / this.maxLog), 1);\r\n    }\r\n}\r\n\r\nclass DummyVisualizer implements IEncodingErrorVisualizer {\r\n    public async setupWeakness(numbers: number[]): Promise<void> { }\r\n    public async addBagItem(number: number): Promise<void> { }\r\n    public async updateBagSize(index: number, newSize: number): Promise<void> { }\r\n    public async setWrongBag(index: number): Promise<void> { }\r\n    public async setInvalid(index: number): Promise<void> { }\r\n    public async setCalculatedBag(index: number): Promise<void> { }\r\n    public async setWinnerBag(index: number): Promise<void> { }\r\n    public async changeBag(preamble: number[]): Promise<void> { }\r\n    public async setCurrent(index: number): Promise<void> { }\r\n    public async setupInvalidFinder(numbers: number[], preamble: number[]): Promise<void> { }\r\n\r\n}\r\n","import { LinkedList } from \"../../../../support/data-structure\";\r\nimport { entryForFile } from \"../../../entry\";\r\nimport { buildVisualizer, IEncodingErrorVisualizer } from \"./visualizer\";\r\n\r\nconst findInvalid = async (ns: number[], visualizer?: IEncodingErrorVisualizer): Promise<number | null> => {\r\n    for (let i = 25; i < ns.length; i++) {\r\n        if (visualizer) {\r\n            await visualizer.setCurrent(i);\r\n        }\r\n        const target = ns[i];\r\n        const lookingFor = new Set<number>();\r\n        let found = false;\r\n        if (visualizer) {\r\n            await visualizer.changeBag(ns.slice(i - 25, i));\r\n        }\r\n        for (let j = i - 25; j < i; j++) {\r\n            if (lookingFor.has(ns[j])) {\r\n                if (visualizer) {\r\n                    await visualizer.setWinnerBag(j - (i - 25));\r\n                }\r\n                found = true;\r\n                break;\r\n            } else {\r\n                if (visualizer) {\r\n                    await visualizer.setCalculatedBag(j - (i - 25));\r\n                }\r\n                lookingFor.add(target - ns[j]);\r\n            }\r\n        }\r\n        if (!found) {\r\n            if (visualizer) {\r\n                await visualizer.setInvalid(i);\r\n            }\r\n            return target;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const encodingError = entryForFile(\r\n    async ({\r\n        lines,\r\n        resultOutputCallback,\r\n        screen,\r\n        pause,\r\n        setAutoStop\r\n    }) => {\r\n        setAutoStop();\r\n        const visualizer = buildVisualizer(screen, pause);\r\n        const ns = lines.map((l) => parseInt(l, 10));\r\n        await visualizer.setupInvalidFinder(ns, ns.slice(0, 25));\r\n        const invalid = await findInvalid(ns, screen && visualizer);\r\n        await resultOutputCallback(ns === null ? \"Did not find it :(\" : invalid);\r\n    },\r\n    async ({\r\n        lines,\r\n        resultOutputCallback ,\r\n        outputCallback,\r\n        screen,\r\n        pause,\r\n        setAutoStop\r\n    }) => {\r\n        setAutoStop();\r\n        const ns = lines.map((l) => parseInt(l, 10));\r\n        const visualizer = buildVisualizer(screen, pause);\r\n        await visualizer.setupWeakness(ns);\r\n\r\n        const invalid = await findInvalid(ns);\r\n        if (invalid === null) {\r\n            throw new Error(\"Could not find invalid\");\r\n        }\r\n        const sums = new LinkedList<{min: number, max: number, value: number, i: number}>();\r\n        let i = 0;\r\n        for (const n of ns) {\r\n            await visualizer.setCurrent(i);\r\n            for (const sum of sums) {\r\n                sum.element.value += n;\r\n                sum.element.min = Math.min(n, sum.element.min);\r\n                sum.element.max = Math.max(n, sum.element.max);\r\n                if (sum.element.value === invalid) {\r\n                    await visualizer.setWinnerBag(sum.element.i);\r\n                    await resultOutputCallback(sum.element.min + sum.element.max);\r\n                    return;\r\n                } else if (sum.element.value > invalid) {\r\n                    await visualizer.setWrongBag(sum.element.i);\r\n                    sum.remove();\r\n                } else {\r\n                    await visualizer.updateBagSize(sum.element.i, sum.element.value);\r\n                }\r\n            }\r\n            const node = {min: n, max: n, value: n, i: i++};\r\n            sums.addNode(node);\r\n            await visualizer.addBagItem(n);\r\n        }\r\n        await resultOutputCallback(\"Could not find it\");\r\n    },\r\n    {\r\n        key: \"encoding-error\",\r\n        title: \"Encoding Error\",\r\n        stars: 2,\r\n        supportsQuickRunning: true,\r\n        suggestedDelay: 15,\r\n        customComponent: \"pause-and-run\",\r\n        embeddedData: true\r\n    }\r\n);\r\n","import { groupBy } from \"../../../../support/sequences\";\r\nimport { entryForFile } from \"../../../entry\";\r\n\r\nconst prettyPrint = (lines: string[]) =>\r\n        [...groupBy(lines.map((l) => parseInt(l, 10)).concat([0, 51]).sort((a, b) => a - b), 10)]\r\n            .map((e) => e.map((x) => x.toString().padStart(3, \" \")).join(\" \")).join(\"\\n\");\r\n\r\nexport const adapterArray = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const ns = lines\r\n            .map((l) => parseInt(l, 10))\r\n            .sort((a, b) => a - b)\r\n            .reduce((acc, next) => {\r\n                acc.differences[next - acc.prev] = (acc.differences[next - acc.prev] || 0) + 1;\r\n                acc.prev = next;\r\n                return acc;\r\n            }, {\r\n                prev: 0,\r\n                differences: {} as {[key: number]: number}\r\n            });\r\n        ns.differences[3]++;\r\n        await outputCallback(ns.differences);\r\n        await resultOutputCallback(ns.differences[1] * ns.differences[3]);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const ns = lines\r\n            .map((l) => parseInt(l, 10))\r\n            .sort((a, b) => a - b)\r\n            .reduce((acc, next) => (\r\n                {\r\n                prev: next,\r\n                vs: [...acc.vs, next - acc.prev]\r\n            }\r\n            ), {prev: 0, vs: [] as number[]});\r\n        ns.vs.push(3);\r\n\r\n        const factors: number[] = [];\r\n        let isOnStreak = false;\r\n        let count = 0;\r\n        for (const n of ns.vs) {\r\n            if (n === 1) {\r\n                count++;\r\n                isOnStreak = true;\r\n            } else {\r\n                if (isOnStreak && count > 0) {\r\n                    factors.push(count - 1);\r\n                }\r\n                count = 0;\r\n                isOnStreak = false;\r\n            }\r\n        }\r\n\r\n        await outputCallback(prettyPrint(lines));\r\n        await outputCallback(\"\");\r\n\r\n        await outputCallback(factors);\r\n        await resultOutputCallback(\r\n            factors\r\n                .filter((f) => f > 0)\r\n                .reduce((acc, next) => acc * (\r\n                    next <= 2 ?\r\n                        (2 ** next)  // if there are at most 2 optional adapters, all subsets are fine\r\n                        : 7 // if there are 3, not all are fine; in particular, the empty subset does not work\r\n                ), 1));\r\n    },\r\n    { key: \"adapter-array\", title: \"Adapter Array\", stars: 2, embeddedData: true, supportsQuickRunning: true}\r\n);\r\n","import { Grid } from \".\";\r\nimport { Coordinate, multiplyCoordinate, serialization } from \"../../../../support/geometry\";\r\nimport { FixedSizeMatrix } from \"../../../../support/matrix\";\r\nimport { Drawable, Pause, ScreenBuilder, ScreenPrinter } from \"../../../entry\";\r\n\r\nexport interface ISeatingSystemVisualizer {\r\n    setup(size: Coordinate): Promise<void>;\r\n    update(grid: Grid): Promise<void>;\r\n}\r\n\r\nexport const buildVisualizer = (screenBuilder: ScreenBuilder | undefined, pause: Pause) => {\r\n    if (screenBuilder) {\r\n        return new RealVisualizer(screenBuilder, pause);\r\n    } else {\r\n        return new DummyVisualizer();\r\n    }\r\n};\r\n\r\nconst constants = (() => {\r\n    const cellSize = {x: 4, y: 4};\r\n    return {\r\n        cellSize\r\n    };\r\n})();\r\n\r\ntype LocalDrawable = Drawable & {type: \"rectangle\"};\r\n\r\nclass RealVisualizer implements ISeatingSystemVisualizer {\r\n    private printer!: ScreenPrinter;\r\n    private drawables!: FixedSizeMatrix<Drawable>;\r\n\r\n    constructor(\r\n        private readonly screenBuilder: ScreenBuilder,\r\n        private readonly pause: Pause\r\n    ) {\r\n    }\r\n    public async setup(size: Coordinate): Promise<void> {\r\n        const screenSize = multiplyCoordinate(size, constants.cellSize);\r\n        this.printer = await this.screenBuilder.requireScreen(screenSize);\r\n        this.printer.setManualRender();\r\n\r\n        this.drawables = new FixedSizeMatrix<LocalDrawable>(size);\r\n        this.drawables.fillFactory((c) => {\r\n            return {\r\n                c: multiplyCoordinate(constants.cellSize, c),\r\n                id: serialization.serialize(c),\r\n                color: this.mapState(\".\"),\r\n                type: \"rectangle\",\r\n                size: constants.cellSize\r\n            };\r\n        });\r\n\r\n        this.printer.replace(this.drawables.getFlatData());\r\n\r\n        this.printer.forceRender();\r\n        await this.pause();\r\n    }\r\n    public async update(grid: Grid): Promise<void> {\r\n        grid.onEveryCellSync((c, e) => {\r\n            this.drawables.get(c)!.color = this.mapState(e!);\r\n        });\r\n        this.printer.forceRender();\r\n        await this.pause();\r\n    }\r\n\r\n    private mapState(cell: \"#\" | \".\" | \"L\"): string {\r\n        if (cell === \"#\") {\r\n            return \"#ff6961\"; // \"red\";\r\n        } else if (cell === \".\") {\r\n            return \"white\";\r\n        } else {\r\n            return \"#77dd77\"; // \"lime\";\r\n        }\r\n    }\r\n}\r\n\r\nclass DummyVisualizer implements ISeatingSystemVisualizer {\r\n    public async setup(size: Coordinate): Promise<void> { }\r\n    public async update(grid: Grid): Promise<void> { }\r\n\r\n}\r\n","import { CCoordinate, Coordinate, directionList, getFullSurrounding, manhattanDistance } from \"../../../../support/geometry\";\r\nimport { FixedSizeMatrix } from \"../../../../support/matrix\";\r\nimport { entryForFile, ResultOutputCallback } from \"../../../entry\";\r\nimport { buildVisualizer, ISeatingSystemVisualizer } from \"./visualizer\";\r\n\r\ntype Cell = \"#\" | \"L\" | \".\";\r\nexport type Grid = FixedSizeMatrix<Cell>;\r\n\r\nconst parseLines = (lines: string[]): Grid => {\r\n    const size = {x: lines[lines.length - 1].length, y: lines.length};\r\n    const grid = new FixedSizeMatrix<Cell>(size);\r\n    const flatData = lines\r\n        .map((e) => e.length !== size.x ? e.slice(0, size.x) : e)\r\n        .join(\"\")\r\n        .split(\"\")\r\n        .map((e) => e as Cell);\r\n    grid.setFlatData(flatData);\r\n    return grid;\r\n};\r\n\r\nconst iterate = async (grid: Grid): Promise<Grid> => {\r\n    return grid.map<Cell>((element, coordinate) => {\r\n        if (element === \".\") {\r\n            return element;\r\n        }\r\n        const adjacent = getFullSurrounding(coordinate)\r\n            .map((c) => grid.get(c))\r\n            .filter((e) => e);\r\n        const occupied = adjacent.filter((e) => e === \"#\").length;\r\n\r\n        if (element === \"L\") {\r\n            if (occupied === 0) {\r\n                return \"#\";\r\n            }\r\n        } else if (element === \"#\") {\r\n            if (occupied >= 4) {\r\n                return \"L\";\r\n            }\r\n        }\r\n        return element!;\r\n    });\r\n};\r\n\r\nconst findFirstSeat = (grid: Grid, start: Coordinate, direction: CCoordinate): Cell | null => {\r\n    start = direction.sum(start);\r\n    while (true) {\r\n        const cell = grid.get(start);\r\n        if (!cell) {\r\n            return null;\r\n        }\r\n        if (cell !== \".\") {\r\n            return cell;\r\n        }\r\n        start = direction.sum(start);\r\n    }\r\n};\r\n\r\nconst realIterate = async (grid: Grid): Promise<Grid> => {\r\n    const g = grid.map<Cell>((element, coordinate) => {\r\n        if (element === \".\") {\r\n            return element;\r\n        }\r\n        const adjacent = directionList.map((d) => findFirstSeat(grid, coordinate, d)).filter((e) => e) as Cell[];\r\n        const occupied = adjacent.filter((e) => e === \"#\").length;\r\n\r\n        if (element === \"L\") {\r\n            if (occupied === 0) {\r\n                return \"#\";\r\n            }\r\n        } else if (element === \"#\") {\r\n            if (occupied >= 5) {\r\n                return \"L\";\r\n            }\r\n        }\r\n        return element!;\r\n    });\r\n    return g;\r\n};\r\n\r\nconst execute = async (\r\n    lines: string[],\r\n    visualizer: ISeatingSystemVisualizer,\r\n    resultOutputCallback: ResultOutputCallback,\r\n    // pause: Pause,\r\n    isQuickRunning: boolean,\r\n    iterationCallback: typeof iterate) => {\r\n        const visited = new Set<string>();\r\n        let grid = parseLines(lines);\r\n        await visualizer.setup(grid.size);\r\n        if (!isQuickRunning) {\r\n            // await outputCallback(grid.toString(e => e || \" \"));\r\n            await visualizer.update(grid);\r\n            // await pause();\r\n        }\r\n        while (true) {\r\n            const serialized = grid.simpleSerialize();\r\n            if (visited.has(serialized)) {\r\n                const occupied = grid.reduce<number>((acc, next) => acc + (next.cell === \"#\" ? 1 : 0), 0);\r\n                // if (!isQuickRunning) {\r\n                //     await outputCallback(occupied, true);\r\n                //     await outputCallback(grid.toString(e => e || \" \"));\r\n                // }\r\n                await visualizer.update(grid);\r\n                await resultOutputCallback(occupied);\r\n                return;\r\n            }\r\n            visited.add(serialized);\r\n            grid = await iterationCallback(grid);\r\n            await visualizer.update(grid);\r\n            // if (!isQuickRunning) {\r\n                // await outputCallback(grid.toString(e => e || \" \"), true);\r\n                // await pause();\r\n            // }\r\n        }\r\n    };\r\n\r\nexport const seatingSystem = entryForFile(\r\n    async ({\r\n        lines,\r\n        // outputCallback,\r\n        resultOutputCallback,\r\n        pause,\r\n        isQuickRunning,\r\n        screen,\r\n        setAutoStop\r\n    }) => {\r\n        setAutoStop();\r\n        const visualizer = buildVisualizer(screen, pause);\r\n        await execute(lines, visualizer, resultOutputCallback, /*pause,*/ isQuickRunning, iterate);\r\n    },\r\n    async ({\r\n        lines,\r\n        // outputCallback,\r\n        resultOutputCallback,\r\n        pause,\r\n        isQuickRunning,\r\n        screen,\r\n        setAutoStop\r\n    }) => {\r\n        setAutoStop();\r\n        const visualizer = buildVisualizer(screen, pause);\r\n        await execute(lines, visualizer, resultOutputCallback, /*pause,*/ isQuickRunning, realIterate);\r\n    },\r\n    {\r\n        key: \"seating-system\",\r\n        title: \"Seating System\",\r\n        stars: 2,\r\n        supportsQuickRunning: true,\r\n        suggestedDelay: 20,\r\n        customComponent: \"pause-and-run\",\r\n        embeddedData: true\r\n    }\r\n);\r\n","import { CCoordinate, Coordinate, directions, manhattanDistance, rotate, serialization } from \"../../../../support/geometry\";\r\nimport { entryForFile } from \"../../../entry\";\r\n\r\nconst validDirections = [\r\n\"N\" , \"S\" , \"E\" , \"W\" , \"L\" , \"R\" , \"F\"\r\n];\r\n\r\nconst isValidDirection = (d: string): d is Direction => {\r\n    return validDirections.includes(d);\r\n};\r\n\r\ntype Direction = \"N\" | \"S\" | \"E\" | \"W\" | \"L\" | \"R\" | \"F\";\r\ninterface Movement {\r\n    direction: Direction;\r\n    magnitude: number;\r\n}\r\n\r\ninterface State {\r\n    position: Coordinate;\r\n    direction: CCoordinate;\r\n}\r\n\r\nconst parseLines = (lines: string[]): Movement[] => {\r\n    return lines.map((line) => {\r\n        const d = line[0];\r\n        if (!isValidDirection(d)) {\r\n            throw new Error(\"Invalid direction\");\r\n        }\r\n        let magnitude = parseInt(line.slice(1), 10);\r\n        if (d === \"R\" || d === \"L\") {\r\n            if (magnitude % 90 !== 0) {\r\n                throw new Error(\"Invalid magnitude\");\r\n            }\r\n            magnitude = magnitude / 90;\r\n        }\r\n        return {\r\n            direction: d,\r\n            magnitude\r\n        };\r\n    });\r\n};\r\n\r\ninterface WaypointState {\r\n    shipCoordinate: Coordinate;\r\n    waypointCoordinate: CCoordinate;\r\n}\r\n\r\nconst updateWaypointState = (state: WaypointState, movement: Movement): WaypointState => {\r\n    const result = {...state};\r\n    switch (movement.direction) {\r\n        case \"E\":\r\n            result.waypointCoordinate = directions.right.times(movement.magnitude).sum(state.waypointCoordinate);\r\n            break;\r\n        case \"W\":\r\n            result.waypointCoordinate = directions.left.times(movement.magnitude).sum(state.waypointCoordinate);\r\n            break;\r\n        case \"N\":\r\n            result.waypointCoordinate = directions.up.times(movement.magnitude).sum(state.waypointCoordinate);\r\n            break;\r\n        case \"S\":\r\n            result.waypointCoordinate = directions.down.times(movement.magnitude).sum(state.waypointCoordinate);\r\n            break;\r\n        case \"L\":\r\n            result.waypointCoordinate = rotate(state.waypointCoordinate, \"Counterclockwise\", movement.magnitude);\r\n            break;\r\n        case \"R\":\r\n            result.waypointCoordinate = rotate(state.waypointCoordinate, \"Clockwise\", movement.magnitude);\r\n            break;\r\n        case \"F\":\r\n            result.shipCoordinate = state.waypointCoordinate.times(movement.magnitude).sum(state.shipCoordinate);\r\n            break;\r\n    }\r\n    return result;\r\n};\r\n\r\nconst updateState = (state: State, movement: Movement): State => {\r\n    const result = {...state};\r\n    switch (movement.direction) {\r\n        case \"E\":\r\n            result.position = directions.right.times(movement.magnitude).sum(state.position);\r\n            break;\r\n        case \"W\":\r\n            result.position = directions.left.times(movement.magnitude).sum(state.position);\r\n            break;\r\n        case \"N\":\r\n            result.position = directions.up.times(movement.magnitude).sum(state.position);\r\n            break;\r\n        case \"S\":\r\n            result.position = directions.down.times(movement.magnitude).sum(state.position);\r\n            break;\r\n        case \"L\":\r\n            result.direction = rotate(state.direction, \"Counterclockwise\", movement.magnitude);\r\n            break;\r\n        case \"R\":\r\n            result.direction = rotate(state.direction, \"Clockwise\", movement.magnitude);\r\n            break;\r\n        case \"F\":\r\n            result.position = state.direction.times(movement.magnitude).sum(state.position);\r\n            break;\r\n    }\r\n    return result;\r\n};\r\n\r\nexport const rainRisk = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const input = parseLines(lines);\r\n        let state: State = {position: {x: 0, y: 0}, direction: directions.right};\r\n        for (const movement of input) {\r\n            state = updateState(state, movement);\r\n        }\r\n        await resultOutputCallback(manhattanDistance(state.position, {x: 0, y: 0}));\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const input = parseLines(lines);\r\n        let state: WaypointState = {\r\n            shipCoordinate: {x: 0, y: 0},\r\n            waypointCoordinate: new CCoordinate(10, -1)\r\n        };\r\n        for (const movement of input) {\r\n            state = updateWaypointState(state, movement);\r\n        }\r\n        await resultOutputCallback(manhattanDistance(state.shipCoordinate, {x: 0, y: 0}));\r\n    },\r\n    {\r\n        key: \"rain-risk\",\r\n        title: \"Rain Risk\",\r\n        embeddedData: true,\r\n        supportsQuickRunning: true,\r\n        stars: 2\r\n    }\r\n);\r\n","import { modInverse } from \"../../../../support/algebra\";\r\nimport { entryForFile } from \"../../../entry\";\r\n\r\nconst getBusIDs = (line: string): number[] => {\r\n    return line.split(\",\").map((l) => {\r\n        const n = parseInt(l, 10);\r\n        if (n.toString() === l) {\r\n            return n;\r\n        } else {\r\n            return -1;\r\n        }\r\n    }).filter((n) => n > 0);\r\n};\r\n\r\ninterface Equation {\r\n    mod: bigint;\r\n    value: bigint;\r\n}\r\n\r\nconst parseEquations = (line: string): Equation[] => {\r\n    const result: Equation[] = [];\r\n    let v = 0;\r\n    for (const d of line.split(\",\")) {\r\n        if (d !== \"x\") {\r\n            result.push({\r\n                mod: BigInt(parseInt(d, 10)),\r\n                value: BigInt(-v)\r\n            });\r\n        }\r\n        v++;\r\n    }\r\n    return result;\r\n};\r\n\r\nexport const shuttleSearch = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const ts = parseInt(lines[0], 10);\r\n        const ids = getBusIDs(lines[1]);\r\n        const result = ids.map((id) => ({id, ts: id - (ts % id)})).reduce((acc, next) => acc.ts < next.ts ? acc : next);\r\n        await resultOutputCallback(result.id * result.ts);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const equations = parseEquations(lines[1]);\r\n        const mainMod = equations.reduce((acc, next) => acc * next.mod, 1n);\r\n        const toSolve: Array<{a: bigint; c: bigint; y: bigint}> = [];\r\n        for (const equation of equations) {\r\n            const c = mainMod / equation.mod;\r\n            const a = equation.value;\r\n            const y = modInverse(c, equation.mod);\r\n            toSolve.push({\r\n                a,\r\n                c,\r\n                y\r\n            });\r\n        }\r\n        let result = toSolve.reduce((acc, next) => acc + next.a * next.c * next.y, 0n) % mainMod;\r\n        if (result < 0) {\r\n            result += mainMod;\r\n        }\r\n        await resultOutputCallback(result.toString());\r\n    },\r\n    {\r\n        key: \"shuttle-search\",\r\n        title: \"Shuttle Search\",\r\n        embeddedData: true,\r\n        stars: 2,\r\n        supportsQuickRunning: true\r\n    }\r\n);\r\n","import { entryForFile } from \"../../../entry\";\r\n\r\ntype Instruction = {\r\n    mask: string[];\r\n} | {\r\n    address: number;\r\n    value: string;\r\n};\r\n\r\nconst isMask = (e: Instruction): e is {mask: string[]} => {\r\n    return (e as {mask: string[]}).mask !== undefined;\r\n};\r\n\r\nconst parseLines = (lines: string[]): Instruction[] => {\r\n    return lines.map((line) => {\r\n        const [a, b] = line.split(\" = \");\r\n        if (a.includes(\"[\")) {\r\n            return {\r\n                value: parseInt(b, 10).toString(2).padStart(36, \"0\"),\r\n                address: parseInt(a.match(/.*\\[(\\d+)\\]/)![1], 10)\r\n            };\r\n        } else {\r\n            return {\r\n                mask: b.split(\"\")\r\n            };\r\n        }\r\n    });\r\n};\r\n\r\ninterface Memory {\r\n    data: {[key: number]: number};\r\n    mask: string[];\r\n}\r\n\r\nconst emptyMemory = (): Memory => {\r\n    return {\r\n        data: {},\r\n        mask: \"\".padStart(36, \"X\").split(\"\")\r\n    };\r\n};\r\n\r\nconst updateMemory = async (instruction: Instruction, memory: Memory): Promise<void> => {\r\n    if (isMask(instruction)) {\r\n        memory.mask = instruction.mask;\r\n    } else {\r\n        memory.data[instruction.address] = parseInt(memory.mask.map((e, i) => {\r\n            if (e === \"X\") {\r\n                return instruction.value[i];\r\n            } else {\r\n                return e;\r\n            }\r\n        }).join(\"\"), 2);\r\n    }\r\n};\r\n\r\nconst createAddress = (mask: string[], address: string, index: number): string[] => {\r\n    if (index >= mask.length) {\r\n        return [\"\"];\r\n    }\r\n    let base = \"\";\r\n    if (mask[index] === \"0\") {\r\n        base = address[index];\r\n    } else if (mask[index] === \"1\") {\r\n        base = \"1\";\r\n    } else {\r\n        base = \"X\";\r\n    }\r\n    const remaining = createAddress(mask, address, index + 1);\r\n    if (base === \"X\") {\r\n         return remaining.flatMap((e) => [\"0\", \"1\"].map((x) => x + e));\r\n    } else {\r\n        return remaining.map((e) => base + e);\r\n    }\r\n};\r\n\r\n\r\nconst updateMemory2 = async (instruction: Instruction, memory: Memory): Promise<void> => {\r\n    if (isMask(instruction)) {\r\n        memory.mask = instruction.mask;\r\n    } else {\r\n        const binaryAddress = instruction.address.toString(2).padStart(36, \"0\");\r\n        const addresses = createAddress(memory.mask, binaryAddress, 0);\r\n        for (const address of addresses) {\r\n            const v = parseInt(instruction.value, 2);\r\n            memory.data[parseInt(address, 2)] = v;\r\n        }\r\n    }\r\n};\r\n\r\nexport const dockingData = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const input = parseLines(lines);\r\n        const memory = emptyMemory();\r\n        for (const instruction of input) {\r\n            updateMemory(instruction, memory);\r\n        }\r\n        const result = Object.values(memory.data).reduce((acc, next) => acc + next, 0);\r\n        await resultOutputCallback(result);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const input = parseLines(lines);\r\n        const memory = emptyMemory();\r\n        for (const instruction of input) {\r\n            updateMemory2(instruction, memory);\r\n        }\r\n        const result = Object.values(memory.data).reduce((acc, next) => acc + next, 0);\r\n        await resultOutputCallback(result);\r\n    },\r\n    { key: \"docking-data\", title: \"Docking Data\", embeddedData: true, stars: 2}\r\n);\r\n","import { entryForFile } from \"../../../entry\";\r\n\r\nconst parseLines = (lines: string[]): number[] => {\r\n    return lines[0].split(\",\").map((e) => parseInt(e, 10));\r\n};\r\n\r\nexport const rambunctiousRecitation = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        // lines[0] = \"0,3,6\";\r\n        const startList = parseLines(lines);\r\n        const memory: {[key: number]: number} = {};\r\n        let lastSpoken: number = 0;\r\n        let lastAge: number | undefined;\r\n        for (let i = 0; i < startList.length; i++) {\r\n            memory[startList[i]] = i + 1;\r\n            lastSpoken = startList[i];\r\n        }\r\n        for (let i = startList.length + 1; i <= 2020; i++) {\r\n            const newSpoken = lastAge !== undefined ? (memory[lastSpoken] - lastAge) : 0;\r\n            lastAge = memory[newSpoken];\r\n            if (i <= 10) {\r\n                await outputCallback(newSpoken);\r\n            }\r\n            memory[newSpoken] = i;\r\n            lastSpoken = newSpoken;\r\n        }\r\n        await resultOutputCallback(lastSpoken);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const startList = parseLines(lines);\r\n        const memory: {[key: number]: number} = {};\r\n        let lastSpoken: number = 0;\r\n        let lastAge: number | undefined;\r\n        for (let i = 0; i < startList.length; i++) {\r\n            memory[startList[i]] = i + 1;\r\n            lastSpoken = startList[i];\r\n        }\r\n        for (let i = startList.length + 1; i <= 30000000; i++) {\r\n            const newSpoken = lastAge !== undefined ? (memory[lastSpoken] - lastAge) : 0;\r\n            lastAge = memory[newSpoken];\r\n            if (i % 10000 === 0) {\r\n                await outputCallback(`${i / 30000000 * 100}%`, true);\r\n            }\r\n            memory[newSpoken] = i;\r\n            lastSpoken = newSpoken;\r\n        }\r\n        await resultOutputCallback(lastSpoken);\r\n    },\r\n    {\r\n        key: \"rambunctious-recitation\",\r\n        title: \"Rambunctious Recitation\",\r\n        embeddedData: true,\r\n        stars: 2,\r\n        supportsQuickRunning: true\r\n    }\r\n);\r\n","import { MessageSender, Pause } from \"../../../entry\";\r\n\r\nexport const buildCommunicator = (\r\n        messageSender: MessageSender | undefined,\r\n        pause: Pause\r\n    ): ITicketTranslationMessageSender => {\r\n    if (!messageSender) {\r\n        return new DummyMessageSender();\r\n    } else {\r\n        return new RealMessageSender(messageSender, pause);\r\n    }\r\n};\r\n\r\nexport interface ITicketTranslationMessageSender {\r\n    setup(ticket: number[]): Promise<void>;\r\n    foundLabel(label: string, index: number): Promise<void>;\r\n}\r\n\r\ntype PrivateTicketTranslationMessage = {\r\n    type: \"setup\";\r\n    ticket: number[];\r\n} | {\r\n    type: \"label\";\r\n    index: number;\r\n    label: string;\r\n};\r\n\r\nexport type TicketTranslationMessage = {kind: \"TicketTranslationMessage\"} & PrivateTicketTranslationMessage;\r\n\r\nconst buildMessage = (message: PrivateTicketTranslationMessage): TicketTranslationMessage => {\r\n    return {\r\n        ...message,\r\n        kind: \"TicketTranslationMessage\"\r\n    };\r\n};\r\n\r\nexport function isTicketTranslationMessage(message: any): message is TicketTranslationMessage {\r\n    return (message as TicketTranslationMessage).kind === \"TicketTranslationMessage\";\r\n}\r\n\r\nclass RealMessageSender implements ITicketTranslationMessageSender {\r\n    constructor(private readonly messageSender: MessageSender, private readonly pause: Pause) { }\r\n\r\n    public async setup(ticket: number[]) {\r\n        this.messageSender(buildMessage({\r\n            type: \"setup\",\r\n            ticket\r\n        }));\r\n        await this.pause();\r\n    }\r\n\r\n    public async foundLabel(label: string, index: number) {\r\n        this.messageSender(buildMessage({\r\n            type: \"label\",\r\n            index,\r\n            label\r\n        }));\r\n        await this.pause();\r\n    }\r\n}\r\n\r\nclass DummyMessageSender implements ITicketTranslationMessageSender {\r\n    public async setup(ticket: number[]): Promise<void> { }\r\n    public async foundLabel(label: string, index: number): Promise<void> { }\r\n\r\n}\r\n","import { buildGroupsFromSeparator } from \"../../../../support/sequences\";\r\nimport { entryForFile } from \"../../../entry\";\r\nimport { buildCommunicator, ITicketTranslationMessageSender } from \"./communication\";\r\n\r\ninterface ValidityRule {\r\n    min: number;\r\n    max: number;\r\n}\r\ninterface TicketRules {\r\n    [key: string]: ValidityRule[];\r\n}\r\n\r\ninterface Document {\r\n    ticketRules: TicketRules;\r\n    myTicket: number[];\r\n    nearbyTickets: number[][];\r\n}\r\n\r\nconst checkInvalidValues = (ticket: number[], ticketRules: TicketRules): number[] => {\r\n    const rules = Object.values(ticketRules);\r\n    const invalid: number[] = [];\r\n    for (const n of ticket) {\r\n        let foundValid = false;\r\n        for (const rule of rules) {\r\n            if (foundValid) {\r\n                break;\r\n            }\r\n            for (const range of rule) {\r\n                if (range.min <= n && range.max >= n) {\r\n                    foundValid = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (!foundValid) {\r\n            invalid.push(n);\r\n        }\r\n    }\r\n    return invalid;\r\n};\r\n\r\nconst parseLines = (lines: string[]): Document => {\r\n    const groups = [...buildGroupsFromSeparator(lines, (e) => e.trim().length === 0)];\r\n    const ticketRules: TicketRules = groups[0].map((line) => line.split(\": \")).map((tokens) => {\r\n        return {\r\n            key: tokens[0],\r\n            validity: tokens[1].split(\" or \").map((e) => ({\r\n                min: parseInt(e.split(\"-\")[0], 10),\r\n                max: parseInt(e.split(\"-\")[1], 10)\r\n            } as ValidityRule))\r\n        };\r\n    }).reduce((acc, next) => {acc[next.key] = next.validity; return acc; }, {} as TicketRules);\r\n\r\n    const myTicket = groups[1][1].split(\",\").map((e) => parseInt(e, 10));\r\n    const nearbyTickets = groups[2]\r\n        .slice(1)\r\n        .map((line) =>  line.split(\",\").map((e) => parseInt(e, 10)));\r\n\r\n    return {\r\n        ticketRules,\r\n        myTicket,\r\n        nearbyTickets\r\n    };\r\n};\r\n\r\ninterface TicketIndex {\r\n    [key: string]: number;\r\n}\r\n\r\nconst checkIfRuleCanBe = (rule: ValidityRule[], index: number, tickets: number[][]): boolean => {\r\n    for (const ticket of tickets) {\r\n        const n = ticket[index];\r\n        let isTicketOK = false;\r\n        for (const range of rule) {\r\n            if (range.min <= n && range.max >= n) {\r\n                isTicketOK = true;\r\n            }\r\n        }\r\n        if (!isTicketOK) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\n\r\nconst buildIndex = async (\r\n    ticketRules: TicketRules,\r\n    validTickets: number[][],\r\n    currentIndex: TicketIndex,\r\n    communicator: ITicketTranslationMessageSender\r\n): Promise<boolean> => {\r\n    const allRules = Object.keys(ticketRules);\r\n    const rulesToFind = allRules.filter((rule) => currentIndex[rule] === undefined);\r\n    const takenIndexes = new Set<number>(Object.values(currentIndex));\r\n    const availableIndexes = [...Array(validTickets[0].length).keys()].filter((e) => !takenIndexes.has(e));\r\n    if (availableIndexes.length === 0) {\r\n        return true;\r\n    }\r\n    let found = false;\r\n    for (const rule of rulesToFind) {\r\n        const possibleIndexes =\r\n            availableIndexes.filter((index) =>\r\n                checkIfRuleCanBe(ticketRules[rule], index, validTickets)\r\n            );\r\n        if (possibleIndexes.length === 1) {\r\n            currentIndex[rule] = possibleIndexes[0];\r\n            found = true;\r\n            await communicator.foundLabel(rule, possibleIndexes[0]);\r\n        }\r\n    }\r\n    if (found) {\r\n        return await buildIndex(ticketRules, validTickets, currentIndex, communicator);\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const ticketTranslation = entryForFile(\r\n    async ({ lines, resultOutputCallback }) => {\r\n        const document = parseLines(lines);\r\n        const invalid = document\r\n            .nearbyTickets\r\n            .reduce(\r\n                (acc, next) => acc.concat(checkInvalidValues(next, document.ticketRules)),\r\n                []\r\n            );\r\n        await resultOutputCallback(invalid.reduce((acc, next) => acc + next, 0));\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback, sendMessage, pause }) => {\r\n        const communicator = buildCommunicator(sendMessage, pause);\r\n        const document = parseLines(lines);\r\n        await communicator.setup(document.myTicket);\r\n        const validTickets = document\r\n            .nearbyTickets\r\n            .filter((e) => checkInvalidValues(e, document.ticketRules).length === 0);\r\n        const ticketIndex: TicketIndex = {};\r\n        const hasBuilt = await buildIndex(document.ticketRules, validTickets, ticketIndex, communicator);\r\n        if (hasBuilt) {\r\n            const interestingRules = Object.keys(ticketIndex).filter((e) => e.startsWith(\"departure\"));\r\n            await resultOutputCallback(\r\n                interestingRules.reduce((acc, next) => acc * document.myTicket[ticketIndex[next]], 1)\r\n            );\r\n        } else {\r\n            await outputCallback(\"Did not build the index :(\");\r\n        }\r\n    },\r\n    {\r\n        key: \"ticket-translation\",\r\n        title: \"Ticket Translation\",\r\n        embeddedData: true,\r\n        stars: 2,\r\n        supportsQuickRunning: true,\r\n        suggestedDelay: 200\r\n    }\r\n);\r\n","import { NotImplementedError } from \"../../../../support/error\";\r\nimport { UnknownSizeField } from \"../../../../support/field\";\r\nimport { Coordinate, Coordinate3d, Coordinate4d } from \"../../../../support/geometry\";\r\nimport { MessageSender, Pause } from \"../../../entry\";\r\n\r\nexport interface IConwayCubesMessageSender {\r\n    send3dData(activeCubes: () => Array<TimedCubes<Coordinate3d>>): Promise<void>;\r\n    send4dData(activeCubes: () => Array<TimedCubes<Coordinate4d>>): Promise<void>;\r\n}\r\nexport const buildCommunicator = (\r\n        messageSender: MessageSender | undefined,\r\n        pause: Pause\r\n    ): IConwayCubesMessageSender => {\r\n    if (!messageSender) {\r\n        return new DummyMessageSender();\r\n    } else {\r\n        return new RealMessageSender(messageSender, pause);\r\n    }\r\n};\r\n\r\ninterface TimedCubes<T> {\r\n    time: number;\r\n    cubes: T[];\r\n}\r\ntype PrivateConwayCubesMessage = {\r\n    type: \"3d\",\r\n    minDepth: number;\r\n    maxDepth: number;\r\n    maxTime: number;\r\n    minHyper?: number;\r\n    maxHyper?: number;\r\n    data(time: number, depth: number): string[][]\r\n} | {\r\n    minDepth: number;\r\n    maxDepth: number;\r\n    maxTime: number;\r\n    minHyper: number;\r\n    maxHyper: number;\r\n    type: \"4d\",\r\n    data(time: number, depth: number, hyper: number): string[][];\r\n};\r\n\r\nexport type ConwayCubesMessage = {kind: \"ConwayCubesMessage\"} & PrivateConwayCubesMessage;\r\n\r\nconst buildMessage = (message: PrivateConwayCubesMessage): ConwayCubesMessage => {\r\n    return {\r\n        ...message,\r\n        kind: \"ConwayCubesMessage\"\r\n    };\r\n};\r\n\r\nexport function isConwayCubesMessage(message: any): message is ConwayCubesMessage {\r\n    return (message as ConwayCubesMessage).kind === \"ConwayCubesMessage\";\r\n}\r\n\r\nclass RealMessageSender implements IConwayCubesMessageSender {\r\n    constructor(private readonly messageSender: MessageSender, private readonly pause: Pause) { }\r\n    public async send3dData(activeCubes: () => Array<TimedCubes<Coordinate3d>>): Promise<void> {\r\n        let max = Number.MIN_VALUE;\r\n        let min = Number.MAX_VALUE;\r\n        const timedCubes = activeCubes();\r\n        const allCubes = timedCubes.reduce((acc, next) => acc.concat(next.cubes), [] as Coordinate3d[]);\r\n        for (const cube of allCubes) {\r\n            max = Math.max(cube.z, max);\r\n            min = Math.min(cube.z, min);\r\n        }\r\n        const mainData = [...Array(max + 1 - min).keys()].map((k) => k + min).flatMap((depth) => {\r\n            const result: Array<{time: number; depth: number; data: string[][]}> = [];\r\n            for (let i = 0; i < timedCubes.length; i++) {\r\n                const field = new UnknownSizeField<string>();\r\n                for (const cube of timedCubes[i].cubes) {\r\n                    if (cube.z === depth) {\r\n                        field.set({x: cube.x, y: cube.y}, \"#\");\r\n                    }\r\n                }\r\n                const data = field.toMatrix().toString((e) => e || \" \").split(\"\\n\").map((e) => e.split(\"\"));\r\n                result.push({time: i, depth, data});\r\n            }\r\n            return result;\r\n        });\r\n        this.messageSender(buildMessage({\r\n                type: \"3d\",\r\n                maxDepth: max,\r\n                minDepth: min,\r\n                data(time, depth) {\r\n                    return mainData.filter((e) => e.time === time && e.depth === depth)[0].data;\r\n                },\r\n                maxTime: timedCubes.length - 1,\r\n        }));\r\n    }\r\n    public async send4dData(activeCubes: () => Array<TimedCubes<Coordinate4d>>): Promise<void> {\r\n        let max = Number.MIN_VALUE;\r\n        let min = Number.MAX_VALUE;\r\n        let maxHyper = Number.MIN_VALUE;\r\n        let minHyper = Number.MAX_VALUE;\r\n        const timedCubes = activeCubes();\r\n        const allCubes = timedCubes.reduce((acc, next) => acc.concat(next.cubes), [] as Coordinate4d[]);\r\n        for (const cube of allCubes) {\r\n            max = Math.max(cube.z, max);\r\n            min = Math.min(cube.z, min);\r\n            maxHyper = Math.max(cube.w, max);\r\n            minHyper = Math.min(cube.w, min);\r\n        }\r\n        const mainData = [...Array(max + 1 - min).keys()].map((k) => k + min).flatMap((depth) => {\r\n            return [...Array(maxHyper + 1 - minHyper).keys()].map((k) => k + min).flatMap((hyper) => {\r\n                const result: Array<{time: number; depth: number; hyper: number; data: string[][]}> = [];\r\n                for (let i = 0; i < timedCubes.length; i++) {\r\n                    const field = new UnknownSizeField<string>();\r\n                    for (const cube of timedCubes[i].cubes) {\r\n                        if (cube.z === depth && cube.w === hyper) {\r\n                            field.set({x: cube.x, y: cube.y}, \"#\");\r\n                        }\r\n                    }\r\n                    const data = field.toMatrix().toString((e) => e || \" \").split(\"\\n\").map((e) => e.split(\"\"));\r\n                    result.push({time: i, depth, hyper, data});\r\n                }\r\n                return result;\r\n            });\r\n        });\r\n        this.messageSender(buildMessage({\r\n                type: \"4d\",\r\n                maxDepth: max,\r\n                minDepth: min,\r\n                minHyper,\r\n                maxHyper,\r\n                data(time, depth, hyper) {\r\n                    return mainData.filter((e) => e.time === time && e.depth === depth && e.hyper === hyper)[0].data;\r\n                },\r\n                maxTime: timedCubes.length - 1,\r\n        }));\r\n    }\r\n\r\n}\r\n\r\nclass DummyMessageSender implements IConwayCubesMessageSender {\r\n    public async send3dData(activeCubes: () => Array<TimedCubes<Coordinate3d>>): Promise<void> { }\r\n    public async send4dData(activeCubes: () => Array<TimedCubes<Coordinate4d>>): Promise<void> { }\r\n}\r\n","import {\r\n    Coordinate3d,\r\n    Coordinate4d,\r\n    getFullSurrounding,\r\n    serialization\r\n} from \"../../../../support/geometry\";\r\nimport { entryForFile } from \"../../../entry\";\r\nimport { buildCommunicator } from \"./communication\";\r\n\r\nconst mapState = (coordinate: Coordinate3d | Coordinate4d, activeCubes: Set<string>): boolean => {\r\n    const surrounding = getFullSurrounding(coordinate);\r\n    const activeSurrounding = surrounding.filter((s) => {\r\n        const c = serialization.serialize(s);\r\n        return activeCubes.has(c);\r\n    });\r\n    const isActive = activeCubes.has(serialization.serialize(coordinate));\r\n    if (isActive) {\r\n        if (activeSurrounding.length === 2 || activeSurrounding.length === 3) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    } else {\r\n        if (activeSurrounding.length === 3) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n};\r\n\r\nexport const conwayCubes = entryForFile(\r\n    async ({ lines, resultOutputCallback, sendMessage, pause }) => {\r\n        const communicator = buildCommunicator(sendMessage, pause);\r\n        let activeCubes: Set<string> = new Set<string>();\r\n        for (let y = 0; y < lines.length; y++) {\r\n            for (let x = 0; x < lines[y].length; x++) {\r\n                if (lines[y][x] === \"#\") {\r\n                    activeCubes.add(serialization.serialize({x, y, z: 0}));\r\n                }\r\n            }\r\n        }\r\n        const timedCubes: Array<Set<string>> = [activeCubes];\r\n        for (let i = 0; i < 6; i++) {\r\n            const affected = new Set<string>([...activeCubes].flatMap((e) => {\r\n                const coordinate = serialization.deserialize3d(e);\r\n                return getFullSurrounding(coordinate).map(serialization.serialize);\r\n            }));\r\n            activeCubes = new Set<string>([...affected].filter((e) => {\r\n                const coordinate = serialization.deserialize3d(e);\r\n                return mapState(coordinate, activeCubes);\r\n            }));\r\n            timedCubes.push(activeCubes);\r\n        }\r\n        await communicator.send3dData(() => {\r\n            return timedCubes.map((cubes, i) => {\r\n                return {\r\n                    time: i,\r\n                    cubes: [...cubes].map(serialization.deserialize3d)\r\n                };\r\n            });\r\n        });\r\n        await resultOutputCallback(activeCubes.size);\r\n    },\r\n    async ({ lines, resultOutputCallback, sendMessage, pause }) => {\r\n        const communicator = buildCommunicator(sendMessage, pause);\r\n        let activeCubes: Set<string> = new Set<string>();\r\n        for (let y = 0; y < lines.length; y++) {\r\n            for (let x = 0; x < lines[y].length; x++) {\r\n                if (lines[y][x] === \"#\") {\r\n                    activeCubes.add(serialization.serialize({x, y, z: 0, w: 0}));\r\n                }\r\n            }\r\n        }\r\n        const timedCubes: Array<Set<string>> = [activeCubes];\r\n        for (let i = 0; i < 6; i++) {\r\n            await pause();\r\n            const affected = new Set<string>([...activeCubes].flatMap((e) => {\r\n                const coordinate = serialization.deserialize4d(e);\r\n                const surrounding = getFullSurrounding(coordinate);\r\n                if (surrounding.length !== 80) {\r\n                    throw new Error(\"Invalid surrounding\");\r\n                }\r\n                return surrounding.map(serialization.serialize);\r\n            }));\r\n            activeCubes = new Set<string>([...affected].filter((e) => {\r\n                const coordinate = serialization.deserialize4d(e);\r\n                return mapState(coordinate, activeCubes);\r\n            }));\r\n            timedCubes.push(activeCubes);\r\n        }\r\n\r\n        await communicator.send4dData(() => {\r\n            return timedCubes.map((cubes, i) => {\r\n                return {\r\n                    time: i,\r\n                    cubes: [...cubes].map(serialization.deserialize4d)\r\n                };\r\n            });\r\n        });\r\n        await resultOutputCallback(activeCubes.size);\r\n    },\r\n    {\r\n        key: \"conway-cubes\",\r\n        title: \"Conway Cubes\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);\r\n","import { entryForFile } from \"../../../entry\";\r\n\r\ntype Token = string;\r\n\r\nconst getNumber = (token: Token): number | null => {\r\n    const n = parseInt(token, 10);\r\n    if (n.toString() === token) {\r\n        return n;\r\n    }\r\n    return null;\r\n};\r\n\r\ntype Operation = ((a: number, b: number) => number);\r\n\r\nconst getOperation = (token: Token): Operation | null => {\r\n    if (token === \"+\") {\r\n        return (a, b) => a + b;\r\n    } else if (token === \"*\") {\r\n        return (a, b) => a * b;\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\nconst getExpressionParenth = (token: Token): \"start\" | \"end\" | null => {\r\n    if (token === \"(\") {\r\n        return \"start\";\r\n    } else if (token === \")\") {\r\n        return \"end\";\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\ntype FlatExpressionToken = number | \"*\" | \"+\";\r\n\r\nconst evaluateFlatExpression = (tokens: FlatExpressionToken[]): number => {\r\n    const current: FlatExpressionToken[] = [...tokens];\r\n    while (current.includes(\"+\")) {\r\n        const index = current.indexOf(\"+\");\r\n        const result = (current[index - 1] as number) + (current[index + 1] as number);\r\n        current.splice(index - 1, 3, result);\r\n    }\r\n    let sum = 1;\r\n    for (const token of current) {\r\n        if (token !== \"*\") {\r\n            if (token === \"+\") {\r\n                throw new Error();\r\n            }\r\n            sum *= token;\r\n        }\r\n    }\r\n    return sum;\r\n};\r\n\r\nconst getFlatExpression = (tokens: Token[], startFrom: number): {expression: FlatExpressionToken[], next: number} => {\r\n    const flat: FlatExpressionToken[] = [];\r\n    while (startFrom < tokens.length) {\r\n        const currentToken = tokens[startFrom];\r\n        if ([\"*\", \"+\"].includes(currentToken)) {\r\n            flat.push(currentToken as \"*\" | \"+\");\r\n            startFrom++;\r\n            continue;\r\n        }\r\n        const n = getNumber(currentToken);\r\n        if (n !== null) {\r\n            flat.push(n);\r\n            startFrom++;\r\n            continue;\r\n        }\r\n\r\n        const startEnd = getExpressionParenth(currentToken);\r\n        if (startEnd !== null) {\r\n            if (startEnd === \"start\") {\r\n                const nested = getFlatExpression(tokens, startFrom + 1);\r\n                const value = evaluateFlatExpression(nested.expression);\r\n                flat.push(value);\r\n                startFrom = nested.next;\r\n            } else {\r\n                return {expression: flat, next: startFrom + 1};\r\n            }\r\n            continue;\r\n        }\r\n        throw new Error(\"Invalid expression\");\r\n    }\r\n    return { expression: flat, next: startFrom };\r\n};\r\n\r\n\r\nconst evaluateExpression = (tokens: Token[], startFrom: number): {result: number, next: number} => {\r\n    let currentSum = 0;\r\n    let currentOperation: Operation | null = null;\r\n    while (startFrom < tokens.length) {\r\n        const currentToken = tokens[startFrom];\r\n        const operation = getOperation(currentToken);\r\n        if (operation !== null) {\r\n            currentOperation = operation;\r\n            startFrom++;\r\n            continue;\r\n        }\r\n\r\n        const n = getNumber(currentToken);\r\n        if (n !== null) {\r\n            if (currentOperation !== null) {\r\n                currentSum = currentOperation(currentSum, n);\r\n                currentOperation = null;\r\n            } else {\r\n                currentSum = n;\r\n            }\r\n            startFrom++;\r\n            continue;\r\n        }\r\n\r\n        const startEnd = getExpressionParenth(currentToken);\r\n        if (startEnd !== null) {\r\n            if (startEnd === \"end\") {\r\n                return {next: startFrom + 1, result: currentSum};\r\n            } else {\r\n                const nested = evaluateExpression(tokens, startFrom + 1);\r\n                if (currentOperation !== null) {\r\n                    currentSum = currentOperation(currentSum, nested.result);\r\n                    currentOperation = null;\r\n                } else {\r\n                    currentSum = nested.result;\r\n                }\r\n                startFrom = nested.next;\r\n            }\r\n            continue;\r\n        }\r\n\r\n        throw new Error(\"Invalid token: \" + currentToken);\r\n    }\r\n    return { result: currentSum, next: startFrom };\r\n};\r\n\r\nconst parseLines = (lines: string[]): Token[][] => {\r\n    return lines.map((line) => line.replaceAll(\" \", \"\").split(\"\"));\r\n};\r\n\r\nexport const operationOrder = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const input = parseLines(lines);\r\n        let sum = 0;\r\n        for (const expression of input) {\r\n            sum += evaluateExpression(expression, 0).result;\r\n        }\r\n        await outputCallback(sum);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const input = parseLines(lines);\r\n        let sum = 0;\r\n        for (const expression of input) {\r\n            const flat = getFlatExpression(expression, 0).expression;\r\n            const result = evaluateFlatExpression(flat);\r\n            sum += result;\r\n        }\r\n        await outputCallback(sum);\r\n    },\r\n    {\r\n        key: \"operation-order\",\r\n        title: \"Operation Order\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);\r\n","import { start } from \"repl\";\r\nimport { Queue } from \"../../../../support/data-structure\";\r\nimport { buildGroupsFromSeparator } from \"../../../../support/sequences\";\r\nimport { entryForFile } from \"../../../entry\";\r\n\r\nconst isMatchTerminal = (match: FullMatch): match is TerminalMatch => {\r\n    return typeof match === \"string\";\r\n};\r\n\r\nconst isMatchList = (match: FullMatch): match is ListMatch => {\r\n    const cast = match as number[][];\r\n    return cast.length !== undefined && cast.length > 0 && cast[0].length !== undefined;\r\n};\r\n\r\ntype TerminalMatch = string;\r\ntype SimpleMatch = number[];\r\ntype ListMatch = number[][];\r\ntype FullMatch = TerminalMatch | SimpleMatch | ListMatch;\r\n\r\ninterface Rule {\r\n    key: number;\r\n    match: FullMatch;\r\n}\r\n\r\ninterface RuleIndex {[key: number]: Rule; }\r\n\r\nconst parseRules = (lines: string[]): RuleIndex => {\r\n    return lines.map((line) => {\r\n        const [a, b] = line.split(\": \");\r\n        const clean = b.trim();\r\n        const match: FullMatch = clean.includes(\"|\") ?\r\n              (clean.split(\" | \").map((e) => e.split(\" \").map((x) => parseInt(x, 10))))\r\n            : (clean.includes(\"\\\"\") ? clean.replaceAll(\"\\\"\", \"\") : clean.split(\" \").map((e) => parseInt(e, 10)));\r\n        return {\r\n            key: parseInt(a, 10),\r\n            match\r\n        } as Rule;\r\n    }).sort((a, b) => a.key - b.key).reduce((acc, next) => {\r\n        acc[next.key] = next;\r\n        return acc;\r\n    }, {} as RuleIndex);\r\n};\r\n\r\nconst buildAll = (match: FullMatch, rules: RuleIndex): string[] => {\r\n    if (isMatchTerminal(match)) {\r\n        return [match];\r\n    } else if (isMatchList(match)) {\r\n        const nested = match.flatMap((m) => buildAll(m, rules));\r\n        return nested;\r\n    } else {\r\n        const toConcat = match.map((r) => buildAll(rules[r].match, rules));\r\n        return combine(toConcat);\r\n    }\r\n};\r\n\r\nconst combine = (elems: string[][]): string[] => {\r\n    if (elems.length === 0) {\r\n        return [\"\"];\r\n    }\r\n    if (elems.length === 1) {\r\n        return elems[0];\r\n    }\r\n    return elems[0].flatMap((e) => combine(elems.slice(1)).map((x) => e + x));\r\n};\r\n\r\ninterface QElement {current: Array<string|Rule>; }\r\n\r\nconst isBuiltFromStart = (target: string, pool: string[]): boolean => {\r\n    if (target.length === 0) {\r\n        return true;\r\n    }\r\n    for (const candidate of pool) {\r\n        if (target.startsWith(candidate)) {\r\n            return isBuiltFromStart(target.slice(candidate.length), pool);\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nconst isBuiltFromStartEnd = (target: string, startPool: string[], endPool: string[]): boolean => {\r\n    if (target.length === 0) {\r\n        return true;\r\n    }\r\n    for (const startCandidate of startPool) {\r\n        if (target.startsWith(startCandidate)) {\r\n            for (const endCandidate of endPool) {\r\n                if (target.endsWith(endCandidate)) {\r\n                    return isBuiltFromStartEnd(\r\n                        target.slice(startCandidate.length, -endCandidate.length),\r\n                        startPool,\r\n                        endPool\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nconst isRepetitionOf = (target: string, repetition: string): boolean => {\r\n    if (target.length === 0) {\r\n        return true;\r\n    }\r\n    if (!target.startsWith(repetition)) {\r\n        return false;\r\n    }\r\n    return isRepetitionOf(target.slice(repetition.length), repetition);\r\n};\r\n\r\nconst isPalindromeOf = (target: string, a: string, b: string): boolean => {\r\n    if (target.length === 0) {\r\n        return true;\r\n    }\r\n    if (!target.startsWith(a)) {\r\n        return false;\r\n    }\r\n    if (!target.endsWith(b)) {\r\n        return false;\r\n    }\r\n    return isPalindromeOf(target.slice(a.length, -b.length), a, b);\r\n};\r\n\r\nexport const monsterMessages = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const groups = [...buildGroupsFromSeparator(lines, (e) => e.trim().length === 0)];\r\n        const rules = parseRules(groups[0]);\r\n        const data = groups[1];\r\n        const built = buildAll(rules[0].match, rules);\r\n        const lookup = new Set<string>(built);\r\n        await resultOutputCallback(data.filter((e) => lookup.has(e)).length);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const groups = [...buildGroupsFromSeparator(lines, (e) => e.trim().length === 0)];\r\n        const rules = parseRules(groups[0]);\r\n        const data = groups[1];\r\n        const as = buildAll(rules[42].match, rules);\r\n        const bs = buildAll(rules[31].match, rules);\r\n        console.log(as);\r\n        console.log(bs);\r\n        await resultOutputCallback(data.filter((e) => {\r\n            for (let i = 1; i < e.length - 1; i++) {\r\n                const a = e.slice(0, i);\r\n                const b = e.slice(i);\r\n                if (isBuiltFromStart(a, as) && isBuiltFromStartEnd(b, as, bs)) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }).length);\r\n        // const built = buildAll(rules[0].match, rules, []);\r\n        // await outputCallback(built);\r\n        // await outputCallback(built.filter(e => e.includes(\"8\") || e.includes(\"11\")));\r\n    },\r\n    {\r\n        key: \"monster-messages\",\r\n        title: \"Monster Messages\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);\r\n","import { factorial } from \"../../../../support/algebra\";\r\nimport { Counter, DefaultListDictionaryString } from \"../../../../support/data-structure\";\r\nimport { Coordinate } from \"../../../../support/geometry\";\r\nimport { buildGroupsFromSeparator } from \"../../../../support/sequences\";\r\nimport { entryForFile } from \"../../../entry\";\r\n\r\ninterface Tile {\r\n    id: number;\r\n    tile: string[][];\r\n    matches: Array<{\r\n        matchesWith: number;\r\n        operations: TileOperations\r\n    }>;\r\n    isPlaced: boolean;\r\n}\r\n\r\nconst rotate = (tile: Tile): Tile => {\r\n    return {\r\n        ...tile,\r\n        tile: tile.tile.map((row, rowIndex) => row.map((col, colIndex) => {\r\n            return tile.tile[colIndex][tile.tile.length - rowIndex - 1];\r\n        }))\r\n    };\r\n};\r\n\r\nconst verticalMatch = (a: Tile, b: Tile): boolean => {\r\n    for (let i = 0; i < a.tile.length; i++) {\r\n        if (a.tile[a.tile.length - 1][i] !== b.tile[0][i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\n\r\nconst horizontalMatch = (a: Tile, b: Tile): boolean => {\r\n    for (let i = 0; i < a.tile.length; i++) {\r\n        if (a.tile[i][a.tile.length - 1] !== b.tile[i][0]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\n\r\ninterface TileOperations {\r\n    rotations: number;\r\n    flipped: boolean;\r\n    inverted: boolean;\r\n    direction: \"horizontal\" | \"vertical\";\r\n}\r\ninterface MatchResult {\r\n    a: TileOperations;\r\n    b: TileOperations;\r\n}\r\n\r\nconst match = (a: Tile, b: Tile): MatchResult | false => {\r\n    const easyMatch = (x: Tile, y: Tile): Omit<Omit<TileOperations, \"rotations\">, \"flipped\"> | false => {\r\n        if (verticalMatch(x, y)) {\r\n            return {direction: \"vertical\", inverted: false};\r\n        }\r\n        if (verticalMatch(y, x)) {\r\n            return {direction: \"vertical\", inverted: true};\r\n        }\r\n        if (horizontalMatch(x, y)) {\r\n            return {direction: \"horizontal\", inverted: false};\r\n        }\r\n        if (horizontalMatch(y, x)) {\r\n            return {direction: \"horizontal\", inverted: true};\r\n        }\r\n        return false;\r\n    };\r\n    const makeMatch = (\r\n        rot: number,\r\n        flipped: boolean,\r\n        inverted: boolean,\r\n        direction: \"horizontal\" | \"vertical\"\r\n    ): TileOperations => {\r\n        return {\r\n            rotations: (rot + 1) % 4, flipped, inverted, direction\r\n        };\r\n    };\r\n    for (let j = 0; j < 4; j++) {\r\n        b = rotate(b);\r\n        const flippedB = flip(b);\r\n        let result = easyMatch(a, b);\r\n        if (result) {\r\n            return {\r\n                a: makeMatch(0, false, result.inverted, result.direction),\r\n                b: makeMatch(j, false, result.inverted, result.direction)\r\n            };\r\n        }\r\n\r\n        result = easyMatch(a, flippedB);\r\n        if (result) {\r\n            return {\r\n                a: makeMatch(0, false, result.inverted, result.direction),\r\n                b: makeMatch(j, true, result.inverted, result.direction)\r\n            };\r\n        }\r\n\r\n    }\r\n    return false;\r\n};\r\n\r\nconst horizontalFlip = (tile: Tile): Tile => rotate(rotate(flip(tile)));\r\n\r\nconst flip = (tile: Tile): Tile => {\r\n    return {\r\n        ...tile,\r\n        tile: tile.tile.map((row, rowIndex) => row.map((col, colIndex) => {\r\n            return tile.tile[tile.tile.length - rowIndex - 1][colIndex];\r\n        }))\r\n    };\r\n};\r\n\r\nconst parseLines = (lines: string[]): Tile[] => {\r\n    const result: Tile[] = [];\r\n    for (const group of buildGroupsFromSeparator(lines, (e) => e.trim().length === 0)) {\r\n        result.push({\r\n            id: parseInt(group[0].split(\" \")[1], 10),\r\n            tile: group.slice(1).map((line) => line.split(\"\")),\r\n            matches: [],\r\n            isPlaced: false\r\n        });\r\n    }\r\n    return result;\r\n};\r\n\r\nconst toString = (tile: Tile): string => {\r\n    return tile.tile.map((e) => e.join(\"\")).join(\"\\n\");\r\n};\r\n\r\nconst adjust = (fixed: Tile, movable: Tile, direction: \"horizontal\" | \"vertical\"): Tile | null => {\r\n    const matcher = direction === \"horizontal\" ? horizontalMatch : verticalMatch;\r\n    for (let i = 0; i < 4; i++) {\r\n        if (matcher(fixed, movable)) {\r\n            return movable;\r\n        }\r\n        const flipped = flip(movable);\r\n        if (matcher(fixed, flipped)) {\r\n            return flipped;\r\n        }\r\n        movable = rotate(movable);\r\n    }\r\n    return null;\r\n};\r\n\r\ninterface TileIndex {[key: number]: Tile; }\r\n\r\nexport const jurassicJigsaw = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const input = parseLines(lines);\r\n        for (const a of input) {\r\n            for (const b of input) {\r\n                if (a.id < b.id) {\r\n                    const isMatching = match(a, b);\r\n                    if (isMatching) {\r\n                        a.matches.push({\r\n                            matchesWith: b.id,\r\n                            operations: isMatching.a\r\n                        });\r\n                        b.matches.push({\r\n                            matchesWith: a.id,\r\n                            operations: isMatching.b\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const corners = input.filter((k) => k.matches.length === 2);\r\n        await resultOutputCallback(corners.reduce((acc, next) => acc * next.id, 1));\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const input = parseLines(lines);\r\n        for (const a of input) {\r\n            for (const b of input) {\r\n                if (a.id < b.id) {\r\n                    const isMatching = match(a, b);\r\n                    if (isMatching) {\r\n                        a.matches.push({\r\n                            matchesWith: b.id,\r\n                            operations: isMatching.a\r\n                        });\r\n                        b.matches.push({\r\n                            matchesWith: a.id,\r\n                            operations: {...isMatching.b, inverted: !isMatching.b.inverted}\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const tileIndex = input.reduce((acc, next) => {\r\n            acc[next.id] = next;\r\n            return acc;\r\n        }, {} as TileIndex);\r\n\r\n        const corners = input.filter((k) => k.matches.length === 2);\r\n        let topLeftCorner = corners.sort((a, b) => a.id - b.id)[0];\r\n        // this is not generic!\r\n        topLeftCorner = flip(horizontalFlip(topLeftCorner));\r\n        console.log(toString(topLeftCorner));\r\n        const size = Math.sqrt(input.length);\r\n        let currentLine: Tile[] = [topLeftCorner];\r\n        topLeftCorner.isPlaced = true;\r\n        const result: Tile[][] = [];\r\n        while (result.length < size) {\r\n            if (currentLine.length > 0 && currentLine.length < size) {\r\n                const lastIndex = currentLine.length - 1;\r\n                const current = currentLine[lastIndex];\r\n                const candidates = current.matches.map((t) => tileIndex[t.matchesWith]).filter((e) => !e.isPlaced);\r\n                let target: Tile | null = null;\r\n                for (const tile of candidates) {\r\n                    target = adjust(current, tile, \"horizontal\");\r\n                    if (target) {\r\n                        break;\r\n                    }\r\n                }\r\n                if (!target) {\r\n                    throw new Error(\"Could not find horizontal tile\");\r\n                }\r\n                currentLine.push(target);\r\n                target.isPlaced = true;\r\n            } else if (currentLine.length === size) {\r\n                result.push(currentLine);\r\n                currentLine = [];\r\n            } else if (currentLine.length === 0 && result.length === 0) {\r\n                throw new Error(\"Cannot write second line without first\");\r\n            } else {\r\n                if (currentLine.length !== 0) {\r\n                    throw new Error(\"What didn't I consider? \" + currentLine.length);\r\n                }\r\n                const lastIndex = result.length - 1;\r\n                const current = result[lastIndex][0];\r\n                const candidates = current.matches.map((t) => tileIndex[t.matchesWith]).filter((e) => !e.isPlaced);\r\n                let target: Tile | null = null;\r\n                for (const tile of candidates) {\r\n                    target = adjust(current, tile, \"vertical\");\r\n                    if (target) {\r\n                        break;\r\n                    }\r\n                }\r\n                if (!target) {\r\n                    throw new Error(\"Could not find vertical tile\");\r\n                }\r\n                currentLine.push(target);\r\n                target.isPlaced = true;\r\n            }\r\n        }\r\n        let maxiTile: Tile = {\r\n            id: -1,\r\n            isPlaced: true,\r\n            matches: [],\r\n            tile: []\r\n        };\r\n        let currentMaxiLine: string[] = [];\r\n        const tileSize = result[0][0].tile.length;\r\n        for (let y = 0; y < size; y++) {\r\n            for (let innerY = 0; innerY < tileSize; innerY++) {\r\n                if (innerY === 0 || innerY === tileSize - 1) {\r\n                    continue;\r\n                }\r\n                for (let x = 0; x < size; x++) {\r\n                    const inner = result[y][x].tile[innerY];\r\n                    currentMaxiLine = currentMaxiLine.concat(inner.slice(1, -1));\r\n                }\r\n                maxiTile.tile.push(currentMaxiLine);\r\n                currentMaxiLine = [];\r\n            }\r\n        }\r\n        const seaMonsterPattern =\r\n`                  #\r\n#    ##    ##    ###\r\n #  #  #  #  #  #   `.split(\"\\n\");\r\n        const seaMonsterSize = {y: seaMonsterPattern.length, x: seaMonsterPattern[0].length};\r\n        const clearSeaMonster = (tile: string[][], corner: Coordinate): void => {\r\n            const nestedTileSize = {y: tile.length, x: tile[0].length};\r\n            if (corner.x + seaMonsterSize.x > nestedTileSize.x || corner.y + seaMonsterSize.y > nestedTileSize.y) {\r\n                return;\r\n            }\r\n            for (let y = 0; y < seaMonsterPattern.length; y++) {\r\n                for (let x = 0; x < seaMonsterPattern[0].length; x++) {\r\n                    if (seaMonsterPattern[y][x] === \"#\")  {\r\n                        tile[y + corner.y][x + corner.x] = \"O\";\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        const seaMonsterMatch = (tile: string[][], corner: Coordinate): boolean => {\r\n            const nestedTileSize = {y: tile.length, x: tile[0].length};\r\n            if (corner.x + seaMonsterSize.x > nestedTileSize.x || corner.y + seaMonsterSize.y > nestedTileSize.y) {\r\n                return false;\r\n            }\r\n            for (let y = 0; y < seaMonsterPattern.length; y++) {\r\n                for (let x = 0; x < seaMonsterPattern[0].length; x++) {\r\n                    if (seaMonsterPattern[y][x] === \"#\" && tile[y + corner.y][x + corner.x] !== \"#\") {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n        const countMonsters = (tile: string[][]): number => {\r\n            let seaMonsterCount = 0;\r\n            for (let y = 0; y < tile.length; y++) {\r\n                for (let x = 0; x < tile[0].length; x++) {\r\n                    if (seaMonsterMatch(tile, {x, y})) {\r\n                        seaMonsterCount++;\r\n                    }\r\n                }\r\n            }\r\n            return seaMonsterCount;\r\n        };\r\n        let bestTile: Tile | null = null;\r\n        for (let i = 0; i < 4; i++) {\r\n            const current = countMonsters(maxiTile.tile);\r\n            if (current > 0) {\r\n                bestTile = maxiTile;\r\n                break;\r\n            }\r\n            const currentFlipped = countMonsters(flip(maxiTile).tile);\r\n            if (currentFlipped > 0) {\r\n                bestTile = maxiTile;\r\n                break;\r\n            }\r\n            maxiTile = rotate(maxiTile);\r\n        }\r\n        if (!bestTile) {\r\n            throw new Error(\"Didn't find\");\r\n        }\r\n        for (let y = 0; y < bestTile.tile.length; y++) {\r\n            for (let x = 0; x < bestTile.tile[0].length; x++) {\r\n                if (seaMonsterMatch(bestTile.tile, {x, y})) {\r\n                    clearSeaMonster(bestTile.tile, {x, y});\r\n                }\r\n            }\r\n        }\r\n        await outputCallback(toString(bestTile));\r\n        await resultOutputCallback(\r\n            bestTile.tile\r\n                .map((e) => e.join(\"\"))\r\n                .join(\"\")\r\n                .split(\"\")\r\n                .filter((t) => t === \"#\")\r\n                .length\r\n        );\r\n    },\r\n    {\r\n        key: \"jurassic-jigsaw\",\r\n        title: \"Jurassic Jigsaw\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);\r\n","import { CircularDoubleLinkedNode } from \"../../../../support/data-structure\";\r\nimport { entryForFile } from \"../../../entry\";\r\n\r\ntype GameState = {\r\n    cups: CircularDoubleLinkedNode<number>;\r\n    length: number;\r\n    map: {[key: number]: CircularDoubleLinkedNode<number>}\r\n};\r\n\r\nconst serialize = (state: GameState): string => {\r\n    return state.cups.getAllElements().join(\"\");\r\n};\r\n\r\nconst move = (state: GameState): void => {\r\n    const currentCupLabel = state.cups.value;\r\n    const pickedUp = [1, 2, 3].map((i) => state.cups.removeNext()!);\r\n    let destination = (currentCupLabel - 1 + state.length - 1) % state.length + 1;\r\n    while (pickedUp.includes(destination)) {\r\n        destination = (destination - 1 + state.length - 1) % state.length + 1;\r\n    }\r\n    if (destination < 1 || destination > state.length) {\r\n        throw new Error(\"Invalid destination: \" + destination);\r\n    }\r\n    let destinationCup = state.map[destination];\r\n    for (const toPut of pickedUp) {\r\n        destinationCup = destinationCup.append(toPut);\r\n        state.map[destinationCup.value] = destinationCup;\r\n    }\r\n    state.cups = state.cups.next!;\r\n};\r\n\r\ntype Cup = CircularDoubleLinkedNode<number>;\r\n\r\nconst buildMap = (cups: Cup): {[key: number]: Cup} => {\r\n    const start = cups;\r\n    const map: {[key: number]: Cup} = {};\r\n    let current = start;\r\n    do {\r\n        map[current.value] = current;\r\n        current = current.next;\r\n    } while (current !== start);\r\n    return map;\r\n};\r\n\r\nconst parseLines = (lines: string[]): GameState => {\r\n    const cups = lines[0].split(\"\").map((e) => parseInt(e, 10));\r\n    const startCup = new CircularDoubleLinkedNode<number>(cups[0]);\r\n    let current = startCup;\r\n    for (const c of cups.slice(1)) {\r\n        current = current.append(c);\r\n    }\r\n    return {\r\n        cups: startCup,\r\n        length: cups.length,\r\n        map: buildMap(startCup)\r\n    };\r\n};\r\n\r\nconst createResult = (state: GameState): string => {\r\n    let cup = state.cups;\r\n    while (cup.value !== 1) {\r\n        cup = cup.next;\r\n    }\r\n    return cup.getAllElements().join(\"\").slice(1);\r\n};\r\n\r\nconst fillUp = (state: GameState, upTo: number) => {\r\n    for (let i = state.length; i < upTo; i++) {\r\n        state.cups.prepend(i + 1);\r\n    }\r\n    state.length = upTo;\r\n    state.map = buildMap(state.cups);\r\n};\r\n\r\nconst range = (start: number, end: number) => {\r\n    return Array(end - start + 1).fill(0).map((_, idx) => start + idx);\r\n};\r\n\r\n\r\nexport const crabCups = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const state = parseLines(lines);\r\n        for (let i = 0; i < 100; i++) {\r\n            move(state);\r\n        }\r\n        await outputCallback(serialize(state));\r\n        await resultOutputCallback(createResult(state));\r\n    },\r\n    async ({ lines, outputCallback, pause, resultOutputCallback }) => {\r\n        const size = 1000000;\r\n        const moves = 10000000;\r\n        const state = parseLines(lines);\r\n        fillUp(state, size);\r\n        for (let i = 0; i < moves; i++) {\r\n            move(state);\r\n            if (i % 10000 === 0) {\r\n                await pause();\r\n            }\r\n        }\r\n        await resultOutputCallback(state.map[1].next.value * state.map[1].next.next.value);\r\n    },\r\n    {\r\n        key: \"crab-cups\",\r\n        title: \"Crab Cups\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);\r\n","import { DefaultListDictionaryString } from \"../../../../support/data-structure\";\r\nimport { entryForFile } from \"../../../entry\";\r\n\r\ntype Recipe = {\r\n    ingredients: string[];\r\n    allergens: string[];\r\n};\r\n\r\ntype MatchingRecipe = {\r\n    ingredients: string[];\r\n    allergens: string[];\r\n};\r\n\r\ntype AllergenIndex = {[key: string]: string};\r\n\r\ntype AllergenCandidates = DefaultListDictionaryString<string>;\r\n\r\nconst clearIntersection = (\r\n    a: MatchingRecipe,\r\n    b: MatchingRecipe,\r\n    allergen: string,\r\n    allergenCandidates: AllergenCandidates,\r\n): boolean => {\r\n    const aIngredients = new Set<string>(a.ingredients);\r\n    const bIngredients = new Set<string>(b.ingredients);\r\n    let hasUpdated = false;\r\n    for (const ingredient of a.ingredients) {\r\n        if (!bIngredients.has(ingredient)) {\r\n            const allergens = allergenCandidates.get(ingredient);\r\n            const index = allergens.indexOf(allergen);\r\n            if (index >= 0) {\r\n                hasUpdated = true;\r\n                allergens.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n    for (const ingredient of b.ingredients) {\r\n        if (!aIngredients.has(ingredient)) {\r\n            const allergens = allergenCandidates.get(ingredient);\r\n            const index = allergens.indexOf(allergen);\r\n            if (index >= 0) {\r\n                hasUpdated = true;\r\n                allergens.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n    return hasUpdated;\r\n};\r\n\r\nconst updateAllergens = (\r\n    recipes: MatchingRecipe[],\r\n    index: AllergenIndex,\r\n    candidates: AllergenCandidates,\r\n): void => {\r\n    for (const recipe of recipes) {\r\n        recipe.ingredients = recipe.ingredients.filter((e) => (!index[e]) && candidates.get(e).length > 0);\r\n        recipe.allergens = recipe.allergens.filter((e) => !Object.values(index).includes(e));\r\n    }\r\n\r\n    let hasUpdated = false;\r\n    for (const recipe of recipes) {\r\n        for (const allergen of recipe.allergens) {\r\n            const currentRecipeCandidates = recipe.ingredients.map((i) => ({\r\n                ingredient: i,\r\n                allergens: candidates.get(i)\r\n            })).filter((e) => e.allergens.includes(allergen));\r\n            if (currentRecipeCandidates.length === 1) {\r\n                const found = currentRecipeCandidates[0];\r\n                hasUpdated = true;\r\n                index[found.ingredient] = allergen;\r\n                candidates.get(found.ingredient).length = 0;\r\n                candidates.get(found.ingredient).push(allergen);\r\n            }\r\n        }\r\n    }\r\n    if (hasUpdated) {\r\n        return updateAllergens(recipes, index, candidates);\r\n    }\r\n};\r\n\r\nconst checkCandidate = (\r\n    candidate: string,\r\n    a: MatchingRecipe,\r\n    b: MatchingRecipe,\r\n    recipes: MatchingRecipe[],\r\n    allergenIndex: AllergenIndex,\r\n    allergenCandidates: AllergenCandidates\r\n): boolean => {\r\n    if (a.allergens.includes(candidate) && b.allergens.includes(candidate)) {\r\n        const result = clearIntersection(a, b, candidate, allergenCandidates);\r\n        if (result) {\r\n            updateAllergens(recipes, allergenIndex, allergenCandidates);\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nconst intersect = (\r\n    recipes: MatchingRecipe[],\r\n    index: AllergenIndex,\r\n    allergenCandidates: AllergenCandidates\r\n): boolean => {\r\n    for (let i = 0; i < recipes.length; i++) {\r\n        for (let j = i + 1; j < recipes.length; j++) {\r\n            const candidates = new Set<string>(recipes[i].allergens.concat(recipes[j].allergens));\r\n            for (const candidate of candidates) {\r\n                if (checkCandidate(candidate, recipes[i], recipes[j], recipes, index, allergenCandidates)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nconst createMatching = (recipes: Recipe[]): {allergens: string[], recipes: MatchingRecipe[]} => {\r\n    const allAllergens = [...recipes.reduce((acc, next) => {\r\n        next.allergens.forEach((a) => acc.add(a));\r\n        return acc;\r\n    }, new Set<string>())];\r\n    return {\r\n        allergens: allAllergens,\r\n        recipes: recipes.map((r) => ({\r\n            allergens: r.allergens,\r\n            ingredients: [...r.ingredients],\r\n        }))\r\n    };\r\n};\r\n\r\nconst parseLines = (lines: string[]): Recipe[] => {\r\n    return lines.map((line) => {\r\n        const [a, b] = line.split(\" (contains \");\r\n        return {\r\n            ingredients: a.split(\" \"),\r\n            allergens: b.replaceAll(\")\", \"\").split(\", \")\r\n        };\r\n    });\r\n};\r\n\r\nexport const allergenAssessment = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n//         lines =\r\n// `mxmxvkd kfcds sqjhc nhms (contains dairy, fish)\r\n// trh fvjkl sbzzf mxmxvkd (contains dairy)\r\n// sqjhc fvjkl (contains soy)\r\n// sqjhc mxmxvkd sbzzf (contains fish)`.split(\"\\n\");\r\n        const input = parseLines(lines);\r\n        const {recipes, allergens} = createMatching(input);\r\n        const allergenIndex: AllergenIndex = {};\r\n        const allergenCandidates = new DefaultListDictionaryString<string>();\r\n        const allIngredients = new Set<string>(recipes.flatMap((r) => r.ingredients));\r\n        for (const allergen of allergens) {\r\n            for (const ingredient of allIngredients) {\r\n                allergenCandidates.add(ingredient, allergen);\r\n            }\r\n        }\r\n        let iterations = 0;\r\n        while (intersect(recipes, allergenIndex, allergenCandidates)) {\r\n            iterations++;\r\n            if (iterations % 10 === 0) {\r\n                await outputCallback(iterations);\r\n            }\r\n        }\r\n        await outputCallback(iterations);\r\n        await outputCallback(JSON.stringify(allergenIndex));\r\n        const safeIngredients = [...allIngredients].filter((e) => !allergenIndex[e]);\r\n        await outputCallback(safeIngredients);\r\n        const count = input.reduce((acc, next) => {\r\n            const interesting = next.ingredients.filter((e) => safeIngredients.includes(e));\r\n            return acc + interesting.length;\r\n        }, 0);\r\n        await resultOutputCallback(count);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n//         lines =\r\n// `mxmxvkd kfcds sqjhc nhms (contains dairy, fish)\r\n// trh fvjkl sbzzf mxmxvkd (contains dairy)\r\n// sqjhc fvjkl (contains soy)\r\n// sqjhc mxmxvkd sbzzf (contains fish)`.split(\"\\n\");\r\n        const input = parseLines(lines);\r\n        const {recipes, allergens} = createMatching(input);\r\n        const allergenIndex: AllergenIndex = {};\r\n        const allergenCandidates = new DefaultListDictionaryString<string>();\r\n        const allIngredients = new Set<string>(recipes.flatMap((r) => r.ingredients));\r\n        for (const allergen of allergens) {\r\n            for (const ingredient of allIngredients) {\r\n                allergenCandidates.add(ingredient, allergen);\r\n            }\r\n        }\r\n        while (intersect(recipes, allergenIndex, allergenCandidates)) {\r\n            // nothing to do here\r\n        }\r\n        const canonical = Object.keys(allergenIndex)\r\n            .sort((a, b) => allergenIndex[a].localeCompare(allergenIndex[b]))\r\n            .join(\",\");\r\n        await resultOutputCallback(canonical);\r\n    },\r\n    {\r\n        key: \"allergen-assessment\",\r\n        title: \"Allergen Assessment\",\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);\r\n","import { buildGroupsFromSeparator } from \"../../../../support/sequences\";\r\nimport { entryForFile } from \"../../../entry\";\r\n\r\ntype Deck = number[];\r\n\r\ntype GameState = {\r\n    a: Deck;\r\n    b: Deck;\r\n};\r\n\r\nconst serializeState = (state: GameState): string => {\r\n    return JSON.stringify(state);\r\n};\r\n\r\nconst parseLines = (lines: string[]): GameState => {\r\n    const decks: Deck[] = [];\r\n    for (const group of buildGroupsFromSeparator(lines, (e) => !e)) {\r\n        decks.push(group.slice(1).map((e) => parseInt(e, 10)));\r\n    }\r\n    return {\r\n        a: decks[0],\r\n        b: decks[1]\r\n    };\r\n};\r\n\r\nconst winRecursiveRound = (gameState: GameState): keyof GameState => {\r\n    // console.log(\"=== Game \" + level + \" ===\");\r\n    const memo = new Set<string>();\r\n    while (true) {\r\n        const result = playRecursiveRound(gameState, memo);\r\n        if (result) {\r\n            return result;\r\n        }\r\n    }\r\n};\r\n\r\nlet level = 1;\r\n\r\nconst playRecursiveRound = (gameState: GameState, memo: Set<string>): false | keyof GameState => {\r\n    if (memo.has(serializeState(gameState))) {\r\n        return \"a\";\r\n    }\r\n    memo.add(serializeState(gameState));\r\n    if (gameState.a.length === 0) {\r\n        return \"b\";\r\n    } else if (gameState.b.length === 0) {\r\n        return \"a\";\r\n    }\r\n    const firstA = gameState.a.shift()!;\r\n    const firstB = gameState.b.shift()!;\r\n    if (gameState.a.length >= firstA && gameState.b.length >= firstB) {\r\n        const nestedState: GameState = {\r\n            a: gameState.a.slice(0, firstA),\r\n            b: gameState.b.slice(0, firstB)\r\n        };\r\n        level++;\r\n        const winner = winRecursiveRound(nestedState);\r\n        level--;\r\n        if (winner === \"a\") {\r\n            gameState.a.push(firstA);\r\n            gameState.a.push(firstB);\r\n        } else {\r\n            gameState.b.push(firstB);\r\n            gameState.b.push(firstA);\r\n        }\r\n        return false;\r\n    } else {\r\n        const winner = firstA > firstB ? gameState.a : gameState.b;\r\n        if (firstA > firstB) {\r\n            winner.push(firstA);\r\n        }\r\n        winner.push(firstB);\r\n        if (firstA < firstB) {\r\n            winner.push(firstA);\r\n        }\r\n        if (gameState.a.length === 0) {\r\n            return \"b\";\r\n        } else if (gameState.b.length === 0) {\r\n            return \"a\";\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n};\r\n\r\nconst playRound = (gameState: GameState): false | keyof GameState => {\r\n    if (gameState.a.length === 0) {\r\n        return \"b\";\r\n    } else if (gameState.b.length === 0) {\r\n        return \"a\";\r\n    }\r\n    const firstA = gameState.a.shift()!;\r\n    const firstB = gameState.b.shift()!;\r\n    const winner = firstA > firstB ? gameState.a : gameState.b;\r\n    if (firstA > firstB) {\r\n        winner.push(firstA);\r\n    }\r\n    winner.push(firstB);\r\n    if (firstA < firstB) {\r\n        winner.push(firstA);\r\n    }\r\n    if (gameState.a.length === 0) {\r\n        return \"b\";\r\n    } else if (gameState.b.length === 0) {\r\n        return \"a\";\r\n    } else {\r\n        return false;\r\n    }\r\n};\r\n\r\nconst calculateScore  = (deck: Deck): number =>\r\n    [...deck.reverse()]\r\n        .map((e, i) => e * (i + 1))\r\n        .reduce((acc, next) => acc + next, 0);\r\n\r\nexport const crabCombat = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback, setAutoStop, pause }) => {\r\n        setAutoStop();\r\n        const state = parseLines(lines);\r\n        while (true) {\r\n            const result = playRound(state);\r\n            await pause();\r\n            await outputCallback(state.a.length, true);\r\n            if (result) {\r\n                const winnerDeck = state[result];\r\n                await resultOutputCallback(calculateScore(winnerDeck));\r\n                return;\r\n            }\r\n        }\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const state = parseLines(lines);\r\n        const winner = winRecursiveRound(state);\r\n        await resultOutputCallback(calculateScore(state[winner]));\r\n    },\r\n    {\r\n        key: \"crab-combat\",\r\n        title: \"Crab Combat\",\r\n        embeddedData: true,\r\n        supportsQuickRunning: true,\r\n        suggestedDelay: 0,\r\n        customComponent: \"pause-and-run\",\r\n        stars: 2\r\n    }\r\n);\r\n","import { entryForFile } from \"../../../entry\";\r\nimport {getHexSurrounding, HexCubeCoordinate, pointyHexDirections, serialization, sumHexCoordinates} from \"../../../../support/hex-geometry\";\r\n\r\ntype Direction = keyof typeof pointyHexDirections;\r\n\r\nconst parseLines = (lines: string[]): Direction[][] => {\r\n    return lines.map((line) => {\r\n        const directions: Direction[] = [];\r\n        let modifier: \"north\" | \"south\" | null = null;\r\n        for (const token of line) {\r\n            if (token === \"n\") {\r\n                modifier = \"north\";\r\n            } else if (token === \"s\") {\r\n                modifier = \"south\";\r\n            } else if (token === \"e\") {\r\n                if (modifier === \"north\") {\r\n                    directions.push(\"northEast\");\r\n                } else if (modifier === \"south\") {\r\n                    directions.push(\"southEast\");\r\n                } else {\r\n                    directions.push(\"east\");\r\n                }\r\n                modifier = null;\r\n            } else if (token === \"w\") {\r\n                if (modifier === \"north\") {\r\n                    directions.push(\"northWest\");\r\n                } else if (modifier === \"south\") {\r\n                    directions.push(\"southWest\");\r\n                } else {\r\n                    directions.push(\"west\");\r\n                }\r\n                modifier = null;\r\n            }\r\n        }\r\n        return directions;\r\n    });\r\n};\r\n\r\nexport const lobbyLayout = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const reference: HexCubeCoordinate = {\r\n            x: 0,\r\n            y: 0,\r\n            z: 0\r\n        };\r\n        const black = new Set<string>();\r\n        const instructions = parseLines(lines);\r\n        for (const instruction of instructions) {\r\n            const tile = instruction.reduce(\r\n                (acc, next) => sumHexCoordinates(acc, pointyHexDirections[next]),\r\n                reference\r\n            );\r\n            const serialized = serialization.serialize(tile);\r\n            if (black.has(serialized)) {\r\n                black.delete(serialized);\r\n            } else {\r\n                black.add(serialized);\r\n            }\r\n        }\r\n        await resultOutputCallback(black.size);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const reference: HexCubeCoordinate = {\r\n            x: 0,\r\n            y: 0,\r\n            z: 0\r\n        };\r\n        let black = new Set<string>();\r\n        const instructions = parseLines(lines);\r\n        for (const instruction of instructions) {\r\n            const tile = instruction.reduce(\r\n                (acc, next) => sumHexCoordinates(acc, pointyHexDirections[next]),\r\n                reference\r\n            );\r\n            const serialized = serialization.serialize(tile);\r\n            if (black.has(serialized)) {\r\n                black.delete(serialized);\r\n            } else {\r\n                black.add(serialized);\r\n            }\r\n        }\r\n        for (let i = 0; i < 100; i++) {\r\n            const interesting = new Set<string>([...black.values()]\r\n                .map(serialization.deserialize)\r\n                .flatMap(getHexSurrounding)\r\n                .map(serialization.serialize)).values();\r\n            const newBlack = new Set<string>();\r\n            for (const tile of interesting) {\r\n                const coordinates = serialization.deserialize(tile);\r\n                const blackNeighbours = getHexSurrounding(coordinates)\r\n                    .map(serialization.serialize)\r\n                    .filter((e) => black.has(e))\r\n                    .length;\r\n                const isBlack = black.has(tile);\r\n                if (isBlack) {\r\n                    if (blackNeighbours > 0 && blackNeighbours <= 2) {\r\n                        newBlack.add(tile);\r\n                    }\r\n                } else {\r\n                    if (blackNeighbours === 2) {\r\n                        newBlack.add(tile);\r\n                    }\r\n                }\r\n            }\r\n            black = newBlack;\r\n        }\r\n        await resultOutputCallback(black.size);\r\n    },\r\n    {\r\n        key: \"lobby-layout\",\r\n        title: \"Lobby Layout\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);\r\n","import { entryForFile } from \"../../../entry\";\r\n\r\nconst constants = {\r\n    subjectNumber: 7n,\r\n    mod: 20201227n,\r\n};\r\n\r\nconst hack = (publicKey: number): number => {\r\n    let loopSize = 0;\r\n    const subjectNumber = constants.subjectNumber;\r\n    const mod = constants.mod;\r\n    let current = 1n;\r\n    const target = BigInt(publicKey);\r\n    while (current !== target) {\r\n        current *= subjectNumber;\r\n        current %= mod;\r\n        loopSize++;\r\n    }\r\n    return loopSize;\r\n};\r\n\r\nconst calculate = (subjectNumber: number, loopSize: number): number => {\r\n    const mod = constants.mod;\r\n    let current = 1n;\r\n    const bigSubject = BigInt(subjectNumber);\r\n    while (loopSize -- > 0) {\r\n        current *= bigSubject;\r\n        current %= mod;\r\n    }\r\n    return Number(current);\r\n};\r\n\r\nexport const comboBreaker = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const [card, door] = lines.map((l) => parseInt(l, 10));\r\n        const doorLoopSize = hack(door);\r\n        const encryptionKey = calculate(card, doorLoopSize);\r\n        await resultOutputCallback(encryptionKey);\r\n\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        throw Error(\"Not implemented\");\r\n    },\r\n    {\r\n        key: \"combo-breaker\",\r\n        title: \"Combo Breaker\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);\r\n","import { binaryBoarding } from \"./binary-boarding\";\r\nimport { passportProcessing } from \"./passport-processing\";\r\nimport { passwordPhilosophy } from \"./password-philosophy\";\r\nimport { customCustoms } from \"./custom-customs\";\r\nimport { reportRepair } from \"./report-repair\";\r\nimport { tobogganTrajectory } from \"./toboggan-trajectory\";\r\nimport { handyHaversacks } from \"./handy-haversacks\";\r\nimport { handheldHalting } from \"./handheld-halting\";\r\nimport { encodingError } from \"./encoding-error\";\r\nimport { adapterArray } from \"./adapter-array\";\r\nimport { seatingSystem } from \"./seating-system\";\r\nimport { rainRisk } from \"./rain-risk\";\r\nimport { shuttleSearch } from \"./shuttle-search\";\r\nimport { dockingData } from \"./docking-data\";\r\nimport { rambunctiousRecitation } from \"./rambunctious-recitation\";\r\nimport { ticketTranslation } from \"./ticket-translation\";\r\nimport { conwayCubes } from \"./conway-cubes\";\r\nimport { operationOrder } from \"./operation-order\";\r\nimport { monsterMessages } from \"./monster-messages\";\r\nimport { jurassicJigsaw } from \"./jurassic-jigsaw\";\r\nimport { crabCups } from \"./crab-cups\";\r\nimport { allergenAssessment } from \"./allergen-assessment\";\r\nimport { crabCombat } from \"./crab-combat\";\r\nimport { lobbyLayout } from \"./lobby-layout\";\r\nimport { comboBreaker } from \"./combo-breaker\";\r\n\r\nexport const entries = [\r\n        reportRepair,\r\n        passwordPhilosophy,\r\n        tobogganTrajectory,\r\n        passportProcessing,\r\n        binaryBoarding,\r\n        customCustoms,\r\n        handyHaversacks,\r\n        handheldHalting,\r\n        encodingError,\r\n        adapterArray,\r\n        seatingSystem,\r\n        rainRisk,\r\n        shuttleSearch,\r\n        dockingData,\r\n        rambunctiousRecitation,\r\n        ticketTranslation,\r\n        conwayCubes,\r\n        operationOrder,\r\n        monsterMessages,\r\n        jurassicJigsaw,\r\n        allergenAssessment,\r\n        crabCombat,\r\n        crabCups,\r\n        lobbyLayout,\r\n        comboBreaker\r\n];\r\n","import { Coordinate, diffCoordinate, floatRotateRadians, multiplyCoordinate, scalarCoordinates, sumCoordinate } from \"../../../../support/geometry\";\r\nimport { Drawable, ScreenPrinter } from \"../../../entry\";\r\n\r\nexport class Submarine {\r\n    private readonly rotationCenter: Coordinate = {x: 5, y: 5};\r\n    private readonly translationPoints: Coordinate[];\r\n    private readonly drawable: Drawable & {type: \"points\"};\r\n\r\n    constructor() {\r\n        this.translationPoints = [\r\n            {x: 0, y: 0},\r\n            {x: 4, y: 0},\r\n            {x: 4, y: -4},\r\n            {x: 6, y: -4},\r\n            {x: 6, y: 0},\r\n            {x: 10, y: 0},\r\n            {x: 15, y: 2.5},\r\n            {x: 10, y: 5},\r\n            {x: 0, y: 5}\r\n        ];\r\n\r\n        this.drawable = {\r\n            type: \"points\",\r\n            color: \"yellow\",\r\n            id: \"submarine\",\r\n            points: this.translationPoints.map((p) => ({...p}))\r\n        };\r\n    }\r\n\r\n    public translate({x, y}: Coordinate) {\r\n        for (const point of this.drawable.points) {\r\n            point.x += x;\r\n            point.y += y;\r\n        }\r\n        for (const point of this.translationPoints) {\r\n            point.x += x;\r\n            point.y += y;\r\n        }\r\n        this.rotationCenter.x += x;\r\n        this.rotationCenter.y += y;\r\n    }\r\n\r\n    public rotate(angle: number) {\r\n        for (let i = 0; i < this.translationPoints.length; i++) {\r\n            const res = floatRotateRadians(this.rotationCenter, this.translationPoints[i], angle);\r\n            const targetPoint = this.drawable.points[i];\r\n            targetPoint.x = res.x;\r\n            targetPoint.y = res.y;\r\n        }\r\n    }\r\n\r\n    public magnify(times: number) {\r\n        for (let i = 0; i < this.translationPoints.length; i++) {\r\n            const delta = diffCoordinate(this.translationPoints[i], this.rotationCenter);\r\n            const magnifiedDelta = scalarCoordinates(delta, times);\r\n            const newPoint = sumCoordinate(magnifiedDelta, this.rotationCenter);\r\n            this.translationPoints[i] = newPoint;\r\n            this.drawable.points[i].x = newPoint.x;\r\n            this.drawable.points[i].y = newPoint.y;\r\n        }\r\n    }\r\n\r\n    public giveSomeMargin() {\r\n        this.translate({x: 15, y: 20});\r\n    }\r\n\r\n    public print(printer: ScreenPrinter) {\r\n        printer.addForeground(this.drawable);\r\n    }\r\n\r\n    public invalidate(printer: ScreenPrinter) {\r\n        printer.invalidate(this.drawable);\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const seaBackground = \"#000071\";\r\nexport const deepSea = \"#07131f\";\r\n","import { multiplyCoordinate } from \"../../../../support/geometry\";\r\nimport { MyIterable } from \"../../../../support/sequences\";\r\nimport { Drawable, MediaQuery, Pause, ScreenBuilder, ScreenPrinter } from \"../../../entry\";\r\nimport { squaresWithThreeSides } from \"../../2016/squares-with-three-sides\";\r\nimport { Submarine } from \"../support/submarine\";\r\n\r\nexport interface ISonarSweepVisualizer {\r\n    setup(items: number[], mediaQuery: MediaQuery): Promise<void>;\r\n    update(increasing: boolean): Promise<void>;\r\n}\r\n\r\nexport const buildVisualizer = (screenBuilder: ScreenBuilder | undefined, pause: Pause) => {\r\n    if (screenBuilder) {\r\n        return new RealVisualizer(screenBuilder, pause);\r\n    } else {\r\n        return new DummyVisualizer();\r\n    }\r\n};\r\n\r\nconst constants = (() => {\r\n    const cellSize = {x: 2, y: 2};\r\n    // const submarineSize = {x: 15, y: 10};\r\n    const submarineSize = {x: 0, y: 0};\r\n    const padding = {x: 2, y: 0};\r\n    const fullSize = {x: padding.x + cellSize.x, y: 0};\r\n    const leftMargin = 0 + submarineSize.x;\r\n    return {\r\n        cellSize,\r\n        submarineSize,\r\n        padding,\r\n        fullSize,\r\n        leftMargin,\r\n        maxSize: 200\r\n    };\r\n})();\r\n\r\ntype LocalDrawable = Drawable & {type: \"rectangle\"};\r\n\r\nclass RealVisualizer implements ISonarSweepVisualizer {\r\n    private printer!: ScreenPrinter;\r\n    private nextItem: number = 0;\r\n    private items: number[] | null = null;\r\n    private drawables: LocalDrawable[] = [];\r\n\r\n    constructor(\r\n        private readonly screenBuilder: ScreenBuilder,\r\n        private readonly pause: Pause\r\n    ) {\r\n    }\r\n    public async setup(items: number[], mediaQuery: MediaQuery): Promise<void> {\r\n        if (mediaQuery.isMobile()) {\r\n            constants.maxSize = 70;\r\n        }\r\n        items = items.map((i) => i * 0.05);\r\n        this.items = items;\r\n        const size = {\r\n            x: constants.leftMargin + Math.min(constants.maxSize, items.length) * (constants.fullSize.x),\r\n            y: Math.max(constants.submarineSize.y, new MyIterable(items).reduce(0, Math.max) * constants.cellSize.y)\r\n        };\r\n        const screenSize = size;\r\n        this.printer = await this.screenBuilder.requireScreen(screenSize);\r\n        this.printer.setManualRender();\r\n        this.printer.setManualInvalidate();\r\n\r\n        const sub = new Submarine();\r\n\r\n        sub.magnify(2);\r\n\r\n        sub.translate({x: 80, y: 18});\r\n\r\n        sub.print(this.printer);\r\n\r\n        this.printer.forceRender();\r\n        await this.pause();\r\n    }\r\n    public async update(increasing: boolean): Promise<void> {\r\n        if (this.items === null) {\r\n            return;\r\n        }\r\n        const c = this.nextItem >= constants.maxSize ? {\r\n            x: constants.leftMargin + constants.fullSize.x * constants.maxSize,\r\n            y: 0\r\n        } : {\r\n            x: constants.leftMargin + constants.fullSize.x * this.nextItem,\r\n            y: 0\r\n        };\r\n        // const c = {\r\n        //     x: constants.leftMargin + constants.fullSize.x * this.nextItem,\r\n        //     y: 0\r\n        // };\r\n        if (this.nextItem > constants.maxSize) {\r\n            this.printer.remove((this.nextItem - constants.maxSize - 1).toString());\r\n            const previousDrawables = this.drawables;\r\n            this.drawables = [];\r\n            for (const drawable of previousDrawables) {\r\n                drawable.c.x -= constants.fullSize.x;\r\n                if (drawable.c.x > constants.leftMargin) {\r\n                    this.drawables.push(drawable);\r\n                    this.printer.invalidate(drawable);\r\n                } else {\r\n                    this.printer.remove(drawable.id);\r\n                }\r\n            }\r\n        }\r\n        const item: LocalDrawable = {\r\n            c,\r\n            color: increasing ? \"#ff000042\" : \"#ffffff47\",\r\n            id: this.nextItem.toString(),\r\n            type: \"rectangle\",\r\n            size: {\r\n                x: constants.cellSize.x,\r\n                y: constants.cellSize.y * this.items[this.nextItem]\r\n            }\r\n        };\r\n        this.drawables.push(item);\r\n        this.printer.add(item);\r\n        this.nextItem++;\r\n        if (this.nextItem >= this.items.length) {\r\n            this.items = null;\r\n        }\r\n        if (this.nextItem >= constants.maxSize) {\r\n            this.printer.forceRender();\r\n            await this.pause();\r\n        }\r\n    }\r\n\r\n}\r\n\r\nclass DummyVisualizer implements ISonarSweepVisualizer {\r\n    public async setup(items: number[]): Promise<void> {\r\n    }\r\n    public async update(): Promise<void> {\r\n    }\r\n\r\n}\r\n\r\n","import wu from \"wu\";\r\nimport { MyAsyncIterable, MyIterable, sum } from \"../../../../support/sequences\";\r\nimport { entryForFile } from \"../../../entry\";\r\nimport { seaBackground } from \"../support/submarine\";\r\nimport { buildVisualizer, ISonarSweepVisualizer } from \"./visualizer\";\r\n\r\nconst visualizerIncreasing = async (data: Iterable<number>, visualizer: ISonarSweepVisualizer): Promise<number> => {\r\n    const result = MyAsyncIterable.fromIterable(data).windows(2).filter(async (e) => {\r\n        const isIncreasing = e[1] > e[0];\r\n        await visualizer.update(isIncreasing);\r\n        return isIncreasing;\r\n    }).count();\r\n    return result;\r\n};\r\n\r\nconst simpleIncreasing = (data: Iterable<number>): number =>\r\n    new MyIterable(data).windows(2).filter((e) => e[1] > e[0]).count();\r\n\r\nexport const sonarSweep = entryForFile(\r\n    async ({ lines, resultOutputCallback, screen, pause, mediaQuery }) => {\r\n\r\n        const vs = buildVisualizer(screen, pause);\r\n        const data = lines.map((e) => parseInt(e, 10));\r\n\r\n        // visualization logic\r\n        await vs.setup(data, mediaQuery);\r\n        await vs.update(false);\r\n\r\n        // actual logic\r\n        const result = await visualizerIncreasing(data, vs);\r\n\r\n        await resultOutputCallback(result);\r\n    },\r\n    async ({ lines, resultOutputCallback }) => {\r\n        const data = lines.map((e) => parseInt(e, 10));\r\n\r\n        const result = simpleIncreasing(\r\n            new MyIterable(data)\r\n                .zip(data.slice(1))\r\n                .zip(data.slice(2))\r\n                .map((e) => sum(e[0]) + e[1])\r\n            );\r\n\r\n        await resultOutputCallback(result);\r\n    },\r\n    {\r\n        key: \"sonar-sweep\",\r\n        title: \"Sonar Sweep\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2,\r\n        suggestedDelay: 15,\r\n        canvasBackground: seaBackground\r\n    }\r\n);\r\n","import { Coordinate, floatRotateRadians } from \"../../../../support/geometry\";\r\nimport { Drawable, Pause, ScreenBuilder, ScreenPrinter } from \"../../../entry\";\r\nimport { amplificationCircuit } from \"../../2019/amplification-circuit\";\r\nimport { Submarine } from \"../support/submarine\";\r\n\r\nexport interface IDiveVisualizer {\r\n    setup(yFactor: number): Promise<void>;\r\n    update(m: {x: number, y: number, aim?: number}): Promise<void>;\r\n}\r\n\r\nexport const buildVisualizer = (screenBuilder: ScreenBuilder | undefined, pause: Pause) => {\r\n    if (screenBuilder) {\r\n        return new RealVisualizer(screenBuilder, pause);\r\n    } else {\r\n        return new DummyVisualizer();\r\n    }\r\n};\r\n\r\nclass RealVisualizer implements IDiveVisualizer {\r\n    private printer!: ScreenPrinter;\r\n    private submarine: Submarine = new Submarine();\r\n    private yFactor: number = 1;\r\n    constructor(\r\n        private readonly screenBuilder: ScreenBuilder,\r\n        private readonly pause: Pause,\r\n    ) {\r\n    }\r\n    public async setup(yFactor: number): Promise<void> {\r\n        this.printer = await this.screenBuilder.requireScreen({x: 300, y: 200});\r\n        this.printer.setManualInvalidate();\r\n\r\n        this.submarine.magnify(2);\r\n        this.submarine.giveSomeMargin();\r\n        this.submarine.print(this.printer);\r\n        this.yFactor = yFactor;\r\n    }\r\n    public async update({x, y, aim}: { x: number; y: number; aim?: number; }): Promise<void> {\r\n        if (aim !== undefined) {\r\n            this.submarine.rotate(Math.atan(-aim / this.yFactor));\r\n            this.submarine.invalidate(this.printer);\r\n        }\r\n        if (x !== 0 || y !== 0) {\r\n            this.submarine.translate({x: x / 8, y: y / (8 * this.yFactor)});\r\n            this.submarine.invalidate(this.printer);\r\n            await this.pause();\r\n        }\r\n    }\r\n\r\n}\r\n\r\nclass DummyVisualizer implements IDiveVisualizer {\r\n    public async setup(): Promise<void> {\r\n    }\r\n    public async update(): Promise<void> {\r\n    }\r\n\r\n}\r\n","import { entryForFile } from \"../../../entry\";\r\nimport { seaBackground } from \"../support/submarine\";\r\nimport { buildVisualizer } from \"./visualizer\";\r\n\r\ntype Direction = \"f\" | \"u\" | \"d\";\r\n\r\nconst parseLine = (line: string): {direction: Direction, amount: number} => {\r\n    const match = line.match(/([fud]).*? (\\d*)/);\r\n    if (!match) {\r\n        throw new Error(\"Invalid input\");\r\n    }\r\n    return ({direction: match[1] as Direction, amount: parseInt(match[2], 10)});\r\n};\r\n\r\nexport const dive = entryForFile(\r\n    async ({ lines, resultOutputCallback, screen, pause }) => {\r\n        const data = lines.map(parseLine);\r\n\r\n        const vs = buildVisualizer(screen, pause);\r\n\r\n        await vs.setup(1);\r\n\r\n        let x = 0;\r\n        let y = 0;\r\n        for (const {amount, direction} of data) {\r\n            if (direction === \"d\") {\r\n                await vs.update({x: 0, y: amount, aim: 0});\r\n                y += amount;\r\n            } else if (direction === \"u\") {\r\n                await vs.update({x: 0, y: -amount, aim: 0});\r\n                y -= amount;\r\n            } else {\r\n                await vs.update({x: amount, y: 0, aim: 0});\r\n                x += amount;\r\n            }\r\n        }\r\n        await resultOutputCallback(x * y);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback, screen, pause }) => {\r\n        const data = lines.map(parseLine);\r\n\r\n        const vs = buildVisualizer(screen, pause);\r\n\r\n        await vs.setup(1000);\r\n\r\n        let x = 0;\r\n        let y = 0;\r\n        let aim = 0;\r\n        for (const {amount, direction} of data) {\r\n            if (direction === \"d\") {\r\n                aim += amount;\r\n                await vs.update({x: 0, y: 0, aim});\r\n            } else if (direction === \"u\") {\r\n                aim -= amount;\r\n                await vs.update({x: 0, y: 0, aim});\r\n            } else {\r\n                x += amount;\r\n                y += amount * aim;\r\n                await vs.update({x: amount, y: amount * aim});\r\n            }\r\n        }\r\n        await resultOutputCallback(x * y);\r\n    },\r\n    {\r\n        key: \"dive\",\r\n        title: \"Dive!\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2,\r\n        suggestedDelay: 1,\r\n        canvasBackground: seaBackground\r\n    }\r\n);\r\n","import { opposite } from \".\";\r\nimport { OutputCallback, Pause } from \"../../../entry\";\r\n\r\nconst printer = (\r\n    outputCallback: OutputCallback,\r\n    pause: Pause,\r\n    isQuickRunning: boolean,\r\n    ...data: Array<{name: string, els: string[]}>\r\n    ) => {\r\n        return async () => {\r\n            if (isQuickRunning) {\r\n                return;\r\n            }\r\n\r\n            await outputCallback(\r\n                data.map((e) => `${e.name}: ${e.els.join(\"\")}`).join(\"\\n\"),\r\n                true\r\n            );\r\n            await pause();\r\n        };\r\n};\r\n\r\nexport const firstFactory = (\r\n    outputCallback: OutputCallback,\r\n    pause: Pause,\r\n    isQuickRunning: boolean,\r\n    data: { gamma: string[], power: string[] }\r\n) => {\r\n    const { gamma, power } = data;\r\n    // const print = async () => {\r\n    //     if (isQuickRunning) {\r\n    //         return;\r\n    //     }\r\n    //     await outputCallback(\"Gamma: \" + gamma.join(\"\") + \"\\nPower: \" + power.join(\"\"), true);\r\n    //     await pause();\r\n    // };\r\n\r\n    const print = printer(\r\n        outputCallback,\r\n        pause,\r\n        isQuickRunning,\r\n        {name: \"Gamma\", els: gamma},\r\n        {name: \"Power\", els: power}\r\n    );\r\n\r\n    let current = 0;\r\n\r\n    return (i: number) => async (c0: number) => {\r\n        current++;\r\n        const g = c0 > current / 2 ? \"0\" : \"1\";\r\n        if (gamma[i] !== g) {\r\n            gamma[i] = g;\r\n            power[i] = opposite(g);\r\n            await print();\r\n        }\r\n    };\r\n};\r\n\r\nexport const secondFactory = (\r\n    outputCallback: OutputCallback,\r\n    pause: Pause,\r\n    isQuickRunning: boolean,\r\n    {oxygen, co2}: {oxygen: string[], co2: string[] }\r\n) => {\r\n    return printer(\r\n        outputCallback,\r\n        pause,\r\n        isQuickRunning,\r\n        {name: \"Oxygen\", els: oxygen},\r\n        {name: \"CO2   \", els: co2}\r\n    );\r\n};\r\n","import { LinkedList } from \"../../../../support/data-structure\";\r\nimport { entryForFile, ResultOutputCallback } from \"../../../entry\";\r\nimport { firstFactory, secondFactory } from \"./visualizer\";\r\n\r\nconst countMostCommon = async (\r\n    bits: string[][],\r\n    index: number,\r\n    onIteration?: (currentCount: number) => Promise<void>\r\n): Promise<string | null> => {\r\n    let counter0 = 0;\r\n    for (const x of bits) {\r\n        if (x[index] === \"0\") {\r\n            counter0++;\r\n        }\r\n        if (onIteration) {\r\n            await onIteration(counter0);\r\n        }\r\n    }\r\n\r\n    if (counter0 > bits.length / 2) {\r\n        return \"0\";\r\n    } else if (counter0 < bits.length / 2) {\r\n        return \"1\";\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\nexport const opposite = (b: string): string => b === \"0\" ? \"1\" : \"0\";\r\nconst replaceArray = (destination: string[], data: string[]) => destination.splice(0, Infinity, ...data);\r\n\r\nconst parseBinary = (b: string[]) => parseInt(b.join(\"\"), 2);\r\n\r\nexport const binaryDiagnostic = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback, pause, isQuickRunning }) => {\r\n        const els = lines.filter((l) => l).map((l) => l.split(\"\"));\r\n\r\n        const gamma: string[] = [];\r\n        const power: string[] = [];\r\n\r\n        const visualizerFactory = firstFactory(outputCallback, pause, isQuickRunning, { gamma, power });\r\n\r\n        for (let i = 0; i < els[0].length; i++) {\r\n            const vs = visualizerFactory(i);\r\n            const mostCommon = await countMostCommon(els, i, vs);\r\n            if (mostCommon === null) {\r\n                throw new Error(\"Invalid count\");\r\n            }\r\n            gamma[i] = mostCommon;\r\n            power[i] = opposite(mostCommon);\r\n        }\r\n\r\n        await resultOutputCallback(parseBinary(gamma) * parseBinary(power));\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback, isQuickRunning, pause }) => {\r\n        const els = lines.filter((l) => l).map((l) => l.split(\"\"));\r\n\r\n        const oxygen: string[] = [];\r\n        const co2: string[] = [];\r\n\r\n        const iterations = [\r\n            { data: oxygen, remaining: els.slice(), mapper: (e: string) => e },\r\n            { data: co2, remaining: els.slice(), mapper: opposite },\r\n        ];\r\n\r\n        const print = secondFactory(outputCallback, pause, isQuickRunning, {oxygen, co2});\r\n        for (const iteration of iterations) {\r\n            for (let i = 0; i < els[0].length; i++) {\r\n                const mostCommon = await countMostCommon(iteration.remaining, i);\r\n                const nextBit = iteration.mapper(mostCommon || \"1\");\r\n                iteration.remaining = iteration.remaining.filter((e) => e[i] === nextBit);\r\n                if (iteration.remaining.length === 1) {\r\n                    replaceArray(iteration.data, iteration.remaining[0]);\r\n                    break;\r\n                }\r\n                iteration.data.push(nextBit);\r\n                await print();\r\n            }\r\n            await print();\r\n        }\r\n\r\n\r\n        await resultOutputCallback(parseBinary(oxygen) * parseBinary(co2));\r\n    },\r\n    {\r\n        key: \"binary-diagnostic\",\r\n        title: \"Binary Diagnostic\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2,\r\n        suggestedDelay: 100\r\n    }\r\n);\r\n","import { Board } from \".\";\r\nimport { scalarCoordinates, sumCoordinate } from \"../../../../support/geometry\";\r\nimport { Drawable, Pause, ScreenBuilder, ScreenPrinter } from \"../../../entry\";\r\n\r\nexport interface IVisualizer {\r\n    setup(boards: Board[]): Promise<void>;\r\n    update(board: Board): Promise<void>;\r\n    hasWon(board: Board): Promise<void>;\r\n    highlight(board: Board): Promise<void>;\r\n}\r\n\r\nexport const buildVisualizer = (screenBuilder: ScreenBuilder | undefined, pause: Pause) => {\r\n    if (screenBuilder) {\r\n        return new RealVisualizer(screenBuilder, pause);\r\n    } else {\r\n        return new DummyVisualizer();\r\n    }\r\n};\r\n\r\nconst constants = (() => {\r\n    const cellSize = {\r\n        x: 2.5, y: 2.5\r\n    };\r\n\r\n    const boardPadding = { ...cellSize };\r\n\r\n    const boardSize = sumCoordinate(\r\n        scalarCoordinates(\r\n            sumCoordinate(\r\n                cellSize,\r\n                boardPadding\r\n            )\r\n            , 5),\r\n        boardPadding\r\n    );\r\n\r\n    const boardMargin = scalarCoordinates(cellSize, 4);\r\n\r\n    const boardDelta = sumCoordinate(boardMargin, boardSize);\r\n    return {\r\n        cellSize,\r\n        boardSize,\r\n        boardsPerLine: 10,\r\n        boardDelta,\r\n        boardMargin,\r\n        boardPadding,\r\n        cellDelta: sumCoordinate(boardPadding, cellSize)\r\n    };\r\n})();\r\n\r\ntype LocalDrawable = Drawable & { type: \"rectangle\" };\r\n\r\ntype BoardState = {\r\n    main: LocalDrawable,\r\n    cells: LocalDrawable[]\r\n};\r\n\r\nclass RealVisualizer implements IVisualizer {\r\n    private printer!: ScreenPrinter;\r\n    private drawables: Map<Board, BoardState> = new Map<Board, BoardState>();\r\n\r\n    constructor(\r\n        private readonly screenBuilder: ScreenBuilder,\r\n        private readonly pause: Pause\r\n    ) {\r\n    }\r\n    public async update(board: Board): Promise<void> {\r\n        const drawable = this.drawables.get(board)!;\r\n        for (let row = 0; row < 5; row++) {\r\n            for (let col = 0; col < 5; col++) {\r\n                if (board[row][col].filled) {\r\n                    const d = drawable.cells[row * 5 + col];\r\n                    d.color = \"purple\";\r\n                    this.printer.invalidate(d);\r\n                }\r\n            }\r\n        }\r\n\r\n        await this.pause();\r\n    }\r\n    public async hasWon(board: Board): Promise<void> {\r\n        const mainItem = this.drawables.get(board)!.main;\r\n        mainItem.color = \"green\";\r\n        this.printer.invalidate(mainItem);\r\n        await this.pause();\r\n    }\r\n    public async highlight(board: Board): Promise<void> {\r\n        const mainItem = this.drawables.get(board)!.main;\r\n        mainItem.color = \"red\";\r\n        this.printer.invalidate(mainItem);\r\n        await this.pause();\r\n    }\r\n\r\n    public async setup(boards: Board[]): Promise<void> {\r\n        const lines = Math.ceil(boards.length / constants.boardsPerLine);\r\n\r\n        const fullSize = sumCoordinate(\r\n            constants.boardMargin,\r\n            {\r\n                x: constants.boardDelta.x * constants.boardsPerLine + constants.boardMargin.x,\r\n                y: constants.boardDelta.y * lines + constants.boardMargin.y\r\n            }\r\n        );\r\n\r\n        this.printer = await this.screenBuilder.requireScreen(fullSize);\r\n        this.printer.setManualInvalidate();\r\n\r\n        let currentLine = 0;\r\n        let currentColumn = 0;\r\n        for (const board of boards) {\r\n            if (currentColumn >= constants.boardsPerLine) {\r\n                currentLine++;\r\n                currentColumn -= constants.boardsPerLine;\r\n            }\r\n            const key = JSON.stringify({ currentLine, currentColumn });\r\n            const c = {\r\n                x: constants.boardDelta.x * currentColumn + constants.boardMargin.x,\r\n                y: constants.boardDelta.y * currentLine + constants.boardMargin.y\r\n            };\r\n            const mainBoard: LocalDrawable = {\r\n                c: {\r\n                    x: constants.boardDelta.x * currentColumn + constants.boardMargin.x,\r\n                    y: constants.boardDelta.y * currentLine + constants.boardMargin.y\r\n                },\r\n                color: \"blue\",\r\n                id: key,\r\n                size: constants.boardSize,\r\n                type: \"rectangle\"\r\n            };\r\n\r\n            this.printer.add(mainBoard);\r\n\r\n            const cells: LocalDrawable[] = [];\r\n            for (let row = 0; row < 5; row++) {\r\n                for (let col = 0; col < 5; col++) {\r\n                    const cell: LocalDrawable = {\r\n                        c: sumCoordinate(mainBoard.c, {\r\n                            x: constants.cellDelta.x * col + constants.boardPadding.x,\r\n                            y: constants.cellDelta.y * row + constants.boardPadding.y\r\n                        }),\r\n                        color: \"white\",\r\n                        id: \"cell-\" + key + \"-\" + row + \"-\" + col,\r\n                        size: constants.cellSize,\r\n                        type: \"rectangle\"\r\n                    };\r\n                    cells.push(cell);\r\n                    this.printer.add(cell);\r\n                }\r\n            }\r\n\r\n            this.drawables.set(board, {\r\n                cells,\r\n                main: mainBoard\r\n            });\r\n            currentColumn++;\r\n        }\r\n    }\r\n}\r\n\r\nclass DummyVisualizer implements IVisualizer {\r\n    public async setup(boards: Board[]): Promise<void> {\r\n    }\r\n    public async update(board: Board): Promise<void> {\r\n    }\r\n    public async hasWon(board: Board): Promise<void> {\r\n    }\r\n    public async highlight(board: Board): Promise<void> {\r\n    }\r\n\r\n}\r\n","import { groupBy } from \"../../../../support/sequences\";\r\nimport { entryForFile } from \"../../../entry\";\r\nimport { buildVisualizer } from \"./visualizer\";\r\n\r\nexport type Board = Array<Array<{ value: number, filled: boolean }>>;\r\n\r\nconst parseInput = (lines: string[]): {\r\n    extraction: number[];\r\n    boards: Board[];\r\n} => {\r\n    const extraction = lines[0]\r\n        .split(\",\")\r\n        .map((e) => e.trim())\r\n        .filter((e) => e)\r\n        .map((e) => parseInt(e, 10))\r\n        .filter((e) => !Number.isNaN(e));\r\n    const boards = groupBy(lines.slice(2), 6).map((group) => {\r\n        return group\r\n            .map((g) => g.trim())\r\n            .filter((e) => e.length > 5)\r\n            .map((e) =>\r\n                e.split(\" \")\r\n                    .map((x) => parseInt(x, 10))\r\n                    .filter((x) => !Number.isNaN(x))\r\n                    .map((x) => ({ value: x, filled: false }))\r\n            );\r\n    });\r\n    return { extraction, boards };\r\n};\r\n\r\nconst fillBoard = (item: number, board: Board) => {\r\n    for (const line of board) {\r\n        for (const cell of line) {\r\n            if (cell.value === item) {\r\n                cell.filled = true;\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nconst checkIfWon = (board: Board) => {\r\n    for (const line of board) {\r\n        if (line.every((cell) => cell.filled)) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < board[0].length; i++) {\r\n        let foundFalse = false;\r\n        for (const line of board) {\r\n            if (!line[i].filled) {\r\n                foundFalse = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!foundFalse) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nconst calculateBoardScore = (board: Board, extraction: number): number => {\r\n    const unmarked = board\r\n        .flatMap((line) => line.filter((cell) => !cell.filled).map((cell) => cell.value))\r\n        .reduce((acc, next) => acc + next, 0);\r\n\r\n    return unmarked * extraction;\r\n};\r\n\r\nexport const giantSquid = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback, pause, screen }) => {\r\n\r\n        const vs = buildVisualizer(screen, pause);\r\n\r\n        const input = parseInput(lines);\r\n\r\n        await vs.setup(input.boards);\r\n\r\n        for (const item of input.extraction) {\r\n            for (const board of input.boards) {\r\n                fillBoard(item, board);\r\n                await vs.update(board);\r\n                if (checkIfWon(board)) {\r\n                    await vs.hasWon(board);\r\n                    const score = calculateBoardScore(board, item);\r\n                    await resultOutputCallback(score);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        await resultOutputCallback(\"Failed\");\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback, pause, screen }) => {\r\n        const vs = buildVisualizer(screen, pause);\r\n        const input = parseInput(lines);\r\n\r\n        await vs.setup(input.boards);\r\n\r\n        let lastWon: { n: number, b: Board } | null = null;\r\n        for (const item of input.extraction) {\r\n            const wonBoards: Board[] = [];\r\n            for (const board of input.boards) {\r\n                fillBoard(item, board);\r\n                await vs.update(board);\r\n                if (checkIfWon(board)) {\r\n                    await vs.hasWon(board);\r\n                    const score = calculateBoardScore(board, item);\r\n                    lastWon = { n: score, b: board };\r\n                    wonBoards.push(board);\r\n                }\r\n            }\r\n            wonBoards.forEach((b) => input.boards.splice(input.boards.indexOf(b), 1));\r\n        }\r\n        if (lastWon) {\r\n            await vs.highlight(lastWon.b);\r\n        }\r\n\r\n        await resultOutputCallback(lastWon && lastWon.n);\r\n    },\r\n    {\r\n        key: \"giant-squid\",\r\n        title: \"Giant Squid\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2,\r\n        suggestedDelay: 2\r\n    }\r\n);\r\n","import { scalarCoordinates, serialization } from \"../../../../support/geometry\";\r\nimport { FixedSizeMatrix } from \"../../../../support/matrix\";\r\nimport { Drawable, MediaQuery, Pause, ScreenBuilder, ScreenPrinter } from \"../../../entry\";\r\n\r\nexport interface IHydrothermalVentureVisualizer {\r\n    show(matrix: FixedSizeMatrix<number>): Promise<void>;\r\n}\r\n\r\nexport const buildVisualizer = (screenBuilder: ScreenBuilder | undefined, pause: Pause, mediaQuery: MediaQuery) => {\r\n    if (screenBuilder) {\r\n        return new RealVisualizer(screenBuilder, pause, mediaQuery);\r\n    } else {\r\n        return new DummyVisualizer();\r\n    }\r\n};\r\n\r\nclass RealVisualizer implements IHydrothermalVentureVisualizer {\r\n    private printer!: ScreenPrinter;\r\n    private readonly zoom: number;\r\n    constructor(\r\n        private readonly screenBuilder: ScreenBuilder,\r\n        private readonly pause: Pause,\r\n        mediaQuery: MediaQuery\r\n    ) {\r\n        this.zoom = mediaQuery.isMobile() ? 0.35 : 1;\r\n    }\r\n    public async show(matrix: FixedSizeMatrix<number>): Promise<void> {\r\n        this.printer = await this.screenBuilder.requireScreen(scalarCoordinates(matrix.size, this.zoom));\r\n        this.printer.setManualRender();\r\n\r\n        let maxValue = 0;\r\n\r\n        await matrix.onEveryCell(async (c, e) => {\r\n            maxValue = Math.max(e || 0, maxValue);\r\n            await this.pause();\r\n        });\r\n\r\n        const colorCalculator = (n: number): string => {\r\n            const baseColor = \"#000000\";\r\n            const base = 128;\r\n            const alpha = base + Math.ceil((256 - base) * (n / maxValue));\r\n            return baseColor + alpha.toString(16).padStart(2, \"0\");\r\n        };\r\n\r\n        await matrix.onEveryCell(async (c, e) => {\r\n            if (e && e > 0) {\r\n                const d: Drawable = {\r\n                    id: serialization.serialize(c),\r\n                    c: scalarCoordinates(c, this.zoom),\r\n                    color: colorCalculator(e),\r\n                    type: \"rectangle\",\r\n                    size: scalarCoordinates({x: 1, y: 1}, this.zoom)\r\n                };\r\n                this.printer.add(d);\r\n                await this.pause();\r\n            }\r\n        });\r\n\r\n        this.printer.forceRender();\r\n    }\r\n}\r\n\r\nclass DummyVisualizer implements IHydrothermalVentureVisualizer {\r\n    public async show(matrix: FixedSizeMatrix<number>): Promise<void> {\r\n    }\r\n\r\n}\r\n","import { UnknownSizeField } from \"../../../../support/field\";\r\nimport { Coordinate, isSameCoordinate } from \"../../../../support/geometry\";\r\nimport { entryForFile } from \"../../../entry\";\r\nimport { buildVisualizer } from \"./visualizer\";\r\n\r\nconst parseInput = (lines: string[]): Array<{ from: Coordinate, to: Coordinate }> => {\r\n    return lines.map((line) => {\r\n        const [_, fromX, fromY, toX, toY] = line.match(/(\\d*),(\\d*).*?(\\d*),(\\d*)/)!.map((e) => parseInt(e, 10));\r\n        return {\r\n            from: { x: fromX, y: fromY },\r\n            to: { x: toX, y: toY }\r\n        };\r\n    });\r\n};\r\n\r\nexport const hydrothermalVenture = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback, screen, pause, mediaQuery }) => {\r\n\r\n        const vs = buildVisualizer(screen, pause, mediaQuery);\r\n        const field = new UnknownSizeField<number>();\r\n        const input = parseInput(lines);\r\n\r\n        for (const c of input) {\r\n            if (c.from.x !== c.to.x && c.from.y !== c.to.y) {\r\n                continue;\r\n            }\r\n            const current = c.from;\r\n            while (!isSameCoordinate(current, c.to)) {\r\n                field.set(current, (field.get(current) || 0) + 1);\r\n                current.x += Math.sign(c.to.x - c.from.x);\r\n                current.y += Math.sign(c.to.y - c.from.y);\r\n            }\r\n            field.set(current, (field.get(current) || 0) + 1);\r\n        }\r\n        let count = 0;\r\n        const matrix = field.toMatrix();\r\n        await matrix.onEveryCell(async (c, e) => {\r\n            if (e && e > 1) {\r\n                count++;\r\n            }\r\n        });\r\n        await vs.show(matrix);\r\n        await resultOutputCallback(count);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback, screen, pause, mediaQuery }) => {\r\n        const vs = buildVisualizer(screen, pause, mediaQuery);\r\n        const field = new UnknownSizeField<number>();\r\n        const input = parseInput(lines);\r\n        for (const c of input) {\r\n            const current = c.from;\r\n            while (!isSameCoordinate(current, c.to)) {\r\n                field.set(current, (field.get(current) || 0) + 1);\r\n                current.x += Math.sign(c.to.x - c.from.x);\r\n                current.y += Math.sign(c.to.y - c.from.y);\r\n            }\r\n            field.set(current, (field.get(current) || 0) + 1);\r\n        }\r\n        let count = 0;\r\n        const matrix = field.toMatrix();\r\n        await matrix.onEveryCell(async (c, e) => {\r\n            if (e && e > 1) {\r\n                count++;\r\n            }\r\n        });\r\n        await vs.show(matrix);\r\n        await resultOutputCallback(count);\r\n    },\r\n    {\r\n        key: \"hydrothermal-venture\",\r\n        title: \"Hydrothermal Venture\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);\r\n","import { State } from \".\";\r\nimport { Drawable, Pause, ScreenBuilder, ScreenPrinter } from \"../../../entry\";\r\n\r\nexport interface IVisualizer {\r\n    setup(logarithmic: boolean): Promise<void>;\r\n    update(currentDay: number, state: State): Promise<void>;\r\n}\r\n\r\nexport const buildVisualizer = (screenBuilder: ScreenBuilder | undefined, pause: Pause) => {\r\n    if (screenBuilder) {\r\n        return new RealVisualizer(screenBuilder, pause);\r\n    } else {\r\n        return new DummyVisualizer();\r\n    }\r\n};\r\n\r\nconst c = (() => {\r\n    return {\r\n        internalMargin: 2,\r\n        margin: 4,\r\n        size: 5,\r\n        heightPerCell: {\r\n            current: 10,\r\n            delayed: 10\r\n        },\r\n        logFactor: 0.008 / 5,\r\n        startY: 20\r\n    };\r\n})();\r\n\r\ntype LocalDrawable = Drawable & {type: \"rectangle\"};\r\n\r\nclass RealVisualizer implements IVisualizer {\r\n    private printer!: ScreenPrinter;\r\n    private drawableState: Array<{current: LocalDrawable, delayed: LocalDrawable, arrowPosition: number}> = [];\r\n    private arrow: {draw: Drawable & {type: \"points\"}, update: (x: number) => void};\r\n    private logarithmic: boolean = false;\r\n    constructor(\r\n        private readonly screenBuilder: ScreenBuilder,\r\n        private readonly pause: Pause\r\n    ) {\r\n        let lastDelta = 0;\r\n        const basePoints = [\r\n            {x: 3, y: 10},\r\n            {x: 3, y: 0},\r\n            {x: 5, y: 0},\r\n            {x: 5, y: 10},\r\n            {x: 0, y: 7},\r\n            {x: 8, y: 7},\r\n            {x: 4, y: 10}\r\n        ];\r\n        this.arrow = {\r\n            draw: {\r\n                color: \"white\",\r\n                id: \"arrow\",\r\n                type: \"points\",\r\n                points: basePoints.map((p) => ({...p}))\r\n            },\r\n            update: (x: number) => {\r\n                this.arrow.draw.points.forEach((p) => p.x = p.x - lastDelta + x);\r\n                lastDelta = x;\r\n            }\r\n        };\r\n    }\r\n    public async setup(logarithmic: boolean): Promise<void> {\r\n        let currentX = 0;\r\n        this.logarithmic = logarithmic;\r\n        for (let i = 0; i < 7; i++) {\r\n            const current: LocalDrawable = {\r\n                c: {\r\n                    x: currentX,\r\n                    y: c.startY\r\n                },\r\n                color: \"red\",\r\n                id: `${i}-current`,\r\n                size: {\r\n                    x: c.size,\r\n                    y: 0\r\n                },\r\n                type: \"rectangle\"\r\n            };\r\n            currentX += c.size + c.internalMargin;\r\n            const arrowPosition = currentX;\r\n            const delayed: LocalDrawable = {\r\n                c: {\r\n                    x: currentX,\r\n                    y: c.startY\r\n                },\r\n                color: \"yellow\",\r\n                id: `${i}-delayed`,\r\n                size: {\r\n                    x: c.size,\r\n                    y: 0\r\n                },\r\n                type: \"rectangle\"\r\n            };\r\n            currentX += c.size + c.margin;\r\n            this.drawableState.push({current, delayed, arrowPosition});\r\n        }\r\n\r\n        this.printer = await this.screenBuilder.requireScreen({\r\n            x: currentX,\r\n            y: logarithmic ? 400 : 1000\r\n        });\r\n        this.drawableState.forEach((e) => {\r\n            this.printer.add(e.current);\r\n            this.printer.add(e.delayed);\r\n        });\r\n        this.printer.add(this.arrow.draw);\r\n    }\r\n\r\n    public async update(currentDay: number, state: State): Promise<void> {\r\n        for (let i = 0; i < state.length; i++) {\r\n            if (this.logarithmic) {\r\n                this.drawableState[i].current.size.y = Math.log(state[i].current) * c.heightPerCell.current;\r\n                this.drawableState[i].delayed.size.y = Math.log(state[i].delayed) * c.heightPerCell.delayed;\r\n            } else {\r\n                this.drawableState[i].current.size.y = state[i].current * c.heightPerCell.current * c.logFactor;\r\n                this.drawableState[i].delayed.size.y = state[i].delayed * c.heightPerCell.delayed * c.logFactor;\r\n            }\r\n        }\r\n        this.arrow.update(this.drawableState[currentDay % 7].arrowPosition);\r\n        await this.pause();\r\n    }\r\n}\r\n\r\nclass DummyVisualizer implements IVisualizer {\r\n    public async setup(): Promise<void> {\r\n    }\r\n    public async update(currentDay: number, state: State): Promise<void> {\r\n    }\r\n\r\n}\r\n","import { entryForFile } from \"../../../entry\";\r\nimport { buildVisualizer } from \"./visualizer\";\r\n\r\nexport type State = Array<{current: number; delayed: number}>;\r\n\r\nexport const lanternfish = entryForFile(\r\n    async ({ lines, resultOutputCallback, screen, pause }) => {\r\n        const ns = lines[0].split(\",\").map((l) => parseInt(l, 10));\r\n\r\n        const vs = buildVisualizer(screen, pause);\r\n\r\n        await vs.setup(false);\r\n\r\n        let day = 0;\r\n        const increases: Array<{current: number; delayed: number}> = [];\r\n        for (let i = 0; i < 7; i++) {\r\n            increases.push({current: 0, delayed: 0});\r\n        }\r\n        for (const n of ns) {\r\n            increases[n].current++;\r\n        }\r\n        await vs.update(0, increases);\r\n        while (day < 80) {\r\n            const index = day % 7;\r\n            increases[(day + 9) % 7].delayed += increases[index].current;\r\n            increases[index].current += increases[index].delayed;\r\n            increases[index].delayed = 0;\r\n            day++;\r\n            await vs.update(day, increases);\r\n        }\r\n        await resultOutputCallback(increases.reduce((acc, next) => acc + next.delayed + next.current, 0));\r\n    },\r\n    async ({ lines, resultOutputCallback, screen, pause }) => {\r\n        const ns = lines[0].split(\",\").map((l) => parseInt(l, 10));\r\n\r\n        const vs = buildVisualizer(screen, pause);\r\n\r\n        await vs.setup(true);\r\n\r\n        let day = 0;\r\n        const increases: Array<{current: number; delayed: number}> = [];\r\n        for (let i = 0; i < 7; i++) {\r\n            increases.push({current: 0, delayed: 0});\r\n        }\r\n        for (const n of ns) {\r\n            increases[n].current++;\r\n        }\r\n        await vs.update(0, increases);\r\n        while (day < 256) {\r\n            const index = day % 7;\r\n            increases[(day + 9) % 7].delayed += increases[index].current;\r\n            increases[index].current += increases[index].delayed;\r\n            increases[index].delayed = 0;\r\n            day++;\r\n            await vs.update(day, increases);\r\n        }\r\n        await resultOutputCallback(increases.reduce((acc, next) => acc + next.delayed + next.current, 0));\r\n    },\r\n    {\r\n        key: \"lanternfish\",\r\n        title: \"Lanternfish\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2,\r\n        suggestedDelay: 25\r\n    }\r\n);\r\n","import { median } from \"../../../../support/sequences\";\r\nimport { entryForFile } from \"../../../entry\";\r\n\r\nexport const theTreacheryOfWhales = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const ns = lines[0].split(\",\").map((l) => parseInt(l, 10));\r\n\r\n        const target = median(ns);\r\n\r\n        const costs = ns.map((x) => Math.abs(target - x));\r\n\r\n        const sum = costs.reduce((acc, next) => acc + next, 0);\r\n\r\n        await resultOutputCallback(sum);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const ns = lines[0].split(\",\").map((l) => parseInt(l, 10));\r\n\r\n        const max = ns.reduce((acc, next) => Math.max(acc, next));\r\n\r\n        let bestCost = null as number | null;\r\n        for (let i = 1; i <= max; i++)  {\r\n            let cost = 0;\r\n            for (const item of ns) {\r\n                const delta = Math.abs(item - i);\r\n                const currentCost = delta * (delta + 1) / 2;\r\n                cost += currentCost;\r\n            }\r\n            if (!bestCost || cost < bestCost) {\r\n                bestCost = cost;\r\n            }\r\n        }\r\n\r\n        await resultOutputCallback(bestCost);\r\n    },\r\n    {\r\n        key: \"the-treachery-of-whales\",\r\n        title: \"The Treachery of Whales\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);\r\n","import { Coordinate } from \"../../../../support/geometry\";\r\nimport { Drawable, Pause, ScreenBuilder, ScreenPrinter } from \"../../../entry\";\r\nimport { Segment } from \"./bruteVariant\";\r\n\r\nexport type LineState = {\r\n    input: Segment[][];\r\n    output: Segment[][];\r\n};\r\n\r\nexport interface ISegmentSearchVisualizer {\r\n    setup(): Promise<void>;\r\n    addLine(): Promise<void>;\r\n    setCurrentLineState(state: LineState): Promise<void>;\r\n    finishLine(): Promise<void>;\r\n}\r\n\r\nexport const buildVisualizer = (screenBuilder: ScreenBuilder | undefined, pause: Pause) => {\r\n    if (screenBuilder) {\r\n        return new RealVisualizer(screenBuilder, pause);\r\n    } else {\r\n        return new DummyVisualizer();\r\n    }\r\n};\r\n\r\nconst c = (() => {\r\n    const lineThickness = 2;\r\n    const lineLength = 10;\r\n    const digitPadding = 2;\r\n\r\n    const digitInterspace = 2;\r\n\r\n    const separatorMargin = 5;\r\n\r\n    const digitWidth = digitPadding * 3 + lineLength;\r\n\r\n    const digitHeight = lineThickness * 3 + lineLength * 2;\r\n    const lineHeight = digitHeight + separatorMargin;\r\n\r\n    return {\r\n        lineThickness,\r\n        lineLength,\r\n        digitPadding,\r\n        digitInterspace,\r\n        separatorMargin,\r\n        digitWidth,\r\n        lineHeight,\r\n        digitHeight,\r\n        turnedOnColor: \"white\",\r\n        turnedOffColor: \"slategrey\",\r\n        winColor: \"lime\",\r\n        maxLines: 10\r\n    };\r\n})();\r\n\r\ntype DigitDrawable = { [key: string]: Drawable };\r\n\r\nclass RealVisualizer implements ISegmentSearchVisualizer {\r\n    private printer!: ScreenPrinter;\r\n\r\n    private currentLine?: {\r\n        input: DigitDrawable[];\r\n        output: DigitDrawable[];\r\n    };\r\n\r\n    private lines: {\r\n        [key: number]: Drawable[]\r\n    } = {};\r\n\r\n    private nextLine: number = 0;\r\n\r\n    private readonly pause: Pause;\r\n\r\n    constructor(\r\n        private readonly screenBuilder: ScreenBuilder,\r\n        pause: Pause\r\n    ) {\r\n        let counter = 0;\r\n        let lastPrint = 0;\r\n        this.pause = async (n: number = 1) => {\r\n            counter += n;\r\n            if (counter - lastPrint > 100) {\r\n                await pause();\r\n                lastPrint = counter;\r\n            }\r\n        };\r\n    }\r\n    public async finishLine(): Promise<void> {\r\n        this.nextLine++;\r\n        if (this.currentLine) {\r\n            for (const d of this.currentLine.input) {\r\n                for (const key of Object.keys(d)) {\r\n                    if (d[key].color === c.turnedOnColor) {\r\n                        d[key].color = c.winColor;\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (const d of this.currentLine.output) {\r\n                for (const key of Object.keys(d)) {\r\n                    if (d[key].color === c.turnedOnColor) {\r\n                        d[key].color = c.winColor;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.printer.forceRender();\r\n    }\r\n    public async setup(): Promise<void> {\r\n        this.printer = await this.screenBuilder.requireScreen({\r\n            x: c.digitWidth * 14 + c.separatorMargin * 4 + c.lineThickness,\r\n            y: c.maxLines * c.lineHeight + c.separatorMargin\r\n        });\r\n    }\r\n    public async addLine(): Promise<void> {\r\n\r\n        const index = this.nextLine % c.maxLines;\r\n        const toClearIndexes = [index + 1];\r\n        if (index === 0) {\r\n            toClearIndexes.push(0);\r\n        }\r\n        for (const toClear of toClearIndexes) {\r\n            if (this.lines[toClear]) {\r\n                for (const item of this.lines[toClear]) {\r\n                    this.printer.remove(item.id);\r\n                }\r\n                delete this.lines[toClear];\r\n            }\r\n        }\r\n        const buildDigit = (digitStart: Coordinate): { [key: string]: Drawable } => {\r\n            return {\r\n                a: {\r\n                    type: \"rectangle\",\r\n                    color: \"c.turnedOffColor\",\r\n                    id: `${index}-${digitStart.x}-a`,\r\n                    size: { x: c.lineLength, y: c.lineThickness },\r\n                    c: { x: digitStart.x + c.digitPadding, y: digitStart.y }\r\n                },\r\n                b: {\r\n                    type: \"rectangle\",\r\n                    color: \"c.turnedOffColor\",\r\n                    id: `${index}-${digitStart.x}-b`,\r\n                    size: { y: c.lineLength, x: c.lineThickness },\r\n                    c: { x: digitStart.x, y: digitStart.y + c.digitPadding }\r\n                },\r\n                c: {\r\n                    type: \"rectangle\",\r\n                    color: \"c.turnedOffColor\",\r\n                    id: `${index}-${digitStart.x}-c`,\r\n                    size: { y: c.lineLength, x: c.lineThickness },\r\n                    c: { x: digitStart.x + c.digitPadding + c.lineLength, y: digitStart.y + c.digitPadding }\r\n                },\r\n                d: {\r\n                    type: \"rectangle\",\r\n                    color: \"c.turnedOffColor\",\r\n                    id: `${index}-${digitStart.x}-d`,\r\n                    size: { x: c.lineLength, y: c.lineThickness },\r\n                    c: { x: digitStart.x + c.digitPadding, y: digitStart.y + c.digitPadding + c.lineLength }\r\n                },\r\n                e: {\r\n                    type: \"rectangle\",\r\n                    color: \"c.turnedOffColor\",\r\n                    id: `${index}-${digitStart.x}-e`,\r\n                    size: { y: c.lineLength, x: c.lineThickness },\r\n                    c: { x: digitStart.x, y: digitStart.y + c.digitPadding * 2 + c.lineLength }\r\n                },\r\n                f: {\r\n                    type: \"rectangle\",\r\n                    color: \"c.turnedOffColor\",\r\n                    id: `${index}-${digitStart.x}-f`,\r\n                    size: { y: c.lineLength, x: c.lineThickness },\r\n                    c: {\r\n                        x: digitStart.x + c.digitPadding + c.lineLength,\r\n                        y: digitStart.y + c.digitPadding * 2 + c.lineLength\r\n                    }\r\n                },\r\n                g: {\r\n                    type: \"rectangle\",\r\n                    color: \"c.turnedOffColor\",\r\n                    id: `${index}-${digitStart.x}-g`,\r\n                    size: { x: c.lineLength, y: c.lineThickness },\r\n                    c: { x: digitStart.x + c.digitPadding, y: digitStart.y + c.digitPadding * 2 + c.lineLength * 2 }\r\n                }\r\n            };\r\n        };\r\n\r\n        const input: DigitDrawable[] = [];\r\n\r\n        const allDrawables: Drawable[] = [];\r\n\r\n        const start = { x: c.separatorMargin, y: index * c.lineHeight + c.separatorMargin };\r\n\r\n        for (let i = 0; i < 10; i++) {\r\n            const digit = buildDigit(start);\r\n            Object.values(digit).forEach((d) => allDrawables.push(d));\r\n            for (const k of Object.keys(digit)) {\r\n                this.printer.add(digit[k]);\r\n            }\r\n            input.push(digit);\r\n            start.x += c.digitWidth;\r\n        }\r\n\r\n        const separator: Drawable = {\r\n            color: c.turnedOnColor,\r\n            c: { x: start.x + c.separatorMargin, y: start.y + c.digitPadding },\r\n            type: \"rectangle\",\r\n            id: `${index}-separator`,\r\n            size: { x: c.lineThickness, y: c.digitHeight - c.digitPadding * 2 }\r\n        };\r\n\r\n        allDrawables.push(separator);\r\n\r\n        start.x += c.separatorMargin * 2 + c.lineThickness;\r\n\r\n        this.printer.add(separator);\r\n\r\n        const output: DigitDrawable[] = [];\r\n\r\n        for (let i = 0; i < 4; i++) {\r\n            const digit = buildDigit(start);\r\n            Object.values(digit).forEach((d) => allDrawables.push(d));\r\n            for (const k of Object.keys(digit)) {\r\n                this.printer.add(digit[k]);\r\n            }\r\n            output.push(digit);\r\n            start.x += c.digitWidth;\r\n        }\r\n\r\n        this.currentLine = {\r\n            input,\r\n            output\r\n        };\r\n\r\n        this.lines[index] = allDrawables;\r\n\r\n        await this.pause();\r\n\r\n    }\r\n    public async setCurrentLineState(state: LineState): Promise<void> {\r\n        if (this.currentLine) {\r\n            for (let i = 0; i < state.input.length; i++) {\r\n                const currentDigit = this.currentLine.input[i];\r\n                for (const key of Object.keys(currentDigit)) {\r\n                    if (state.input[i].includes(key as Segment)) {\r\n                        currentDigit[key].color = c.turnedOnColor;\r\n                    } else {\r\n                        currentDigit[key].color = c.turnedOffColor;\r\n                    }\r\n                }\r\n            }\r\n            for (let i = 0; i < state.output.length; i++) {\r\n                const currentDigit = this.currentLine.output[i];\r\n                for (const key of Object.keys(currentDigit)) {\r\n                    if (state.output[i].includes(key as Segment)) {\r\n                        currentDigit[key].color = c.turnedOnColor;\r\n                    } else {\r\n                        currentDigit[key].color = c.turnedOffColor;\r\n                    }\r\n                }\r\n            }\r\n\r\n            await this.pause();\r\n        }\r\n    }\r\n}\r\n\r\nclass DummyVisualizer implements ISegmentSearchVisualizer {\r\n    public async setup(): Promise<void> {\r\n    }\r\n    public async addLine(): Promise<void> {\r\n    }\r\n    public async setCurrentLineState(state: LineState): Promise<void> {\r\n    }\r\n    public async finishLine(): Promise<void> {\r\n    }\r\n\r\n}\r\n","import { MyIterable, permutationGenerator } from \"../../../../support/sequences\";\r\nimport { entryForFile } from \"../../../entry\";\r\nimport { buildVisualizer } from \"./bruteVisualizer\";\r\n\r\nexport type Segment = \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" | \"g\";\r\n\r\ntype Mapper<T> = {[key: string]: T};\r\n\r\nexport const brute = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        let result = 0;\r\n        for (const x of lines) {\r\n            const right = x.split(\" | \")[1];\r\n            const tokens = right.split(\" \");\r\n            const interesting = tokens.filter((t) => [2, 4, 3, 7].includes(t.length));\r\n            result += interesting.length;\r\n        }\r\n        await resultOutputCallback(result);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback, screen, pause }) => {\r\n        const {segmentNumMapper, targetSerialization}  = buildSetupData();\r\n\r\n        const allSegments: Segment[] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"];\r\n\r\n        const vs = buildVisualizer(screen, pause);\r\n\r\n        await vs.setup();\r\n\r\n        let result = 0;\r\n\r\n        for (const line of lines) {\r\n            await vs.addLine();\r\n            const [left, right] = line.split(\" | \");\r\n            const input = left.split(\" \").map((x) => x.split(\"\") as Segment[]);\r\n            const output = right.split(\" \").map((d) => d.split(\"\") as Segment[]);\r\n\r\n            const candidates = permutationGenerator([...allSegments]);\r\n\r\n            let hasFound = false;\r\n\r\n            for (const candidate of candidates) {\r\n                const candidateMapper = new MyIterable(allSegments)\r\n                    .zip(candidate)\r\n                    .reduce({} as {[key: string]: string}, (acc, next) => {\r\n                        acc[next[1]] = next[0];\r\n                        return acc;\r\n                    });\r\n\r\n                const candidateDigits = input.map(\r\n                    (digit) => digit.map(\r\n                        (segment) => candidateMapper[segment] as Segment\r\n                    ).sort()\r\n                );\r\n                const candidateOutput = output.map(\r\n                    (digit) => digit.map(\r\n                        (segment) => candidateMapper[segment] as Segment\r\n                    )\r\n                );\r\n                await vs.setCurrentLineState({input: candidateDigits, output: candidateOutput});\r\n                const candidateSerialization = serializeDigits(candidateDigits);\r\n                if (candidateSerialization === targetSerialization) {\r\n                    await vs.finishLine();\r\n                    const number = mapOutputToNumber(output, segmentNumMapper, candidateMapper);\r\n                    result += number;\r\n                    hasFound = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            await pause();\r\n\r\n            if (!hasFound) {\r\n                throw new Error(\"Brute force failed\");\r\n            }\r\n        }\r\n        await resultOutputCallback(result);\r\n    },\r\n    {\r\n        key: \"Brute\",\r\n        title: \"Seven Segment Search\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2,\r\n        suggestedDelay: 1\r\n    }\r\n);\r\n\r\nconst mapOutputToNumber = (\r\n    output: Segment[][],\r\n    segmentNumMapper: Mapper<number>,\r\n    candidateMapper: Mapper<string>\r\n) => {\r\n    const rawNumber = output.map(\r\n        (out) => segmentNumMapper[out\r\n            .map((e) => candidateMapper[e])\r\n            .sort()\r\n            .join(\"\")\r\n        ].toString()\r\n    ).join(\"\");\r\n\r\n    const number = parseInt(rawNumber, 10);\r\n    return number;\r\n};\r\n\r\nconst serializeDigits = (digits: Segment[][]): string =>\r\n    digits.map((segment) => segment.sort().join(\"\")).sort().join(\"|\");\r\n\r\nconst buildSetupData = (): {\r\n    segmentNumMapper: {[key: string]: number};\r\n    targetSerialization: string;\r\n} => {\r\n    const numSegments: { [key: number]: Segment[]; } = {\r\n        0: [\"a\", \"b\", \"c\", \"e\", \"f\", \"g\"],\r\n        1: [\"c\", \"f\"],\r\n        2: [\"a\", \"c\", \"d\", \"e\", \"g\"],\r\n        3: [\"a\", \"c\", \"d\", \"f\", \"g\"],\r\n        4: [\"b\", \"c\", \"d\", \"f\"],\r\n        5: [\"a\", \"b\", \"d\", \"f\", \"g\"],\r\n        6: [\"a\", \"b\", \"d\", \"e\", \"f\", \"g\"],\r\n        7: [\"a\", \"c\", \"f\"],\r\n        8: [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"],\r\n        9: [\"a\", \"b\", \"c\", \"d\", \"f\", \"g\"],\r\n    };\r\n    const segmentsNum: { [key: string]: number; } = {};\r\n\r\n    for (const key of Object.keys(numSegments)) {\r\n        const n = parseInt(key, 10);\r\n        segmentsNum[numSegments[n].sort().join(\"\")] = n;\r\n    }\r\n    return {\r\n        segmentNumMapper: segmentsNum,\r\n        targetSerialization: Object.keys(segmentsNum).sort().join(\"|\")\r\n    };\r\n};\r\n","import { entryForFile } from \"../../../entry\";\r\nimport { brute } from \"./bruteVariant\";\r\n\r\ntype Segment = \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" | \"g\";\r\n\r\nexport const sevenSegmentSearch = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        let result = 0;\r\n        for (const x of lines) {\r\n            const right = x.split(\" | \")[1];\r\n            const tokens = right.split(\" \");\r\n            const interesting = tokens.filter((t) => [2, 4, 3, 7].includes(t.length));\r\n            result += interesting.length;\r\n        }\r\n        await resultOutputCallback(result);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n\r\n        const segmentNumberMapper: { [key: string]: number; } = buildSegmentNumberMapper();\r\n\r\n        let result = 0;\r\n        for (const line of lines) {\r\n            const [left, right] = line.split(\" | \");\r\n            const input = left.split(\" \").map((x) => x.split(\"\") as Segment[]);\r\n            const output = right.split(\" \");\r\n\r\n            const mapper: { [key: string]: Segment; } = buildMapper(input);\r\n\r\n            const rawNumber = output.map((out) => segmentNumberMapper[\r\n                out.split(\"\").map((e) => mapper[e]).sort().join(\"\")\r\n            ].toString()).join(\"\");\r\n\r\n            const number = parseInt(rawNumber, 10);\r\n            result += number;\r\n\r\n        }\r\n        await resultOutputCallback(result);\r\n    },\r\n    {\r\n        key: \"seven-segment-search\",\r\n        title: \"Seven Segment Search\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2,\r\n        variants: [brute]\r\n    }\r\n);\r\n\r\nfunction buildMapper(input: Segment[][]) {\r\n    const frequencyCounter = buildFrequencyCounter(input);\r\n\r\n    const mapper: { [key: string]: Segment; } = {};\r\n\r\n    const aOrC: Segment[] = [];\r\n    const gOrD: Segment[] = [];\r\n\r\n    for (const key of Object.keys(frequencyCounter)) {\r\n        if (frequencyCounter[key] === 6) {\r\n            mapper[key] = \"b\";\r\n        } else if (frequencyCounter[key] === 4) {\r\n            mapper[key] = \"e\";\r\n        } else if (frequencyCounter[key] === 9) {\r\n            mapper[key] = \"f\";\r\n        } else if (frequencyCounter[key] === 7) {\r\n            gOrD.push(key as Segment);\r\n        } else if (frequencyCounter[key] === 8) {\r\n            aOrC.push(key as Segment);\r\n        }\r\n    }\r\n\r\n    const rule4 = input.filter((i) => i.length === 4)[0];\r\n\r\n    const [c] = aOrC.filter((x) => rule4.includes(x));\r\n    mapper[c] = \"c\";\r\n    mapper[aOrC.filter((x) => x !== c)[0]] = \"a\";\r\n    const [d] = gOrD.filter((x) => rule4.includes(x));\r\n    mapper[d] = \"d\";\r\n    mapper[gOrD.filter((x) => x !== d)[0]] = \"g\";\r\n    return mapper;\r\n}\r\n\r\nfunction buildSegmentNumberMapper() {\r\n    const numSegments: { [key: number]: Segment[]; } = {\r\n        0: [\"a\", \"b\", \"c\", \"e\", \"f\", \"g\"],\r\n        1: [\"c\", \"f\"],\r\n        2: [\"a\", \"c\", \"d\", \"e\", \"g\"],\r\n        3: [\"a\", \"c\", \"d\", \"f\", \"g\"],\r\n        4: [\"b\", \"c\", \"d\", \"f\"],\r\n        5: [\"a\", \"b\", \"d\", \"f\", \"g\"],\r\n        6: [\"a\", \"b\", \"d\", \"e\", \"f\", \"g\"],\r\n        7: [\"a\", \"c\", \"f\"],\r\n        8: [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"],\r\n        9: [\"a\", \"b\", \"c\", \"d\", \"f\", \"g\"],\r\n    };\r\n    const segmentsNum: { [key: string]: number; } = {};\r\n\r\n    for (const key of Object.keys(numSegments)) {\r\n        const n = parseInt(key, 10);\r\n        segmentsNum[numSegments[n].sort().join(\"\")] = n;\r\n    }\r\n    return segmentsNum;\r\n}\r\n\r\nfunction buildFrequencyCounter(input: Segment[][]) {\r\n    const frequencyCounter: { [key: string]: number; } = {};\r\n\r\n    for (const v of input) {\r\n        for (const x of v) {\r\n            frequencyCounter[x] = (frequencyCounter[x] || 0) + 1;\r\n        }\r\n    }\r\n    return frequencyCounter;\r\n}\r\n","import { Coordinate, scalarCoordinates, serialization } from \"../../../../support/geometry\";\r\nimport { FixedSizeMatrix } from \"../../../../support/matrix\";\r\nimport { Drawable, MediaQuery, Pause, ScreenBuilder, ScreenPrinter } from \"../../../entry\";\r\n\r\nexport interface ISmokeBasinVisualizer {\r\n    setup(data: FixedSizeMatrix<number>): Promise<void>;\r\n}\r\n\r\nexport const buildVisualizer = (screenBuilder: ScreenBuilder | undefined, pause: Pause, mediaQuery: MediaQuery) => {\r\n    if (screenBuilder) {\r\n        return new RealVisualizer(screenBuilder, pause, mediaQuery);\r\n    } else {\r\n        return new DummyVisualizer();\r\n    }\r\n};\r\n\r\nconst co = (() => {\r\n    return {\r\n        fullZoom: 5,\r\n        smallZoom: 3\r\n    };\r\n})();\r\n\r\nclass RealVisualizer implements ISmokeBasinVisualizer {\r\n    private printer!: ScreenPrinter;\r\n    private readonly zoom: number;\r\n    constructor(\r\n        private readonly screenBuilder: ScreenBuilder,\r\n        private readonly pause: Pause,\r\n        mediaQuery: MediaQuery\r\n    ) {\r\n        this.zoom = mediaQuery.isMobile() ? co.smallZoom : co.fullZoom;\r\n    }\r\n    public async setup(data: FixedSizeMatrix<number>): Promise<void> {\r\n        this.printer = await this.screenBuilder.requireScreen(this.scale(data.size));\r\n        const drawables: Array<Drawable & {type: \"rectangle\"}> = [];\r\n        const baseColor = \"#722424\";\r\n        const colorCalculator = (v: number) => {\r\n            if (v === 9) {\r\n                return \"black\";\r\n            }\r\n            const ratio = 1 - v / 9;\r\n            const alpha = 128 + Math.floor(128 * ratio);\r\n            return baseColor + alpha.toString(16).padStart(2, \"0\");\r\n        };\r\n        data.onEveryCellSync((c, e) => {\r\n            if (e === undefined) {\r\n                return;\r\n            }\r\n            drawables.push({\r\n                color: colorCalculator(e),\r\n                c: this.scale(c),\r\n                id: serialization.serialize(c),\r\n                type: \"rectangle\",\r\n                size: {x: this.zoom, y: this.zoom}\r\n            });\r\n        });\r\n\r\n        drawables.forEach((d) => this.printer.add(d));\r\n\r\n        this.printer.forceRender();\r\n    }\r\n\r\n    private scale(c: Coordinate): Coordinate {\r\n     return scalarCoordinates(c, this.zoom);\r\n    }\r\n}\r\n\r\nclass DummyVisualizer implements ISmokeBasinVisualizer {\r\n    public async setup(data: FixedSizeMatrix<number>): Promise<void> {\r\n    }\r\n\r\n}\r\n","import { Queue } from \"../../../../support/data-structure\";\r\nimport { Coordinate, diffCoordinate, getBoundaries, getSurrounding, isInBounds, serialization } from \"../../../../support/geometry\";\r\nimport { FixedSizeMatrix } from \"../../../../support/matrix\";\r\nimport { entryForFile } from \"../../../entry\";\r\nimport { buildVisualizer } from \"./visualizer\";\r\n\r\nconst getLowPoints = (matrix: FixedSizeMatrix<number>): Array<{v: number, c: Coordinate}> => {\r\n        const lowPoints: Array<{v: number, c: Coordinate}> = [];\r\n\r\n        const bounds = getBoundaries([{x: 0, y: 0}, diffCoordinate(matrix.size, {x: -1, y: -1})]);\r\n\r\n        matrix.onEveryCellSync((c, e) => {\r\n            if (e === undefined) {\r\n                return;\r\n            }\r\n            const surrounding = getSurrounding(c);\r\n            let hasFoundAsLow = false;\r\n            for (const s of surrounding) {\r\n                if (isInBounds(s, bounds)) {\r\n                    const v = matrix.get(s);\r\n                    if (v !== undefined && v <= e) {\r\n                        hasFoundAsLow = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (!hasFoundAsLow) {\r\n                lowPoints.push({v: e, c});\r\n            }\r\n        });\r\n\r\n        return lowPoints;\r\n};\r\n\r\nexport const smokeBasin = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback, screen, pause, mediaQuery}) => {\r\n        const vs = buildVisualizer(screen, pause, mediaQuery);\r\n\r\n        const matrix = parseInput(lines);\r\n        await vs.setup(matrix);\r\n\r\n        const lowPoints = getLowPoints(matrix);\r\n\r\n        await resultOutputCallback(lowPoints.reduce((acc, next) => acc + next.v + 1, 0));\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const matrix = parseInput(lines);\r\n\r\n        const lowPoints = getLowPoints(matrix);\r\n\r\n        const basinCounts: number[] = [];\r\n\r\n        for (const {c: lowPoint} of lowPoints) {\r\n            let basinSize = 1;\r\n            const visited = new Set<string>();\r\n            const queue = new Queue<Coordinate>();\r\n            queue.add(lowPoint);\r\n            visited.add(serialization.serialize(lowPoint));\r\n\r\n            while (!queue.isEmpty) {\r\n                const current = queue.get()!;\r\n                const value = matrix.get(current)!;\r\n                const surrounding = getSurrounding(current);\r\n                for (const s of surrounding) {\r\n                    const sValue = matrix.get(s);\r\n                    if (sValue !== undefined) {\r\n                        if (sValue > value && sValue < 9) {\r\n                            const serialized = serialization.serialize(s);\r\n                            if (!visited.has(serialized)) {\r\n                                visited.add(serialized);\r\n                                basinSize++;\r\n                                queue.add(s);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            basinCounts.push(basinSize);\r\n        }\r\n\r\n        const firstThree = basinCounts.sort((a, b) => b - a).slice(0, 3);\r\n\r\n        await resultOutputCallback(firstThree.reduce((acc, next) => acc * next, 1));\r\n\r\n    },\r\n    {\r\n        key: \"smoke-basin\",\r\n        title: \"Smoke Basin\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);\r\nconst  parseInput = (lines: string[]) => {\r\n    const ns = lines.filter((l) => l).map((l) => l.split(\"\").map((e) => parseInt(e, 10)));\r\n    const matrix = new FixedSizeMatrix<number>({ x: lines[0].length, y: lines.length });\r\n    for (let x = 0; x < matrix.size.x; x++) {\r\n        for (let y = 0; y < matrix.size.y; y++) {\r\n            matrix.set({ x, y }, ns[y][x]);\r\n        }\r\n    }\r\n    return matrix;\r\n};\r\n\r\n","import { ClosingBrace, corruptedScore, incompleteScore, isClosing, isOpening, opening, ParsingResult } from \".\";\r\nimport { median } from \"../../../../support/sequences\";\r\nimport { entryForFile } from \"../../../entry\";\r\n\r\nconst parseLine = (line: string): ParsingResult => {\r\n    const patterns = [\"{}\", \"<>\", \"()\", \"[]\"];\r\n    let found = false;\r\n    do {\r\n        found = false;\r\n        for (const pattern of patterns) {\r\n            if (line.includes(pattern)) {\r\n                line = line.replace(pattern, \"\");\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n    } while (found);\r\n    const tokens = [...line];\r\n    const [invalidCharacter] = tokens.filter((token) => isClosing(token));\r\n    if (invalidCharacter) {\r\n        return {\r\n            type: \"corrupted\",\r\n            invalidToken: invalidCharacter as ClosingBrace\r\n        };\r\n    } else {\r\n        return {\r\n            type: \"incomplete\",\r\n            missingTokens: tokens.reverse().map((t) => opening[t])\r\n        };\r\n    }\r\n};\r\n\r\nexport const unstackedSyntaxScoring = entryForFile(\r\n    async ({ lines, resultOutputCallback }) => {\r\n        let result = 0;\r\n        for (const line of lines) {\r\n            const parseResult = parseLine(line);\r\n            if (parseResult.type === \"corrupted\") {\r\n                result += corruptedScore(parseResult);\r\n            }\r\n\r\n        }\r\n        await resultOutputCallback(result);\r\n    },\r\n    async ({ lines, resultOutputCallback }) => {\r\n        const scores: number[] = [];\r\n\r\n        for (const line of lines) {\r\n            const parseResult = parseLine(line);\r\n            if (parseResult.type === \"incomplete\") {\r\n                const lineScore = incompleteScore(parseResult);\r\n                scores.push(lineScore);\r\n            }\r\n        }\r\n        await resultOutputCallback(median(scores));\r\n    },\r\n    {\r\n        key: \"Unstacked\",\r\n        title: \"Syntax Scoring\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);\r\n","import { median } from \"../../../../support/sequences\";\r\nimport { entryForFile } from \"../../../entry\";\r\nimport { unstackedSyntaxScoring } from \"./unstacked\";\r\n\r\ntype OpeningBrace = \"(\" | \"[\" | \"{\" | \"<\";\r\nexport type ClosingBrace = \")\" | \"]\" | \"}\" | \">\";\r\n\r\ntype Brace = OpeningBrace | ClosingBrace;\r\n\r\nexport type ParsingResult = {\r\n    type: \"corrupted\",\r\n    invalidToken: ClosingBrace\r\n} | {\r\n    type: \"incomplete\",\r\n    missingTokens: ClosingBrace[]\r\n};\r\n\r\nexport const opening: { [key: string]: ClosingBrace } = {\r\n    \"(\": \")\",\r\n    \"[\": \"]\",\r\n    \"{\": \"}\",\r\n    \"<\": \">\"\r\n};\r\n\r\nexport const isOpening = (token: string): token is OpeningBrace => opening[token] !== undefined;\r\nexport const isClosing = (token: string): token is ClosingBrace => (Object.values(opening) as string[]).includes(token);\r\n\r\nconst parseLine = (tokens: Brace[]): ParsingResult => {\r\n    const expected: ClosingBrace[] = [];\r\n    for (const token of tokens) {\r\n        if (isOpening(token)) {\r\n            expected.push(opening[token]);\r\n        } else {\r\n            const e = expected.pop();\r\n            if (e !== token) {\r\n                return {\r\n                    type: \"corrupted\",\r\n                    invalidToken: token as ClosingBrace\r\n                };\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        type: \"incomplete\",\r\n        missingTokens: expected.reverse()\r\n    };\r\n};\r\n\r\nexport const corruptedScore = (result: ParsingResult & {type: \"corrupted\"}): number => {\r\n        const score: { [key: string]: number } = {\r\n            \")\": 3,\r\n            \"]\": 57,\r\n            \"}\": 1197,\r\n            \">\": 25137\r\n        };\r\n        return score[result.invalidToken];\r\n};\r\n\r\nexport const incompleteScore = (parseResult: ParsingResult & {type: \"incomplete\"}): number => {\r\n        const score: { [key: string]: number } = {\r\n            \")\": 1,\r\n            \"]\": 2,\r\n            \"}\": 3,\r\n            \">\": 4\r\n        };\r\n        return parseResult.missingTokens\r\n            .reduce((acc, next) => acc * 5 + score[next], 0);\r\n};\r\n\r\nexport const syntaxScoring = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        let result = 0;\r\n        for (const x of lines) {\r\n            const tokens = x.split(\"\") as Brace[];\r\n            const parseResult = parseLine(tokens);\r\n            if (parseResult.type === \"corrupted\") {\r\n                result += corruptedScore(parseResult);\r\n            }\r\n\r\n        }\r\n        await resultOutputCallback(result);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const scores: number[] = [];\r\n\r\n        for (const x of lines) {\r\n            const tokens = x.split(\"\") as Brace[];\r\n            const parseResult = parseLine(tokens);\r\n            if (parseResult.type === \"incomplete\") {\r\n                const lineScore = incompleteScore(parseResult);\r\n                scores.push(lineScore);\r\n            }\r\n        }\r\n        await resultOutputCallback(median(scores));\r\n    },\r\n    {\r\n        key: \"syntax-scoring\",\r\n        title: \"Syntax Scoring\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2,\r\n        variants: [unstackedSyntaxScoring]\r\n    }\r\n);\r\n","import { Coordinate, scalarCoordinates, serialization, sumCoordinate } from \"../../../../support/geometry\";\r\nimport { FixedSizeMatrix } from \"../../../../support/matrix\";\r\nimport { Drawable, Pause, ScreenBuilder, ScreenPrinter } from \"../../../entry\";\r\n\r\nexport interface IDumboOctopusVisualizer {\r\n    setup(size: Coordinate): Promise<void>;\r\n    update(data: FixedSizeMatrix<number>): Promise<void>;\r\n}\r\n\r\nexport const buildVisualizer = (screenBuilder: ScreenBuilder | undefined, pause: Pause) => {\r\n    if (screenBuilder) {\r\n        return new RealVisualizer(screenBuilder, pause);\r\n    } else {\r\n        return new DummyVisualizer();\r\n    }\r\n};\r\n\r\nclass RealVisualizer implements IDumboOctopusVisualizer {\r\n    private printer!: ScreenPrinter;\r\n    private readonly zoom: number;\r\n    private drawables!: FixedSizeMatrix<Drawable & { type: \"rectangle\"; }>;\r\n    constructor(\r\n        private readonly screenBuilder: ScreenBuilder,\r\n        private readonly pause: Pause\r\n    ) {\r\n        this.zoom = 10;\r\n    }\r\n\r\n    public async setup(size: Coordinate) {\r\n        this.printer = await this.screenBuilder.requireScreen(this.scale(size));\r\n        this.printer.setManualRender();\r\n        this.drawables = new FixedSizeMatrix<Drawable & {type: \"rectangle\"}>(size);\r\n\r\n        for (let x = 0; x < size.x; x++) {\r\n            for (let y = 0; y < size.y; y++) {\r\n                const d: Drawable & {type: \"rectangle\"} = {\r\n                    c: sumCoordinate({x: 1, y: 1}, this.scale({x, y})),\r\n                    color: \"black\",\r\n                    id: serialization.serialize({x, y}),\r\n                    size: this.scale({x: 0.8, y: 0.8}),\r\n                    type: \"rectangle\"\r\n                };\r\n\r\n                this.drawables.set({x, y}, d);\r\n                this.printer.add(d);\r\n            }\r\n        }\r\n\r\n        this.printer.forceRender();\r\n    }\r\n\r\n    public async update(data: FixedSizeMatrix<number>): Promise<void> {\r\n        const baseColor = \"#cccccc\";\r\n        const colorCalculator = (v: number) => {\r\n            if (v > 9) {\r\n                return \"white\";\r\n            }\r\n            const ratio = v / 9;\r\n            const alpha = 50 + Math.floor(150 * ratio);\r\n            return baseColor + alpha.toString(16).padStart(2, \"0\");\r\n        };\r\n        data.onEveryCellSync((c, e) => {\r\n            if (e === undefined) {\r\n                return;\r\n            }\r\n            const d = this.drawables.get(c);\r\n            if (d === undefined) {\r\n                return;\r\n            }\r\n            d.color = colorCalculator(e);\r\n        });\r\n\r\n        this.printer.forceRender();\r\n        await this.pause();\r\n\r\n    }\r\n\r\n    private scale(c: Coordinate): Coordinate {\r\n        return scalarCoordinates(c, this.zoom);\r\n    }\r\n}\r\n\r\nclass DummyVisualizer implements IDumboOctopusVisualizer {\r\n    public async setup(size: Coordinate): Promise<void> {\r\n    }\r\n    public async update(data: FixedSizeMatrix<number>): Promise<void> {\r\n    }\r\n\r\n}\r\n","import { getFullSurrounding, serialization } from \"../../../../support/geometry\";\r\nimport { FixedSizeMatrix } from \"../../../../support/matrix\";\r\nimport { entryForFile } from \"../../../entry\";\r\nimport { buildVisualizer } from \"./visualizer\";\r\n\r\nexport const dumboOctopus = entryForFile(\r\n    async ({ lines, resultOutputCallback, screen, pause }) => {\r\n        const matrix = FixedSizeMatrix.fromSingleDigitInput(lines);\r\n\r\n        const vs = buildVisualizer(screen, pause);\r\n        await vs.setup(matrix.size);\r\n\r\n        let totalFlashed = 0;\r\n\r\n        await vs.update(matrix);\r\n\r\n        for (let step = 0; step < 100; step++) {\r\n            increment(matrix);\r\n            const flashed = flash(matrix);\r\n\r\n            await vs.update(matrix);\r\n\r\n            totalFlashed += flashed.size;\r\n\r\n            clear(matrix);\r\n\r\n        }\r\n        await resultOutputCallback(totalFlashed);\r\n    },\r\n    async ({ lines, screen, pause, resultOutputCallback }) => {\r\n        const matrix = FixedSizeMatrix.fromSingleDigitInput(lines);\r\n\r\n        const vs = buildVisualizer(screen, pause);\r\n        await vs.setup(matrix.size);\r\n        await vs.update(matrix);\r\n\r\n        for (let step = 0; true; step++) {\r\n            increment(matrix);\r\n            const flashed = flash(matrix);\r\n\r\n            await vs.update(matrix);\r\n\r\n            if (flashed.size === matrix.size.x * matrix.size.y) {\r\n                await resultOutputCallback(step + 1);\r\n                return;\r\n            }\r\n\r\n            clear(matrix);\r\n        }\r\n    },\r\n    {\r\n        key: \"dumbo-octopus\",\r\n        title: \"Dumbo Octopus\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        suggestedDelay: 100,\r\n        stars: 2\r\n    }\r\n);\r\nfunction flash(matrix: FixedSizeMatrix<number>) {\r\n    let found = false;\r\n    const flashed = new Set<string>();\r\n    do {\r\n        found = false;\r\n        matrix.onEveryCellSync((c, e) => {\r\n            if (e && e > 9) {\r\n                const s = serialization.serialize(c);\r\n                if (!flashed.has(s)) {\r\n                    flashed.add(s);\r\n                    const neighbours = getFullSurrounding(c);\r\n                    for (const n of neighbours) {\r\n                        if (matrix.get(n) !== undefined) {\r\n                            matrix.set(n, matrix.get(n)! + 1);\r\n                        }\r\n                    }\r\n                    found = true;\r\n                }\r\n            }\r\n        });\r\n    } while (found);\r\n    return flashed;\r\n}\r\n\r\nfunction increment(matrix: FixedSizeMatrix<number>) {\r\n    matrix.onEveryCellSync((c, e) => matrix.set(c, e! + 1));\r\n}\r\n\r\nfunction clear(matrix: FixedSizeMatrix<number>) {\r\n    matrix.onEveryCellSync((c, e) => {\r\n        if (e && e > 9) {\r\n            matrix.set(c, 0);\r\n        }\r\n    });\r\n}\r\n\r\n","import { MessageSender, Pause } from \"../../../entry\";\r\nimport { buildGraphCommunicator, IGraphCommunicatorMessageSender } from \"../../../graphCommunication\";\r\n\r\nexport interface IPassagePathingMessageSender {\r\n    setup(edges: Array<{ from: string; to: string; }>): Promise<void>;\r\n    current(node: string): Promise<void>;\r\n    queue(node: string): Promise<void>;\r\n    visited(node: string): Promise<void>;\r\n}\r\nexport const buildCommunicator = (\r\n    messageSender: MessageSender | undefined,\r\n    pause: Pause\r\n): IPassagePathingMessageSender => {\r\n    if (!messageSender) {\r\n        return new DummyMessageSender();\r\n    } else {\r\n        return new RealMessageSender(messageSender, pause);\r\n    }\r\n};\r\n\r\n\r\ntype PrivatePassagePathingMessage = {\r\n    type: \"setup\";\r\n    nodes: Array<{ id: number; label: string }>;\r\n    edges: Array<{ from: number; to: number; }>;\r\n    animateCallback: (shouldAnimate: boolean) => void;\r\n} | {\r\n    type: \"current\";\r\n    node: number;\r\n} | {\r\n    type: \"queue\";\r\n    node: number;\r\n} | {\r\n    type: \"visited\";\r\n    node: number;\r\n};\r\n\r\nexport type PassagePathingMessage = { kind: \"PassagePathingMessage\" } & PrivatePassagePathingMessage;\r\n\r\nconst buildMessage = (message: PrivatePassagePathingMessage): PassagePathingMessage => {\r\n    return {\r\n        ...message,\r\n        kind: \"PassagePathingMessage\"\r\n    };\r\n};\r\n\r\nexport function isPassagePathingMessage(message: any): message is PassagePathingMessage {\r\n    return (message as PassagePathingMessage).kind === \"PassagePathingMessage\";\r\n}\r\n\r\nclass RealMessageSender implements IPassagePathingMessageSender {\r\n    private readonly nodeQueueCount: { [key: string]: number } = {};\r\n    private readonly nodes: { [key: string]: number } = {};\r\n    private shouldAnimate = false;\r\n    constructor(private readonly messageSender: MessageSender, private readonly pause: Pause) {\r\n\r\n    }\r\n\r\n    public async setup(edges: Array<{ from: string; to: string; }>): Promise<void> {\r\n        const ns = new Set<string>();\r\n        for (const edge of edges) {\r\n            ns.add(edge.from);\r\n            ns.add(edge.to);\r\n        }\r\n        const nodes = [...ns];\r\n        let id = 0;\r\n        for (const node of nodes) {\r\n            this.nodeQueueCount[node] = 0;\r\n            this.nodes[node] = id++;\r\n        }\r\n        await this.messageSender(buildMessage({\r\n            type: \"setup\",\r\n            edges: edges.map((e) => ({\r\n                from: this.nodes[e.from],\r\n                to: this.nodes[e.to]\r\n            })),\r\n            nodes: nodes.map((n) => ({\r\n                id: this.nodes[n],\r\n                label: n\r\n            })),\r\n            animateCallback: (should) => this.shouldAnimate = should\r\n        }));\r\n    }\r\n\r\n    public async queue(node: string): Promise<void> {\r\n        if (this.shouldAnimate) {\r\n            const current = this.nodeQueueCount[node]++;\r\n            if (current > 0) {\r\n                await this.messageSender(buildMessage({\r\n                    type: \"queue\",\r\n                    node: this.nodes[node]\r\n                }));\r\n            }\r\n            await this.pause();\r\n        }\r\n    }\r\n\r\n    public async visited(node: string): Promise<void> {\r\n        if (this.shouldAnimate) {\r\n            const current = --this.nodeQueueCount[node];\r\n            if (current <= 0) {\r\n                await this.messageSender(buildMessage({\r\n                    type: \"visited\",\r\n                    node: this.nodes[node]\r\n                }));\r\n            } else {\r\n                await this.messageSender(buildMessage({\r\n                    type: \"queue\",\r\n                    node: this.nodes[node]\r\n                }));\r\n            }\r\n        }\r\n    }\r\n\r\n    public async current(node: string): Promise<void> {\r\n        if (this.shouldAnimate) {\r\n            await this.messageSender(buildMessage({\r\n                type: \"current\",\r\n                node: this.nodes[node]\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nclass DummyMessageSender implements IPassagePathingMessageSender {\r\n    public async queue(node: string): Promise<void> {\r\n    }\r\n    public async visited(node: string): Promise<void> {\r\n    }\r\n    public async current(node: string): Promise<void> {\r\n    }\r\n    public async setup(edges: Array<{ from: string; to: string; }>): Promise<void> {\r\n    }\r\n}\r\n","import { pathToFileURL } from \"url\";\r\nimport { Queue } from \"../../../../support/data-structure\";\r\nimport { entryForFile } from \"../../../entry\";\r\nimport { buildCommunicator } from \"./communication\";\r\n\r\nconst isSmallCave = (cave: string): boolean => {\r\n    return cave.toLowerCase() === cave;\r\n};\r\n\r\nexport const passagePathing = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback, sendMessage, pause}) => {\r\n\r\n        const com = buildCommunicator(sendMessage, pause);\r\n\r\n        const {connectedTo, edges}  = parseInput(lines);\r\n\r\n        await com.setup(edges);\r\n\r\n        const queue = new Queue<{cave: string; path: string[]}>();\r\n        queue.add({cave: \"start\", path: [\"start\"]});\r\n        await com.queue(\"start\");\r\n\r\n        let paths = 0;\r\n\r\n        while (!queue.isEmpty) {\r\n            const current = queue.get()!;\r\n\r\n            await com.current(current.cave);\r\n\r\n            const neighbours = connectedTo[current.cave];\r\n            if (!neighbours) {\r\n                continue;\r\n            }\r\n\r\n            for (const n of neighbours) {\r\n                if (n === \"start\" || n === \"end\") {\r\n                    if (n === \"end\") {\r\n                        paths++;\r\n                    }\r\n                    continue;\r\n                }\r\n                if (isSmallCave(n) && current.path.includes(n)) {\r\n                    continue;\r\n                }\r\n                const newNode = {\r\n                    cave: n,\r\n                    path: [...current.path, n]\r\n                };\r\n                queue.add(newNode);\r\n                await com.queue(newNode.cave);\r\n            }\r\n\r\n            await com.visited(current.cave);\r\n        }\r\n\r\n        await resultOutputCallback(paths);\r\n\r\n    },\r\n    async ({ lines, resultOutputCallback }) => {\r\n        const {connectedTo} = parseInput(lines);\r\n\r\n        const queue = new Queue<{cave: string; smallVisited: string[], hasDuplicates: boolean}>();\r\n        queue.add({cave: \"start\", smallVisited: [\"start\"], hasDuplicates: false});\r\n\r\n        let paths = 0;\r\n\r\n        while (!queue.isEmpty) {\r\n            const current = queue.get()!;\r\n\r\n            const neighbours = connectedTo[current.cave];\r\n            if (!neighbours) {\r\n                continue;\r\n            }\r\n\r\n            for (const n of neighbours) {\r\n                if (n === \"start\" || n === \"end\") {\r\n                    if (n === \"end\") {\r\n                        paths++;\r\n                    }\r\n                    continue;\r\n                }\r\n\r\n                let hasDuplicates = current.hasDuplicates;\r\n                if (isSmallCave(n)) {\r\n                    const duplicates = current.smallVisited.filter((p) => p === n).length;\r\n                    if (duplicates > 0) {\r\n                        if (current.hasDuplicates) {\r\n                            continue;\r\n                        }\r\n                        hasDuplicates = true;\r\n                    }\r\n                }\r\n                const newNode = {\r\n                    cave: n,\r\n                    smallVisited: [...current.smallVisited],\r\n                    hasDuplicates\r\n                };\r\n                if (isSmallCave(n)) {\r\n                    newNode.smallVisited.push(n);\r\n                }\r\n                queue.add(newNode);\r\n            }\r\n        }\r\n\r\n        await resultOutputCallback(paths);\r\n    },\r\n    {\r\n        key: \"passage-pathing\",\r\n        title: \"Passage Pathing\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2,\r\n        suggestedDelay: 10\r\n    }\r\n);\r\n\r\nfunction parseInput(lines: string[]): {\r\n    connectedTo: { [key: string]: string[]; };\r\n    edges: Array<{from: string; to: string}>;\r\n} {\r\n    const edges = lines.map((line) => {\r\n        const [from, to] = line.split(\"-\");\r\n        return { from, to };\r\n    });\r\n\r\n    const connectedTo: { [key: string]: string[]; } = {};\r\n\r\n    for (const edge of edges) {\r\n        const k = connectedTo[edge.from] || [];\r\n        k.push(edge.to);\r\n        connectedTo[edge.from] = k;\r\n\r\n        const j = connectedTo[edge.to] || [];\r\n        j.push(edge.from);\r\n        connectedTo[edge.to] = j;\r\n    }\r\n    return {connectedTo, edges};\r\n}\r\n","import { Coordinate, scalarCoordinates, serialization, sumCoordinate } from \"../../../../support/geometry\";\r\nimport { FixedSizeMatrix } from \"../../../../support/matrix\";\r\nimport { Drawable, Pause, ScreenBuilder, ScreenPrinter } from \"../../../entry\";\r\n\r\nexport interface ITransparentOrigamiVisualizer {\r\n    show(matrix: FixedSizeMatrix<\"#\">): Promise<void>;\r\n\r\n    getText(): Promise<string>;\r\n}\r\n\r\nexport const buildVisualizer = (screenBuilder: ScreenBuilder | undefined, pause: Pause, isSmall: boolean) => {\r\n    if (screenBuilder) {\r\n        return new RealVisualizer(screenBuilder, pause, isSmall);\r\n    } else {\r\n        return new DummyVisualizer();\r\n    }\r\n};\r\n\r\nclass RealVisualizer implements ITransparentOrigamiVisualizer {\r\n    private shown: boolean = false;\r\n    private readonly zoom: Coordinate;\r\n    private printer!: ScreenPrinter;\r\n    private readonly cellSize: Coordinate;\r\n    constructor(\r\n        private readonly screenBuilder: ScreenBuilder,\r\n        private readonly pause: Pause,\r\n        isSmall: boolean\r\n    ) {\r\n        this.zoom = isSmall ? {x: 0.7, y: 0.7} : {x: 10, y: 10};\r\n        this.cellSize = isSmall ? scalarCoordinates(this.zoom, 3) : this.zoom;\r\n    }\r\n\r\n    public async show(matrix: FixedSizeMatrix<\"#\">): Promise<void> {\r\n        if (this.shown) {\r\n            throw new Error(\"Can show only once\");\r\n        }\r\n        this.shown = true;\r\n\r\n        this.printer = await this.screenBuilder.requireScreen(\r\n            sumCoordinate({x: 2, y: 2},\r\n                sumCoordinate(this.scale(matrix.size), this.cellSize)\r\n            )\r\n        );\r\n\r\n        const points: Coordinate[] = [];\r\n\r\n        matrix.onEveryCellSync((c, e) => {\r\n            if (e === \"#\") {\r\n                points.push(c);\r\n            }\r\n        });\r\n\r\n        const drawables = points.map((c) => ({\r\n            type: \"rectangle\",\r\n            c: sumCoordinate({x: 2, y: 2}, this.scale(c)),\r\n            color: \"black\",\r\n            id: serialization.serialize(c),\r\n            size: this.cellSize,\r\n        } as Drawable & {type: \"rectangle\"}));\r\n\r\n        this.printer.setManualRender();\r\n\r\n        this.printer.replace(drawables);\r\n\r\n        this.printer.forceRender();\r\n    }\r\n\r\n    public async getText(): Promise<string> {\r\n        const blob = await this.printer.getImage() as any;\r\n\r\n        blob.name = \"test\";\r\n\r\n        const {createWorker} = require(\"tesseract.js\");\r\n\r\n        const worker = createWorker();\r\n\r\n        await worker.load();\r\n        await worker.loadLanguage(\"eng\");\r\n        await worker.initialize(\"eng\");\r\n        const {data: { text } } = await worker.recognize(blob, {\r\n            tessedit_char_blacklist: \".\"\r\n        });\r\n\r\n        return [...(text as string)].filter((e) => e !== \".\").join(\"\");\r\n    }\r\n\r\n    private scale(c: Coordinate): Coordinate {\r\n        return {\r\n            x: c.x * this.zoom.x,\r\n            y: c.y * this.zoom.y\r\n        };\r\n    }\r\n}\r\n\r\nclass DummyVisualizer implements ITransparentOrigamiVisualizer {\r\n    public getText(): Promise<string> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    public async show(matrix: FixedSizeMatrix<\"#\">): Promise<void> {\r\n    }\r\n\r\n}\r\n","import { UnknownSizeField } from \"../../../../support/field\";\r\nimport { Coordinate, CoordinateSet, serialization } from \"../../../../support/geometry\";\r\nimport { entryForFile } from \"../../../entry\";\r\nimport { buildVisualizer } from \"./visualizer\";\r\n\r\nexport const transparentOrigami = entryForFile(\r\n    async ({ lines, resultOutputCallback, isQuickRunning, screen, pause }) => {\r\n        const { points, folds } = parseInput(lines);\r\n\r\n        const foldedPoints = applyFolds(points, folds.slice(0, 1));\r\n\r\n        if (!isQuickRunning) {\r\n            const matrix = mapToMatrix(foldedPoints);\r\n            const vs = buildVisualizer(screen, pause, true);\r\n            await vs.show(matrix);\r\n        }\r\n\r\n        await resultOutputCallback(foldedPoints.size);\r\n\r\n    },\r\n    async ({ lines, resultOutputCallback, screen, pause }) => {\r\n        const { points, folds } = parseInput(lines);\r\n\r\n        const foldedPoints = applyFolds(points, folds);\r\n\r\n        const matrix = mapToMatrix(foldedPoints);\r\n\r\n        if (screen) {\r\n            const vs = buildVisualizer(screen, pause, false);\r\n            await vs.show(matrix);\r\n            await resultOutputCallback(await vs.getText());\r\n        } else {\r\n            await resultOutputCallback(matrix.toString((e) => e || \" \"));\r\n        }\r\n    },\r\n    {\r\n        key: \"transparent-origami\",\r\n        title: \"Transparent Origami\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);\r\n\r\nfunction mapToMatrix(set: CoordinateSet) {\r\n    const field = new UnknownSizeField<\"#\">();\r\n\r\n    set.forEach((p) => field.set(p, \"#\"));\r\n\r\n    const matrix = field.toMatrix();\r\n    return matrix;\r\n}\r\n\r\nfunction applyFolds(points: Coordinate[], foldsToExecute: Array<{ coordinate: \"x\" | \"y\"; value: number; }>) {\r\n    let set = new CoordinateSet(points);\r\n\r\n    for (const fold of foldsToExecute) {\r\n        set = set.sameTypeMap((p) => {\r\n            const v = p[fold.coordinate];\r\n            p[fold.coordinate] = v < fold.value ?\r\n                v : fold.value - (v - fold.value);\r\n            return p;\r\n        });\r\n    }\r\n    return set;\r\n}\r\n\r\nfunction parseInput(lines: string[]) {\r\n    const points = lines.filter((l) => l && !l.startsWith(\"fold\")).map((line) => {\r\n        const [x, y] = line.split(\",\").map((e) => parseInt(e, 10));\r\n        return { x, y };\r\n    });\r\n    const folds = lines.filter((l) => l.startsWith(\"fold\")).map((line) => {\r\n        const token = line.split(\" \")[2];\r\n        const [coordinate, rawValue] = token.split(\"=\");\r\n        return {\r\n            coordinate: coordinate as \"x\" | \"y\",\r\n            value: parseInt(rawValue, 10)\r\n        };\r\n    });\r\n    return { points, folds };\r\n}\r\n\r\n","import { Counter, DefaultDict, DefaultNumberDict } from \"../../../../support/data-structure\";\r\nimport { MyIterable } from \"../../../../support/sequences\";\r\nimport { entryForFile } from \"../../../entry\";\r\n\r\nexport const extendedPolymerization = entryForFile(\r\n    async ({ lines, resultOutputCallback }) => {\r\n        const {start, rules} = parseInput(lines);\r\n\r\n        const res = start.split(\"\");\r\n        for (let i = 0; i < 10; i++) {\r\n            let current = 0;\r\n            while (true) {\r\n                let found = false;\r\n                for (const rule in rules) {\r\n                    if (res[current] === rule[0] && res[current + 1] === rule[1]) {\r\n                        res.splice(current + 1, 0, rules[rule]);\r\n                        current += 2;\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!found) {\r\n                    current++;\r\n                }\r\n                if (current >= res.length - 1) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        const frequencies = Counter.countCharacters(res);\r\n\r\n        await resultOutputCallback(Math.max(...frequencies.values) - Math.min(...frequencies.values));\r\n\r\n    },\r\n    async ({ lines, resultOutputCallback }) => {\r\n        const { start, rules }: { start: string; rules: { [key: string]: string; }; } = parseInput(lines);\r\n\r\n        let pairs = new DefaultNumberDict<string>();\r\n\r\n        for (const n of new MyIterable(start).windows(2)) {\r\n            pairs.incr(n.join(\"\"));\r\n        }\r\n\r\n        for (let i = 0; i < 40; i++) {\r\n            const newPairs = new DefaultNumberDict<string>();\r\n            for (const {key: k, value} of pairs) {\r\n                const match = rules[k];\r\n                if (match !== undefined) {\r\n                    for (const w of new MyIterable([k[0], match, k[1]]).windows(2)) {\r\n                        newPairs.incr(w.join(\"\"), value);\r\n                    }\r\n                }\r\n            }\r\n            pairs = newPairs;\r\n        }\r\n\r\n        const frequencies = getFrequencies(pairs, start);\r\n\r\n        await resultOutputCallback(Math.max(...frequencies.values) - Math.min(...frequencies.values));\r\n    },\r\n    {\r\n        key: \"extended-polymerization\",\r\n        title: \"Extended Polymerization\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);\r\n\r\nfunction getFrequencies(pairs: DefaultDict<string, number>, start: string) {\r\n    const frequencies = new DefaultNumberDict<string>();\r\n    for (const { key, value } of pairs) {\r\n        frequencies.incr(key[0], value);\r\n    }\r\n    frequencies.incr(start[start.length - 1]);\r\n    return frequencies;\r\n}\r\n\r\nfunction parseInput(lines: string[]): {start: string; rules: {[key: string]: string}} {\r\n    const start = lines[0];\r\n\r\n    const rules: { [key: string]: string; } = {};\r\n\r\n    for (const l of lines.slice(2)) {\r\n        const [a, b] = l.split(\" -> \");\r\n        rules[a] = b;\r\n    }\r\n    return { start, rules };\r\n}\r\n","import { Coordinate, serialization } from \"./geometry\";\r\n\r\nexport type ISerializer<T> = {\r\n    serialize(e: T): string;\r\n    deserialize(s: string): T;\r\n};\r\n\r\nexport const defaultSerializers = {\r\n    coordinate2d: {\r\n        serialize: serialization.serialize,\r\n        deserialize: serialization.deserialize\r\n    } as ISerializer<Coordinate>\r\n};\r\n\r\nexport const getCircularReplacer = () => {\r\n    const seen = new WeakSet();\r\n    return (key: string, value: any) => {\r\n        if (typeof value === \"object\" && value !== null) {\r\n            if (seen.has(value)) {\r\n                return;\r\n            }\r\n            seen.add(value);\r\n        }\r\n        return value;\r\n    };\r\n};\r\n","import { BinaryHeap } from \"priorityqueue/lib/cjs/BinaryHeap\";\r\nimport { Coordinate, getSurrounding, isInBounds, scalarCoordinates } from \"../../../../support/geometry\";\r\nimport { FixedSizeMatrix } from \"../../../../support/matrix\";\r\nimport { defaultSerializers } from \"../../../../support/serialization\";\r\nimport { entryForFile } from \"../../../entry\";\r\n\r\ntype QueueItem = { c: Coordinate, r: number };\r\n\r\nclass MyPriorityQueue extends BinaryHeap<QueueItem> {\r\n    constructor() {\r\n        super({ comparator: (a, b) => b.r - a.r });\r\n    }\r\n\r\n}\r\n\r\nconst getBestCost = (lines: string[], factor: number): number => {\r\n    const matrix = FixedSizeMatrix.fromSingleDigitInput(lines);\r\n\r\n    const boundaries = { topLeft: { x: 0, y: 0 }, size: scalarCoordinates(matrix.size, factor) };\r\n\r\n    const queue = new MyPriorityQueue();\r\n\r\n    queue.push({ c: { x: 0, y: 0 }, r: 0 });\r\n\r\n    const visited = new Set<string>();\r\n\r\n    while (!queue.isEmpty()) {\r\n        const item = queue.pop();\r\n        if (item.c.x === matrix.size.x * factor - 1 && item.c.y === matrix.size.y * factor - 1) {\r\n            return item.r;\r\n        }\r\n        const serialized = defaultSerializers.coordinate2d.serialize(item.c);\r\n        if (visited.has(serialized)) {\r\n            continue;\r\n        }\r\n        visited.add(serialized);\r\n        const ns = getSurrounding(item.c);\r\n        for (const n of ns) {\r\n            if (!isInBounds(n, boundaries)) {\r\n                continue;\r\n            }\r\n            const c = {\r\n                x: n.x % matrix.size.x,\r\n                y: n.y % matrix.size.y\r\n            };\r\n\r\n            const xFactor = Math.floor(n.x / matrix.size.x);\r\n            const yFactor = Math.floor(n.y / matrix.size.y);\r\n\r\n            const risk = matrix.get(c);\r\n            if (risk === undefined) {\r\n                throw new Error(\"I'm sad :(\");\r\n            }\r\n            const modifiedRisk = (risk + xFactor + yFactor - 1) % 9 + 1;\r\n            queue.push({ c: n, r: modifiedRisk + item.r });\r\n        }\r\n    }\r\n\r\n    throw new Error(\"Failed\");\r\n};\r\n\r\nexport const chiton = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        await resultOutputCallback(getBestCost(lines, 1));\r\n\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        await resultOutputCallback(getBestCost(lines, 5));\r\n    },\r\n    {\r\n        key: \"chiton\",\r\n        title: \"Chiton\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);\r\n","import { MessageSender, Pause } from \"./entry\";\r\n\r\nexport interface IGraphCommunicatorMessageSender {\r\n    send(message: PrivateGraphCommunicatorMessage): Promise<void>;\r\n}\r\nexport const buildGraphCommunicator = (\r\n    messageSender: MessageSender | undefined\r\n): IGraphCommunicatorMessageSender => {\r\n    if (!messageSender) {\r\n        return new DummyMessageSender();\r\n    } else {\r\n        return new RealMessageSender(messageSender);\r\n    }\r\n};\r\n\r\n\r\nexport type Node = {\r\n    id: number;\r\n    label: string;\r\n    color: string;\r\n};\r\n\r\nexport type Edge = {\r\n    id: number;\r\n    from: number;\r\n    to: number;\r\n    color: string;\r\n};\r\n\r\nexport type PrivateGraphCommunicatorMessage = {\r\n    type: \"setup\";\r\n    nodes: Node[];\r\n    edges: Edge[];\r\n} | {\r\n    type: \"add-node\";\r\n    node: Node;\r\n} | {\r\n    type: \"add-edge\";\r\n    edge: Edge;\r\n} | {\r\n    type: \"remove-node\";\r\n    id: number;\r\n} | {\r\n    type: \"remove-edge\";\r\n    id: number;\r\n} | {\r\n    type: \"change-node-color\";\r\n    id: number;\r\n    color: string;\r\n} | {\r\n    type: \"change-edge-color\";\r\n    id: number;\r\n    color: string;\r\n} | {\r\n    type: \"title\";\r\n    title: string;\r\n};\r\n\r\nexport type GraphCommunicatorMessage = { kind: \"GraphCommunicatorMessage\" } & PrivateGraphCommunicatorMessage;\r\n\r\nconst buildMessage = (message: PrivateGraphCommunicatorMessage): GraphCommunicatorMessage => {\r\n    return {\r\n        ...message,\r\n        kind: \"GraphCommunicatorMessage\"\r\n    };\r\n};\r\n\r\nexport function isGraphCommunicatorMessage(message: any): message is GraphCommunicatorMessage {\r\n    return (message as GraphCommunicatorMessage).kind === \"GraphCommunicatorMessage\";\r\n}\r\n\r\nclass RealMessageSender implements IGraphCommunicatorMessageSender {\r\n    constructor(private readonly messageSender: MessageSender) { }\r\n    public send(message: PrivateGraphCommunicatorMessage): Promise<void> {\r\n        return this.messageSender(buildMessage(message));\r\n    }\r\n\r\n}\r\n\r\nclass DummyMessageSender implements IGraphCommunicatorMessageSender {\r\n    public async send(message: PrivateGraphCommunicatorMessage): Promise<void> {\r\n    }\r\n}\r\n","import { isLiteral, Packet } from \".\";\r\nimport { MessageSender, Pause } from \"../../../entry\";\r\nimport { buildGraphCommunicator, Edge, IGraphCommunicatorMessageSender, Node } from \"../../../graphCommunication\";\r\n\r\nexport interface IPacketDecoderMessageSender {\r\n    showPacketTreeVersions(packet: Packet): Promise<void>;\r\n    showPacketTreeFull(packet: Packet): Promise<void>;\r\n}\r\nexport const buildCommunicator = (\r\n    messageSender: MessageSender | undefined,\r\n    pause: Pause\r\n): IPacketDecoderMessageSender => {\r\n    if (!messageSender) {\r\n        return new DummyMessageSender();\r\n    } else {\r\n        return new RealMessageSender(messageSender);\r\n    }\r\n};\r\n\r\n\r\ntype PrivatePacketDecoderMessage = {\r\n};\r\n\r\nexport type PacketDecoderMessage = { kind: \"PacketDecoderMessage\" } & PrivatePacketDecoderMessage;\r\n\r\nconst buildMessage = (message: PrivatePacketDecoderMessage): PacketDecoderMessage => {\r\n    return {\r\n        ...message,\r\n        kind: \"PacketDecoderMessage\"\r\n    };\r\n};\r\n\r\nexport function isPacketDecoderMessage(message: any): message is PacketDecoderMessage {\r\n    return (message as PacketDecoderMessage).kind === \"PacketDecoderMessage\";\r\n}\r\n\r\nconst visit = (\r\n    packet: Packet,\r\n    startId: number,\r\n    colorGenerator: (packet: Packet) => string\r\n): { nodes: Node[], edges: Edge[]; startId: number; rootId: number } => {\r\n    const rootId = startId++;\r\n    const nodes: Node[] = [{\r\n        id: rootId,\r\n        color: colorGenerator(packet),\r\n        label: packet.version.toString()\r\n    }];\r\n    const edges: Edge[] = [];\r\n    if (isLiteral(packet)) {\r\n        return { nodes, edges, startId, rootId };\r\n    }\r\n\r\n    for (const sub of packet.sub) {\r\n        const visitResult = visit(sub, startId, colorGenerator);\r\n        const { nodes: subNodes, edges: subEdges, rootId: subRoot } = visitResult;\r\n        let { startId: subStart } = visitResult;\r\n        startId = subStart;\r\n        edges.push({\r\n            color: \"white\",\r\n            from: rootId,\r\n            to: subRoot,\r\n            id: subStart++\r\n        });\r\n        startId = subStart;\r\n        subNodes.forEach((n) => nodes.push(n));\r\n        subEdges.forEach((s) => edges.push(s));\r\n    }\r\n\r\n    return {\r\n        edges,\r\n        nodes,\r\n        rootId,\r\n        startId\r\n    };\r\n\r\n};\r\n\r\nclass RealMessageSender implements IPacketDecoderMessageSender {\r\n    private readonly graphCommunicator: IGraphCommunicatorMessageSender;\r\n    constructor(messageSender: MessageSender) {\r\n        this.graphCommunicator = buildGraphCommunicator(messageSender);\r\n    }\r\n    public async showPacketTreeVersions(packet: Packet): Promise<void> {\r\n        await this.graphCommunicator.send({\r\n            type: \"title\",\r\n            title: \"Warning: the graph WILL take a long while to load\"\r\n        });\r\n        const { nodes, edges } = visit(packet, 0, (p) => {\r\n            if (isLiteral(p)) {\r\n                return \"green\";\r\n            }\r\n            return \"white\";\r\n        });\r\n        await this.graphCommunicator.send({\r\n            edges,\r\n            nodes,\r\n            type: \"setup\"\r\n        });\r\n    }\r\n    public async showPacketTreeFull(packet: Packet): Promise<void> {\r\n        await this.graphCommunicator.send({\r\n            type: \"title\",\r\n            title: \"Warning: the graph WILL take a long while to load\"\r\n        });\r\n        const { nodes, edges } = visit(packet, 0, (p) => {\r\n            switch (p.id) {\r\n                case 0:\r\n                    return \"red\";\r\n                case 1:\r\n                    return \"pink\";\r\n                case 2:\r\n                    return \"blue\";\r\n                case 3:\r\n                    return \"purple\";\r\n                case 4:\r\n                    return \"green\";\r\n                case 5:\r\n                    return \"orange\";\r\n                case 6:\r\n                    return \"yellow\";\r\n                case 7:\r\n                    return \"khaki\";\r\n                default:\r\n                    throw new Error(\"Unexpected\");\r\n            }\r\n        });\r\n        await this.graphCommunicator.send({\r\n            edges,\r\n            nodes,\r\n            type: \"setup\"\r\n        });\r\n    }\r\n\r\n}\r\n\r\nclass DummyMessageSender implements IPacketDecoderMessageSender {\r\n    public async showPacketTreeVersions(packet: Packet): Promise<void> { }\r\n    public async showPacketTreeFull(packet: Packet): Promise<void> { }\r\n}\r\n","import { entryForFile } from \"../../../entry\";\r\nimport { buildCommunicator } from \"./communicator\";\r\n\r\n\r\ntype Bit = 0 | 1;\r\ntype Bits = Bit[];\r\n\r\ntype BasePacket = {\r\n    version: number;\r\n};\r\n\r\ntype LiteralPacket = BasePacket & {\r\n    id: 4;\r\n    value: number;\r\n};\r\n\r\ntype OperatorPacket = BasePacket & {\r\n    id: number;\r\n    sub: Packet[];\r\n};\r\n\r\nexport type Packet = (OperatorPacket | LiteralPacket);\r\n\r\nexport const isLiteral = (e: Packet): e is LiteralPacket => {\r\n    return e.id === 4;\r\n};\r\n\r\nconst toNumber = (bits: Bits, start: number, to: number): number => {\r\n    const res = [];\r\n    for (let i = start; i < to; i++) {\r\n        res.push(bits[i]);\r\n    }\r\n    return parseInt(res.join(\"\"), 2);\r\n};\r\n\r\nconst parseHeader = (bits: Bits, start: number): { version: number; id: number; newStart: number } => {\r\n    const version = toNumber(bits, start, start + 3);\r\n    start += 3;\r\n    const id = toNumber(bits, start, start + 3);\r\n    start += 3;\r\n    return { version, id, newStart: start };\r\n};\r\n\r\nconst parseOperator = (bits: Bits, start: number) => {\r\n    const lengthType = bits[start];\r\n    start++;\r\n    const packets: Packet[] = [];\r\n    if (lengthType === 0) {\r\n        const length = toNumber(bits, start, start + 15);\r\n        start += 15;\r\n        const targetStart = start + length;\r\n        while (start < targetStart) {\r\n            const [packet, newStart] = createPacket(bits, start);\r\n            start = newStart;\r\n            packets.push(packet);\r\n        }\r\n        if (start !== targetStart) {\r\n            throw new Error(\"Start mismatch\");\r\n        }\r\n    } else {\r\n        const subs = toNumber(bits, start, start + 11);\r\n        start += 11;\r\n        for (let i = 0; i < subs; i++) {\r\n            const [packet, newStart] = createPacket(bits, start);\r\n            start = newStart;\r\n            packets.push(packet);\r\n        }\r\n    }\r\n    return { packets, start };\r\n};\r\n\r\nconst parseLiteral = (bits: Bits, start: number) => {\r\n    const rawValue: Bits = [];\r\n    let done = false;\r\n    while (!done) {\r\n        const group = bits.slice(start, start + 5);\r\n        if (bits[start] === 0) {\r\n            done = true;\r\n        }\r\n        for (let i = start + 1; i < start + 5; i++) {\r\n            rawValue.push(bits[i]);\r\n        }\r\n        start += 5;\r\n    }\r\n    const value = toNumber(rawValue, 0, rawValue.length);\r\n    return { value, start };\r\n};\r\n\r\n\r\nconst createPacket = (bits: Bits, start: number): [Packet, number] => {\r\n    const { version, id, newStart } = parseHeader(bits, start);\r\n    start = newStart;\r\n    if (id === 4) {\r\n        let value;\r\n        ({ value, start } = parseLiteral(bits, start));\r\n        return [{\r\n            version,\r\n            id,\r\n            value\r\n        } as Packet, start];\r\n    } else {\r\n        let packets: Packet[];\r\n        ({ packets, start } = parseOperator(bits, start));\r\n        return [\r\n            {\r\n                version,\r\n                id,\r\n                sub: packets\r\n            },\r\n            start\r\n        ];\r\n    }\r\n};\r\n\r\nconst countVersions = (packet: Packet): number => {\r\n    if (isLiteral(packet)) {\r\n        return packet.version;\r\n    } else {\r\n        return packet.version + packet.sub.reduce((acc, next) => acc + countVersions(next), 0);\r\n    }\r\n};\r\nconst calculate = (packet: Packet): number => {\r\n    if (isLiteral(packet)) {\r\n        return packet.value;\r\n    } else {\r\n        const subs = packet.sub.map(calculate);\r\n        if (packet.id === 0) {\r\n            return subs.reduce((acc, next) => acc + next);\r\n        } else if (packet.id === 1) {\r\n            return subs.reduce((acc, next) => acc * next);\r\n        } else if (packet.id === 2) {\r\n            return Math.min(...subs);\r\n        } else if (packet.id === 3) {\r\n            return Math.max(...subs);\r\n        } else {\r\n            // all the rest are binary operations\r\n            if (subs.length !== 2) {\r\n                throw new Error(\"invalid length\");\r\n            }\r\n            const [a, b] = subs;\r\n            if (packet.id === 5) {\r\n                return a > b ? 1 : 0;\r\n            } else if (packet.id === 6) {\r\n                return a < b ? 1 : 0;\r\n            } else if (packet.id === 7) {\r\n                return a === b ? 1 : 0;\r\n            } else {\r\n                throw new Error(\"Invalid packet\");\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nconst parseInput = (lines: string[]): Bits => {\r\n    const b: Bits = [];\r\n    for (const c of lines[0]) {\r\n        if (c) {\r\n            const n = parseInt(c, 16);\r\n            const bits = n.toString(2).padStart(4, \"0\");\r\n            for (const x of bits) {\r\n                b.push(parseInt(x, 2) as Bit);\r\n            }\r\n        }\r\n    }\r\n    return b;\r\n};\r\n\r\nexport const packetDecoder = entryForFile(\r\n    async ({ lines, resultOutputCallback, sendMessage, pause }) => {\r\n        const bits = parseInput(lines);\r\n        const [packet] = createPacket(bits, 0);\r\n\r\n        const communicator = buildCommunicator(sendMessage, pause);\r\n\r\n        await communicator.showPacketTreeVersions(packet);\r\n\r\n        await resultOutputCallback(countVersions(packet));\r\n    },\r\n    async ({ lines, resultOutputCallback, sendMessage, pause }) => {\r\n        const bits = parseInput(lines);\r\n        const [packet] = createPacket(bits, 0);\r\n        const communicator = buildCommunicator(sendMessage, pause);\r\n\r\n        await communicator.showPacketTreeFull(packet);\r\n\r\n        await resultOutputCallback(calculate(packet));\r\n    },\r\n    {\r\n        key: \"packet-decoder\",\r\n        title: \"Packet Decoder\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2,\r\n        customComponent: \"graph\"\r\n    }\r\n);\r\n\r\n\r\n","import { Coordinate } from \"../../../../support/geometry\";\r\nimport { Drawable, Pause, ScreenBuilder, ScreenPrinter } from \"../../../entry\";\r\n\r\nexport interface ITrickShotVisualizer {\r\n    setup(from: Coordinate, to: Coordinate): Promise<void>;\r\n    showPoints(coordinate: Coordinate[]): Promise<void>;\r\n}\r\n\r\nexport const buildVisualizer = async (screenBuilder: ScreenBuilder | undefined, pause: Pause) => {\r\n    if (screenBuilder) {\r\n        const vs = new RealVisualizer(screenBuilder, pause);\r\n        return vs;\r\n    } else {\r\n        return new DummyVisualizer();\r\n    }\r\n};\r\n\r\nclass RealVisualizer implements ITrickShotVisualizer {\r\n    private printer!: ScreenPrinter;\r\n    private basePoint!: { x: number; y: number; };\r\n\r\n    constructor(\r\n        private readonly screenBuilder: ScreenBuilder,\r\n        private readonly pause: Pause\r\n    ) {\r\n    }\r\n\r\n    public async setup(from: Coordinate, to: Coordinate) {\r\n       await this.screenBuilder.requireScreen({x: 250, y: 550}).then((e) => {\r\n           this.printer = e;\r\n           this.printer.setManualRender();\r\n       });\r\n\r\n       this.basePoint = {x: 0, y: 500};\r\n\r\n       from = this.map(from);\r\n       to = this.map(to);\r\n\r\n       this.printer.addForeground({\r\n           type: \"points\",\r\n           color: \"yellow\",\r\n           id: \"target\",\r\n           points: [\r\n               {x: from.x, y: from.y},\r\n               {x: to.x, y: from.y},\r\n               {x: to.x, y: to.y},\r\n               {x: from.x, y: to.y},\r\n           ]\r\n       });\r\n\r\n    }\r\n    public async showPoints(coordinate: Coordinate[]): Promise<void> {\r\n\r\n        coordinate = coordinate.map((e) => this.map(e));\r\n\r\n        const i = 0;\r\n\r\n        const drawable: Drawable & {type: \"points\"} = {\r\n            type: \"points\",\r\n            color: \"white\",\r\n            id: \"line\",\r\n            points: coordinate,\r\n            shouldStroke: true\r\n        };\r\n\r\n        this.printer.replace([drawable]);\r\n\r\n        this.printer.forceRender();\r\n\r\n        await this.pause();\r\n    }\r\n\r\n    private scale(c: Coordinate) {\r\n        return {\r\n            x: c.x,\r\n            y: c.y * 0.1\r\n        };\r\n    }\r\n\r\n    private map(c: Coordinate) {\r\n        const scaled = this.scale(c);\r\n\r\n        return {\r\n            x: scaled.x,\r\n            y: -scaled.y + this.basePoint.y\r\n\r\n        };\r\n    }\r\n}\r\n\r\nclass DummyVisualizer implements ITrickShotVisualizer {\r\n    public async setup(from: Coordinate, to: Coordinate): Promise<void> {\r\n    }\r\n    public async showPoints(coordinate: Coordinate[]): Promise<void> {\r\n    }\r\n\r\n}\r\n","import { Coordinate, sumCoordinate } from \"../../../../support/geometry\";\r\nimport { entryForFile } from \"../../../entry\";\r\nimport { buildVisualizer } from \"./visualizer\";\r\n\r\ntype State = {\r\n    position: Coordinate;\r\n    speed: Coordinate;\r\n};\r\n\r\nconst step = (state: State): State => {\r\n    const position = sumCoordinate(state.position, state.speed);\r\n    const speed = {\r\n        x: state.speed.x - Math.sign(state.speed.x),\r\n        y: state.speed.y - 1\r\n    };\r\n    return { speed, position };\r\n};\r\n\r\nexport const trickShot = entryForFile(\r\n    async ({ lines, resultOutputCallback, screen, pause }) => {\r\n\r\n        const tokens = lines[0].split(\" \");\r\n        const [xFrom, xTo] = tokens[2].slice(2, tokens[2].length - 1).split(\"..\").map((e) => parseInt(e, 10));\r\n        const [yFrom, yTo] = tokens[3].slice(2).split(\"..\").map((e) => parseInt(e, 10));\r\n\r\n\r\n        let reallyBestY = 0;\r\n\r\n        const vs = await buildVisualizer(screen, pause);\r\n\r\n        await vs.setup({ x: xFrom, y: yFrom }, { x: xTo, y: yTo });\r\n\r\n        for (let y = 0; y <= 1000; y++) {\r\n            for (let x = 0; x <= xTo; x++) {\r\n                const points: Coordinate[] = [];\r\n                let state: State = {\r\n                    position: { x: 0, y: 0 },\r\n                    speed: { x, y }\r\n                };\r\n                let bestY = 0;\r\n\r\n                if (screen) {\r\n                    points.push(state.position);\r\n                }\r\n\r\n                while (state.position.x <= xTo && state.position.y >= yFrom) {\r\n                    state = step(state);\r\n                    if (screen) {\r\n                        points.push(state.position);\r\n                    }\r\n                    bestY = Math.max(bestY, state.position.y);\r\n                    if (\r\n                        state.position.x >= xFrom &&\r\n                        state.position.y <= yTo &&\r\n                        state.position.x <= xTo &&\r\n                        state.position.y >= yFrom) {\r\n                        if (bestY > reallyBestY) {\r\n                            reallyBestY = bestY;\r\n                            await vs.showPoints(points);\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        await resultOutputCallback(reallyBestY);\r\n    },\r\n    async ({ lines, resultOutputCallback, screen, pause }) => {\r\n        const tokens = lines[0].split(\" \");\r\n        const [xFrom, xTo] = tokens[2].slice(2, tokens[2].length - 1).split(\"..\").map((e) => parseInt(e, 10));\r\n        const [yFrom, yTo] = tokens[3].slice(2).split(\"..\").map((e) => parseInt(e, 10));\r\n\r\n\r\n        let count = 0;\r\n\r\n        const vs = await buildVisualizer(screen, pause);\r\n\r\n        await vs.setup({ x: xFrom, y: yFrom }, { x: xTo, y: yTo });\r\n\r\n\r\n        for (let y = yFrom; y < 1000; y++) {\r\n            for (let x = 0; x < 1000; x++) {\r\n                let state: State = {\r\n                    position: { x: 0, y: 0 },\r\n                    speed: { x, y }\r\n                };\r\n\r\n                const points: Coordinate[] = [];\r\n                if (screen) {\r\n                    points.push(state.position);\r\n                }\r\n\r\n                while (state.position.x <= xTo && state.position.y >= yFrom) {\r\n                    state = step(state);\r\n                    if (screen) {\r\n                        points.push(state.position);\r\n                    }\r\n                    if (\r\n                        state.position.x >= xFrom &&\r\n                        state.position.y <= yTo &&\r\n                        state.position.x <= xTo &&\r\n                        state.position.y >= yFrom) {\r\n                        count++;\r\n                        await vs.showPoints(points);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        await resultOutputCallback(count);\r\n    },\r\n    {\r\n        key: \"trick-shot\",\r\n        title: \"Trick Shot\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2,\r\n        suggestedDelay: 10\r\n    }\r\n);\r\n","import { subsetGenerator } from \"../../../../support/sequences\";\r\nimport { entryForFile } from \"../../../entry\";\r\n\r\ntype Value = {\r\n    parent?: Expression;\r\n    value: number;\r\n};\r\n\r\ntype Expression = {\r\n    parent?: Expression;\r\n    left: Node;\r\n    right: Node;\r\n};\r\n\r\ntype Node = {\r\n    parent?: Expression\r\n} & (\r\n        Value | Expression\r\n    );\r\n\r\nconst parseList = (data: any): Node => {\r\n    if (typeof data === \"number\") {\r\n        return {\r\n            value: data\r\n        };\r\n    } else {\r\n        const left = parseList(data[0]);\r\n        const right = parseList(data[1]);\r\n        const node: Node = setParents({\r\n            left,\r\n            right\r\n        });\r\n        return node;\r\n    }\r\n};\r\n\r\nconst isValue = (node: Node): node is Value => {\r\n    return (node as Value).value !== undefined;\r\n};\r\n\r\nconst parseLine = (line: string): Node => {\r\n    return parseList(JSON.parse(line));\r\n};\r\n\r\nconst setParents = (node: Node): Node => {\r\n    if (!isValue(node)) {\r\n        node.left.parent = node;\r\n        node.right.parent = node;\r\n    }\r\n    return node;\r\n};\r\n\r\nconst add = (a: Node, b: Node): Node => {\r\n    const res = setParents({\r\n        left: a,\r\n        right: b\r\n    });\r\n    reduce(res);\r\n    return res;\r\n};\r\n\r\nconst addTo = (\r\n    node: Expression,\r\n    upExtractor: (node: Expression) => Node,\r\n    downExtractor: (node: Expression) => Node\r\n) => {\r\n    let currentNode: Node = node;\r\n    let found = false;\r\n    while (true) {\r\n        const parent: Expression | undefined = currentNode.parent;\r\n        if (!parent) {\r\n            break;\r\n        }\r\n        const check = upExtractor(parent);\r\n        if (check !== currentNode) {\r\n            found = true;\r\n            currentNode = check;\r\n            break;\r\n        }\r\n        currentNode = parent;\r\n    }\r\n    if (found) {\r\n        // found a parent\r\n        while (!isValue(currentNode)) {\r\n            currentNode = downExtractor(currentNode);\r\n        }\r\n        const toAdd = upExtractor(node);\r\n        if (!isValue(toAdd)) {\r\n            throw new Error(\"Cannot explode a non leaf expression\");\r\n        }\r\n        currentNode.value += toAdd.value;\r\n    }\r\n};\r\n\r\nconst findExplode = (node: Node, depth = 0): Expression | undefined => {\r\n    if (isValue(node)) {\r\n        return undefined;\r\n    }\r\n    if (depth === 4) {\r\n        return node;\r\n    }\r\n    return findExplode(node.left, depth + 1) || findExplode(node.right, depth + 1);\r\n};\r\n\r\nconst findSplit = (node: Node): Value | undefined => {\r\n    if (isValue(node)) {\r\n        if (node.value >= 10) {\r\n            return node;\r\n        }\r\n        return undefined;\r\n    }\r\n    return findSplit(node.left) || findSplit(node.right);\r\n};\r\n\r\nconst explode = (node: Expression) => {\r\n    addTo(node, (n) => n.left, (n) => n.right);\r\n    addTo(node, (n) => n.right, (n) => n.left);\r\n\r\n    const parent = node.parent!;\r\n    const newNode: Value = {\r\n        value: 0,\r\n        parent\r\n    };\r\n    if (parent.left === node) {\r\n        parent.left = newNode;\r\n    } else {\r\n        parent.right = newNode;\r\n    }\r\n\r\n};\r\n\r\nconst split = (node: Value) => {\r\n    const newNode: Node = setParents({\r\n        left: {\r\n            value: Math.floor(node.value / 2)\r\n        },\r\n        right: {\r\n            value: Math.ceil(node.value / 2)\r\n        }\r\n    });\r\n    const parent = node.parent;\r\n    if (!parent) {\r\n        throw new Error(\"Cannot split without parent\");\r\n    }\r\n    newNode.parent = parent;\r\n    if (parent.left === node) {\r\n        parent.left = newNode;\r\n    } else {\r\n        parent.right = newNode;\r\n    }\r\n};\r\n\r\nconst checkMissingParent = (node: Node): boolean => {\r\n    if (isValue(node)) {\r\n        return false;\r\n    }\r\n    if (node.left.parent !== node || node.right.parent !== node) {\r\n        return true;\r\n    }\r\n    return checkMissingParent(node.left) || checkMissingParent(node.right);\r\n};\r\n\r\nconst reduce = (node: Node) => {\r\n    let didSomething = false;\r\n    do {\r\n        didSomething = false;\r\n        const toExplode = findExplode(node);\r\n        if (toExplode) {\r\n            explode(toExplode);\r\n            didSomething = true;\r\n            continue;\r\n        }\r\n        const toSplit = findSplit(node);\r\n        if (toSplit) {\r\n            split(toSplit);\r\n            didSomething = true;\r\n            continue;\r\n        }\r\n\r\n    } while (didSomething);\r\n};\r\n\r\nconst magnitude = (node: Node): number => {\r\n    if (isValue(node)) {\r\n        return node.value;\r\n    }\r\n    return magnitude(node.left) * 3 + magnitude(node.right) * 2;\r\n};\r\n\r\nexport const snailfish = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n\r\n        let current = parseLine(lines[0]);\r\n        for (const line of lines.slice(1)) {\r\n            current = add(current, parseLine(line));\r\n        }\r\n\r\n        await resultOutputCallback(magnitude(current));\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n\r\n        let biggest = Number.NEGATIVE_INFINITY;\r\n\r\n        for (const a of lines) {\r\n            for (const b of lines) {\r\n                if (a !== b) {\r\n                    biggest = Math.max(biggest, magnitude(add(parseLine(a), parseLine(b))));\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        await resultOutputCallback(biggest);\r\n    },\r\n    {\r\n        key: \"snailfish\",\r\n        title: \"Snailfish\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);\r\n","import { NotImplementedError } from \"../../../../support/error\";\r\nimport { Coordinate3d, CoordinateSet, manhattanDistance, sumCoordinate } from \"../../../../support/geometry\";\r\nimport { permutationGenerator, subsetGenerator } from \"../../../../support/sequences\";\r\nimport { entryForFile } from \"../../../entry\";\r\n\r\nconst xRotate = (c: Coordinate3d): Coordinate3d => ({\r\n    x: c.x,\r\n    z: -c.y,\r\n    y: c.z\r\n});\r\n\r\nconst yRotate = (c: Coordinate3d): Coordinate3d => ({\r\n    x: c.z,\r\n    y: c.y,\r\n    z: -c.x\r\n});\r\n\r\nconst zRotate = (c: Coordinate3d): Coordinate3d => ({\r\n    x: c.y,\r\n    y: -c.x,\r\n    z: c.z\r\n});\r\n\r\ntype Mapping = (points: Coordinate3d) => Coordinate3d;\r\n\r\nconst combine = (...mappings: Mapping[]): Mapping => {\r\n    return (x) => {\r\n        let c = x;\r\n        for (const m of mappings) {\r\n            c = m(c);\r\n        }\r\n        return c;\r\n    };\r\n};\r\n\r\nfunction *allMappings(): Iterable<Mapping> {\r\n    for (const order of permutationGenerator([0, 1, 2])) {\r\n        for (const subset of subsetGenerator([0, 1, 2], 0)) {\r\n            yield (c: Coordinate3d) => {\r\n                    const raw = [c.x, c.y, c.z];\r\n                    const ordered = order.map((k) => raw[k]);\r\n                    const inverted = ordered.map((k, i) => subset.includes(i) ? -k : k);\r\n                    return {\r\n                        x: inverted[0],\r\n                        y: inverted[1],\r\n                        z: inverted[2]\r\n                    } as Coordinate3d;\r\n            };\r\n        }\r\n        // first = false;\r\n    }\r\n}\r\n\r\nfunction *brutePermutations(points: Coordinate3d[]): Iterable<{points: Coordinate3d[], mapping: Mapping}> {\r\n    for (const mapping of allMappings()) {\r\n        yield {\r\n            points: points.map(mapping),\r\n            mapping\r\n        };\r\n    }\r\n}\r\n\r\nfunction* allPermutations(points: Coordinate3d[]): Iterable<{ points: Coordinate3d[], mapping: Mapping }> {\r\n    const actions: Mapping[] = [\r\n    ];\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n        actions.push(xRotate);\r\n        actions.push(xRotate);\r\n        actions.push(xRotate);\r\n        actions.push(combine(xRotate, yRotate));\r\n    }\r\n\r\n    actions.push(zRotate);\r\n    actions.push(xRotate);\r\n    actions.push(xRotate);\r\n    actions.push(xRotate);\r\n    actions.push(xRotate, zRotate, zRotate);\r\n    actions.push(xRotate);\r\n    actions.push(xRotate);\r\n    actions.push(xRotate);\r\n\r\n    let currentAction: Mapping = (p) => p;\r\n\r\n    for (const action of actions) {\r\n        points = points.map(action);\r\n        currentAction = combine(currentAction, action);\r\n        yield { points, mapping: currentAction };\r\n    }\r\n}\r\n\r\n\r\nconst parseLines = (lines: string[]): Coordinate3d[][] => {\r\n    const result: Coordinate3d[][] = [];\r\n    let current: Coordinate3d[] = [];\r\n    for (let line of lines) {\r\n        line = line.trim();\r\n        if (line.length === 0) {\r\n            result.push(current);\r\n            current = [];\r\n        } else if (line.includes(\",\")) {\r\n            const [x, y, z] = line.split(\",\").map((e) => parseInt(e, 10));\r\n            current.push({ x, y, z });\r\n        }\r\n    }\r\n    if (current.length > 0) {\r\n        result.push(current);\r\n    }\r\n    return result;\r\n};\r\n\r\nconst serializePoint = (p: Coordinate3d) => {\r\n    return `${p.x},${p.y},${p.z}`;\r\n};\r\n\r\nconst deserializePoint = (s: string): Coordinate3d => {\r\n    const [x, y, z] = s.split(\",\").map((e) => parseInt(e, 10));\r\n    return { x, y, z };\r\n};\r\n\r\nconst serialize: (p: Coordinate3d[] | Coordinate3d) => string = (p) => {\r\n    if ((p as Coordinate3d).x !== undefined) {\r\n        return serializePoint(p as Coordinate3d);\r\n    } else {\r\n        const ps = (p as Coordinate3d[]).map(serializePoint);\r\n        return ps.join(\"|\");\r\n    }\r\n};\r\n\r\nexport const beaconScanner = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const input = parseLines(lines);\r\n        const absolutePoints = new Set<string>(input[0].map((p) => serialize(p)));\r\n        const toMatch = input.slice(1);\r\n        while (toMatch.length > 0) {\r\n            let found = false;\r\n            await outputCallback(\"Still to match: \" + toMatch.length);\r\n            for (const candidate of toMatch) {\r\n                for (const perm of brutePermutations(candidate)) {\r\n                    const candidatePoints = perm.points;\r\n                    for (const candidateBeacon of candidatePoints) {\r\n                        for (const rawBeacon of absolutePoints) {\r\n                            const existingBeacon = deserializePoint(rawBeacon);\r\n                            const delta = {\r\n                                x: -candidateBeacon.x + existingBeacon.x,\r\n                                y: -candidateBeacon.y + existingBeacon.y,\r\n                                z: -candidateBeacon.z + existingBeacon.z\r\n                            };\r\n                            const translated = candidatePoints.map((p) => sumCoordinate(p, delta));\r\n                            const serialized = translated.map((p) => serializePoint(p));\r\n                            const overlap = serialized.filter((p) => absolutePoints.has(p)).length;\r\n                            if (overlap >= 12) {\r\n                                serialized.forEach((t) => absolutePoints.add(t));\r\n                                found = true;\r\n                            }\r\n                            if (found) {\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (found) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (found) {\r\n                        break;\r\n                    }\r\n                }\r\n                if (found) {\r\n                    const index = toMatch.indexOf(candidate);\r\n                    toMatch.splice(index, 1);\r\n                    break;\r\n                }\r\n            }\r\n            if (!found) {\r\n                throw new Error(\"Not found an overlap\");\r\n            }\r\n        }\r\n\r\n        await resultOutputCallback(absolutePoints.size);\r\n\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const input = parseLines(lines);\r\n        const absolutePoints = new Set<string>(input[0].map((p) => serialize(p)));\r\n        const toMatch = input.slice(1);\r\n        const scannerPositions: Coordinate3d[] = [{x: 0, y: 0, z: 0}];\r\n        while (toMatch.length > 0) {\r\n            let found = false;\r\n            await outputCallback(\"Still to match: \" + toMatch.length);\r\n            for (const candidate of toMatch) {\r\n                for (const perm of brutePermutations(candidate)) {\r\n                    const candidatePoints = perm.points;\r\n                    for (const candidateBeacon of candidatePoints) {\r\n                        for (const rawBeacon of absolutePoints) {\r\n                            const existingBeacon = deserializePoint(rawBeacon);\r\n                            const delta = {\r\n                                x: -candidateBeacon.x + existingBeacon.x,\r\n                                y: -candidateBeacon.y + existingBeacon.y,\r\n                                z: -candidateBeacon.z + existingBeacon.z\r\n                            };\r\n                            const translated = candidatePoints.map((p) => sumCoordinate(p, delta));\r\n                            const serialized = translated.map((p) => serializePoint(p));\r\n                            const overlap = serialized.filter((p) => absolutePoints.has(p)).length;\r\n                            if (overlap >= 12) {\r\n                                serialized.forEach((t) => absolutePoints.add(t));\r\n                                found = true;\r\n                            }\r\n                            if (found) {\r\n                                scannerPositions.push(delta);\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (found) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (found) {\r\n                        break;\r\n                    }\r\n                }\r\n                if (found) {\r\n                    const index = toMatch.indexOf(candidate);\r\n                    toMatch.splice(index, 1);\r\n                    break;\r\n                }\r\n            }\r\n            if (!found) {\r\n                throw new Error(\"Not found an overlap\");\r\n            }\r\n        }\r\n\r\n        let bestDistance = Number.NEGATIVE_INFINITY;\r\n\r\n        await outputCallback(scannerPositions);\r\n\r\n        for (const a of scannerPositions) {\r\n            for (const b of scannerPositions) {\r\n                if (manhattanDistance(a, b) > 0) {\r\n                    bestDistance = Math.max(bestDistance, manhattanDistance(a, b));\r\n                }\r\n            }\r\n        }\r\n\r\n        await resultOutputCallback(bestDistance);\r\n    },\r\n    {\r\n        key: \"beacon-scanner\",\r\n        title: \"Beacon Scanner\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);\r\n","import { UnknownSizeField } from \"../../../../support/field\";\r\nimport { Coordinate, scalarCoordinates, sumCoordinate } from \"../../../../support/geometry\";\r\nimport { Drawable, Pause, ScreenBuilder, ScreenPrinter } from \"../../../entry\";\r\n\r\ntype Cell = \"#\" | \".\";\r\n\r\nexport interface ITrenchMapVisualizer {\r\n    setup(baseSize: Coordinate, iterations: number): Promise<void>;\r\n    show(points: UnknownSizeField<Cell>, empty: Cell): Promise<void>;\r\n}\r\n\r\nexport const buildVisualizer = (screenBuilder: ScreenBuilder | undefined, pause: Pause) => {\r\n    if (screenBuilder) {\r\n        return new RealVisualizer(screenBuilder, pause);\r\n    } else {\r\n        return new DummyVisualizer();\r\n    }\r\n};\r\n\r\nclass RealVisualizer implements ITrenchMapVisualizer {\r\n    private get marginCell() {\r\n        return {x: this.margin, y: this.margin};\r\n    }\r\n    private printer!: ScreenPrinter;\r\n\r\n    private cellSize = 2;\r\n    private delta!: Coordinate;\r\n    private margin!: number;\r\n    constructor(\r\n        private readonly screenBuilder: ScreenBuilder,\r\n        private readonly pause: Pause\r\n    ) {\r\n    }\r\n    public async setup(baseSize: Coordinate, iterations: number): Promise<void> {\r\n        this.margin = iterations;\r\n        const screenSize = this.scale(sumCoordinate(baseSize, scalarCoordinates(this.marginCell, 2)));\r\n        this.printer = await this.screenBuilder.requireScreen(screenSize);\r\n        this.printer.setManualRender();\r\n    }\r\n    public async show(points: UnknownSizeField<Cell>, empty: Cell): Promise<void> {\r\n        const d: Array<Drawable & {type: \"rectangle\"}> = [];\r\n        for (const point of points.getPoints()) {\r\n            d.push({\r\n                c: this.transform(point.c),\r\n                color: point.e === \"#\" ? \"white\" : \"black\",\r\n                id: JSON.stringify(point.c),\r\n                size: {x: this.cellSize, y: this.cellSize},\r\n                type: \"rectangle\",\r\n            });\r\n        }\r\n        this.printer.replace(d);\r\n        this.printer.forceRender();\r\n        await this.pause();\r\n    }\r\n    private scale(c: Coordinate): Coordinate {\r\n        return scalarCoordinates(c, this.cellSize);\r\n    }\r\n\r\n    private transform(c: Coordinate): Coordinate {\r\n        return this.scale(sumCoordinate(c, this.marginCell));\r\n    }\r\n}\r\n\r\nclass DummyVisualizer implements ITrenchMapVisualizer {\r\n    public async setup(baseSize: Coordinate, iterations: number): Promise<void> {\r\n    }\r\n    public async show(points: UnknownSizeField<Cell>, empty: Cell): Promise<void> {\r\n    }\r\n\r\n}\r\n","import { UnknownSizeField } from \"../../../../support/field\";\r\nimport { sumCoordinate } from \"../../../../support/geometry\";\r\nimport { entryForFile } from \"../../../entry\";\r\nimport { buildVisualizer } from \"./visualizer\";\r\n\r\ntype Cell = \"#\" | \".\";\r\n\r\ntype Field = UnknownSizeField<Cell>;\r\n\r\nconst isCell = (s: string): s is Cell => (s === \"#\" || s === \".\");\r\n\r\nconst parseInput = (lines: string[]): { lookup: Cell[], field: Field } => {\r\n    const field = new UnknownSizeField<Cell>();\r\n    const lookup = lines[0].split(\"\") as Cell[];\r\n    for (const c of lookup) {\r\n        if (!isCell(c)) {\r\n            throw new Error(\"Invalid cell in lookup \" + c);\r\n        }\r\n    }\r\n\r\n    const data = lines.slice(2);\r\n    for (let row = 0; row < data.length; row++) {\r\n        for (let col = 0; col < data[row].length; col++) {\r\n            const cell = data[row][col];\r\n            if (!isCell(cell)) {\r\n                throw new Error(\"Invalid cell \" + cell);\r\n            }\r\n            field.set({ x: col, y: row }, cell);\r\n        }\r\n    }\r\n\r\n    return { field, lookup };\r\n};\r\n\r\nexport const trenchMap = entryForFile(\r\n    async ({ lines, isQuickRunning, resultOutputCallback, screen, pause }) => {\r\n        const input = parseInput(lines);\r\n\r\n\r\n        let field = input.field;\r\n        const lookup = input.lookup;\r\n\r\n        const iterations = 2;\r\n\r\n        const vs = buildVisualizer(screen, pause);\r\n        if (!isQuickRunning) {\r\n            const b = field.getBoundaries();\r\n            await vs.setup(b.size, iterations);\r\n        }\r\n\r\n\r\n        let emptyCell: Cell = \".\";\r\n\r\n        for (let i = 0; i < iterations; i++) {\r\n            await vs.show(field, emptyCell);\r\n            ({ field, emptyCell } = iterateField(field, emptyCell, lookup));\r\n        }\r\n        await vs.show(field, emptyCell);\r\n\r\n        const count = countLights(field);\r\n\r\n        await resultOutputCallback(count);\r\n\r\n    },\r\n    async ({ lines, screen, pause, isQuickRunning, resultOutputCallback }) => {\r\n        const input = parseInput(lines);\r\n\r\n\r\n        let field = input.field;\r\n        const lookup = input.lookup;\r\n\r\n        const iterations = 50;\r\n\r\n        const vs = buildVisualizer(screen, pause);\r\n        if (!isQuickRunning) {\r\n            const b = field.getBoundaries();\r\n            await vs.setup(b.size, iterations);\r\n        }\r\n\r\n\r\n        let emptyCell: Cell = \".\";\r\n\r\n        for (let i = 0; i < iterations; i++) {\r\n            await vs.show(field, emptyCell);\r\n            ({ field, emptyCell } = iterateField(field, emptyCell, lookup));\r\n        }\r\n        await vs.show(field, emptyCell);\r\n\r\n        const count = countLights(field);\r\n\r\n        await resultOutputCallback(count);\r\n    },\r\n    {\r\n        key: \"trench-map\",\r\n        title: \"Trench Map\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2,\r\n        suggestedDelay: 10\r\n    }\r\n);\r\nfunction countLights(field: Field): number {\r\n    const result = field.toMatrix();\r\n    let count = 0;\r\n    result.onEveryCellSync((c, e) => {\r\n        if (e === \"#\") {\r\n            count++;\r\n        }\r\n    });\r\n    return count;\r\n}\r\n\r\nfunction iterateField(field: Field, emptyCell: Cell, lookup: Cell[]): { field: Field, emptyCell: Cell } {\r\n    const boundaries = field.getBoundaries();\r\n\r\n    const newField = new UnknownSizeField<Cell>();\r\n\r\n    for (let row = boundaries.topLeft.y - 1; row < boundaries.topLeft.y + boundaries.size.y + 1; row++) {\r\n        for (let col = boundaries.topLeft.x - 1; col < boundaries.topLeft.x + boundaries.size.x + 1; col++) {\r\n            const coordinates = { x: col, y: row };\r\n            const cells: Cell[] = [];\r\n            for (const drow of [-1, 0, 1]) {\r\n                for (const dcol of [-1, 0, 1]) {\r\n                    cells.push(field.get(sumCoordinate(coordinates, { x: dcol, y: drow })) || emptyCell);\r\n                }\r\n            }\r\n            const index = parseInt(cells.map((c) => c === \"#\" ? \"1\" : \"0\").join(\"\"), 2);\r\n            const newCell = lookup[index];\r\n            newField.set({ x: col, y: row }, newCell);\r\n        }\r\n    }\r\n\r\n    field = newField;\r\n    if (emptyCell === \".\") {\r\n        emptyCell = lookup[0];\r\n    } else {\r\n        emptyCell = lookup[parseInt(\"111111111\", 2)];\r\n    }\r\n    return { field, emptyCell };\r\n}\r\n\r\n","import { entryForFile } from \"../../../entry\";\r\n\r\ntype State = {\r\n    a: FullPlayerState,\r\n    b: FullPlayerState,\r\n};\r\n\r\ntype FullPlayerState = PlayerState & { missingRolls: number };\r\n\r\ntype Wins = {\r\n    a: number;\r\n    b: number;\r\n};\r\n\r\ntype Cache = Map<string, Wins>;\r\n\r\nconst serialize = (s: State) => {\r\n    return [\r\n        s.a.score,\r\n        s.b.score,\r\n        s.a.space,\r\n        s.b.space,\r\n        s.a.missingRolls,\r\n        s.b.missingRolls\r\n    ].map((e) => e.toString()).join(\"|\");\r\n};\r\n\r\nconst clone = (s: State, update: (x: State) => void) => {\r\n    const ns = {\r\n        a: { ...s.a },\r\n        b: { ...s.b }\r\n    };\r\n    update(ns);\r\n    return ns;\r\n};\r\n\r\nconst sumWins = (target: Wins, source: Wins): void => {\r\n    target.a += source.a;\r\n    target.b += source.b;\r\n};\r\n\r\nconst findWinning = (s: State, cache: Cache): Wins => {\r\n    if (s.a.score >= 21) {\r\n        return {\r\n            a: 1,\r\n            b: 0\r\n        };\r\n    }\r\n\r\n    if (s.b.score >= 21) {\r\n        return {\r\n            a: 0,\r\n            b: 1\r\n        };\r\n    }\r\n\r\n    const serialized = serialize(s);\r\n    if (cache.has(serialized)) {\r\n        return cache.get(serialized)!;\r\n    }\r\n\r\n    const result: Wins = {\r\n        a: 0,\r\n        b: 0\r\n    };\r\n\r\n    const playerToRoll: keyof State | null =\r\n        s.a.missingRolls > 0 ? \"a\" :\r\n            (s.b.missingRolls > 0 ? \"b\" : null);\r\n\r\n    if (playerToRoll !== null) {\r\n        for (let i = 1; i <= 3; i++) {\r\n            sumWins(result, findWinning(clone(s, (e) => {\r\n                const playerState = e[playerToRoll];\r\n                playerState.missingRolls--;\r\n                playerState.space += i;\r\n                if (playerState.space > 10) {\r\n                    playerState.space -= 10;\r\n                }\r\n                if (playerState.missingRolls === 0) {\r\n                    playerState.score += playerState.space;\r\n                }\r\n            }), cache));\r\n            cache.set(serialized, result);\r\n        }\r\n        return result;\r\n    } else {\r\n        return findWinning(clone(s, (e) => {\r\n            e.a.missingRolls = 3;\r\n            e.b.missingRolls = 3;\r\n        }), cache);\r\n    }\r\n};\r\n\r\ntype PlayerState = {\r\n    score: number;\r\n    space: number;\r\n};\r\n\r\nconst parseInput = (lines: string[]): {\r\n    a: PlayerState,\r\n    b: PlayerState\r\n} => {\r\n    const [aSpace, bSpace] = lines.map((l) => {\r\n        const tk = l.split(\" \");\r\n        return parseInt(tk[tk.length - 1], 10);\r\n    });\r\n    return {\r\n        a: {\r\n            space: aSpace,\r\n            score: 0\r\n        },\r\n        b: {\r\n            space: bSpace,\r\n            score: 0\r\n        }\r\n    };\r\n};\r\n\r\nexport const diracDice = entryForFile(\r\n    async ({ lines, resultOutputCallback }) => {\r\n        const { a, b } = parseInput(lines);\r\n        const state = {\r\n            die: 1,\r\n            rolls: 0\r\n        };\r\n        const playTurn = (player: PlayerState) => {\r\n            for (let i = 0; i < 3; i++) {\r\n                player.space += state.die;\r\n                state.die++;\r\n                if (state.die > 100) {\r\n                    state.die -= 100;\r\n                }\r\n                state.rolls++;\r\n            }\r\n\r\n            player.space = ((player.space - 1) % 10) + 1;\r\n            player.score += player.space;\r\n        };\r\n\r\n        while (true) {\r\n            for (const { player, other } of [{ player: a, other: b }, { player: b, other: a }]) {\r\n                playTurn(player);\r\n                if (player.score >= 1000) {\r\n                    await resultOutputCallback(state.rolls * other.score);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    },\r\n    async ({ lines, resultOutputCallback }) => {\r\n        const { a, b } = parseInput(lines);\r\n        const res = findWinning({\r\n            a: { ...a, missingRolls: 0 },\r\n            b: { ...b, missingRolls: 0 }\r\n        }, new Map<string, Wins>());\r\n\r\n        await resultOutputCallback(Math.max(res.a, res.b));\r\n    },\r\n    {\r\n        key: \"dirac-dice\",\r\n        title: \"Dirac Dice\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);\r\n","import { entryForFile } from \"../../../entry\";\r\n\r\ntype Range = {\r\n    from: number;\r\n    to: number;\r\n};\r\n\r\ntype Cube = {\r\n    x: Range;\r\n    y: Range;\r\n    z: Range;\r\n};\r\n\r\ntype Instruction = {\r\n    action: \"on\" | \"off\";\r\n} & Cube;\r\n\r\nfunction *segments(a: Range, b: Range): Iterable<Range> {\r\n    if ((b.to < a.from || a.to < b.from) ||\r\n    (b.from <= a.from && b.to >= a.to)) {\r\n        // all inside or all outside\r\n        yield a;\r\n        return;\r\n    }\r\n    if (b.from <= a.from) {\r\n        yield {from: a.from, to: b.to};\r\n        yield {from: b.to + 1, to: a.to};\r\n    } else if (b.to >= a.to) {\r\n        yield {from: a.from, to: b.from - 1};\r\n        yield {from: b.from, to: a.to};\r\n    } else {\r\n        // clipper is entirely inside\r\n        yield {from: a.from, to: b.from - 1};\r\n        yield {from: b.from, to: b.to};\r\n        yield {from: b.to + 1, to: a.to};\r\n    }\r\n}\r\n\r\nconst splitCube = (target: Cube, clipper: Cube): Cube[] => {\r\n    const candidateCubes: Cube[] = [];\r\n    for (const x of segments(target.x, clipper.x)) {\r\n        for (const y of segments(target.y, clipper.y)) {\r\n            for (const z of segments(target.z, clipper.z)) {\r\n                candidateCubes.push({ x, y, z });\r\n            }\r\n        }\r\n    }\r\n    return candidateCubes;\r\n};\r\n\r\n\r\nconst isInside = (inner: Cube, outer: Cube): boolean => {\r\n    for (const key of [\"x\", \"y\", \"z\"] as Array<keyof Cube>) {\r\n        if (inner[key].from < outer[key].from || inner[key].to > outer[key].to) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\nconst filterOut = (cubes: Cube[], clipper: Cube): Cube[] => cubes.filter((c) => !isInside(c, clipper));\r\n\r\nconst splitFilter = (target: Cube, clipper: Cube): Cube[] => joinCubes(filterOut(splitCube(target, clipper), clipper));\r\n\r\nconst cubeKeys = [\"x\", \"y\", \"z\"] as Array<keyof Cube>;\r\n\r\nconst tryJoin = (a: Cube, b: Cube): Cube | null => {\r\n    const matching = cubeKeys.filter((k) => a[k].from === b[k].from && a[k].to === b[k].to);\r\n    if (matching.length === 3) {\r\n        return a;\r\n    }\r\n    if (matching.length !== 2) {\r\n        return null;\r\n    }\r\n    const [mismatched] = cubeKeys.filter((k) => !matching.includes(k));\r\n    let first = b;\r\n    let second = a;\r\n    if (a[mismatched].from < b[mismatched].from) {\r\n        first = a;\r\n        second = b;\r\n    }\r\n    if (first[mismatched].to === second[mismatched].from - 1) {\r\n        const cube = {\r\n            x: {from: 0, to: 0},\r\n            y: {from: 0, to: 0},\r\n            z: {from: 0, to: 0},\r\n        };\r\n        for (const k of matching) {\r\n            cube[k] = {...a[k]};\r\n        }\r\n        cube[mismatched] = {\r\n            from: first[mismatched].from,\r\n            to: second[mismatched].to\r\n        };\r\n        return cube;\r\n    }\r\n    return null;\r\n};\r\n\r\nconst joinCubes = (cubes: Cube[]): Cube[] => {\r\n    if (cubes.length === 0) {\r\n        return [];\r\n    }\r\n    let toJoin = [...cubes];\r\n    const joined: Cube[] = [];\r\n\r\n    while (toJoin.length > 0) {\r\n        let current = toJoin.pop()!;\r\n        const matched: Cube[] = [];\r\n        for (const other of toJoin) {\r\n            const joinResult = tryJoin(current, other);\r\n            if (joinResult !== null) {\r\n                matched.push(other);\r\n                current = joinResult;\r\n            }\r\n        }\r\n        toJoin = toJoin.filter((e) => !matched.includes(e));\r\n        joined.push(current);\r\n    }\r\n    return joined;\r\n};\r\n\r\nconst parseInput = (lines: string[]): Instruction[] => {\r\n    const parseRange = (s: string): Range => {\r\n        const [from, to] = s.slice(2).split(\"..\").map((e) => parseInt(e, 10)).sort((a, b) => a - b);\r\n        return { from, to };\r\n    };\r\n    return lines.map((line) => {\r\n        const [action, rest] = line.split(\" \");\r\n        if (action !== \"on\" && action !== \"off\") {\r\n            throw new Error(\"Invalid action \" + action);\r\n        }\r\n        const [x, y, z] = rest.split(\",\").map(parseRange);\r\n        return { action, x, y, z };\r\n    });\r\n};\r\n\r\nconst area = (c: Cube): number => {\r\n    const sides = ([\"x\", \"y\", \"z\"] as Array<keyof Cube>).map((axis) => c[axis].to - c[axis].from + 1);\r\n    return sides.reduce((acc, next) => acc * next, 1);\r\n};\r\n\r\nexport const reactorReboot = entryForFile(\r\n    async ({ lines, resultOutputCallback }) => {\r\n        const instructions = parseInput(lines);\r\n        const baseRange = { from: -50, to: 50 };\r\n        let cubes: Cube[] = [];\r\n        for (const i of instructions) {\r\n            const isOut = cubeKeys.some((key) => i[key].to < baseRange.from || i[key].from > baseRange.to);\r\n            if (isOut) {\r\n                continue;\r\n            }\r\n            cubes = cubes.flatMap((c) => splitFilter(c, i));\r\n            if (i.action === \"on\") {\r\n                cubes.push(i);\r\n            }\r\n\r\n        }\r\n\r\n        const sizes = cubes.map(area);\r\n        await resultOutputCallback(sizes.reduce((acc, next) => acc + next, 0));\r\n    },\r\n    async ({ lines, resultOutputCallback }) => {\r\n        const instructions = parseInput(lines);\r\n        let cubes: Cube[] = [];\r\n        let max = 0;\r\n        for (const i of instructions) {\r\n            cubes = cubes.flatMap((c) => splitFilter(c, i));\r\n            if (i.action === \"on\") {\r\n                cubes.push(i);\r\n            }\r\n\r\n            max = Math.max(cubes.length, max);\r\n\r\n        }\r\n        const sizes = cubes.map(area);\r\n        console.log(max);\r\n        await resultOutputCallback(sizes.reduce((acc, next) => acc + next, 0));\r\n    },\r\n    {\r\n        key: \"reactor-reboot\",\r\n        title: \"Reactor Reboot\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);\r\n","import { State } from \".\";\r\nimport { permutationGenerator } from \"../../../../support/sequences\";\r\nimport { Drawable, Pause, ScreenBuilder, ScreenPrinter } from \"../../../entry\";\r\n\r\nexport interface IAmphipodVisualizer {\r\n    showStates(states: string[]): Promise<void>;\r\n}\r\n\r\nexport const buildVisualizer = (screenBuilder: ScreenBuilder | undefined, pause: Pause) => {\r\n    if (screenBuilder) {\r\n        return new RealVisualizer(screenBuilder, pause);\r\n    } else {\r\n        return new DummyVisualizer();\r\n    }\r\n};\r\n\r\nclass RealVisualizer implements IAmphipodVisualizer {\r\n    constructor(\r\n        private readonly screenBuilder: ScreenBuilder,\r\n        private readonly pause: Pause\r\n    ) {\r\n    }\r\n    public async showStates(states: string[]): Promise<void> {\r\n        const matching: {[key: string]: string} = {\r\n            \"#\": \"black\",\r\n            // \".\": \"white\",\r\n            \"A\": \"yellow\",\r\n            \"B\": \"green\",\r\n            \"C\": \"red\",\r\n            \"D\": \"blue\"\r\n        };\r\n\r\n        const cellSize = 20;\r\n        const cellPadding = 1;\r\n\r\n        const grids = states.map((state) => state.split(\"\\n\"));\r\n\r\n        const height = grids[0].length;\r\n        const width = Math.max(...grids[0].map((s) => s.length));\r\n\r\n        const printer = await this.screenBuilder.requireScreen({x: width * cellSize, y: height * cellSize});\r\n\r\n        printer.setManualRender();\r\n\r\n        for (const state of states) {\r\n            const grid = state.split(\"\\n\");\r\n            const drawables: Drawable[] = [];\r\n            for (let row = 0; row < grid.length; row++) {\r\n                for (let col = 0; col < grid[row].length; col++) {\r\n                    const color = matching[grid[row][col]];\r\n                    if (!color) {\r\n                        continue;\r\n                    }\r\n                    drawables.push({\r\n                        type: \"rectangle\",\r\n                        c: {\r\n                            x: cellSize * col + cellPadding,\r\n                            y: cellSize * row + cellPadding\r\n                        },\r\n                        color,\r\n                        id: JSON.stringify({row, col}),\r\n                        size: {x: cellSize - cellPadding, y: cellSize - cellPadding},\r\n                    });\r\n                }\r\n            }\r\n            printer.replace(drawables);\r\n            printer.forceRender();\r\n            await this.pause();\r\n        }\r\n    }\r\n}\r\n\r\nclass DummyVisualizer implements IAmphipodVisualizer {\r\n    public async showStates(states: string[]): Promise<void> {\r\n    }\r\n\r\n}\r\n","import BinaryHeap from \"priorityqueue/lib/cjs\";\r\nimport { Coordinate, manhattanDistance, serialization } from \"../../../../support/geometry\";\r\nimport { entryForFile } from \"../../../entry\";\r\nimport { buildVisualizer } from \"./visualizer\";\r\nimport { exampleInput } from \"./example\";\r\n\r\ntype Amphi = \"A\" | \"B\" | \"C\" | \"D\";\r\n\r\ntype Room = 3 | 5 | 7 | 9;\r\n\r\nconst rooms: Room[] = [3, 5, 7, 9];\r\n\r\ntype AmphiState = {\r\n    amphiType: Amphi;\r\n    position: Coordinate;\r\n    destination: Room;\r\n    // hasLeftRoom: boolean;\r\n    finished: boolean;\r\n    id: number;\r\n};\r\n\r\nexport type State = {\r\n    amphis: AmphiState[];\r\n    cost: number;\r\n    father?: State;\r\n    // grid: string[][];\r\n};\r\n\r\nconst parseInput = (lines: string[], depth: number): State => {\r\n    const amphis: AmphiState[] = [];\r\n    let i = 0;\r\n    for (let dy = 0; dy < depth; dy++) {\r\n        const y = 2 + dy;\r\n        for (const x of [3, 5, 7, 9]) {\r\n            const amphiType = lines[y][x];\r\n            if (![\"A\", \"B\", \"C\", \"D\"].includes(amphiType)) {\r\n                throw new Error(\"Invalid input\");\r\n            }\r\n            amphis.push({\r\n                amphiType: amphiType as Amphi,\r\n                position: { x, y },\r\n                destination: ([3, 5, 7, 9] as Room[])[[\"A\", \"B\", \"C\", \"D\"].indexOf(amphiType)],\r\n                finished: false,\r\n                id: i++\r\n            });\r\n        }\r\n    }\r\n    return {\r\n        amphis,\r\n        cost: 0,\r\n    };\r\n};\r\n\r\nconst serialize = (state: State): string => {\r\n    const items = [\r\n        state.amphis.map((a) => a).sort((a, b) => a.id - b.id).map((a) => ({s: `${a.amphiType}${a.finished}${a.position.x}~${a.position.y}`, a})).map((e) => e.s)\r\n    ];\r\n    return items.join(\"|\");\r\n};\r\n\r\nconst typeCost = (amphi: Amphi): number => {\r\n    switch (amphi) {\r\n        case \"A\": return 1;\r\n        case \"B\": return 10;\r\n        case \"C\": return 100;\r\n        case \"D\": return 1000;\r\n    }\r\n};\r\n\r\ntype ReachResult = {c: Coordinate, cost: number; };\r\n\r\nconst canReach = (amphi: AmphiState, state: State, depth: number): ReachResult[] => {\r\n    const isEmpty = (pos: Coordinate): boolean => {\r\n        return state.amphis.filter((a) => a !== amphi && manhattanDistance(pos, a.position) === 0).length === 0;\r\n    };\r\n    if (amphi.finished) {\r\n        return [];\r\n    }\r\n    if (rooms.some((r) => r === amphi.position.x)) {\r\n        const others = state.amphis.filter(\r\n            (a) => a !== amphi &&\r\n                   a.position.x === amphi.position.x &&\r\n                   a.position.y < amphi.position.y\r\n        );\r\n        if (others.length > 0) {\r\n            return [];\r\n        }\r\n        const steps = amphi.position.y - 1;\r\n        const result: ReachResult[] = [];\r\n        for (const dir of [-1, 1]) {\r\n            let current = amphi.position.x;\r\n            while (current + dir > 0 && current + dir < 12) {\r\n                current += dir;\r\n                if (!isEmpty({x: current, y: 1})) {\r\n                    break;\r\n                }\r\n                if (!rooms.some((r) => r === current)) {\r\n                    result.push({c: {x: current, y: 1}, cost: steps + Math.abs(amphi.position.x - current)});\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    } else {\r\n        const result: ReachResult[] = [];\r\n        for (const dir of [-1, 1]) {\r\n            let current = amphi.position.x;\r\n            while (current + dir > 0 && current + dir < 12) {\r\n                current += dir;\r\n                if (!isEmpty({x: current, y: 1})) {\r\n                    break;\r\n                }\r\n                if (rooms.some((r) => r === current)) {\r\n                    const matching = state.amphis.filter((a) => a !== amphi && a.position.x === current);\r\n                    if (\r\n                        matching.every((a) => a.amphiType === amphi.amphiType) &&\r\n                        (amphi.destination === null || amphi.destination === current)\r\n                    ) {\r\n                        const lastEmpty = 1 + depth - matching.length;\r\n                        result.push({\r\n                            c: {x: current, y: lastEmpty},\r\n                            cost: Math.abs(current - amphi.position.x) + lastEmpty - 1\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n};\r\n\r\nconst printGrid = (currentResult: State, isSecond: boolean): string => {\r\n\r\n            const grid = (isSecond ?\r\n`#############\r\n#...........#\r\n###.#.#.#.###\r\n  #.#.#.#.#\r\n  #.#.#.#.#\r\n  #.#.#.#.#\r\n  #########  ` :\r\n`#############\r\n#...........#\r\n###.#.#.#.###\r\n  #.#.#.#.#\r\n  #########  `).split(\"\\n\").map((l) => l.split(\"\"));\r\n            currentResult.amphis.forEach((a) => grid[a.position.y][a.position.x] = a.amphiType);\r\n            return grid.map((l) => l.join(\"\")).join(\"\\n\");\r\n};\r\n\r\n// const logHistory = async (endState: State, outputCallback: (s: string) => Promise<void>) => {\r\n//     if (endState.father !== undefined) {\r\n//         logHistory(endState.father, outputCallback);\r\n//     }\r\n//     const out = printGrid(endState);\r\n//     await outputCallback(out);\r\n// }\r\n\r\nconst stateList = (endState: State): State[] => {\r\n    if (endState.father === undefined) {\r\n        return [endState];\r\n    }\r\n    const res = stateList(endState.father);\r\n    res.push(endState);\r\n    return res;\r\n};\r\n\r\nexport const amphipod = entryForFile(\r\n    async ({ lines, screen, pause, resultOutputCallback }) => {\r\n        const baseState = parseInput(lines, 2);\r\n        const visited = new Set<string>();\r\n        const queue = new BinaryHeap<State>({ comparator: (a, b) => b.cost - a.cost });\r\n        queue.push(baseState);\r\n\r\n        const vs = buildVisualizer(screen, pause);\r\n\r\n\r\n        while (!queue.isEmpty()) {\r\n            const current = queue.pop()!;\r\n            const s = serialize(current);\r\n            if (visited.has(s))  {\r\n                continue;\r\n            }\r\n            visited.add(s);\r\n            if (current.amphis.every((a) => a.finished)) {\r\n                const states = stateList(current);\r\n                await vs.showStates(states.map((e) => printGrid(e, false)));\r\n                await resultOutputCallback(current.cost);\r\n                return;\r\n            }\r\n\r\n            for (const amphi of current.amphis) {\r\n                if (amphi.finished) {\r\n                    continue;\r\n                }\r\n                const destinations = canReach(amphi, current, 2);\r\n                for (const destination of destinations) {\r\n                    const combinedState = combineStates(destination, current, amphi);\r\n                    combinedState.father = current;\r\n                    queue.push(combinedState);\r\n                }\r\n            }\r\n        }\r\n\r\n    },\r\n    async ({ lines, screen, pause, resultOutputCallback }) => {\r\n        lines.splice(3, 0, \"  #D#C#B#A#  \", \"  #D#B#A#C#  \");\r\n        const baseState = parseInput(lines, 4);\r\n        const visited = new Set<string>();\r\n        const queue = new BinaryHeap<State>({ comparator: (a, b) => b.cost - a.cost });\r\n        queue.push(baseState);\r\n\r\n        const vs = buildVisualizer(screen, pause);\r\n\r\n        while (!queue.isEmpty()) {\r\n            const current = queue.pop()!;\r\n            const s = serialize(current);\r\n            if (visited.has(s))  {\r\n                continue;\r\n            }\r\n            visited.add(s);\r\n            if (current.amphis.every((a) => a.finished)) {\r\n                const states = stateList(current);\r\n                await vs.showStates(states.map((e) => printGrid(e, true)));\r\n                await resultOutputCallback(current.cost);\r\n                return;\r\n            }\r\n\r\n            for (const amphi of current.amphis) {\r\n                if (amphi.finished) {\r\n                    continue;\r\n                }\r\n                const destinations = canReach(amphi, current, 4);\r\n                for (const destination of destinations) {\r\n                    const combinedState = combineStates(destination, current, amphi);\r\n                    combinedState.father = current;\r\n                    queue.push(combinedState);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    {\r\n        key: \"amphipod\",\r\n        title: \"Amphipod\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        suggestedDelay: 300,\r\n        exampleInput: require(\"./example\").exampleInput\r\n    }\r\n);\r\n\r\nfunction combineStates(destination: ReachResult, current: State, amphi: AmphiState): State {\r\n    const isFinished = rooms.some((r) => r === destination.c.x);\r\n    const combinedState = {\r\n        amphis: current.amphis.map((a) => {\r\n            if (a !== amphi) {\r\n                if (isFinished && a.amphiType === amphi.amphiType) {\r\n                    const res = {...a};\r\n                    if (a.position.x === destination.c.x) {\r\n                        res.finished = true;\r\n                    }\r\n                    res.destination = a.destination;\r\n                    return res;\r\n                }\r\n                return a;\r\n            }\r\n            return {\r\n                ...amphi,\r\n                finished: isFinished,\r\n                position: destination.c,\r\n            };\r\n        }),\r\n        cost: current.cost + typeCost(amphi.amphiType) * destination.cost\r\n    };\r\n    return combinedState;\r\n}\r\n\r\n","import { entryForFile } from \"../../../entry\";\r\n\r\ntype AluState = {\r\n    w: number;\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n};\r\n\r\ntype Register = keyof AluState & (\"w\" | \"x\" | \"y\" | \"z\");\r\n\r\nconst isRegister = (s: string | (Register | number)): s is Register => {\r\n    return [\"w\", \"x\", \"y\", \"z\"].includes(s as string);\r\n};\r\n\r\nconst asNumber = (s: string): number | null => {\r\n    const n = parseInt(s, 10);\r\n    if (Number.isNaN(n)) {\r\n        return null;\r\n    }\r\n    if (n.toString() !== s) {\r\n        return null;\r\n    }\r\n    return n;\r\n};\r\n\r\ntype BaseInstruction = {\r\n    a: Register\r\n};\r\n\r\ntype SingleInstruction = BaseInstruction & {\r\n    type: \"inp\",\r\n    b?: undefined\r\n};\r\n\r\ntype DoubleInstruction = BaseInstruction & {\r\n    b: Register | number\r\n} & ({\r\n    type: \"add\"\r\n} | {\r\n    type: \"mul\"\r\n} | {\r\n    type: \"div\"\r\n} | {\r\n    type: \"mod\"\r\n} | {\r\n    type: \"eql\"\r\n});\r\n\r\ntype Instruction = SingleInstruction | DoubleInstruction;\r\n\r\nconst parse = (lines: string[]): Instruction[] => {\r\n    return lines.map((line: string): Instruction => {\r\n        const tokens = line.split(\" \");\r\n        const type = tokens[0];\r\n        if (type !== \"inp\" && type !== \"mul\" && type !== \"div\" && type !== \"mod\" && type !== \"eql\" && type !== \"add\") {\r\n            throw new Error(\"Invalid instruction \" + type);\r\n        }\r\n        const target = tokens[1];\r\n        if (target !== \"w\" && target !== \"x\" && target !== \"y\" && target !== \"z\") {\r\n            throw new Error(\"Invalid target \" + target);\r\n        }\r\n        if (type === \"inp\") {\r\n            return {\r\n                type,\r\n                a: target\r\n            };\r\n        } else {\r\n            const b = isRegister(tokens[2]) ? tokens[2] : asNumber(tokens[2]);\r\n            if (b === null) {\r\n                throw new Error(\"Invalid b \" + tokens[2]);\r\n            }\r\n            return {\r\n                type,\r\n                a: target,\r\n                b\r\n            };\r\n        }\r\n    });\r\n};\r\n\r\nconst translate = (instructions: Instruction[]): string[] => {\r\n    let i = 0;\r\n    const certainZero = new Set<Register>();\r\n    certainZero.add(\"w\");\r\n    certainZero.add(\"x\");\r\n    certainZero.add(\"y\");\r\n    certainZero.add(\"z\");\r\n    return instructions.map((instr: Instruction): string | null => {\r\n        const isBZero = instr.type !== \"inp\" && ((isRegister(instr.b) && certainZero.has(instr.b)) || instr.b === 0);\r\n        switch (instr.type) {\r\n            case \"inp\":\r\n                certainZero.delete(instr.a);\r\n                return `${instr.a} = MONAD[${i++}];`;\r\n            case \"div\":\r\n                if (certainZero.has(instr.a)) {\r\n                    return null;\r\n                }\r\n                return `${instr.a} = Math.trunc(${instr.a}/${instr.b});`;\r\n            case \"eql\":\r\n                certainZero.delete(instr.a);\r\n                return `${instr.a} = (${instr.a} === ${instr.b} ? 1 : 0);`;\r\n            case \"mod\":\r\n                if (certainZero.has(instr.a)) {\r\n                    return null;\r\n                }\r\n                return `${instr.a} %= ${instr.b};`;\r\n            case \"mul\":\r\n                if (certainZero.has(instr.a)) {\r\n                    return null;\r\n                }\r\n                if (isBZero) {\r\n                    certainZero.add(instr.a);\r\n                    return `${instr.a} = 0;`;\r\n                } else {\r\n                    return `${instr.a} *= ${instr.b};`;\r\n                }\r\n            case \"add\":\r\n                if (certainZero.has(instr.a)) {\r\n                    if (!isBZero) {\r\n                        certainZero.delete(instr.a);\r\n                    }\r\n                    return `${instr.a} = ${instr.b}`;\r\n                } else {\r\n                    if (!isBZero) {\r\n                        certainZero.delete(instr.a);\r\n                    }\r\n                    return `${instr.a} += ${instr.b};`;\r\n                }\r\n        }\r\n    }).filter((s) => s !== null).map((s) => s as string);\r\n};\r\n\r\nexport const arithmeticLogicUnit = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const instructions = parse(lines);\r\n        const js = translate(instructions);\r\n        console.log(instructions.length / 18);\r\n        for (let j = 0; j < 18; j++) {\r\n            const matching: string[] = [];\r\n            for (let i = 0; i < 14; i++) {\r\n                matching.push(lines[j + i * 18]);\r\n            }\r\n            console.log(matching);\r\n        }\r\n        // const MONAD = [];\r\n        // for (let i = 0; i < 14; i++) {\r\n        //     MONAD.push(1);\r\n        // }\r\n        // console.log(`const MONAD = ${JSON.stringify(MONAD)};`);\r\n        // for (const reg of [\"x\", \"y\", \"z\", \"w\"]) {\r\n        //     console.log(`let ${reg} = 0;`);\r\n        // }\r\n        // js.forEach((l) => console.log(l));\r\n        // console.log(`console.log(z});`);\r\n\r\n        // console.log(\"---\");\r\n        // js.filter((l) => l.startsWith(\"z\")).forEach((l) => console.log(l));\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        await resultOutputCallback(\"N/A\");\r\n    },\r\n    {\r\n        key: \"arithmetic-logic-unit\",\r\n        title: \"Arithmetic Logic Unit\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);\r\n","export class NotImplementedError extends Error {\r\n\r\n}\r\n","import { Cell } from \".\";\r\nimport { Coordinate, diffCoordinate, scalarCoordinates, sumCoordinate } from \"../../../../support/geometry\";\r\nimport { FixedSizeMatrix } from \"../../../../support/matrix\";\r\nimport { Drawable, MediaQuery, Pause, ScreenBuilder, ScreenPrinter } from \"../../../entry\";\r\nimport { deepSea, seaBackground } from \"../support/submarine\";\r\n\r\nexport interface ISeaCucumberVisualizer {\r\n    setup(size: Coordinate): Promise<void>;\r\n    show(matrix: FixedSizeMatrix<Cell>): Promise<void>;\r\n}\r\n\r\nexport const buildVisualizer = (screenBuilder: ScreenBuilder | undefined, pause: Pause, mediaQuery: MediaQuery) => {\r\n    if (screenBuilder) {\r\n        return new RealVisualizer(screenBuilder, pause, mediaQuery);\r\n    } else {\r\n        return new DummyVisualizer();\r\n    }\r\n};\r\n\r\nclass RealVisualizer implements ISeaCucumberVisualizer {\r\n    private printer!: ScreenPrinter;\r\n    private drawables?: FixedSizeMatrix<Drawable>;\r\n    constructor(\r\n        private readonly screenBuilder: ScreenBuilder,\r\n        private readonly pause: Pause,\r\n        private readonly mediaQuery: MediaQuery\r\n    ) {\r\n    }\r\n    public async setup(size: Coordinate): Promise<void> {\r\n        const cellSize = this.mediaQuery.isMobile() ? 2 : 5;\r\n        const cellPadding = this.mediaQuery.isMobile() ? 0 : 1;\r\n        this.printer = await this.screenBuilder.requireScreen(scalarCoordinates(size, cellSize));\r\n        // this.printer.setManualRender();\r\n        // this.printer.setManualInvalidate();\r\n        this.drawables = new FixedSizeMatrix<Drawable>(size);\r\n        for (let x = 0; x < size.x; x++) {\r\n            for (let y = 0; y < size.y; y++) {\r\n                const d: Drawable = {\r\n                    type: \"rectangle\",\r\n                    c: sumCoordinate(scalarCoordinates({x, y}, cellSize), {x: cellPadding, y: cellPadding}),\r\n                    color: \"white\",\r\n                    id: JSON.stringify({x, y}),\r\n                    size: {\r\n                        x: cellSize - cellPadding,\r\n                        y: cellSize - cellPadding\r\n                    }\r\n                };\r\n                this.drawables.set({x, y}, d);\r\n                this.printer.add(d);\r\n            }\r\n        }\r\n    }\r\n    public async show(matrix: FixedSizeMatrix<Cell>): Promise<void> {\r\n        matrix.onEveryCellSyncUnsafe((c, e) => {\r\n            const color = e === \".\" ? deepSea : (e === \">\" ? \"#fae520\" : \"teal\");\r\n            if (!this.drawables) {\r\n                throw new Error(\"Setup not called\");\r\n            }\r\n            const drawable = this.drawables.getUnsafe(c);\r\n            // this.printer.invalidate(drawable);\r\n            drawable.color = color;\r\n        });\r\n        // this.printer.forceRender();\r\n        await this.pause();\r\n    }\r\n}\r\n\r\nclass DummyVisualizer implements ISeaCucumberVisualizer {\r\n    public async setup(size: Coordinate): Promise<void> {\r\n    }\r\n    public async show(matrix: FixedSizeMatrix<Cell>): Promise<void> {\r\n    }\r\n\r\n}\r\n","import { NotImplementedError } from \"../../../../support/error\";\r\nimport { directions, sumCoordinate } from \"../../../../support/geometry\";\r\nimport { FixedSizeMatrix } from \"../../../../support/matrix\";\r\nimport { entryForFile } from \"../../../entry\";\r\nimport { seaBackground } from \"../support/submarine\";\r\nimport { buildVisualizer } from \"./visualizer\";\r\n\r\nexport type Cell = \">\" | \"v\" | \".\";\r\n\r\nconst move = (matrix: FixedSizeMatrix<Cell>, cellType: \">\" | \"v\"):\r\n    { result: FixedSizeMatrix<Cell>, hasMoved: boolean } => {\r\n    let hasMoved = false;\r\n    const result = new FixedSizeMatrix<Cell>(matrix.size);\r\n    for (let x = 0; x < matrix.size.x; x++) {\r\n        for (let y = 0; y < matrix.size.y; y++) {\r\n            const current = matrix.getUnsafe({ x, y });\r\n            if (current !== cellType) {\r\n                if (result.get({ x, y }) === undefined) {\r\n                    result.set({ x, y }, current);\r\n                }\r\n                continue;\r\n            }\r\n            const direction = current === \">\" ? directions.right : directions.down;\r\n            const rawNextC = sumCoordinate({ x, y }, direction);\r\n            const nextC = {\r\n                x: rawNextC.x % matrix.size.x,\r\n                y: rawNextC.y % matrix.size.y\r\n            };\r\n            const destination = matrix.getUnsafe(nextC);\r\n            if (destination === \".\") {\r\n                result.set({ x, y }, \".\");\r\n                result.set(nextC, current);\r\n                hasMoved = true;\r\n            } else {\r\n                result.set({ x, y }, current);\r\n            }\r\n        }\r\n    }\r\n\r\n    return { result, hasMoved };\r\n\r\n};\r\n\r\nexport const seaCucumber = entryForFile(\r\n    async ({ lines, mediaQuery, screen, pause, resultOutputCallback, setAutoStop }) => {\r\n        setAutoStop();\r\n        const vs = buildVisualizer(screen, pause, mediaQuery);\r\n        let matrix = parseInput(lines);\r\n\r\n        await vs.setup(matrix.size);\r\n\r\n        let steps = 0;\r\n\r\n\r\n        while (true) {\r\n            let hasMoved = false;\r\n            for (const cellType of [\">\", \"v\"] as Array<\"v\" | \">\">) {\r\n                const {result: currentResult, hasMoved: currentHasMoved} = move(matrix, cellType);\r\n                hasMoved = hasMoved || currentHasMoved;\r\n                matrix = currentResult;\r\n                await vs.show(matrix);\r\n            }\r\n            steps++;\r\n\r\n            if (!hasMoved) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        await resultOutputCallback(steps);\r\n\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        throw new NotImplementedError();\r\n    },\r\n    {\r\n        key: \"sea-cucumber\",\r\n        title: \"Sea Cucumber\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        suggestedDelay: 1,\r\n        stars: 2\r\n        // customComponent: \"pause-and-run\"\r\n    }\r\n);\r\n\r\nfunction parseInput(lines: string[]) {\r\n    return FixedSizeMatrix.fromPlain(lines.map((l) => l.split(\"\") as Cell[]));\r\n}\r\n","import { sonarSweep } from \"./sonar-sweep\";\r\nimport { dive } from \"./dive\";\r\nimport { binaryDiagnostic } from \"./binary-diagnostic\";\r\nimport { giantSquid } from \"./giant-squid\";\r\nimport { hydrothermalVenture } from \"./hydrothermal-venture\";\r\nimport { lanternfish } from \"./lanternfish\";\r\nimport { theTreacheryOfWhales } from \"./the-treachery-of-whales\";\r\nimport { sevenSegmentSearch } from \"./seven-segment-search\";\r\nimport { smokeBasin } from \"./smoke-basin\";\r\nimport { syntaxScoring } from \"./syntax-scoring\";\r\nimport { dumboOctopus } from \"./dumbo-octopus\";\r\nimport { passagePathing } from \"./passage-pathing\";\r\nimport { transparentOrigami } from \"./transparent-origami\";\r\nimport { extendedPolymerization } from \"./extended-polymerization\";\r\nimport { chiton } from \"./chiton\";\r\nimport { packetDecoder } from \"./packet-decoder\";\r\nimport { trickShot } from \"./trick-shot\";\r\nimport { snailfish } from \"./snailfish\";\r\nimport { beaconScanner } from \"./beacon-scanner\";\r\nimport { trenchMap } from \"./trench-map\";\r\nimport { diracDice } from \"./dirac-dice\";\r\nimport { reactorReboot } from \"./reactor-reboot\";\r\nimport { amphipod } from \"./amphipod\";\r\nimport { arithmeticLogicUnit } from \"./arithmetic-logic-unit\";\r\nimport { seaCucumber } from \"./sea-cucumber\";\r\n\r\nexport const entries = [\r\n    sonarSweep,\r\n    dive,\r\n    binaryDiagnostic,\r\n    giantSquid,\r\n    hydrothermalVenture,\r\n    lanternfish,\r\n    theTreacheryOfWhales,\r\n    sevenSegmentSearch,\r\n    smokeBasin,\r\n    syntaxScoring,\r\n    dumboOctopus,\r\n    passagePathing,\r\n    transparentOrigami,\r\n    extendedPolymerization,\r\n    chiton,\r\n    packetDecoder,\r\n    trickShot,\r\n    snailfish,\r\n    beaconScanner,\r\n    trenchMap,\r\n    diracDice,\r\n    reactorReboot,\r\n    amphipod,\r\n    arithmeticLogicUnit,\r\n    seaCucumber\r\n];\r\n","import { CCoordinate, Coordinate, Coordinate3d } from \"./geometry\";\r\nimport { FixedSizeMatrix } from \"./matrix\";\r\nimport { buildGroups, buildGroupsFromSeparator, groupBy } from \"./sequences\";\r\n\r\ntype Separator<T> = number | T | ((line: T) => boolean);\r\n\r\nabstract class PipelineParser<TState> {\r\n    public abstract run(): TState;\r\n}\r\n\r\nclass FlatParser<TState> extends PipelineParser<TState> {\r\n    constructor(private data: TState) {\r\n        super();\r\n    }\r\n\r\n    // public run<TOut>(mapper?: (e: TState) => TOut): TOut;\r\n    // public run(): TState;\r\n    // public run<TOut>(mapper?: (e: TState) => TOut): TOut {\r\n    //     if (mapper) {\r\n    //         return mapper(this.data);\r\n    //     }\r\n    //     return (this.data as unknown) as TOut;\r\n    // }\r\n\r\n    public run() {\r\n        return this.data;\r\n    }\r\n\r\n    public map<TOut>(mapper: (e: TState) => TOut): FlatParser<TOut> {\r\n        return new FlatParser(mapper(this.data));\r\n    }\r\n\r\n}\r\n\r\nclass IteratedParser<T extends any[]> extends FlatParser<[...T]> {\r\n    public label<TLabel extends readonly string[]>(...labels: TLabel): {\r\n        [K in TLabel[number]]: T[number]\r\n    } {\r\n        const res: {[K in keyof T]: T[K]} = ({} as any);\r\n        for (let i = 0; i < labels.length; i++) {\r\n            const label = labels[i];\r\n            res[label as any] = (this.run() as any)[i];\r\n        }\r\n        return res as any;\r\n    }\r\n}\r\n\r\nclass SimpleParser<T> extends PipelineParser<T[]> {\r\n    constructor(private data: T[]) {\r\n        super();\r\n        \r\n    }\r\n    public run(): T[] {\r\n        return this.data;\r\n    }\r\n\r\n    public first(): T {\r\n        if (this.data.length === 0) {\r\n            throw new Error(\"Could not find any data\");\r\n        }\r\n        return this.data[0];\r\n    }\r\n\r\n    public startSimpleLabeling() {\r\n        return new Labeler(this.data, {});\r\n    }\r\n\r\n    public map<TNext>(mapper: (e: T, i: number) => TNext): SimpleParser<TNext> {\r\n        return new SimpleParser<TNext>(this.data.map((e, i) => mapper(e, i)));\r\n    }\r\n\r\n    public group(sep: number | ((e: T) => boolean)) {\r\n        return new GroupParser(this.data, sep);\r\n    }\r\n}\r\n\r\nclass NestedParser<T> extends SimpleParser<T[]> {\r\n    public flat(): SimpleParser<T> {\r\n        return new SimpleParser<T>(this.run().flat());\r\n    }\r\n    public pivot(): NestedParser<T> {\r\n        const data = this.run();\r\n        const length = Math.min(...data.map(e => e.length));\r\n        const result: T[][] = [];\r\n        for (let i = 0; i < length; i++) {\r\n            const r: T[] = [];\r\n            for (let j = 0; j < data.length; j++) {\r\n                r.push(data[j][i]);\r\n            }\r\n            result.push(r);\r\n        }\r\n        console.log(data);\r\n        console.log(result);\r\n        return new NestedParser<T>(result);\r\n    }\r\n    public startLabeling() {\r\n        const lines = this.run().length;\r\n        const results: Array<{}> = [];\r\n        for (let i = 0; i < lines; i++) {\r\n            results.push({});\r\n        }\r\n        return new ListLabeler(\r\n            this.run(),\r\n            results\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass GroupParser<T> extends NestedParser<T> {\r\n    constructor(data: T[], sep: number | ((e: T) => boolean)) {\r\n        if (typeof sep === \"number\") {\r\n            super([...buildGroups(data, sep, sep)]);\r\n        } else {\r\n            super([...buildGroupsFromSeparator(data, sep)]);\r\n        }\r\n    }\r\n}\r\n\r\nclass StringGroupParser extends GroupParser<string> {\r\n    public numbers() {\r\n        return new SimpleParser<number[]>(this.run().map(e => e.map(x => parseInt(x, 10))));\r\n    }\r\n\r\n    public groupMap<U>(callback: (p: LineParser) => U): SimpleParser<U> {\r\n        return new SimpleParser(this.run().map(group => (callback(new LineParser(group)))));\r\n    }\r\n}\r\n\r\nconst isPipelineParser = (e: unknown): e is PipelineParser<any> => {\r\n    return (e as PipelineParser<unknown>).run !== undefined;\r\n}\r\n\r\nclass Labeler<T, TData> extends FlatParser<T> {\r\n    /**\r\n     *\r\n     */\r\n    constructor(private lines: TData[], private obj: T) {\r\n        super(obj);\r\n    }\r\n\r\n    public label<TLabel extends readonly string[], U>(callback: (s: TData) => U, ...labels: TLabel) {\r\n        if (labels.length !== 1) {\r\n            throw new Error(\"No label given for this callback: \" + callback.toString());\r\n        }\r\n        const v = callback(this.lines[0]);\r\n        if (isPipelineParser(v)) {\r\n            throw new Error(\"Did not run a parser finisher\");\r\n        }\r\n        const [key] = labels;\r\n        const res = Object.assign({}, this.obj, {[key]: v}) as {\r\n            [K in TLabel[number]]: U\r\n        } & T;\r\n        return new Labeler(this.lines.slice(1), res);\r\n    }\r\n}\r\n\r\nclass ListLabeler<T, TData> extends SimpleParser<T> {\r\n    /**\r\n     *\r\n     */\r\n    constructor(private lines: TData[][], private objs: T[]) {\r\n        super(objs);\r\n    }\r\n\r\n    public label<TLabel extends readonly string[], U>(callback: (s: TData) => U, ...labels: TLabel) {\r\n        const results: Array<{\r\n            [K in TLabel[number]]: U\r\n        } & T> = [];\r\n\r\n        for (let i = 0; i < this.lines.length; i++) {\r\n            const line = this.lines[i];\r\n            const v = callback(line[0]);\r\n            if (isPipelineParser(v)) {\r\n                throw new Error(\"Did not run a parser finisher\");\r\n            }\r\n            const [key] = labels;\r\n            const res = Object.assign({}, this.objs[i], {[key]: v}) as \r\n            {\r\n                [K in TLabel[number]]: U\r\n            } & T;\r\n            results.push(res);\r\n        }\r\n        return new ListLabeler(this.lines.map(l => l.slice(1)), results);\r\n    }\r\n}\r\n\r\nexport class LineParser extends SimpleParser<string> {\r\n    constructor(lines: string[]) {\r\n        super(lines);\r\n    }\r\n\r\n    public header<T>(length: number, callback: (header: Parser, rest: Parser) => T): T {\r\n        const header = this.run().slice(0, length);\r\n        const rest = this.run().slice(length);\r\n        return callback(new Parser(header), new Parser(rest));\r\n    }\r\n\r\n    public slice(start: number, end?: number) {\r\n        return new LineParser(this.run().slice(start, end));\r\n    }\r\n\r\n    public tokenize(separator: string | RegExp = \" \"): TokenParser {\r\n        return new TokenParser(this.run(), separator);\r\n    }\r\n\r\n    public transform(regex: RegExp) {\r\n        return new LineParser(this.run().map(e => new StringParser(e).transform(regex).run()));\r\n    }\r\n\r\n    public asNumbers() {\r\n        return this.map(e => parseInt(e, 10));\r\n    }\r\n\r\n    public extractAllNumbers(canBeNegative: boolean = false) {\r\n        return new NestedParser(this.stringParse(s => s.ns(canBeNegative)).run());\r\n    }\r\n\r\n    public stringParse<T>(callback: (s: StringParser) => T): SimpleParser<T> {\r\n        return this.map(l => {\r\n            const res = callback(new StringParser(l))\r\n            return res;\r\n        });\r\n    }\r\n\r\n    public matrix<T>(mapper: (s: string) => T): FixedSizeMatrix<T> {\r\n        return FixedSizeMatrix.fromLines(this.run(), mapper);\r\n    }\r\n\r\n    public matrixNumbers(defaultValue: number | undefined): FixedSizeMatrix<number> {\r\n        const getDefaultValue = () => {\r\n            if (defaultValue === undefined) {\r\n                throw new Error(\"No default value and found an invalid number in the matrix\");\r\n            }\r\n            return defaultValue;\r\n        }\r\n        return FixedSizeMatrix.fromLines(this.run(), (e => Parser.isNumber(e) ? parseInt(e, 10) : getDefaultValue()));\r\n    }\r\n\r\n    public matrixMixedNumbers(): FixedSizeMatrix<Number | string> {\r\n        return FixedSizeMatrix.fromLines(this.run(), (e => Parser.isNumber(e) ? parseInt(e, 10) : e));\r\n    }\r\n\r\n    public group(sep: string | number | ((e: string) => boolean)) {\r\n        if (typeof sep === \"string\") {\r\n            return new StringGroupParser(this.run(), e => e.trim() === sep);\r\n        }\r\n        return new StringGroupParser(this.run(), sep);\r\n        // return super.group(sep);\r\n    }\r\n\r\n    public groupAsNumbers(sep: string | number | ((e: string) => boolean)) {\r\n        const groupped = this.group(sep);\r\n        return new SimpleParser<number[]>(groupped.run().map(e => e.map(n => parseInt(n, 10))));\r\n    }\r\n\r\n    public startLabeling() {\r\n        return new Labeler(this.run().map(l => new StringParser(l)), {});\r\n    }\r\n\r\n    public iterate<T1, T2>(c1: (token: StringParser) => T1 | PipelineParser<T1>, c2: (token: StringParser) => T2 | PipelineParser<T2>): IteratedParser<[T1, T2]>\r\n    public iterate(callback: (token: StringParser) => StringParser): IteratedParser<[string]>\r\n    public iterate<T>(callback: (token: StringParser) => T): IteratedParser<[T]>\r\n    public iterate(...nested: Array<(token: StringParser) => any>) {\r\n        return new IteratedParser(this.run().map((line, index) => {\r\n            const res = nested[index](new StringParser(line));\r\n            if (isPipelineParser(res)) {\r\n                return res.run();\r\n            }\r\n            return res;\r\n        }));\r\n    }\r\n\r\n    public compressSpaces() {\r\n        return this.replace(/\\s+/, \" \");\r\n    }\r\n\r\n    public replace(token: string | RegExp, replaceWith: string, replaceAll: boolean = true) {\r\n        return new LineParser(this.run().map(r => replaceAll ? r.replaceAll(token, replaceWith) : r.replace(token, replaceWith)));\r\n    }\r\n\r\n    public remove(token: string | RegExp) {\r\n        return this.replace(token, \"\");\r\n    }\r\n}\r\n\r\nclass StringParser extends PipelineParser<string> {\r\n    constructor(private data: string) {\r\n        super();\r\n    }\r\n    public run(): string {\r\n        return this.data;\r\n    }\r\n\r\n    public s(): string {\r\n        return this.run();\r\n    }\r\n\r\n    public transform(regex: RegExp | ((s: string) => string)): StringParser {\r\n        if (typeof regex === \"function\") {\r\n            return new StringParser(regex(this.run()));\r\n        }\r\n        const match = this.run().match(regex);\r\n        if (!match) {\r\n            throw new Error(\"Did not match regex\");\r\n        }\r\n        const mainMatch = (() => {\r\n            if (match.length === 1) return match[0];\r\n            if (match.length === 2) return match[1];\r\n            throw new Error(\"Invalid regex; matches: \" + (match.length - 1));\r\n        })();\r\n        return new StringParser(mainMatch);\r\n    }\r\n\r\n    public pns(canBeNegative: boolean = false, base: number = 10): SimpleParser<number> {\r\n        return new SimpleParser(this.ns(canBeNegative, base));\r\n    }\r\n\r\n    public ns(canBeNegative: boolean = false, base: number = 10): number[] {\r\n        const regex = canBeNegative ? /(-?\\d+)/g : /(\\d+)/g;\r\n        const matches = this.data.match(regex);\r\n        if (!matches) {\r\n            return [];\r\n        }\r\n        return matches.map(e => parseInt(e, base));\r\n    }\r\n\r\n    public n(base: number = 10): number {\r\n        const match = this.data.match(/\\d+/);\r\n        if (match == null) {\r\n            throw new Error(\"No number in \" + this.data);\r\n        }\r\n        return parseInt(match[0], base)\r\n    }\r\n\r\n    public tokenize(separator: string | RegExp) {\r\n        return new Parser(this.data.split(separator));\r\n    }\r\n\r\n    public extract3dCoordinates(): Coordinate3d {\r\n        const regex = /(-?\\d+)[^\\d]+(-?\\d+)[^\\d]+(-?\\d+)/;\r\n        const matches = this.data.match(regex);\r\n        if (matches == null) {\r\n            throw new Error(\"No matches on \" + this.data);\r\n        }\r\n        if (matches.length !== 4) {\r\n            throw new Error(\"Invalid coordinate match for \" + this.data);\r\n        }\r\n        const [x,y,z] = matches.slice(1).map(e => parseInt(e, 10));\r\n        return {x,y,z};\r\n    }\r\n\r\n    public extractCoordinates(): CCoordinate {\r\n        const regex = /(-?\\d+)[^\\d]+(-?\\d+)/\r\n        const matches = this.data.match(regex);\r\n        if (matches == null) {\r\n            throw new Error(\"No matches on \" + this.data);\r\n        }\r\n        if (matches.length !== 3) {\r\n            throw new Error(\"Invalid coordinate match for \" + this.data);\r\n        }\r\n        const [x,y] = matches.slice(1).map(e => parseInt(e, 10));\r\n        return new CCoordinate(x, y);\r\n    }\r\n\r\n\r\n    public extractGroupRegex<T extends ((s: StringParser) => any)[]>(regex: RegExp, ...mappers: [...T]): SimpleParser<{\r\n        [K in keyof T]: T[K] extends (s: StringParser) => any ? ReturnType<T[K]> : never\r\n    }[number]>;\r\n    public extractGroupRegex(regex: RegExp, ...mappers: Array<(s: StringParser) => any>)\r\n    {\r\n        const matches = this.run().match(regex);\r\n        if (matches == null) {\r\n            throw new Error(\"No matches on: \" + this.run());\r\n        }\r\n        if (matches.length !== mappers.length + 1) {\r\n            throw new Error(\"Mismatch in group length\");\r\n        }\r\n        return new SimpleParser(mappers.map((mapper, index) => mapper(new StringParser(matches[index+1]))));\r\n    }\r\n\r\n}\r\n\r\nclass TokenParser extends SimpleParser<string[]> {\r\n\r\n    constructor(data: string[], separator: string | RegExp) {\r\n        const tokenized = data.map(d => d.split(separator));\r\n        super(tokenized);\r\n    }\r\n\r\n    public mapTokens<T>(mapper: (token: StringParser) => T | PipelineParser<T>): T[][] {\r\n        return this\r\n            .run()\r\n            .map(line => line.map(tokens => new StringParser(tokens)).map(t => {\r\n                const res = mapper(t);\r\n                if (isPipelineParser(res)) {\r\n                    return res.run();\r\n                }\r\n                return res;\r\n            }));\r\n    }\r\n\r\n    public mapString<T>(mapper: (s: StringParser) => T): T[][] {\r\n        return this.run().map(line => line.map(e => mapper(new StringParser(e))));\r\n    }\r\n\r\n    public startLabeling() {\r\n        const lines = this.run().length;\r\n        const results: Array<{}> = [];\r\n        for (let i = 0; i < lines; i++) {\r\n            results.push({});\r\n        }\r\n        return new ListLabeler(\r\n            this.run().map(l => l.map(t => new StringParser(t))), \r\n            results\r\n        );\r\n    }\r\n\r\n    public iterate<T1, T2>(c1: (token: StringParser) => T1 | PipelineParser<T1>, c2: (token: StringParser) => T2 | PipelineParser<T2>): SimpleParser<[T1, T2]>\r\n    public iterate<T>(callback: (token: StringParser) => T | PipelineParser<T>): SimpleParser<[T]>\r\n    public iterate(...nested: Array<(token: StringParser) => any>) {\r\n        return new SimpleParser(this.run().map(line => nested.map((callback, index) => {\r\n            const res = callback(new StringParser(line[index]));\r\n            if (isPipelineParser(res)) {\r\n                return res.run();\r\n            }\r\n            return res;\r\n        })));\r\n    }\r\n\r\n}\r\n\r\nexport class Parser extends LineParser {\r\n    public static isNumber(e: unknown): e is number {\r\n        return e !== \"\" && !isNaN(Number(e));\r\n    }\r\n}","import { Coordinate, drawStraightLine, getBoundaries, isInBounds, manhattanDistance, serialization } from \"../../../../support/geometry\";\r\nimport { Parser } from \"../../../../support/parser\";\r\nimport { entryForFile } from \"../../../entry\";\r\n\r\nconst exampleInput = `Sensor at x=2, y=18: closest beacon is at x=-2, y=15\r\nSensor at x=9, y=16: closest beacon is at x=10, y=16\r\nSensor at x=13, y=2: closest beacon is at x=15, y=3\r\nSensor at x=12, y=14: closest beacon is at x=10, y=16\r\nSensor at x=10, y=20: closest beacon is at x=10, y=16\r\nSensor at x=14, y=17: closest beacon is at x=10, y=16\r\nSensor at x=8, y=7: closest beacon is at x=2, y=10\r\nSensor at x=2, y=0: closest beacon is at x=2, y=10\r\nSensor at x=0, y=11: closest beacon is at x=2, y=10\r\nSensor at x=20, y=14: closest beacon is at x=25, y=17\r\nSensor at x=17, y=20: closest beacon is at x=21, y=22\r\nSensor at x=16, y=7: closest beacon is at x=15, y=3\r\nSensor at x=14, y=3: closest beacon is at x=15, y=3\r\nSensor at x=20, y=1: closest beacon is at x=15, y=3`;\r\n\r\n\r\ntype SensorReading = {\r\n    sensor: Coordinate;\r\n    beacon: Coordinate;\r\n    radius: number;\r\n};\r\n\r\nconst parseLines = (lines: string[]): SensorReading[] => {\r\n    const res = new Parser(lines)\r\n        .tokenize(\": \")\r\n        .startLabeling()\r\n        .label(sensor => sensor.extractCoordinates(), \"sensor\")\r\n        .label(beacon => beacon.extractCoordinates(), \"beacon\")\r\n        .map(e => ({\r\n            ...e,\r\n            radius: manhattanDistance(e.sensor, e.beacon)\r\n        }))\r\n        .run();\r\n    return res;\r\n}\r\n\r\nconst isInRange = (reading: SensorReading, position: Coordinate) => {\r\n    return manhattanDistance(reading.sensor, position) <= reading.radius;\r\n}\r\n\r\nconst getEdges = (reading: SensorReading): Coordinate[] => {\r\n    const r = reading.radius;\r\n    const {x: sx, y: sy} = reading.sensor;\r\n    const corners = [\r\n        {x: sx, y: sy - r - 1},\r\n        {x: sx - r - 1, y: sy},\r\n        {x: sx, y: sy + r + 1},\r\n        {x: sx + r + 1, y: sy}\r\n    ];\r\n    const points = [];\r\n    for (let i = 0; i < corners.length; i++) {\r\n        for (const point of drawStraightLine(corners[i], corners[(i+1)%corners.length], false)) {\r\n            points.push(point)\r\n        }\r\n    }\r\n    return points;\r\n}\r\n\r\nexport const beaconExclusionZone = entryForFile(\r\n    async ({ lines, pause, resultOutputCallback, isExample }) => {\r\n        const readings = parseLines(lines);\r\n        const y = isExample ? 10 : 2000000;\r\n        const xs = readings.flatMap(r => [r.sensor.x - r.radius, r.sensor.x + r.radius]);\r\n        const minX = Math.min(...xs);\r\n        const maxX = Math.max(...xs);\r\n        const beacons = new Set<string>(readings.map(r => r.beacon).map(e => serialization.serialize(e)));\r\n        let counter = 0;\r\n        for (let x = minX; x <= maxX; x++) {\r\n            if (beacons.has(serialization.serialize({x, y}))) {\r\n                continue;\r\n            }\r\n            for (const reading of readings) {\r\n                if (isInRange(reading, {y, x})) {\r\n                    counter++;\r\n                    break;\r\n                }\r\n            }\r\n            await pause();\r\n        }\r\n        await resultOutputCallback(counter);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback, pause, isExample }) => {\r\n        const limit = isExample? 20 : 4000000;\r\n        const factor = 4000000;\r\n        const bounds = getBoundaries([{x: 0, y: 0}, {x: limit, y: limit}]);\r\n        const readings = parseLines(lines);\r\n        for (const reading of readings) {\r\n            const edges = getEdges(reading);\r\n            for (const point of edges) {\r\n                await pause();\r\n                if (!isInBounds(point, bounds)) {\r\n                    continue;\r\n                }\r\n                let isInRangeOfAnySensor = false;\r\n                for (const nested of readings) {\r\n                    if (nested === reading) {\r\n                        continue;\r\n                    }\r\n                    if (isInRange(nested, point)) {\r\n                        isInRangeOfAnySensor = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!isInRangeOfAnySensor) {\r\n                    //found it!\r\n                    await outputCallback(point);\r\n                    await resultOutputCallback(point.x * factor + point.y);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    },\r\n    {\r\n        key: \"beacon-exclusion-zone\",\r\n        title: \"Beacon Exclusion Zone\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2,\r\n        exampleInput\r\n    }\r\n);","import { lcm } from \"../../../../support/algebra\";\r\nimport { DefaultDict, Queue, SerializableSet } from \"../../../../support/data-structure\";\r\nimport { Bounds, CCoordinate, directions, getSurrounding, isInBounds, isLiteralDirection, manhattanDistance, mapLiteralToDirection, sumCoordinate } from \"../../../../support/geometry\";\r\nimport { Coordinate, serialization } from \"../../../../support/geometry\";\r\nimport { FixedSizeMatrix } from \"../../../../support/matrix\";\r\nimport { entryForFile } from \"../../../entry\";\r\n\r\nconst exampleInput = \r\n`#.######\r\n#>>.<^<#\r\n#.<..<<#\r\n#>v.><>#\r\n#<^v^^>#\r\n######.#`;\r\n\r\nconst parseInput = (lines: string[]): {\r\n    blizzards: BlizzardLookup;\r\n    bounds: Bounds;\r\n    start: Coordinate;\r\n    end: Coordinate;\r\n} => {\r\n    const size = {\r\n        x: lines[0].length - 2,\r\n        y: lines.length - 2\r\n    };\r\n    const start = {x: 0, y: -1};\r\n    const end = {x: size.x-1,y: size.y};\r\n    // const blizzards = new SerializableSet<Blizzard>({\r\n    //     serialize: (e) => `${serialization.serialize(e.c)}_${serialization.serialize(e.direction)}`,\r\n    //     deserialize: (e) => {\r\n    //         const [c, direction] = e.split(\"_\").map(serialization.deserialize);\r\n    //         return {c, direction};\r\n    //     }\r\n    // });\r\n    const blizzards = new DefaultDict<Coordinate, CCoordinate[]>(() => [], serialization);\r\n\r\n    for (let x = 0; x < size.x; x++) {\r\n        for (let y = 0; y < size.y; y++) {\r\n            const cell = lines[y+1][x+1];\r\n            if (isLiteralDirection(cell)) {\r\n                const direction = mapLiteralToDirection(cell);\r\n                blizzards.ensureAndGet({x,y}).push(direction);\r\n            } else if (cell !== \".\") {\r\n                throw new Error(\"Invalid input: \" + cell);\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        blizzards,\r\n        end,\r\n        start,\r\n        bounds: {\r\n            size,\r\n            topLeft: {x: 0, y: 0}\r\n        }\r\n    };\r\n}\r\n\r\ntype BlizzardLookup = DefaultDict<Coordinate, CCoordinate[]>;\r\n\r\ntype State = {\r\n    position: Coordinate;\r\n    // blizzards: BlizzardLookup;\r\n    minute: number;\r\n    // states: string[];\r\n}\r\n\r\nconst show = (blizzards: BlizzardLookup, position: Coordinate, bounds: Bounds): string => {\r\n    const matrix = new FixedSizeMatrix<string>(bounds.size);\r\n    for (const {key, value} of blizzards) {\r\n        let v;\r\n        if (value.length > 1) {\r\n            v = \"X\";\r\n        } else {\r\n            if (value.length === 0) {\r\n                throw new Error(\"What?\");\r\n            }\r\n            const [match] = ([\r\n                [directions.up, \"^\"],\r\n                [directions.down, \"v\"], \r\n                [directions.left, \"<\"], \r\n                [directions.right, \">\"]\r\n            ] as [CCoordinate, string][]).filter(e => {\r\n                const [c,s] = e;\r\n                return manhattanDistance(c, value[0]) === 0;\r\n            });\r\n            if (match) {\r\n                v = match[1];\r\n            }\r\n        }\r\n        if (matrix.get(key)) {\r\n            matrix.set(key, \"K\");\r\n        } else {\r\n            matrix.set(key, v);\r\n        }\r\n    }\r\n    if (isInBounds(position, bounds)) {\r\n        matrix.set(position, \"E\");\r\n    }\r\n    return matrix.toString(e => e || \".\");\r\n\r\n}\r\n\r\nconst findMinutes = (\r\n    start: Coordinate, \r\n    end: Coordinate, \r\n    startMinute: number,\r\n    period: number,\r\n    bounds: Bounds,\r\n    occupied: SerializableSet<Coordinate>[]\r\n) => {\r\n        const queue = new Queue<State>();\r\n        queue.add({\r\n            position: start,\r\n            minute: startMinute,\r\n        });\r\n\r\n        const encountered = new Set<string>();\r\n\r\n        while (!queue.isEmpty) {\r\n            const {position, minute} = queue.get()!;\r\n            if (manhattanDistance(position, end) === 0) {\r\n                return minute;\r\n            }\r\n            const candidatePositions = getSurrounding(position).concat([position])\r\n                .filter(e => isInBounds(e, bounds) || [start,end].some(x => manhattanDistance(e,x) === 0))\r\n                .filter(e => !occupied[minute%period].has(e));\r\n            for (const candidate of candidatePositions) {\r\n                const serialized = `${minute%period}_${serialization.serialize(candidate)}`;\r\n                if (!encountered.has(serialized)) {\r\n                    queue.add({\r\n                        minute: minute+1,\r\n                        position: candidate,\r\n                    });\r\n                    encountered.add(serialized);\r\n                }\r\n            }\r\n        }\r\n\r\n}\r\n\r\nexport const blizzardBasin = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback, pause }) => {\r\n        const {\r\n            blizzards,\r\n            bounds,\r\n            start,\r\n            end\r\n        } = parseInput(lines);\r\n\r\n        const period = lcm(bounds.size.x, bounds.size.y);\r\n        await outputCallback(period);\r\n\r\n        let simulatedBlizzards = new DefaultDict<Coordinate, CCoordinate[]>(() => [], serialization);\r\n\r\n        for (const blizzard of blizzards) {\r\n            simulatedBlizzards.set(blizzard.key, blizzard.value);\r\n        }\r\n\r\n        const occupied: SerializableSet<Coordinate>[] = [];\r\n\r\n        for (let i = 0; i < period; i++) {\r\n            await pause();\r\n            const newBlizzards = new DefaultDict<Coordinate, CCoordinate[]>(() => [], serialization);\r\n            const occupation = new SerializableSet<Coordinate>(serialization);\r\n            for (const blizzard of simulatedBlizzards) {\r\n                for (const direction of blizzard.value) {\r\n                    const position = blizzard.key;\r\n                    const newPosition = sumCoordinate(position, direction);\r\n                    if (newPosition.x < 0) {\r\n                        newPosition.x = bounds.size.x-1;\r\n                    } else if (newPosition.x >= bounds.size.x) {\r\n                        newPosition.x = 0;\r\n                    } else if (newPosition.y < 0) {\r\n                        newPosition.y = bounds.size.y-1;\r\n                    } else if (newPosition.y >= bounds.size.y) {\r\n                        newPosition.y = 0;\r\n                    }\r\n                    newBlizzards.ensureAndGet(newPosition).push(direction);\r\n                    occupation.add(newPosition);\r\n                }\r\n            }\r\n            simulatedBlizzards = newBlizzards;\r\n            occupied.push(occupation);\r\n        }\r\n\r\n        const startMinute = 0;\r\n\r\n        const result = findMinutes(start, end, startMinute, period, bounds, occupied);\r\n\r\n        if (!result) {\r\n            throw new Error(\"Could not get to the exit\");\r\n        }\r\n\r\n        await resultOutputCallback(result);\r\n\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback, pause }) => {\r\n        const {\r\n            blizzards,\r\n            bounds,\r\n            start,\r\n            end\r\n        } = parseInput(lines);\r\n\r\n        const period = lcm(bounds.size.x, bounds.size.y);\r\n        await outputCallback(period);\r\n\r\n        let simulatedBlizzards = new DefaultDict<Coordinate, CCoordinate[]>(() => [], serialization);\r\n\r\n        for (const blizzard of blizzards) {\r\n            simulatedBlizzards.set(blizzard.key, blizzard.value);\r\n        }\r\n\r\n        const occupied: SerializableSet<Coordinate>[] = [];\r\n\r\n        for (let i = 0; i < period; i++) {\r\n            await pause();\r\n            const newBlizzards = new DefaultDict<Coordinate, CCoordinate[]>(() => [], serialization);\r\n            const occupation = new SerializableSet<Coordinate>(serialization);\r\n            for (const blizzard of simulatedBlizzards) {\r\n                for (const direction of blizzard.value) {\r\n                    const position = blizzard.key;\r\n                    const newPosition = sumCoordinate(position, direction);\r\n                    if (newPosition.x < 0) {\r\n                        newPosition.x = bounds.size.x-1;\r\n                    } else if (newPosition.x >= bounds.size.x) {\r\n                        newPosition.x = 0;\r\n                    } else if (newPosition.y < 0) {\r\n                        newPosition.y = bounds.size.y-1;\r\n                    } else if (newPosition.y >= bounds.size.y) {\r\n                        newPosition.y = 0;\r\n                    }\r\n                    newBlizzards.ensureAndGet(newPosition).push(direction);\r\n                    occupation.add(newPosition);\r\n                }\r\n            }\r\n            simulatedBlizzards = newBlizzards;\r\n            occupied.push(occupation);\r\n        }\r\n\r\n        const startMinute = 0;\r\n\r\n        const toEnd = findMinutes(start, end, startMinute, period, bounds, occupied);\r\n\r\n        if (!toEnd) {\r\n            throw new Error(\"Could not get to the end\");\r\n        }\r\n\r\n        const backToStart = findMinutes(end, start, toEnd, period, bounds, occupied);\r\n\r\n        if (!backToStart) {\r\n            throw new Error(\"Could not get back to start\");\r\n        }\r\n\r\n        const result = findMinutes(start, end, backToStart, period, bounds, occupied);\r\n\r\n        if (!result) {\r\n            throw new Error(\"Could not finish\");\r\n        }\r\n\r\n        await resultOutputCallback(result);\r\n\r\n    },\r\n    {\r\n        key: \"blizzard-basin\",\r\n        title: \"Blizzard Basin\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        date: 24,\r\n        exampleInput,\r\n        stars: 2\r\n    }\r\n);","import { Queue } from \"../../../../support/data-structure\";\r\nimport { FullCoordinate, getSurrounding, serialization } from \"../../../../support/geometry\";\r\nimport { Coordinate3d } from \"../../../../support/geometry\";\r\nimport { manhattanDistance } from \"../../../../support/geometry\";\r\nimport { Parser } from \"../../../../support/parser\";\r\nimport { entryForFile } from \"../../../entry\";\r\n\r\nconst exampleInput =\r\n`2,2,2\r\n1,2,2\r\n3,2,2\r\n2,1,2\r\n2,3,2\r\n2,2,1\r\n2,2,3\r\n2,2,4\r\n2,2,6\r\n1,2,5\r\n3,2,5\r\n2,1,5\r\n2,3,5`;\r\n\r\nconst parseLines = (lines: string[]): Coordinate3d[] => {\r\n    return new Parser(lines)\r\n        .stringParse(s => s.extract3dCoordinates())\r\n        .run();\r\n    return lines.map(line => {\r\n        const [x,y,z] = line.split(\",\").map(e => parseInt(e, 10));\r\n        return {x,y,z};\r\n    });\r\n}\r\n\r\nexport const boilingBoulders = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const cubes = parseLines(lines);\r\n        let sides = 0;\r\n        for (const cube of cubes) {\r\n            let adjacent = 0;\r\n            for (const other of cubes) {\r\n                if (cube === other) {\r\n                    continue;\r\n                }\r\n                if (manhattanDistance(cube, other) === 1) {\r\n                    adjacent++;\r\n                }\r\n            }\r\n            if (adjacent > 6) {\r\n                throw new Error(\"How can that happen?\");\r\n            }\r\n            sides += (6 - adjacent);\r\n        }\r\n        await outputCallback(sides);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const cubes = parseLines(lines);\r\n        const existingCubes = new Set<string>();\r\n        for (const cube of cubes) {\r\n            existingCubes.add(serialization.serialize(cube));\r\n        }\r\n        const airFrontier: Set<string> = new Set<string>();\r\n        /*A useful observation is that if we consider empty spaces which have a taxicab distance of at most two from any cube, and join these spaces into connected components, then the connected components we are left with form distinct air pockets in addition to one component containing empty spaces on the exterior.\r\n\r\nThis component can always be identified since the space with the largest x component will always lie in it. So we can determine empty spaces in the interior adjacent to cubes like so:\r\n\r\n*/\r\n        for (const cube of cubes) {\r\n            const twiceSurrounding = getSurrounding(cube)\r\n                .flatMap(c => [c].concat(getSurrounding(c)))\r\n                .filter(e => manhattanDistance(e, cube) <= 2);\r\n            const frontier = twiceSurrounding.filter(e => !existingCubes.has(serialization.serialize(e)));\r\n            for (const f of frontier) {\r\n                airFrontier.add(serialization.serialize(f));\r\n            }\r\n        }\r\n\r\n        const groups: string[][] = [];\r\n        while (airFrontier.size > 0) {\r\n            const [visitFrom] = airFrontier;\r\n            airFrontier.delete(visitFrom);\r\n            const queue = new Queue<string>();\r\n            queue.add(visitFrom);\r\n            const group: string[] = [visitFrom];\r\n            while (!queue.isEmpty) {\r\n                const current = queue.get()!;\r\n                const surrounding = getSurrounding(serialization.deserialize3d(current));\r\n                for (const s of surrounding) {\r\n                    const k = serialization.serialize(s);\r\n                    if (airFrontier.has(k)) {\r\n                        queue.add(k);\r\n                        group.push(k);\r\n                        airFrontier.delete(k);\r\n                    }\r\n                }\r\n            }\r\n            groups.push(group);\r\n        }\r\n        const externalGroup = groups.map(g => ({\r\n            g,\r\n            maxX: g.map(e => serialization.deserialize3d(e).x).reduce((acc, next) => Math.max(acc, next), Number.NEGATIVE_INFINITY)\r\n        })).sort((a, b) => b.maxX - a.maxX)[0].g;\r\n        const internalAir = [...new Set<string>(groups.filter(g => g !== externalGroup).flat())].map(e => serialization.deserialize3d(e));\r\n        let sides = 0;\r\n        for (const cube of cubes) {\r\n            let adjacent = 0;\r\n            for (const other of cubes.concat(internalAir)) {\r\n                if (cube === other) {\r\n                    continue;\r\n                }\r\n                if (manhattanDistance(cube, other) === 1) {\r\n                    adjacent++;\r\n                }\r\n            }\r\n            if (adjacent > 6) {\r\n                throw new Error(\"How can that happen?\");\r\n            }\r\n            sides += (6 - adjacent);\r\n        }\r\n        await outputCallback(sides);\r\n\r\n        // const howManyAirCubes = cubes.length * 5;\r\n        // const adding = new Queue<FullCoordinate>();\r\n        // const all = new Set<string>();\r\n        // let airCubes: FullCoordinate[] = [];\r\n        // for (const cube of cubes) {\r\n        //     all.add(serialization.serialize(cube));\r\n        // }\r\n        // for (const cube of cubes) {\r\n        //     const surrounding = getSurrounding(cube);\r\n        //     for (const s of surrounding) {\r\n        //         const key = serialization.serialize(s);\r\n        //         if (!all.has(key)) {\r\n        //             adding.add(s);\r\n        //             all.add(key);\r\n        //             airCubes.push(s);\r\n        //         }\r\n        //     }\r\n        // }\r\n        // while (all.size < howManyAirCubes) {\r\n        //     const next = adding.get();\r\n        //     if (!next) {\r\n        //         throw new Error(\"Cannot add\");\r\n        //     }\r\n        //     const surrounding = getSurrounding(next);\r\n        //     for (const s of surrounding) {\r\n        //         const key = serialization.serialize(s);\r\n        //         if (!all.has(key)) {\r\n        //             adding.add(s);\r\n        //             all.add(key);\r\n        //             airCubes.push(s);\r\n        //         }\r\n        //     }\r\n        // }\r\n\r\n        // let updated = false;\r\n        // do {\r\n        //     updated = false;\r\n        //     const toRemove = new Set<string>();\r\n        //     for (const air of airCubes) {\r\n        //         let adjacent = 0;\r\n        //         for (const cube of cubes) {\r\n        //             if (manhattanDistance(cube, air) === 1) {\r\n        //                 adjacent++;\r\n        //             }\r\n        //         }\r\n        //         for (const other of airCubes) {\r\n        //             if (manhattanDistance(air, other) === 1) {\r\n        //                 adjacent++;\r\n        //             }\r\n        //         }\r\n        //         if (adjacent !== 6) {\r\n        //             toRemove.add(serialization.serialize(air));\r\n        //             updated = true;\r\n        //         }\r\n        //         airCubes = airCubes.filter(a => !toRemove.has(serialization.serialize(a)));\r\n        //     }\r\n        // } while (updated);\r\n\r\n        // const allCubes: FullCoordinate[] = airCubes.concat(cubes);\r\n        // let sides = 0;\r\n        // for (const cube of cubes) {\r\n        //     let adjacent = 0;\r\n        //     for (const other of allCubes) {\r\n        //         if (cube === other) {\r\n        //             continue;\r\n        //         }\r\n        //         if (manhattanDistance(cube, other) === 1) {\r\n        //             adjacent++;\r\n        //         }\r\n        //     }\r\n        //     if (adjacent > 6) {\r\n        //         throw new Error(\"How can that happen?\");\r\n        //     }\r\n        //     sides += (6 - adjacent);\r\n        // }\r\n        // await outputCallback(sides);\r\n    },\r\n    {\r\n        key: \"boiling-boulders\",\r\n        title: \"Boiling Boulders\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        exampleInput,\r\n        stars: 2\r\n    }\r\n);","import { CalorieCountingData } from \".\";\r\nimport { sumCoordinate } from \"../../../../support/geometry\";\r\nimport { Drawable, Pause, ScreenBuilder, ScreenPrinter } from \"../../../entry\";\r\n\r\nexport interface ICalorieCountingVisualizer {\r\n    showOnScreen(data: CalorieCountingData): Promise<void>;\r\n    setMax(index: number): Promise<void>;\r\n    setCurrent(index: number | undefined): Promise<void>;\r\n    removeMax(index: number): Promise<void>;\r\n}\r\n\r\nconst constants = (() => {\r\n    const cols = 15;\r\n    const padding = 2;\r\n    const border = 1;\r\n    const miniSize = 2;\r\n\r\n    const miniCols = 4;\r\n    const miniRows = 4;\r\n\r\n    const itemSize = {\r\n        x: border * 2 + padding * (miniCols + 1) + miniSize * miniCols,\r\n        y: border * 2 + padding * (miniRows + 1) + miniSize * miniRows\r\n    };\r\n\r\n    return {\r\n        cols,\r\n        padding,\r\n        miniSize,\r\n        miniCols,\r\n        miniRows,\r\n        border,\r\n        itemSize,\r\n        itemBackgrounds: {\r\n            normal: \"white\",\r\n            max: \"greenyellow\",\r\n            current: \"slateblue\"\r\n        }\r\n    };\r\n})();\r\n\r\nexport const buildVisualizer = (screenBuilder: ScreenBuilder | undefined, pause: Pause) => {\r\n    if (screenBuilder) {\r\n        return new RealVisualizer(screenBuilder, pause);\r\n    } else {\r\n        return new DummyVisualizer();\r\n    }\r\n};\r\n\r\nclass RealVisualizer implements ICalorieCountingVisualizer {\r\n    private printer!: ScreenPrinter;\r\n\r\n    private items: Drawable[] = [];\r\n\r\n    private current: number | undefined;\r\n    constructor(\r\n        private readonly screenBuilder: ScreenBuilder,\r\n        private readonly pause: Pause\r\n    ) {\r\n    }\r\n    public async setCurrent(index: number | undefined): Promise<void> {\r\n        if (this.current !== undefined) {\r\n            if (this.items[this.current].color === constants.itemBackgrounds.current) {\r\n                this.items[this.current].color = constants.itemBackgrounds.normal;\r\n            }\r\n        }\r\n        if (index !== undefined) {\r\n            this.items[index].color = constants.itemBackgrounds.current;\r\n        }\r\n        this.current = index;\r\n        await this.printer.forceRender();\r\n        await this.pause();\r\n    }\r\n    public async showOnScreen(data: CalorieCountingData): Promise<void> {\r\n        const rows = Math.ceil(data.length / constants.cols);\r\n        this.printer = await this.screenBuilder.requireScreen({\r\n            x: constants.padding * (constants.cols + 1) + constants.cols * constants.itemSize.x,\r\n            y: constants.padding * (rows + 1) + rows * constants.itemSize.y\r\n        });\r\n\r\n        this.printer.setManualRender();\r\n\r\n        const minCalorie = data.flatMap((e) => e).reduce((acc, next) => Math.min(acc, next), Number.POSITIVE_INFINITY);\r\n        const maxCalorie = data.flatMap((e) => e).reduce((acc, next) => Math.max(acc, next), Number.NEGATIVE_INFINITY);\r\n\r\n        const colorCalculator = (e: number): string => {\r\n            const percentage = 1 - ((e - minCalorie) / (maxCalorie / minCalorie));\r\n            const value = ((255 - 120) * percentage) + 120;\r\n            return `rgb(${value}, 0, 0)`;\r\n        };\r\n\r\n        for (let i = 0; i < data.length; i++) {\r\n            const row = Math.floor(i / constants.cols);\r\n            const col = i % constants.cols;\r\n\r\n            const topLeft = {\r\n                x: constants.padding * (col + 1) + col * constants.itemSize.x,\r\n                y: constants.padding * (row + 1) + row * constants.itemSize.y\r\n            };\r\n            const item: Drawable = {\r\n                c: topLeft,\r\n                color: \"white\",\r\n                id: i.toString(),\r\n                type: \"rectangle\",\r\n                size: constants.itemSize\r\n            };\r\n\r\n            await this.printer.add(item);\r\n\r\n            this.items.push(item);\r\n\r\n            for (let j = 0; j < data[i].length; j++) {\r\n                const mini = data[i][j];\r\n                const c = colorCalculator(mini);\r\n                const miniItem: Drawable = {\r\n                    c: sumCoordinate(topLeft, {\r\n                        x: constants.padding +\r\n                           (constants.padding + constants.miniSize) * (j % constants.miniCols),\r\n                        y: constants.padding +\r\n                           (constants.padding + constants.miniSize) * Math.floor(j / constants.miniCols)\r\n                    }),\r\n                    color: c,\r\n                    id: `mini_${i}_${j}`,\r\n                    type: \"rectangle\",\r\n                    size: {\r\n                        x: constants.miniSize,\r\n                        y: constants.miniSize\r\n                    }\r\n                };\r\n                await this.printer.add(miniItem);\r\n            }\r\n        }\r\n\r\n        await this.printer.forceRender();\r\n    }\r\n    public async setMax(index: number): Promise<void> {\r\n        this.items[index].color = constants.itemBackgrounds.max;\r\n        await this.pause();\r\n    }\r\n    public async removeMax(index: number): Promise<void> {\r\n        this.items[index].color = constants.itemBackgrounds.normal;\r\n    }\r\n}\r\n\r\nclass DummyVisualizer implements ICalorieCountingVisualizer {\r\n    public async setCurrent(index: number | undefined): Promise<void> { }\r\n    public async showOnScreen(data: CalorieCountingData): Promise<void> { }\r\n    public async setMax(index: number): Promise<void> { }\r\n    public async removeMax(index: number): Promise<void> { }\r\n\r\n}\r\n","import { PairingHeap } from \"priorityqueue/lib/cjs\";\r\nimport { buildGroupsFromSeparator } from \"../../../../support/sequences\";\r\nimport { entryForFile } from \"../../../entry\";\r\nimport { buildVisualizer } from \"./visualizer\";\r\nimport { Parser } from \"../../../../support/parser\";\r\n\r\nexport type CalorieCountingData = number[][];\r\n\r\nexport const calorieCounting = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback, screen, pause }) => {\r\n        const groups = new Parser(lines).group(\"\").numbers().run();\r\n\r\n        const visualizer = buildVisualizer(screen, pause);\r\n\r\n        await visualizer.showOnScreen(groups);\r\n\r\n        const groupTotals = groups.map((g) => g.reduce((acc, next) => acc + next, 0));\r\n\r\n        const max = {\r\n            index: undefined as undefined | number,\r\n            value: 0\r\n        };\r\n\r\n        for (let i = 0; i < groupTotals.length; i++) {\r\n            await visualizer.setCurrent(i);\r\n            if (groupTotals[i] > max.value) {\r\n                max.value = groupTotals[i];\r\n                if (max.index !== undefined) {\r\n                    await visualizer.removeMax(max.index);\r\n                }\r\n                max.index = i;\r\n                await visualizer.setMax(max.index);\r\n            }\r\n        }\r\n        await visualizer.setCurrent(undefined);\r\n\r\n\r\n        await resultOutputCallback(max.value);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback, screen, pause }) => {\r\n        const groups = new Parser(lines).group(\"\").numbers().run();\r\n\r\n        const visualizer = buildVisualizer(screen, pause);\r\n\r\n        await visualizer.showOnScreen(groups);\r\n\r\n        const groupTotals = groups.map((g) => g.reduce((acc, next) => acc + next, 0));\r\n\r\n        type MyMax = {\r\n            index: number,\r\n            value: number\r\n        };\r\n\r\n        const heap = new PairingHeap<MyMax>({\r\n            comparator: (a, b) => b.value - a.value\r\n        });\r\n\r\n        for (let i = 0; i < groupTotals.length; i++) {\r\n            await visualizer.setCurrent(i);\r\n            if (heap.length < 3 || heap.top().value < groupTotals[i]) {\r\n                if (heap.length >= 3) {\r\n                    const toRemove = heap.pop();\r\n                    await visualizer.removeMax(toRemove.index);\r\n                }\r\n                heap.push({\r\n                    index: i,\r\n                    value: groupTotals[i]\r\n                });\r\n                await visualizer.setMax(i);\r\n            }\r\n        }\r\n        await visualizer.setCurrent(undefined);\r\n\r\n        const result = [\r\n            heap.pop(),\r\n            heap.pop(),\r\n            heap.pop()\r\n        ].reduce((acc, next) => acc + next.value, 0);\r\n\r\n        await resultOutputCallback(result);\r\n    },\r\n    {\r\n        key: \"calorie-counting\",\r\n        title: \"Calorie Counting\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        suggestedDelay: 10,\r\n        stars: 2\r\n    }\r\n);\r\n","import { Dictionary } from \"linq-typescript\";\r\nimport { Pair, Range } from \".\";\r\nimport { Drawable, Pause, ScreenBuilder, ScreenPrinter } from \"../../../entry\";\r\n\r\nexport interface ICampCleanupVisualizer {\r\n    showPairs(pairs: Pair[]): Promise<void>;\r\n    higlightPairs(pairs: Pair[]): Promise<void>;\r\n}\r\n\r\nexport const buildVisualizer = (screenBuilder: ScreenBuilder | undefined, pause: Pause) => {\r\n    if (screenBuilder) {\r\n        return new RealVisualizer(screenBuilder, pause);\r\n    } else {\r\n        return new DummyVisualizer();\r\n    }\r\n};\r\n\r\nconst constants = (() => {\r\n    const internalPadding = 2;\r\n    const boxPadding = 4;\r\n    const borderThickness = 1;\r\n    const lineMaxWidth = 20;\r\n    const lineThickness = 2;\r\n    return {\r\n        internalPadding,\r\n        boxPadding,\r\n        borderThickness,\r\n        lineMaxWidth,\r\n        lineThickness,\r\n        boxSize: {\r\n            x: lineMaxWidth + internalPadding * 2 + borderThickness * 2,\r\n            y: borderThickness * 2 + internalPadding * 3 + lineThickness * 2\r\n        },\r\n        cols: 15\r\n    };\r\n})();\r\n\r\nclass RealVisualizer implements ICampCleanupVisualizer {\r\n    private printer!: ScreenPrinter;\r\n\r\n    private pairs: Dictionary<number, Drawable> = new Dictionary<number, Drawable>();\r\n    constructor(\r\n        private readonly screenBuilder: ScreenBuilder,\r\n        private readonly pause: Pause\r\n    ) {\r\n    }\r\n\r\n    public async showPairs(pairs: Pair[]): Promise<void> {\r\n\r\n        const maxValue = Math.max(...pairs.flatMap((p) => [p.a.from, p.a.to, p.b.from, p.b.to]));\r\n\r\n        this.printer = await this.screenBuilder.requireScreen({\r\n            x: (constants.boxSize.x + constants.boxPadding) * constants.cols,\r\n            y: (constants.boxSize.y + constants.boxPadding) * (Math.ceil(pairs.length / constants.cols))\r\n        });\r\n\r\n        this.printer.setManualRender();\r\n\r\n        let currentY = 0;\r\n\r\n        let currentCol = 0;\r\n\r\n        for (const pair of pairs) {\r\n            const startY = currentY;\r\n            const topLeft = {\r\n                x: currentCol * (constants.boxSize.x + constants.boxPadding),\r\n                y: currentY\r\n            };\r\n            const size = { ...constants.boxSize };\r\n\r\n\r\n            const box: Drawable = {\r\n                c: topLeft,\r\n                size,\r\n                color: \"white\",\r\n                shouldStroke: true,\r\n                id: pair.id.toString(),\r\n                type: \"rectangle\"\r\n            };\r\n\r\n            this.pairs.set(pair.id, box);\r\n\r\n            const buildLine = (range: Range, myY: number): Drawable & {type: \"rectangle\"} => {\r\n                const width = ((range.to - range.from) / maxValue) * constants.lineMaxWidth;\r\n                const startX = (range.from / maxValue) * constants.lineMaxWidth;\r\n\r\n                return {\r\n                    type: \"rectangle\",\r\n                    c: {\r\n                        x: topLeft.x + constants.borderThickness + constants.internalPadding + startX,\r\n                        y: myY\r\n                    },\r\n                    color: \"white\",\r\n                    size: {\r\n                        x: width,\r\n                        y: constants.lineThickness\r\n                    },\r\n                    id: `${pair.id}_${myY}`\r\n                };\r\n            };\r\n\r\n            currentY += constants.borderThickness + constants.internalPadding;\r\n\r\n            const first = buildLine(pair.a, currentY);\r\n\r\n            currentY += first.size.y + constants.internalPadding;\r\n\r\n            const second = buildLine(pair.b, currentY);\r\n            currentY += second.size.y + constants.internalPadding + constants.borderThickness + constants.boxPadding;\r\n\r\n            this.printer.add(box);\r\n            this.printer.add(first);\r\n            this.printer.add(second);\r\n\r\n\r\n            currentCol = (currentCol + 1) % constants.cols;\r\n            if (currentCol !== 0) {\r\n                currentY = startY;\r\n            }\r\n        }\r\n        this.printer.forceRender();\r\n        await this.pause();\r\n    }\r\n    public async higlightPairs(pairs: Pair[]): Promise<void> {\r\n        for (const pair of pairs) {\r\n            this.pairs.get(pair.id).color = \"yellow\";\r\n            this.printer.forceRender();\r\n            await this.pause();\r\n        }\r\n    }\r\n}\r\n\r\nclass DummyVisualizer implements ICampCleanupVisualizer {\r\n    public async showPairs(pairs: Pair[]): Promise<void> { }\r\n    public async higlightPairs(pairs: Pair[]): Promise<void> { }\r\n\r\n}\r\n","import { Parser } from \"../../../../support/parser\";\r\nimport { entryForFile, Pause, ResultOutputCallback, ScreenBuilder } from \"../../../entry\";\r\nimport { buildVisualizer } from \"./visualizer\";\r\n\r\nexport type Range = {\r\n    from: number;\r\n    to: number;\r\n};\r\n\r\nexport type Pair = {\r\n    a: Range;\r\n    b: Range;\r\n    id: number;\r\n};\r\n\r\nconst isIncludedIn = (outer: Range, inner: Range) => {\r\n    return outer.from <= inner.from && outer.to >= inner.to;\r\n};\r\n\r\nconst overlap = (a: Range, b: Range) => {\r\n    if (a.from > b.to || a.to < b.from) {\r\n        return false;\r\n    } else {\r\n        return true;\r\n    }\r\n};\r\n\r\nconst parseRange = (token: string): Range => {\r\n    const [from, to] = token.split(\"-\").map((e) => parseInt(e, 10));\r\n    return {from, to};\r\n};\r\n\r\nconst parseInput = (lines: string[]): Pair[] =>\r\n    new Parser(lines)\r\n        .tokenize(\",\")\r\n        .startLabeling()\r\n        .label(a => parseRange(a.s()), \"a\")\r\n        .label(b => parseRange(b.s()), \"b\")\r\n        .map((d, i) => ({...d, id: i}))\r\n        .run();\r\n\r\nexport const campCleanup = entryForFile(\r\n    async ({ lines, resultOutputCallback, screen, pause }) => {\r\n        await executeEntry(\r\n            screen, \r\n            pause, \r\n            lines, \r\n            (pair: Pair) => isIncludedIn(pair.a, pair.b) || isIncludedIn(pair.b, pair.a), \r\n            resultOutputCallback\r\n        );\r\n    },\r\n    async ({ lines, resultOutputCallback, screen, pause }) => {\r\n        await executeEntry(\r\n            screen, \r\n            pause, \r\n            lines, \r\n            (pair: Pair) => overlap(pair.a, pair.b),\r\n            resultOutputCallback\r\n        );\r\n\r\n    },\r\n    {\r\n        key: \"camp-cleanup\",\r\n        title: \"Camp Cleanup\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2,\r\n        suggestedDelay: 10\r\n    }\r\n);\r\n\r\nasync function executeEntry(\r\n    screen: ScreenBuilder | undefined, \r\n    pause: Pause, \r\n    lines: string[], \r\n    interestingCondition: (pair: Pair) => boolean, \r\n    resultOutputCallback: ResultOutputCallback\r\n) {\r\n    const visualizer = buildVisualizer(screen, pause);\r\n\r\n    const pairs = parseInput(lines);\r\n\r\n    await visualizer.showPairs(pairs);\r\n\r\n    const interesting = pairs.filter(interestingCondition);\r\n\r\n    await visualizer.higlightPairs(interesting);\r\n\r\n    await resultOutputCallback(interesting.length);\r\n}\r\n\r\n","import { FixedSizeMatrix } from \"../../../../support/matrix\";\r\nimport { entryForFile } from \"../../../entry\";\r\n\r\ntype Instruction = {\r\n    type: \"noop\"\r\n} | {\r\n    type: \"add\",\r\n    value: number\r\n};\r\n\r\ntype State = {\r\n    cycle: number;\r\n    x: number;\r\n};\r\n\r\nconst parseInput = (lines: string[]): Instruction[] => \r\n    lines.map(line => {\r\n        const [token, rest] = line.split(\" \");\r\n        if (token === \"noop\") {\r\n            return {\r\n                type: \"noop\"\r\n            };\r\n        } else if (token === \"addx\") {\r\n            return {\r\n                type: \"add\",\r\n                value: parseInt(rest, 10)\r\n            };\r\n        } else {\r\n            throw new Error(\"Invalid token \" + token);\r\n        }\r\n    });\r\n\r\nclass CPU {\r\n    private cycle = 0;\r\n    private x = 1;\r\n\r\n    public *run(instruction: Instruction): Iterable<State>  {\r\n        if (instruction.type === \"noop\") {\r\n            this.cycle++;\r\n            yield {\r\n                cycle: this.cycle,\r\n                x: this.x\r\n            };\r\n        } else {\r\n            this.cycle++;\r\n            yield {\r\n                cycle: this.cycle,\r\n                x: this.x\r\n            };\r\n            this.cycle++;\r\n            yield {\r\n                cycle: this.cycle,\r\n                x: this.x\r\n            };\r\n            this.x += instruction.value;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const cathodeRayTube = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const instructions = parseInput(lines);\r\n        const cpu = new CPU();\r\n\r\n        const interesting = [];\r\n\r\n        for(const instruction of instructions) {\r\n            for (const state of cpu.run(instruction)) {\r\n                // await outputCallback(state);\r\n                if ((state.cycle - 20) % 40 === 0) {\r\n                    interesting.push(state.cycle * state.x);\r\n                }\r\n            }\r\n        }\r\n        // await outputCallback(interesting);\r\n        await resultOutputCallback(interesting.reduce((acc, next) => acc + next, 0));\r\n\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const instructions = parseInput(lines);\r\n        const cpu = new CPU();\r\n\r\n        const size = {x: 40, y: 6};\r\n\r\n\r\n        const output = new FixedSizeMatrix<\"#\">(size);\r\n\r\n        for(const instruction of instructions) {\r\n            for (const state of cpu.run(instruction)) {\r\n                const index = (state.cycle - 1) % 240;\r\n                const y = Math.floor(index / 40);\r\n                const x = index % 40;\r\n                if (state.x >= x - 1 && state.x <= x + 1) {\r\n                    output.set({x, y}, \"#\");\r\n                }\r\n            }\r\n        }\r\n        await resultOutputCallback(output.toString(e => e || \".\"));\r\n    },\r\n    {\r\n        key: \"cathode-ray-tube\",\r\n        title: \"Cathode-Ray Tube\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);","import { groupBy, sum } from \"../../../../support/sequences\";\r\nimport { entryForFile } from \"../../../entry\";\r\n\r\ntype Packet = number | Packet[]\r\n\r\nconst parseLines = (lines: string[]): {a: Packet, b: Packet}[] => {\r\n    return groupBy(lines, 3).map(e => {\r\n        const [a, b] = e;\r\n        return {a: JSON.parse(a), b: JSON.parse(b)};\r\n    })\r\n}\r\n\r\nconst isNumber = (a: Packet): a is number => {\r\n    return typeof(a) !== \"object\";\r\n}\r\n\r\nconst comparer = (a: Packet, b: Packet): number => {\r\n    if (isNumber(a) && isNumber(b)) {\r\n        return a - b;\r\n    } else if (typeof(a) === \"object\" && typeof(b) === \"object\") {\r\n        const maxLength = Math.max(a.length, b.length);\r\n        for (let i = 0; i < maxLength; i++) {\r\n            const xa = a[i];\r\n            const xb = b[i];\r\n            if (xa === undefined) {\r\n                return -1;\r\n            } else if (xb === undefined) {\r\n                return 1;\r\n            }\r\n            const nested = comparer(xa, xb);\r\n            if (nested !== 0) {\r\n                return nested;\r\n            }\r\n        }\r\n        return 0;\r\n    } else {\r\n        if (typeof(a) === \"object\") {\r\n            b = [b];\r\n        } else {\r\n            a = [a];\r\n        }\r\n        return comparer(a, b);\r\n    }\r\n}\r\n\r\nexport const distressSignal = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const ps = parseLines(lines);\r\n        const indexes = ps.map((e, i) => {\r\n            const res = comparer(e.a, e.b);\r\n            if (res < 0) {\r\n                return i + 1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        });\r\n        await resultOutputCallback(sum(indexes));\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const ps = parseLines(lines);\r\n        const dividers = {a: [[2]], b: [[6]]};\r\n        ps.push(dividers);\r\n        const packets = ps.flatMap(e => [e.a, e.b]);\r\n        packets.sort(comparer);\r\n        const indexes = [packets.findIndex(e => e === dividers.a), packets.findIndex(e => e === dividers.b)];\r\n        await resultOutputCallback(indexes.map(e => e + 1).reduce((acc, next) => acc * next, 1));\r\n    },\r\n    {\r\n        key: \"distress-signal\",\r\n        title: \"Distress Signal\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);","import { entryForFile } from \"../../../entry\";\r\n\r\ntype SnafuDigit = \"0\" | \"1\" | \"2\" | \"-\" | \"=\";\r\ntype Snafu = SnafuDigit[];\r\n\r\nconst exampleInput =\r\n`1=-0-2\r\n12111\r\n2=0=\r\n21\r\n2=01\r\n111\r\n20012\r\n112\r\n1=-1=\r\n1-12\r\n12\r\n1=\r\n122`;\r\n\r\nconst parseSnafu = (s: string): Snafu => {\r\n    const tokens = s.split(\"\");\r\n    if (tokens.some(t => ![\"0\",\"1\",\"2\",\"-\",\"=\"].includes(t))) {\r\n        throw new Error(\"Invalid snafu: \" + s);\r\n    }\r\n    return tokens.reverse() as Snafu;\r\n}\r\n\r\nconst snafuToString = (s: Snafu) => {\r\n    return [...s].reverse().join(\"\");\r\n}\r\n\r\nconst snafuToDecimal = (snafu: Snafu): number => {\r\n    let result = 0;\r\n    let factor = 1;\r\n    for (const digit of snafu) {\r\n        let value: number;\r\n        if (digit === \"0\" || digit === \"1\" || digit === \"2\") {\r\n            value = parseInt(digit, 10);\r\n        } else if (digit === \"-\") {\r\n            value = -1;\r\n        } else {\r\n            value = -2;\r\n        }\r\n        result += value * factor;\r\n        factor *= 5;\r\n    }\r\n    return result;\r\n}\r\n\r\nconst decimalToSnafu = (n: number): Snafu => {\r\n    const res: Snafu = [];\r\n    while (n > 0) {\r\n        const digit = n % 5;\r\n        n = Math.floor(n/5);\r\n        if (digit < 3) {\r\n            res.push(digit.toString() as SnafuDigit);\r\n        } else {\r\n            if (digit === 3) {\r\n                res.push(\"=\");\r\n            } else {\r\n                res.push(\"-\");\r\n            }\r\n            n++;\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\nconst parseInput = (lines: string[]): Snafu[] => {\r\n    return lines.map(parseSnafu);\r\n}\r\n\r\nexport const fullOfHotAir = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const snafus = parseInput(lines);\r\n        const decimals = snafus.map(snafuToDecimal);\r\n        const sum = decimals.reduce((acc, next) => acc + next, 0);\r\n        await outputCallback(sum);\r\n        await outputCallback(snafuToDecimal(decimalToSnafu(sum)));\r\n        await resultOutputCallback(snafuToString(decimalToSnafu(sum)));\r\n\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        throw new Error(\"It's christmas, only part 1 exists!\");\r\n    },\r\n    {\r\n        key: \"full-of-hot-air\",\r\n        title: \"Full of Hot Air\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        date: 25,\r\n        exampleInput,\r\n        stars: 2\r\n    }\r\n);","import { Parser } from \"../../../../support/parser\";\r\nimport { entryForFile } from \"../../../entry\";\r\nconst exampleInput =\r\n`1\r\n2\r\n-3\r\n3\r\n-2\r\n0\r\n4`;\r\n\r\ntype Cell = {\r\n    value: bigint;\r\n    index: number;\r\n    offset: number;\r\n}\r\n\r\nconst parseLines = (lines: string[]): Cell[] => {\r\n    return new Parser(lines).asNumbers().map((e, i) => {\r\n        return {value: BigInt(e), index: i, offset: e}\r\n    }).run();\r\n}\r\n\r\nexport const grovePositioningSystem = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const input = parseLines(lines);\r\n        for (let i = 0; i < input.length; i++) {\r\n            const index = input.findIndex(e => e.index === i);\r\n            const [item] = input.splice(index, 1);\r\n            let newIndex = index + item.offset;\r\n            while (newIndex < 0) {\r\n                newIndex += input.length;\r\n            }\r\n            newIndex %= input.length;\r\n            if (newIndex < 0) {\r\n                throw new Error(\"Invalid index\");\r\n            }\r\n            input.splice(Number(newIndex), 0, item);\r\n        }\r\n        const interesting = [1000, 2000, 3000];\r\n        const zeroIndex = input.findIndex(e => e.value === 0n)!;\r\n        const targets = interesting.map(i => (i + zeroIndex) % input.length).map(i => input[i]).map(e => e.value);\r\n        await resultOutputCallback(Number(targets.reduce((acc, next) => acc + next, 0n)));\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const input = parseLines(lines);\r\n        const factor = 811589153;\r\n        input.forEach(i => i.value *= BigInt(factor));\r\n        input.forEach(i => i.offset = (i.offset * factor));\r\n        for (let iteration = 0; iteration < 10; iteration++) {\r\n            for (let i = 0; i < input.length; i++) {\r\n                const index = input.findIndex(e => e.index === i);\r\n                const [item] = input.splice(index, 1);\r\n                let newIndex = index + item.offset;\r\n                while (newIndex < 0) {\r\n                    const f = Math.ceil(Math.abs(newIndex) / input.length)\r\n                    newIndex += input.length * f;\r\n                }\r\n                newIndex %= input.length;\r\n                if (newIndex < 0) {\r\n                    throw new Error(\"Invalid index\");\r\n                }\r\n                input.splice(Number(newIndex), 0, item);\r\n            }\r\n        }\r\n        const interesting = [1000, 2000, 3000];\r\n        const zeroIndex = input.findIndex(e => e.value === 0n)!;\r\n        const targets = interesting.map(i => (i + zeroIndex) % input.length).map(i => input[i]).map(e => e.value);\r\n        await resultOutputCallback(Number(targets.reduce((acc, next) => acc + next, 0n)));\r\n    },\r\n    {\r\n        key: \"grove-positioning-system\",\r\n        title: \"Grove Positioning System\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        exampleInput,\r\n        stars: 2,\r\n        date: 20\r\n    }\r\n);","import { entryForFile } from \"../../../entry\";\r\nimport {calculateDistances} from \"../../../../support/labyrinth\";\r\nimport { Coordinate, getSurrounding, manhattanDistance, serialization } from \"../../../../support/geometry\";\r\nimport { FixedSizeMatrix } from \"../../../../support/matrix\";\r\nimport Best, { CustomBest, SimpleBest } from \"../../../../support/best\";\r\n\r\nconst parseLines = (lines: string[]) => {\r\n    let start: Coordinate | null = null;\r\n    let end: Coordinate | null = null;\r\n    const field: FixedSizeMatrix<number> = new FixedSizeMatrix<number>({\r\n        y: lines.length, \r\n        x: lines[0].length\r\n    });\r\n\r\n    for (let y = 0; y < lines.length; y++) {\r\n        for (let x = 0; x < lines[y].length; x++) {\r\n            const cell = lines[y][x];\r\n            if (cell === \"S\") {\r\n                start = {x,y};\r\n            } else if (cell === \"E\") {\r\n                end = {x,y};\r\n            }\r\n            const value = cell === \"S\" ? \"a\" : (cell === \"E\" ? \"z\" : cell);\r\n            const elevation = value.charCodeAt(0) - \"a\".charCodeAt(0);\r\n            field.set({x, y}, elevation);\r\n        }\r\n    }\r\n\r\n    if (!start || !end) {\r\n        throw new Error(\"Could not find start or end points\");\r\n    }\r\n    return {start, end, field};\r\n}\r\n\r\n//         lines = \r\n// `Sabqponm\r\n// abcryxxl\r\n// accszExk\r\n// acctuvwj\r\n// abdefghi`.split(\"\\n\");\r\n\r\nexport const hillClimbingAlgorithm = entryForFile(\r\n    async ({ lines, resultOutputCallback }) => {\r\n        const {start, end, field} = parseLines(lines);\r\n        const distances = calculateDistances(\r\n            field.get.bind(field),\r\n            (s, e) => {\r\n                const to = field.get(e);\r\n                if (to === undefined || to - s.cell > 1) {\r\n                    return null;\r\n                }\r\n                return manhattanDistance(s.coordinate, e) + (s.distance || 0);\r\n            },\r\n            getSurrounding,\r\n            start,\r\n            e => manhattanDistance(e.coordinate, end) === 0\r\n        );\r\n\r\n        await resultOutputCallback(distances.map(end));\r\n    },\r\n    async ({ lines, resultOutputCallback, pause }) => {\r\n        const {end, field} = parseLines(lines);\r\n        const bestStart = new SimpleBest<number>((a, b) => b - a);\r\n        const starts = field.filter((c, e) => e === 0);\r\n        for (const start of starts) {\r\n            await pause();\r\n            const distances = calculateDistances(\r\n                field.get.bind(field),\r\n                (s, e) => {\r\n                    const to = field.get(e);\r\n                    if (to === undefined || to - s.cell > 1) {\r\n                        return null;\r\n                    }\r\n                    return manhattanDistance(s.coordinate, e) + (s.distance || 0);\r\n                },\r\n                getSurrounding,\r\n                start,\r\n                e => manhattanDistance(e.coordinate, end) === 0\r\n            );\r\n            const res = distances.map(end);\r\n            if (res !== null) {\r\n                bestStart.add(res);\r\n            }\r\n        }\r\n\r\n        await resultOutputCallback(bestStart.currentBest);\r\n    },\r\n    {\r\n        key: \"hill-climbing-algorithm\",\r\n        title: \"Hill Climbing Algorithm\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);","import bigInt from \"big-integer\";\r\nimport { buildGroups } from \"../../../../support/sequences\";\r\nimport { entryForFile } from \"../../../entry\";\r\nimport { Parser } from \"../../../../support/parser\";\r\n\r\ntype Item = {\r\n    value: number;\r\n    index: number;\r\n}\r\n\r\nclass Monkey {\r\n    /**\r\n     *\r\n     */\r\n\r\n    public inspected: number = 0;\r\n\r\n    public modulo: number | null = null;\r\n    constructor(\r\n        private items: Item[],\r\n        private operation: (old: number) => number,\r\n        public test: number,\r\n        private to: { true: number, false: number },\r\n        public isWorried: boolean\r\n    ) {\r\n    }\r\n\r\n    public round(monkeys: Monkey[]) {\r\n        for (const item of this.items) {\r\n            let worry = this.operation(item.value);\r\n            if (!this.isWorried) {\r\n                worry = worry / 3;\r\n            }\r\n                if (this.modulo !== null) {\r\n                    worry = worry % this.modulo;\r\n                }\r\n            const target = worry % this.test === 0 ? this.to.true : this.to.false;\r\n            monkeys[target].items.push({value: worry, index: item.index});\r\n            this.inspected++;\r\n        }\r\n        this.items = [];\r\n    }\r\n\r\n    public serialize() {\r\n        const data = this.items.map(i => i.index).sort();\r\n        return JSON.stringify(data);\r\n    }\r\n\r\n    public toString() {\r\n        return this.items.join(\", \");\r\n    }\r\n}\r\n\r\nconst serialize = (monkeys: Monkey[]) => monkeys.map(m => m.serialize()).join(\"_\");\r\n\r\nconst parseInput = (lines: string[]): Monkey[] => {\r\n\r\n    const getLast = (line: string) => {\r\n        const tokenized = line.split(\" \");\r\n        return tokenized[tokenized.length - 1];\r\n    }\r\n\r\n    let prefix = 0;\r\n\r\n    const parser = new Parser(lines)\r\n        .group(\"\")\r\n        .groupMap(p => \r\n            p.startLabeling()\r\n            .label(id => id.n(), \"id\")\r\n            .label(items => items\r\n                .transform(/: .*/)\r\n                .tokenize(\", \")\r\n                .asNumbers()\r\n                .run(),\r\n                \"items\"\r\n            )\r\n            .label(rawLine => {\r\n                const line = rawLine.s();\r\n                const rawoperand = getLast(line);\r\n                let operation = (old: number) => old.valueOf();\r\n                if (rawoperand === \"old\") {\r\n                    operation = (old: number) => old.valueOf() * old.valueOf();\r\n                } else {\r\n                    const operand = parseInt(rawoperand, 10);\r\n                    operation = (old: number) => (line.includes(\"*\") ? old * operand : old + operand);\r\n                }\r\n                return operation;\r\n\r\n            }, \"operation\")\r\n            .label(testN => testN.n(), \"testN\")\r\n            .label(t => t.n(), \"true\")\r\n            .label(t => t.n(), \"false\")\r\n            .run()\r\n        )\r\n        .map((e, monkeyIndex) => {\r\n            return new Monkey(\r\n            e.items.map((item, index) => ({value: item, index: monkeyIndex * 100 + index})),\r\n            e.operation, \r\n            e.testN, {\r\n                true: e.true, false: e.false\r\n            }, false);\r\n        })\r\n        .run();\r\n\r\n    return parser;\r\n}\r\n\r\nexport const monkeyInTheMiddle = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const monkeys = parseInput(lines);\r\n\r\n        let modulo = 1;\r\n\r\n        for (const monkey of monkeys) {\r\n            modulo *= monkey.test;\r\n        }\r\n\r\n        for (const monkey of monkeys) {\r\n            monkey.modulo = modulo;\r\n        }\r\n\r\n\r\n\r\n        for (let i = 0; i < 20; i++) {\r\n            for (const monkey of monkeys) {\r\n                monkey.round(monkeys);\r\n            }\r\n\r\n        }\r\n\r\n        monkeys.sort((a, b) => b.inspected - a.inspected);\r\n        await resultOutputCallback(monkeys[0].inspected * monkeys[1].inspected);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const monkeys = parseInput(lines);\r\n\r\n        for (const monkey of monkeys) {\r\n            monkey.isWorried = true;\r\n        }\r\n        let modulo = 1;\r\n\r\n        for (const monkey of monkeys) {\r\n            modulo *= monkey.test;\r\n        }\r\n\r\n        for (const monkey of monkeys) {\r\n            monkey.modulo = modulo;\r\n        }\r\n\r\n        for (let i = 0; i < 10000; i++) {\r\n            for (const monkey of monkeys) {\r\n                monkey.round(monkeys);\r\n            }\r\n        }\r\n\r\n        monkeys.sort((a, b) => b.inspected - a.inspected);\r\n        await resultOutputCallback(monkeys[0].inspected * monkeys[1].inspected);\r\n    },\r\n    {\r\n        key: \"monkey-in-the-middle\",\r\n        title: \"Monkey in the Middle\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);","import { Bounds, CCoordinate, Coordinate, LiteralDirection, directions, getSurrounding, isInBounds, manhattanDistance, mapLiteralToDirection, rotate, serialization, sumCoordinate } from \"../../../../support/geometry\";\r\nimport { FixedSizeMatrix } from \"../../../../support/matrix\";\r\nimport { entryForFile } from \"../../../entry\";\r\nimport { matrixSerializer } from \"../../2018/mode-maze\";\r\n\r\nconst exampleInput =\r\n    `        ...#    \r\n        .#..    \r\n        #...    \r\n        ....    \r\n...#.......#    \r\n........#...    \r\n..#....#....    \r\n..........#.    \r\n        ...#....\r\n        .....#..\r\n        .#......\r\n        ......#.\r\n\r\n10R5L5R10L4R5L5`\r\n\r\ntype Connection = {\r\n    a: { face: Bounds, direction: LiteralDirection },\r\n    b: { face: Bounds, direction: LiteralDirection },\r\n    isCross: boolean\r\n};\r\n\r\nclass Connections {\r\n\r\n    private readonly lookup: { [key: string]: { face: Bounds, direction: CCoordinate, isCross: boolean } } = {};\r\n\r\n    constructor(\r\n        lines: string[],\r\n        private faces: Bounds[],\r\n        private matrix: Field,\r\n        private faceSize: number\r\n    ) {\r\n        const connections = Connections.parseConnections(lines, faces);\r\n        for (const conn of connections) {\r\n            const aKey = Connections.serialize(conn.a.face, conn.a.direction);\r\n            if (this.lookup[aKey]) {\r\n                throw new Error(\"Overriding \" + aKey);\r\n            }\r\n            this.lookup[aKey] = {\r\n                ...conn.b,\r\n                direction: mapLiteralToDirection(conn.b.direction),\r\n                isCross: conn.isCross\r\n            };\r\n            const bKey = Connections.serialize(conn.b.face, conn.b.direction);\r\n            if (this.lookup[bKey]) {\r\n                throw new Error(\"Overriding \" + bKey);\r\n            }\r\n            this.lookup[bKey] = {\r\n                ...conn.a,\r\n                direction: mapLiteralToDirection(conn.a.direction),\r\n                isCross: conn.isCross\r\n            };\r\n        }\r\n        // console.log(Object.keys(this.lookup));\r\n    }\r\n\r\n    public getDestination(coordinate: Coordinate, direction: CCoordinate): { c: Coordinate, direction: CCoordinate } | null {\r\n        const [face] = this.faces.filter(e => isInBounds(coordinate, e));\r\n        if (!face) {\r\n            throw new Error(\"Invalid coordinate\");\r\n        }\r\n        const immediate = direction.sum(coordinate);\r\n        if (isInBounds(immediate, face)) {\r\n            const immediateCell = this.matrix.get(immediate);\r\n            if (immediateCell === \"#\") {\r\n                return null;\r\n            } else if (immediateCell === \".\") {\r\n                return { c: immediate, direction };\r\n            } else {\r\n                throw new Error(\"Invalid coordinate after step\");\r\n            }\r\n        }\r\n        //wrapping\r\n        const connection = this.lookup[Connections.serialize(face, direction)];\r\n        // console.log(connection);\r\n        if (!connection) {\r\n            // console.error(face, direction);\r\n            throw new Error(\"Can't find the connection\");\r\n        }\r\n        const relativePosition = sumCoordinate(coordinate, { x: -face.topLeft.x, y: -face.topLeft.y });\r\n        if ([relativePosition.x, relativePosition.y].every(e => e !== 0 && e !== this.faceSize - 1)) {\r\n            throw new Error(\"Wrapping on invalid coordinate\");\r\n        }\r\n        let index = 0;\r\n        if (manhattanDistance(direction, directions.up) === 0 || manhattanDistance(direction, directions.down) === 0) {\r\n            index = relativePosition.x;\r\n        } else {\r\n            index = relativePosition.y;\r\n        }\r\n        // console.log({index});\r\n        let destinationPosition: Coordinate;\r\n        let destinationDirection: CCoordinate;\r\n        if (manhattanDistance(connection.direction, directions.up) === 0) {\r\n            // console.log(\"Up!\");\r\n            destinationPosition = { ...connection.face.topLeft };\r\n            destinationPosition.x += connection.isCross ? this.faceSize - 1 - index : index;\r\n            destinationDirection = directions.down;\r\n        } else if (manhattanDistance(connection.direction, directions.down) === 0) {\r\n            // console.log(\"Down!\");\r\n            destinationPosition = { ...connection.face.topLeft };\r\n            destinationPosition.y += connection.face.size.y - 1;\r\n            destinationPosition.x += connection.isCross ? this.faceSize - 1 - index : index;\r\n            destinationDirection = directions.up;\r\n        } else if (manhattanDistance(connection.direction, directions.left) === 0) {\r\n            // console.log(\"left!\");\r\n            destinationPosition = { ...connection.face.topLeft };\r\n            destinationPosition.y += connection.isCross ? this.faceSize - 1 - index : index;\r\n            destinationDirection = directions.right;\r\n        } else if (manhattanDistance(connection.direction, directions.right) === 0) {\r\n            // console.log(\"right!\");\r\n            destinationPosition = { ...connection.face.topLeft };\r\n            destinationPosition.x += connection.face.size.x - 1;\r\n            destinationPosition.y += connection.isCross ? this.faceSize - 1 - index : index;\r\n            destinationDirection = directions.left;\r\n        } else {\r\n            throw new Error(\"Invalid connection direction\");\r\n        }\r\n        if (this.matrix.get(destinationPosition) === \"#\") {\r\n            return null;\r\n        } else if (this.matrix.get(destinationPosition) !== \".\") {\r\n            throw new Error(\"Invalid destination cell: \" + serialization.serialize(destinationPosition));\r\n        }\r\n        // console.log(destinationDirection);\r\n        return { c: destinationPosition, direction: destinationDirection };\r\n    }\r\n\r\n    private static serialize(face: Bounds, direction: LiteralDirection | CCoordinate) {\r\n        const cDirection = (typeof direction === \"string\") ? mapLiteralToDirection(direction) : direction;\r\n        return `${serialization.serialize(face.topLeft)}_${serialization.serialize(cDirection)}`;\r\n    }\r\n\r\n    private static parseConnections(lines: string[], faces: Bounds[]): Connection[] {\r\n        const res: Connection[] = [];\r\n        for (const line of lines) {\r\n            const aFace = parseInt(line[0], 10);\r\n            const aDir = line[1];\r\n            const bDir = line[2];\r\n            const bFace = parseInt(line[3], 10);\r\n            const isCross = line[4] === \"x\";\r\n            res.push({\r\n                a: {\r\n                    face: faces[aFace],\r\n                    direction: aDir as LiteralDirection\r\n                },\r\n                b: {\r\n                    face: faces[bFace],\r\n                    direction: bDir as LiteralDirection\r\n                },\r\n                isCross\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n}\r\n\r\ntype Field = FixedSizeMatrix<Cell>;\r\n\r\n\r\ntype Cell = undefined | \".\" | \"#\";\r\ntype Instruction = number | \"L\" | \"R\";\r\n\r\nconst directionValues = {\r\n    [serialization.serialize(directions.right)]: 0,\r\n    [serialization.serialize(directions.down)]: 1,\r\n    [serialization.serialize(directions.left)]: 2,\r\n    [serialization.serialize(directions.up)]: 3,\r\n};\r\n\r\nconst parseInstructions = (line: string): Instruction[] => {\r\n    const result: Instruction[] = [];\r\n    let currentNumber = 0;\r\n    for (const e of line) {\r\n        const parsed = parseInt(e, 10);\r\n        if (!isNaN(parsed)) {\r\n            currentNumber *= 10;\r\n            currentNumber += parsed;\r\n        } else if (e === \"L\" || e === \"R\") {\r\n            if (currentNumber > 0) {\r\n                result.push(currentNumber);\r\n                currentNumber = 0;\r\n            }\r\n            result.push(e);\r\n        }\r\n    }\r\n    if (currentNumber > 0) {\r\n        result.push(currentNumber);\r\n    }\r\n    return result;\r\n}\r\nexport const monkeyMap = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const matrixLines = lines.slice(0, lines.length - 2);\r\n        const instructions = parseInstructions(lines[lines.length - 1]);\r\n        const matrix = FixedSizeMatrix.fromLines(matrixLines, e => e === \" \" ? undefined : e as Cell);\r\n        console.log(matrix.get({x:0,y:0}));\r\n        console.log({cell: lines[0][0]});\r\n        let currentPosition = { y: 0, x: 0 };\r\n        let currentDirection = directions.right;\r\n        while (matrix.get(currentPosition) === undefined) {\r\n            currentPosition = directions.right.sum(currentPosition);\r\n        }\r\n        await outputCallback(\"Starting position: \" + serialization.serialize(currentPosition));\r\n        await outputCallback(matrix.toString(e => e || \"X\"));\r\n        await outputCallback(\"Instructions parsed: \" + (instructions.map(e => e.toString()).join(\"\") === lines[lines.length - 1]));\r\n        for (const instruction of instructions) {\r\n            if (instruction === \"L\") {\r\n                currentDirection = rotate(currentDirection, \"Counterclockwise\");\r\n            } else if (instruction === \"R\") {\r\n                currentDirection = rotate(currentDirection, \"Clockwise\");\r\n            } else {\r\n                for (let i = 0; i < instruction; i++) {\r\n                    let candidatePosition = currentDirection.sum(currentPosition);\r\n                    if (matrix.get(candidatePosition) === undefined) {\r\n                        if (manhattanDistance(directions.right, currentDirection) === 0) {\r\n                            candidatePosition.x = 0;\r\n                        } else if (manhattanDistance(directions.left, currentDirection) === 0) {\r\n                            candidatePosition.x = matrix.size.x - 1;\r\n                        } else if (manhattanDistance(directions.up, currentDirection) === 0) {\r\n                            candidatePosition.y = matrix.size.y - 1;\r\n                        } else if (manhattanDistance(directions.down, currentDirection) === 0) {\r\n                            candidatePosition.y = 0;\r\n                        } else {\r\n                            throw new Error(\"What direction is this? \" + serialization.serialize(currentDirection));\r\n                        }\r\n                        while (matrix.get(candidatePosition) === undefined) {\r\n                            candidatePosition = currentDirection.sum(candidatePosition);\r\n                        }\r\n                    }\r\n                    if (matrix.get(candidatePosition) === \"#\") {\r\n                        break;\r\n                    } else if (matrix.get(candidatePosition) === \".\") {\r\n                        currentPosition = candidatePosition;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const finalPosition = sumCoordinate({ x: 1, y: 1 }, currentPosition);\r\n        const directionValue = directionValues[serialization.serialize(currentDirection)];\r\n        await outputCallback({ p: serialization.serialize(finalPosition), directionValue });\r\n        await resultOutputCallback(finalPosition.y * 1000 + finalPosition.x * 4 + directionValue);\r\n\r\n    },\r\n    async ({ lines, isExample, resultOutputCallback, outputCallback, isQuickRunning, pause }) => {\r\n        const faceSize = isExample ? 4 : 50;\r\n\r\n        const matrixLines = lines.slice(0, lines.length - 2);\r\n        const instructions = parseInstructions(lines[lines.length - 1]);\r\n        const matrix = FixedSizeMatrix.fromLines(matrixLines, e => e === \" \" ? undefined : e as Cell);\r\n\r\n        const faceCorners: Bounds[] = [];\r\n\r\n        for (let x = 0; x < matrix.size.x; x += faceSize) {\r\n            for (let y = 0; y < matrix.size.y; y += faceSize) {\r\n                if (matrix.get({ x, y }) !== undefined) {\r\n                    faceCorners.push({\r\n                        topLeft: { x, y },\r\n                        size: { x: faceSize, y: faceSize }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        await outputCallback(faceCorners.length);\r\n        await outputCallback(faceCorners.map(c => c.topLeft).map(serialization.serialize).join(\"\\n\"));\r\n\r\n        if (!isQuickRunning) {\r\n            const factor = isExample ? 1 : 10;\r\n\r\n            const mapped = new FixedSizeMatrix<string>({ x: matrix.size.x / factor, y: matrix.size.y / factor });\r\n            for (let nx = 0; nx < mapped.size.x; nx++) {\r\n                for (let ny = 0; ny < mapped.size.y; ny++) {\r\n                    const x = nx * factor;\r\n                    const y = ny * factor;\r\n                    let cell: string | undefined = undefined;\r\n                    if (x % faceSize === 0 || x % faceSize === faceSize - 1) {\r\n                        if (y % faceSize === 0 || (y % faceSize === faceSize - 1)) {\r\n                            cell = \"+\";\r\n                        } else {\r\n                            cell = \"|\";\r\n                        }\r\n                    } else if (y % faceSize === 0 || (y % faceSize === faceSize - 1)) {\r\n                        cell = \"-\";\r\n                    }\r\n                    for (let i = 0; i < faceCorners.length; i++) {\r\n                        if (isInBounds({ x, y }, faceCorners[i])) {\r\n                            cell = i.toString();\r\n                        }\r\n                    }\r\n                    if (cell === undefined) {\r\n                        cell = \".\";\r\n                    }\r\n                    mapped.set({ x: nx, y: ny }, cell);\r\n\r\n                }\r\n            }\r\n\r\n            await outputCallback(mapped.toString(e => e || \".\"));\r\n        }\r\n\r\n        const mappings = isExample ? [\r\n            \"0><1\",\r\n            \"0^^2x\",\r\n            \"0vv4x\",\r\n            \"0<v5x\",\r\n            \"1><3\",\r\n            \"1^<2\",\r\n            \"1v<4x\",\r\n            \"3^v2\",\r\n            \"3v^4\",\r\n            \"3>^5x\",\r\n            \"2>>5x\",\r\n            \"4><5\"\r\n        ] : [\r\n            \"2><5\",\r\n            \"2v^3\",\r\n            \"2^<1\",\r\n            \"2<<0x\",\r\n            \"5v>3\",\r\n            \"5>>4x\",\r\n            \"5^v1\",\r\n            \"3<^0\",\r\n            \"3v^4\",\r\n            \"4<>0\",\r\n            \"4v>1\",\r\n            \"0v^1\"\r\n        ];\r\n\r\n\r\n        const connections = new Connections(mappings, faceCorners, matrix, faceSize);\r\n\r\n\r\n        if (!isQuickRunning) {\r\n\r\n            //test cases\r\n            await outputCallback(\"Warning: running test cases. This could take a while\");\r\n\r\n            const inPlaceInstructions = [\"\", \"L\", \"LL\", \"LLL\"].map(e => e + (faceSize * 4).toString()).map(parseInstructions);\r\n\r\n            const emptyMatrix = matrix.map((e, c) => e === \"#\" || e === \".\" ? \".\" : undefined);\r\n            const emptyConnections = new Connections(mappings, faceCorners, emptyMatrix, faceSize);\r\n\r\n            for (let x = 0; x < matrix.size.x; x++) {\r\n                await pause();\r\n                for (let y = 0; y < matrix.size.y; y++) {\r\n                    if (emptyMatrix.get({ x, y }) !== \".\") {\r\n                        continue;\r\n                    }\r\n                    const startingPosition = { x, y };\r\n                    const direction = directions.right;\r\n                    for (const instruction of inPlaceInstructions) {\r\n                        const testCase = `${serialization.serialize(startingPosition)}->${serialization.serialize(direction)}[${JSON.stringify(instruction)}]`;\r\n                        const destination = executeInstructions(\r\n                            instruction,\r\n                            direction,\r\n                            emptyConnections,\r\n                            startingPosition\r\n                        ).currentPosition;\r\n                        if (manhattanDistance(startingPosition, destination) !== 0) {\r\n                            throw new Error(`Test case failed: ${testCase}->${serialization.serialize(destination)}`);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let currentPosition = { y: 0, x: 0 };\r\n        let currentDirection = directions.right;\r\n        while (matrix.get(currentPosition) === undefined) {\r\n            currentPosition = directions.right.sum(currentPosition);\r\n        }\r\n        await outputCallback(\"Starting position: \" + serialization.serialize(currentPosition));\r\n\r\n        ({ currentDirection, currentPosition } = executeInstructions(\r\n            instructions,\r\n            currentDirection,\r\n            connections,\r\n            currentPosition));\r\n\r\n        await outputCallback(currentPosition);\r\n        await outputCallback(currentDirection);\r\n\r\n        const finalPosition = sumCoordinate({ x: 1, y: 1 }, currentPosition);\r\n        const directionValue = directionValues[serialization.serialize(currentDirection)];\r\n        await outputCallback({ p: serialization.serialize(finalPosition), directionValue });\r\n        await resultOutputCallback(finalPosition.y * 1000 + finalPosition.x * 4 + directionValue);\r\n\r\n    },\r\n    {\r\n        key: \"monkey-map\",\r\n        title: \"Monkey Map\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        date: 22,\r\n        exampleInput,\r\n        fixedInput: true,\r\n        stars: 2\r\n    }\r\n);\r\n\r\nfunction executeInstructions(instructions: Instruction[], currentDirection: CCoordinate, connections: Connections, currentPosition: Coordinate) {\r\n    for (const instruction of instructions) {\r\n        if (typeof instruction === \"string\") {\r\n            if (instruction === \"L\") {\r\n                currentDirection = rotate(currentDirection, \"Counterclockwise\");\r\n            } else {\r\n                currentDirection = rotate(currentDirection, \"Clockwise\");\r\n            }\r\n        } else {\r\n            for (let i = 0; i < instruction; i++) {\r\n                const candidate = connections.getDestination(currentPosition, currentDirection);\r\n                // console.log(JSON.stringify(candidate));\r\n                if (candidate) {\r\n                    currentPosition = candidate.c;\r\n                    currentDirection = candidate.direction;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return { currentDirection, currentPosition };\r\n}\r\n","import { entryForFile } from \"../../../entry\";\r\n\r\nconst exampleInput = \r\n`root: pppw + sjmn\r\ndbpl: 5\r\ncczh: sllz + lgvd\r\nzczc: 2\r\nptdq: humn - dvpt\r\ndvpt: 3\r\nlfqf: 4\r\nhumn: 5\r\nljgn: 2\r\nsjmn: drzm * dbpl\r\nsllz: 4\r\npppw: cczh / lfqf\r\nlgvd: ljgn * ptdq\r\ndrzm: hmdt - zczc\r\nhmdt: 32`;\r\n\r\ntype Monkey = {\r\n    name: string;\r\n    instruction: number | Operation;\r\n}\r\n\r\ntype Operation = {\r\n    a: string;\r\n    b: string;\r\n    operator: Operator;\r\n};\r\n\r\ntype Operator =\"*\" | \"+\" | \"/\" | \"-\" ;\r\n\r\nconst invertOperator = (op: Operator): Operator => {\r\n    if (op === \"*\") {\r\n        return \"/\";\r\n    } else if (op === \"+\") {\r\n        return \"-\";\r\n    } else if (op === \"-\") {\r\n        return \"+\";\r\n    } else if (op === \"/\") {\r\n        return \"*\";\r\n    } else {\r\n        throw new Error(\"Invalid operator \" + op);\r\n    }\r\n}\r\n\r\ntype Results = {[key: string]: number | null}\r\ntype MonkeyLookup = {[key: string]: Monkey}\r\n\r\nconst parseLines = (lines: string[]): {monkeys: Monkey[], lookup: MonkeyLookup} => {\r\n    const monkeys = lines.map(line => {\r\n        const [name, rest] = line.split(\": \");\r\n        if (parseInt(rest, 10).toString() === rest) {\r\n            return {name, instruction: parseInt(rest, 10)} as Monkey;\r\n        } else {\r\n            const [a,operator,b] = rest.split(\" \");\r\n            if (operator !== \"*\" && operator !== \"+\" && operator !== \"/\" && operator !== \"-\") {\r\n                throw new Error(\"Invalid operator\");\r\n            }\r\n            return {name, instruction: {a,b,operator}} as Monkey;\r\n        }\r\n    });\r\n    const lookup: MonkeyLookup = {};\r\n    for (const m of monkeys) {\r\n        lookup[m.name] = m;\r\n    }\r\n    return {monkeys, lookup};\r\n}\r\n\r\nconst invertMonkey = (find: string, monkey: Monkey): Monkey => {\r\n    if (typeof monkey.instruction === \"number\") {\r\n        return monkey;\r\n    }\r\n    if (monkey.instruction.a === find) {\r\n        return {\r\n            name: find,\r\n            instruction: {\r\n                operator: invertOperator(monkey.instruction.operator),\r\n                a: monkey.name,\r\n                b: monkey.instruction.b\r\n            }\r\n        }\r\n    } else if (monkey.instruction.b === find) {\r\n        if (monkey.instruction.operator === \"-\") {\r\n            return {\r\n                name: find,\r\n                instruction: {\r\n                    operator: \"-\",\r\n                    b: monkey.name,\r\n                    a: monkey.instruction.a\r\n                }\r\n            }\r\n        }\r\n        return {\r\n            name: find,\r\n            instruction: {\r\n                operator: invertOperator(monkey.instruction.operator),\r\n                a: monkey.name,\r\n                b: monkey.instruction.a\r\n            }\r\n        }\r\n    } else {\r\n        throw new Error(\"Cannnot invert the monkey\");\r\n    }\r\n}\r\n\r\nconst calculate = (\r\n    name: string, \r\n    results: Results, \r\n    instructions: Monkey[], \r\n    lookup: MonkeyLookup,\r\n    options?: {errorOnHuman?: boolean, oldCalculator?: (label: string) => number | null}\r\n): number | null => {\r\n    if ((options && options.errorOnHuman) === true && name === \"humn\") {\r\n        return null;\r\n    }\r\n    if (results[name] !== undefined) {\r\n        return results[name];\r\n    }\r\n\r\n    const monkey = lookup[name];\r\n\r\n\r\n    if (!monkey) {\r\n        if (options && options.oldCalculator) {\r\n            const r = options.oldCalculator(name);\r\n            if (r !== null) {\r\n                return r;\r\n            }\r\n        }\r\n        throw new Error(\"Could not find instruction \" + name);\r\n    }\r\n\r\n    if (typeof monkey.instruction === \"number\") {\r\n        results[name] = monkey.instruction;\r\n        return monkey.instruction;\r\n    }\r\n\r\n    const a = calculate(monkey.instruction.a, results, instructions, lookup, options);\r\n    const b = calculate(monkey.instruction.b, results, instructions, lookup, options);\r\n\r\n    const o = monkey.instruction.operator;\r\n    let res = null;\r\n    if (a === null || b === null) {\r\n\r\n    } else if (o === \"*\") {\r\n        res= a * b;\r\n    } else if (o === \"+\") {\r\n        res = a + b;\r\n    } else if (o === \"-\") {\r\n        res = a - b;\r\n    } else {\r\n        res = Math.floor(a/b);\r\n    }\r\n    results[monkey.name] = res;\r\n    return res;\r\n}\r\n\r\nconst toString = (monkey: Monkey): string => {\r\n    if (typeof monkey.instruction === \"number\") {\r\n        return `${monkey.name}: ${monkey.instruction}}`;\r\n    }\r\n    return `${monkey.name}=${monkey.instruction.a}${monkey.instruction.operator}${monkey.instruction.b}`;\r\n}\r\n\r\nexport const monkeyMath = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const {monkeys, lookup} = parseLines(lines);\r\n        const res = calculate(\"root\", {}, monkeys, lookup);\r\n        await resultOutputCallback(res);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const {monkeys, lookup} = parseLines(lines);\r\n        const root = lookup[\"root\"];\r\n        const newMonkeys: Monkey[] = [];\r\n        let target = \"humn\";\r\n        while (true) {\r\n            const humns = monkeys.filter(m => typeof m.instruction !== \"number\" && [m.instruction.a,m.instruction.b].includes(target));\r\n            if (humns.length !== 1) {\r\n                throw new Error(\"Cannot invert: \" + humns.length);\r\n            }\r\n            const [current] = humns;\r\n            const newMonkey = invertMonkey(target, current);\r\n            await outputCallback(`${toString(current)}->`);\r\n            await outputCallback(`${toString(newMonkey)}`);\r\n            await outputCallback(\"--------\")\r\n            newMonkeys.push(newMonkey);\r\n            target = current.name;\r\n            if (target === \"root\") {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (const monkey of monkeys) {\r\n            if (monkey.name !== \"humn\" && typeof monkey.instruction === \"number\") {\r\n                newMonkeys.push(monkey);\r\n            }\r\n        }\r\n        if (typeof root.instruction === \"number\") {\r\n            throw new Error(\"Yeah, no\");\r\n        }\r\n        const aResults = {};\r\n        const bResults = {};\r\n        const a = calculate(root.instruction.a, aResults, monkeys, lookup, {errorOnHuman: true});\r\n        const b = calculate(root.instruction.b, bResults, monkeys, lookup, {errorOnHuman: true});\r\n        let results: Results = {};\r\n        if (a === null) {\r\n            results[root.instruction.a] = b;\r\n        } else {\r\n            results[root.instruction.b] = a;\r\n        }\r\n\r\n        const newLookup: MonkeyLookup = {};\r\n        for (const m of newMonkeys) {\r\n            newLookup[m.name] = m;\r\n        }\r\n\r\n        const oldCalculator = (() => ((label: string) => {\r\n            const res = {};\r\n            return calculate(label, res, monkeys, lookup, {errorOnHuman: true});\r\n        }))();\r\n\r\n        const res = calculate(\"humn\", results, newMonkeys, newLookup, {oldCalculator});\r\n\r\n        if (!res) {\r\n            throw new Error(\"Cannot calculate\");\r\n        }\r\n\r\n        await resultOutputCallback(res);\r\n\r\n    },\r\n    {\r\n        key: \"monkey-math\",\r\n        title: \"Monkey Math\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        exampleInput,\r\n        stars: 2\r\n    }\r\n);","import { entryForFile } from \"../../../entry\";\r\n\r\ntype File = {\r\n    name: string;\r\n    size: number;\r\n    parent: Directory | null;\r\n}\r\n\r\ntype FileSystemEntry = (Directory | File);\r\n\r\ntype Directory = {\r\n    name: string;\r\n    children: FileSystemEntry[];\r\n    parent: Directory | null;\r\n    size: number | null;\r\n}\r\n\r\nclass FileSystem {\r\n\r\n    public cwd: Directory;\r\n\r\n    private root: Directory;\r\n    /**\r\n     *\r\n     */\r\n    constructor() {\r\n        this.root = {\r\n            name: \"/\",\r\n            children: [],\r\n            parent: null,\r\n            size: null\r\n        };\r\n        this.cwd = this.root;\r\n    }\r\n\r\n    public *getDirectories() {\r\n        function *recursive(entry: Directory): Iterable<Directory> {\r\n            yield entry;\r\n            for (const item of entry.children) {\r\n                if (isDirectory(item)) {\r\n                    for (const inner of recursive(item)) {\r\n                        yield inner;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (const e of recursive(this.root)) {\r\n            yield e;\r\n        }\r\n    }\r\n\r\n    public changeTo(path: string): FileSystem {\r\n        if (path === \"/\") {\r\n            this.cwd = this.root;\r\n        } else if (path === \"..\") {\r\n            if (this.cwd.parent !== null) {\r\n                this.cwd = this.cwd.parent;\r\n            } else {\r\n                throw new Error(\"Cannot navigate over root\");\r\n            }\r\n        } else {\r\n            const match = this.cwd.children.find(e => e.name === path);\r\n            if (match === undefined) {\r\n                throw new Error(\"Cannot find dir: \" + path);\r\n            } else if (!isDirectory(match)) {\r\n                throw new Error(\"Not a directory: \" + path);\r\n            }\r\n            this.cwd = match;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public addFile(name: string, size: number) {\r\n        const entry: File = {\r\n            name,\r\n            size,\r\n            parent: this.cwd\r\n        };\r\n        this.cwd.children.push(entry);\r\n    }\r\n\r\n    public addDir(name: string) {\r\n        const entry: Directory = {\r\n            name,\r\n            children: [],\r\n            parent: this.cwd,\r\n            size: null\r\n        };\r\n        this.cwd.children.push(entry);\r\n    }\r\n\r\n    public calculateSizes(shouldClean: boolean = false) {\r\n        if (shouldClean) {\r\n            const cleaner = (entry: FileSystemEntry) => {\r\n                if (isFile(entry)) {\r\n                    return;\r\n                }\r\n                for (const child of entry.children) {\r\n                    cleaner(child);\r\n                }\r\n                entry.size = null;\r\n            }\r\n            cleaner(this.root);\r\n        }\r\n        const call = (entry: FileSystemEntry): number => {\r\n            if (isFile(entry)) {\r\n                return entry.size;\r\n            }\r\n            if (entry.size !== null) {\r\n                return entry.size;\r\n            }\r\n            let size = 0;\r\n            for (const child of entry.children) {\r\n                size += call(child);\r\n            }\r\n            entry.size = size;\r\n            return size;\r\n        }\r\n        call(this.root);\r\n    }\r\n\r\n    public toString() {\r\n        const call = (entry: FileSystemEntry, indentation: number): string[] => {\r\n            const indent = (() => {\r\n                const res: string[] = [];\r\n                for (let i = 0; i < indentation; i++) {\r\n                    res.push(\" \");\r\n                }\r\n                const prefix = res.join(\"\");\r\n                return (line: string) => prefix + line;\r\n            })();\r\n            if (isFile(entry)) {\r\n                return [indent(`- ${entry.name} (file, size=${entry.size})`)]\r\n            } else {\r\n                const result: string[] = [];\r\n                const dirSize = entry.size === null ? \"\" : `, size=${entry.size}`;\r\n                result.push(indent(`- ${entry.name} (dir${dirSize})`));\r\n                for (const child of entry.children) {\r\n                    for (const rec of call(child, indentation + 2)) {\r\n                        result.push(rec);\r\n                    }\r\n                }\r\n                return result;\r\n            }\r\n        }\r\n\r\n        return call(this.root, 0).join(\"\\n\");\r\n    }\r\n\r\n}\r\n\r\nconst isDirectory = (e: FileSystemEntry): e is Directory => (e as Directory).children !== undefined;\r\nconst isFile = (e: FileSystemEntry): e is File => !isDirectory(e);\r\n\r\nconst parseInput = (lines: string[]): FileSystem => {\r\n\r\n    const fileSystem = new FileSystem();\r\n\r\n    let i = 0;\r\n    while (i < lines.length) {\r\n        const currentLine = lines[i];\r\n        if (!currentLine.startsWith(\"$\")) {\r\n            throw new Error(\"Must have a command\");\r\n        }\r\n\r\n        const command = currentLine.slice(2);\r\n\r\n        if (command === \"ls\") {\r\n            let j = i + 1;\r\n            while (true) {\r\n                const line = lines[j];\r\n                if (line === undefined) {\r\n                    break;\r\n                }\r\n                if (line.startsWith(\"$\")) {\r\n                    break;\r\n                }\r\n                const space = line.indexOf(\" \");\r\n                const type = line.slice(0, space);\r\n                const name = line.slice(space + 1);\r\n                if (type === \"dir\") {\r\n                    fileSystem.addDir(name)\r\n                } else {\r\n                    const size = parseInt(type, 10);\r\n                    fileSystem.addFile(name, size);\r\n                }\r\n                j++;\r\n            }\r\n            i = j;\r\n        } else {\r\n            const path = command.slice(3);\r\n            fileSystem.changeTo(path);\r\n            i++;\r\n        }\r\n    }\r\n\r\n    return fileSystem;\r\n}\r\n\r\nexport const noSpaceLeftOnDevice = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback, isQuickRunning }) => {\r\n        const fileSystem = parseInput(lines);\r\n\r\n        fileSystem.calculateSizes();\r\n\r\n        if (!isQuickRunning) {\r\n            await outputCallback(fileSystem.toString());\r\n        }\r\n\r\n        let result = 0;\r\n        const threshold = 100000;\r\n        for (const dir of fileSystem.getDirectories()) {\r\n            if (dir.size === null) {\r\n                throw new Error(\"Calculation didn't work\");\r\n            }\r\n            if (dir.size <= threshold) {\r\n                result += dir.size;\r\n            }\r\n        }\r\n\r\n        await resultOutputCallback(result);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const allSpace = 70000000;\r\n        const updateSpace = 30000000;\r\n        const fileSystem = parseInput(lines);\r\n\r\n        fileSystem.calculateSizes();\r\n\r\n        const usedSpace = fileSystem.changeTo(\"/\").cwd.size!;\r\n\r\n        const needSpace = updateSpace - (allSpace - usedSpace);\r\n        let result = Number.POSITIVE_INFINITY;\r\n        for (const dir of fileSystem.getDirectories()) {\r\n            const size = dir.size!;\r\n            if (size >= needSpace && size < result) {\r\n                result = size;\r\n            }\r\n        }\r\n        await resultOutputCallback(result);\r\n    },\r\n    {\r\n        key: \"no-space-left-on-device\",\r\n        title: \"No Space Left On Device\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);","import { Queue } from \"../../../../support/data-structure\";\r\nimport { subsetGenerator } from \"../../../../support/sequences\";\r\nimport { TimeCalculator } from \"../../../../support/time\";\r\nimport { entryForFile } from \"../../../entry\";\r\n\r\nconst exampleInput = `Valve AA has flow rate=0; tunnels lead to valves DD, II, BB\r\nValve BB has flow rate=13; tunnels lead to valves CC, AA\r\nValve CC has flow rate=2; tunnels lead to valves DD, BB\r\nValve DD has flow rate=20; tunnels lead to valves CC, AA, EE\r\nValve EE has flow rate=3; tunnels lead to valves FF, DD\r\nValve FF has flow rate=0; tunnels lead to valves EE, GG\r\nValve GG has flow rate=0; tunnels lead to valves FF, HH\r\nValve HH has flow rate=22; tunnel leads to valve GG\r\nValve II has flow rate=0; tunnels lead to valves AA, JJ\r\nValve JJ has flow rate=21; tunnel leads to valve II`;\r\n\r\ntype Valve = {\r\n    label: string;\r\n    flow: number;\r\n    path: {[key: string]: number};\r\n}\r\n\r\ntype CaveLookup = {[key: string]: Valve};\r\n\r\ntype CaveState = {\r\n    openValves: Set<string>;\r\n    lookup: CaveLookup;\r\n    time: number;\r\n    flow: number;\r\n    currentPosition: string;\r\n    moves: string[];\r\n}\r\n\r\nconst parseLines = (lines: string[]): Valve[] => {\r\n    const base = lines.map(line => {\r\n        const tokens = line.match(/Valve ([A-Za-z]*).*rate=(\\d*).*valves? (.*)/);\r\n        if (!tokens) {\r\n            throw new Error(\"Could not parse line \" + line);\r\n        }\r\n        return {\r\n            label: tokens[1],\r\n            flow: parseInt(tokens[2], 10),\r\n            connectedTo: tokens[3].split(\", \")\r\n        };\r\n    });\r\n\r\n    const distances: {[key: string]: number} = {};\r\n\r\n    const serialized = (from: string, to: string) => [from,to].sort().join(\"_\");\r\n\r\n    for (const valve of base) {\r\n        for (const connected of valve.connectedTo) {\r\n            distances[serialized(valve.label,connected)] = 1;\r\n        }\r\n    }\r\n\r\n    for (const candidate of base) {\r\n        for (const from of base) {\r\n            if (from === candidate) {\r\n                continue;\r\n            }\r\n            for (const to of base) {\r\n                if (to === candidate || from === to) {\r\n                    continue;\r\n                }\r\n                const existingDistance = distances[serialized(from.label, to.label)];\r\n                const firstStep = distances[serialized(from.label, candidate.label)];\r\n                const secondStep = distances[serialized(candidate.label, to.label)];\r\n                if (firstStep === undefined || secondStep === undefined) {\r\n                    continue;\r\n                }\r\n                if (existingDistance === undefined || existingDistance > firstStep + secondStep) {\r\n                    distances[serialized(from.label, to.label)] = firstStep + secondStep;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const valves = [];\r\n\r\n    for (const from of base) {\r\n        const valve: Valve = {\r\n            flow: from.flow,\r\n            label: from.label,\r\n            path: {}\r\n        };\r\n        for (const to of base) {\r\n            if (to === from) {\r\n                continue;\r\n            }\r\n            valve.path[to.label] = distances[serialized(from.label, to.label)];\r\n        }\r\n        valves.push(valve);\r\n    }\r\n\r\n    return valves;\r\n\r\n}\r\n\r\nclass Cave {\r\n    private state: CaveState;\r\n\r\n    constructor(private valves: Valve[], private timeLimit: number, state?: CaveState) {\r\n        if (!state) {\r\n            state = {\r\n                openValves: new Set<string>(),\r\n                lookup: valves.reduce((acc, next) => {\r\n                    acc[next.label] = next;\r\n                    return acc;\r\n                }, {} as CaveLookup),\r\n                time: 0,\r\n                flow: 0,\r\n                currentPosition: \"AA\",\r\n                moves: []\r\n            }\r\n        }\r\n        this.state = {\r\n            ...state,\r\n            moves: [...state.moves]\r\n        };\r\n    }\r\n\r\n    public getValveState(): string {\r\n        return [...this.state.openValves].sort().join(\"_\");\r\n    }\r\n\r\n    public get bestFlow(): number {\r\n        const waiting = this.passTime();\r\n        if (waiting === null) {\r\n            throw new Error(\"Should not happen\");\r\n        }\r\n        return waiting.flow;\r\n    }\r\n\r\n    public get flow() {\r\n        return this.state.flow;\r\n    }\r\n\r\n    private passTime(ticks?: number): Cave | null {\r\n        const waitFor = ticks ? ticks : this.timeLimit - this.state.time;\r\n        const remainingTime = this.timeLimit - (this.state.time + waitFor);\r\n        if (remainingTime < 0) {\r\n            return null;\r\n        }\r\n        return new Cave(this.valves, this.timeLimit, {\r\n            ...this.state,\r\n            time: this.state.time + waitFor,\r\n            flow: this.flow + [...this.state.openValves].reduce((acc, next) => {\r\n                return acc + (this.state.lookup[next].flow * waitFor);\r\n            }, 0)\r\n        })\r\n    }\r\n\r\n    private goTo(destination: string): Cave | null {\r\n        const current = this.state.lookup[this.state.currentPosition];\r\n        const distance = current.path[destination];\r\n        if (distance === undefined) {\r\n            throw new Error(`Could not find destination from ${this.state.currentPosition} to ${destination}`);\r\n        }\r\n        const res = new Cave(this.valves, this.timeLimit, {\r\n            ...this.state,\r\n            currentPosition: destination\r\n        }).passTime(distance);\r\n        if (res !== null) {\r\n            res.state.moves.push(`->${destination}[${distance}]{${res.flow}}`);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    public open(): Cave | null {\r\n        if (this.state.openValves.has(this.state.currentPosition)) {\r\n            throw new Error(\"Cannot open an already open valve\");\r\n        }\r\n        const res = new Cave(this.valves, this.timeLimit, {\r\n            ...this.state,\r\n            openValves: new Set<string>(this.state.openValves)\r\n        }).passTime(1);\r\n        if (res === null) {\r\n            return res;\r\n        }\r\n        res.state.openValves.add(this.state.currentPosition);\r\n        res.state.moves.push(`%{${res.flow}}`);\r\n        return res;\r\n    }\r\n\r\n    public getMoves(): string[] {\r\n        return this.state.moves;\r\n    }\r\n\r\n    public goToAndOpen(destination: string): Cave | null {\r\n        const to = this.goTo(destination);\r\n        if (to === null) {\r\n            return null;\r\n        }\r\n        return to.open();\r\n    }\r\n\r\n    public get closedValves(): string[] {\r\n        return this.valves.filter(v => v.flow > 0 && !this.state.openValves.has(v.label)).map(e => e.label);\r\n    }\r\n}\r\n\r\nconst getBestFlow = (valves: Valve[], time: number, interesting: Set<string>) => {\r\n    const cave = new Cave(valves, time);\r\n    const queue = new Queue<Cave>();\r\n    queue.add(cave);\r\n    let bestFlow = 0;\r\n    let bestCave = cave;\r\n    const cache: {[key: string]: number} = {};\r\n    while (!queue.isEmpty) {\r\n        const current = queue.get()!;\r\n        if (current.bestFlow > bestFlow) {\r\n            bestFlow = current.bestFlow;\r\n            bestCave = current;\r\n        }\r\n        for (const candidate of current.closedValves) {\r\n            if (!interesting.has(candidate)) {\r\n                continue;\r\n            }\r\n            const resultState = current.goToAndOpen(candidate);\r\n            if (resultState) {\r\n                const flow = resultState.bestFlow;\r\n                const cached = cache[resultState.getValveState()] * .75;\r\n                if (cached && flow <= cached) {\r\n                    continue;\r\n                }\r\n                cache[resultState.getValveState()] = flow;\r\n                queue.add(resultState);\r\n            }\r\n        }\r\n    }\r\n    return {bestFlow, bestCave};\r\n}\r\n\r\nexport const proboscideaVolcanium = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const valves = parseLines(lines);\r\n        const {bestFlow} = getBestFlow(valves, 30, new Set<string>(valves.map(v => v.label)));\r\n        await resultOutputCallback(bestFlow);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const cache: {[key: string]: number} = {};\r\n        const queue = new Queue<Cave>();\r\n        const valves = parseLines(lines);\r\n        const interestingValves = valves.filter(v => v.flow > 0).map(v => v.label);\r\n        const subsets = subsetGenerator(interestingValves, 0);\r\n        let bestFlow = 0;\r\n        let caves: Cave[] = [];\r\n        let i = 0;\r\n        const size = 2 ** interestingValves.length;\r\n        let skipped = 0;\r\n        const visited = new Set<string>();\r\n        for (const mySubset of subsets) {\r\n            i++;\r\n            if (i % 10 === 0) {\r\n                await outputCallback(`Progress: (${i/size*100}%) [skipped: ${skipped}]`);\r\n            }\r\n            const myInteresting = new Set<string>(mySubset);\r\n            const elephantInteresting = new Set<string>(interestingValves.filter(e => !myInteresting.has(e)));\r\n            const keys = [myInteresting, elephantInteresting].map(e => [...e].sort().join(\"_\"));\r\n            if (keys.some(e => visited.has(e))) {\r\n                skipped++;\r\n                continue;\r\n            }\r\n            keys.forEach(e => visited.add(e));\r\n            const {bestFlow: myBest, bestCave: myCave } = getBestFlow(valves, 26, myInteresting);\r\n            const {bestFlow: elephantBest, bestCave: elephantCave }  = getBestFlow(valves, 26, elephantInteresting);\r\n            if (myBest + elephantBest > bestFlow) {\r\n                bestFlow = myBest + elephantBest;\r\n                caves = [myCave, elephantCave];\r\n            }\r\n        }\r\n\r\n        await resultOutputCallback(bestFlow);\r\n\r\n    },\r\n    {\r\n        key: \"proboscidea-volcanium\",\r\n        title: \"Proboscidea Volcanium\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        exampleInput,\r\n        stars: 2\r\n    }\r\n);","import { UnknownSizeField } from \"../../../../support/field\";\r\nimport { CCoordinate, Coordinate, FullCoordinate, directions, sumCoordinate } from \"../../../../support/geometry\";\r\nimport { FixedSizeMatrix } from \"../../../../support/matrix\";\r\nimport { entryForFile } from \"../../../entry\";\r\n\r\nconst exampleInput = \">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>\";\r\n\r\nconst shapes = [\r\n\"####\",\r\n`.#.\r\n###\r\n.#.`,\r\n`..#\r\n..#\r\n###`,\r\n`#\r\n#\r\n#\r\n#`,\r\n`##\r\n##`\r\n].map(shape => {\r\n    const cells = shape.split(\"\\n\").map(line => line.split(\"\"));\r\n    const points: Coordinate[] = [];\r\n    for (let y = 0; y < cells.length; y++) {\r\n        for (let x = 0; x < cells[0].length; x++) {\r\n            if (cells[y][x] === \"#\") {\r\n                points.push({x: x + 2, y: y -cells.length - 2})\r\n            }\r\n        }\r\n    }\r\n    return points;\r\n});\r\n\r\ntype Shape = Coordinate[];\r\n\r\nclass Tower {\r\n    private readonly field: UnknownSizeField<\"#\"> = new UnknownSizeField<\"#\">();\r\n    private shape: Shape | null = null;\r\n    private currentHeight = 0;\r\n    private currentPosition: CCoordinate = new CCoordinate(0, 0);\r\n\r\n    areRowsEqual(a: number, b: number) {\r\n        for (let x = 0; x < 7; x++) {\r\n            if (this.field.get({x,y:a}) !== this.field.get({x,y:b})) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    areSectionsEqual(a: number, b: number, size: number) {\r\n        for (let i = 0; i < size; i++) {\r\n            if (!this.areRowsEqual(a-i, b-i)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    add(shape: Shape) {\r\n        this.shape = shape;\r\n    }\r\n\r\n    public get height() {\r\n        return this.currentHeight;\r\n    }\r\n\r\n    move(direction: CCoordinate): boolean {\r\n        if (!this.shape) {\r\n            throw new Error(\"Cannot move without a shape\");\r\n        }\r\n        const newPosition = direction.sum(this.currentPosition);\r\n        if (this.checkIfValid(newPosition)) {\r\n            this.currentPosition = newPosition;\r\n        }\r\n        //fall\r\n        const fallPosition = directions.down.sum(this.currentPosition);\r\n        if (this.checkIfValid(fallPosition)) {\r\n            this.currentPosition = fallPosition;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    persist() {\r\n        if (!this.shape) {\r\n            throw new Error(\"Cannot persist without a shape\");\r\n        }\r\n        const points = this.shape.map(p => this.currentPosition.sum(p));\r\n        points.forEach(p => this.field.set(p, \"#\"));\r\n        this.shape = null;\r\n        this.currentPosition = new CCoordinate(0, Math.min(-this.currentHeight, Math.min(...points.map(p => p.y-1))))\r\n        this.currentHeight = (-this.currentPosition.y);\r\n    }\r\n\r\n    private checkIfValid(newPosition: CCoordinate): boolean {\r\n        if (!this.shape) {\r\n            throw new Error(\"Cannot move without a shape\");\r\n        }\r\n        const candidatePoints = this.shape.map(p => newPosition.sum(p));\r\n        if (candidatePoints.every(p => p.x >= 0 && p.x < 7 && p.y <= 0 && this.field.get(p) !== \"#\")) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public toString(shadow: boolean): string {\r\n        const maxHeight = shadow ? this.currentHeight + 6 : this.currentHeight;\r\n        const matrix = new FixedSizeMatrix<\"#\" | \"|\" | \"+\" | \"-\" | \".\" | \"@\">({x: 9, y: maxHeight + 1});\r\n        for (let x = 0; x < 9; x++) {\r\n            for (let y = 0; y <= maxHeight; y++) {\r\n                if (x === 0 || x === 8) {\r\n                    if (y === maxHeight) {\r\n                        matrix.set({y,x}, \"+\");\r\n                    } else {\r\n                        matrix.set({y,x}, \"|\");\r\n                    }\r\n                } else if (y === maxHeight) {\r\n                    matrix.set({y,x}, \"-\");\r\n                } else {\r\n                    matrix.set({y,x}, this.field.get({x: x -1, y: y - maxHeight + 1}) || \".\");\r\n                }\r\n            }\r\n        }\r\n        if (shadow) {\r\n            this.shape!.map(p => this.currentPosition.sum(p)).forEach(p  => matrix.set({x: p.x + 1, y: maxHeight - 1 + p.y}, \"@\"))\r\n        }\r\n        return matrix.toString(e => e || \"X\");\r\n    }\r\n}\r\n\r\nconst parseLines = (lines: string[]): CCoordinate[] => {\r\n    return lines[0].split(\"\").map(e => e === \"<\" ? directions.left : directions.right);\r\n}\r\n\r\nexport const pyroclasticFlow = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const tower = new Tower();\r\n        const rockTarget = 2022;\r\n        let fallenRocks = 0;\r\n        let directionIndex = 0;\r\n        const input = parseLines(lines);\r\n        while (fallenRocks < rockTarget) {\r\n            tower.add(shapes[fallenRocks % shapes.length]);\r\n            while (true) {\r\n                const currentDirection = input[directionIndex];\r\n                directionIndex = (directionIndex + 1) % input.length;\r\n                if (!tower.move(currentDirection)) {\r\n                    tower.persist();\r\n                    break;\r\n                }\r\n            }\r\n            fallenRocks++;\r\n        }\r\n        await outputCallback(tower.toString(false));\r\n        await resultOutputCallback(tower.height);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const tower = new Tower();\r\n        const rockTarget = 20220;\r\n        let fallenRocks = 0;\r\n        let directionIndex = 0;\r\n        const input = parseLines(lines);\r\n        const heights = [];\r\n        while (fallenRocks < rockTarget) {\r\n            tower.add(shapes[fallenRocks % shapes.length]);\r\n            while (true) {\r\n                const currentDirection = input[directionIndex];\r\n                directionIndex = (directionIndex + 1) % input.length;\r\n                if (!tower.move(currentDirection)) {\r\n                    tower.persist();\r\n                    break;\r\n                }\r\n            }\r\n            fallenRocks++;\r\n            heights.push(tower.height);\r\n        }\r\n\r\n        const heightDeltas: number[] = [];\r\n        for (let i = 0; i < heights.length - 1; i++) {\r\n            heightDeltas.push(heights[i+1]-heights[i]);\r\n        }\r\n\r\n        const candidateSize = 1000;\r\n\r\n        const sameSequence = (a:number, b: number) => {\r\n            for (let i = 0; i < candidateSize; i++) {\r\n                if (heightDeltas[a+i] !== heightDeltas[b+i]) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        const repetitions = {\r\n            size: 0,\r\n            base: 0\r\n        };\r\n\r\n        for (let base = 0; base < heightDeltas.length; base++) {\r\n            for (let candidate = base+1; candidate < heightDeltas.length; candidate++) {\r\n                if (sameSequence(base, candidate)) {\r\n                    await outputCallback(`Found candidate, ${base}, ${candidate}`);\r\n                    repetitions.size = candidate - base;\r\n                    repetitions.base = base;\r\n                    break;\r\n                }\r\n            }\r\n            if (repetitions.size > 0) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        await outputCallback(\"Repetitions: \" + JSON.stringify(repetitions));\r\n\r\n        const {base,size} = repetitions;\r\n\r\n        let increase = 0;\r\n        for (let i = 0; i < size; i++) {\r\n            increase += heightDeltas[base+i];\r\n        }\r\n\r\n        const target = (1000000000000 - 1); //index is 0 based\r\n        const myBase = target % size;\r\n        const result = heights[myBase] + Math.floor(target/size) * increase;\r\n\r\n        await resultOutputCallback(result);\r\n\r\n    },\r\n    {\r\n        key: \"pyroclastic-flow\",\r\n        title: \"Pyroclastic Flow\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        exampleInput,\r\n        stars: 2\r\n    }\r\n);","import { UnknownSizeField } from \"../../../../support/field\";\r\nimport { directions, isInBounds, manhattanDistance, sumCoordinate } from \"../../../../support/geometry\";\r\nimport { entryForFile } from \"../../../entry\";\r\n\r\ntype Cell = \"#\" | \"o\";\r\n\r\nexport const regolithReservoir = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const field = new UnknownSizeField<Cell>();\r\n        for (const line of lines) {\r\n            const directions = line.split(\" -> \").map(e => {\r\n                const [x,y] = e.split(\",\").map(e => parseInt(e, 10));\r\n                return {x,y};\r\n            });\r\n            for (let i = 1; i < directions.length; i++) {\r\n                let from = directions[i-1];\r\n                const to = directions[i];\r\n                while (manhattanDistance(from, to) !== 0) {\r\n                    field.set(from, \"#\");\r\n                    from = {\r\n                        x: from.x + Math.sign(to.x - from.x),\r\n                        y: from.y + Math.sign(to.y - from.y)\r\n                    };\r\n                }\r\n                field.set(to, \"#\");\r\n            }\r\n        }\r\n        const bounds = field.getBoundaries();\r\n        const startPoint = {x: 500, y: 0};\r\n        let fellDown = false;\r\n        while (!fellDown) {\r\n            if (field.get(startPoint) !== null) {\r\n                break;\r\n            }\r\n            let point = startPoint;\r\n            while (true) {\r\n                const candidates = [\r\n                    sumCoordinate(directions.down, point),\r\n                    sumCoordinate(directions.downLeft, point),\r\n                    sumCoordinate(directions.downRight, point)\r\n                ];\r\n                const newPosition = candidates.find(e => field.get(e) === null);\r\n                if (newPosition === undefined) {\r\n                    break;\r\n                }\r\n                if (newPosition.y >= bounds.topLeft.y + bounds.size.y) {\r\n                    fellDown = true;\r\n                    break;\r\n                }\r\n                point = newPosition;\r\n            }\r\n            if (!fellDown) {\r\n                field.set(point, \"o\");\r\n            }\r\n        }\r\n        field.unset(startPoint);\r\n        const matrix = field.toMatrix();\r\n        await outputCallback(matrix.toString(e => e || \".\"));\r\n        await resultOutputCallback(matrix.filter(e => matrix.get(e) === \"o\").length);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n//         lines =\r\n// `498,4 -> 498,6 -> 496,6\r\n// 503,4 -> 502,4 -> 502,9 -> 494,9`.split(\"\\n\");\r\n        const field = new UnknownSizeField<Cell>();\r\n        for (const line of lines) {\r\n            const directions = line.split(\" -> \").map(e => {\r\n                const [x,y] = e.split(\",\").map(e => parseInt(e, 10));\r\n                return {x,y};\r\n            });\r\n            for (let i = 1; i < directions.length; i++) {\r\n                let from = directions[i-1];\r\n                const to = directions[i];\r\n                while (manhattanDistance(from, to) !== 0) {\r\n                    field.set(from, \"#\");\r\n                    from = {\r\n                        x: from.x + Math.sign(to.x - from.x),\r\n                        y: from.y + Math.sign(to.y - from.y)\r\n                    };\r\n                }\r\n                field.set(to, \"#\");\r\n            }\r\n        }\r\n        const bounds = field.getBoundaries();\r\n        const startPoint = {x: 500, y: 0};\r\n        while (true) {\r\n            if (field.get(startPoint) !== null) {\r\n                break;\r\n            }\r\n            let point = startPoint;\r\n            while (true) {\r\n                const candidates = [\r\n                    sumCoordinate(directions.down, point),\r\n                    sumCoordinate(directions.downLeft, point),\r\n                    sumCoordinate(directions.downRight, point)\r\n                ];\r\n                const newPosition = candidates.find(e => field.get(e) === null);\r\n                if (newPosition === undefined) {\r\n                    break;\r\n                }\r\n                if (newPosition.y >= bounds.topLeft.y + bounds.size.y + 1) {\r\n                    break;\r\n                }\r\n                point = newPosition;\r\n            }\r\n            field.set(point, \"o\");\r\n        }\r\n        const matrix = field.toMatrix();\r\n        await outputCallback(matrix.toString(e => e || \".\"));\r\n        await resultOutputCallback(matrix.filter(e => matrix.get(e) === \"o\").length);\r\n    },\r\n    {\r\n        key: \"regolith-reservoir\",\r\n        title: \"Regolith Reservoir\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);","import { entryForFile } from \"../../../entry\";\r\n\r\ntype RPS = \"A\" | \"B\" | \"C\";\r\ntype Strategy = \"X\" | \"Y\" | \"Z\";\r\n\r\ntype Mapper = (e: Strategy) => RPS;\r\n\r\nconst beatenBy = {\r\n    A: \"B\" as RPS,\r\n    B: \"C\" as RPS,\r\n    C: \"A\" as RPS\r\n};\r\n\r\nconst beats = {\r\n    B: \"A\" as RPS,\r\n    C: \"B\" as RPS,\r\n    A: \"C\" as RPS\r\n};\r\n\r\n\r\nconst choose = (a: RPS, b: Strategy): RPS => {\r\n    if (b === \"X\") {\r\n        return beats[a];\r\n    } else if (b === \"Y\") {\r\n        return a;\r\n    } else {\r\n        return beatenBy[a];\r\n    }\r\n};\r\n\r\n\r\nconst pointCalculator = (a: RPS, b: RPS): number => {\r\n    const basePoints = {\r\n        A: 1,\r\n        B: 2,\r\n        C: 3\r\n    };\r\n\r\n    const points = basePoints[b];\r\n\r\n    if (a === b) {\r\n        return points + 3;\r\n    }\r\n    if (beatenBy[b] === a) {\r\n        return points;\r\n    }\r\n    return points + 6;\r\n};\r\n\r\n\r\nexport const rockPaperScissors = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const data = lines.map((l) => {\r\n            const [a, b] = l.split(\" \");\r\n            return {\r\n                opp: a as RPS,\r\n                mine: b as Strategy\r\n            };\r\n        });\r\n\r\n        const all = [\"A\", \"B\", \"C\"] as RPS[];\r\n\r\n        const mapper = (e: Strategy): RPS => {\r\n            const trans = {\r\n                X: all[0],\r\n                Y: all[1],\r\n                Z: all[2]\r\n            };\r\n            return trans[e];\r\n        };\r\n\r\n        let points = 0;\r\n        for (const e of data) {\r\n            const current = pointCalculator(e.opp, mapper(e.mine));\r\n            points += current;\r\n            if (Number.isNaN(points)) {\r\n                console.error(current, e);\r\n                throw new Error(\"What happened?\");\r\n            }\r\n        }\r\n\r\n        await resultOutputCallback(points);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const data = parseInput(lines);\r\n\r\n        let points = 0;\r\n        for (const e of data) {\r\n            points += pointCalculator(e.opp, choose(e.opp, e.mine));\r\n        }\r\n\r\n        await resultOutputCallback(points);\r\n    },\r\n    {\r\n        key: \"rock-paper-scissors\",\r\n        title: \"Rock Paper Scissors\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);\r\n\r\nfunction parseInput(lines: string[]) {\r\n    return lines.map((l) => {\r\n        const [a, b] = l.split(\" \");\r\n        return {\r\n            opp: a as RPS,\r\n            mine: b as Strategy\r\n        };\r\n    });\r\n}\r\n\r\n","import { UnknownSizeField } from \"../../../../support/field\";\r\nimport { Coordinate, directions, manhattanDistance, serialization, sumCoordinate } from \"../../../../support/geometry\";\r\nimport { FixedSizeMatrix } from \"../../../../support/matrix\";\r\nimport { entryForFile } from \"../../../entry\";\r\n\r\nconst calculateStep = (head: Coordinate, tail: Coordinate) => {\r\n    if (Math.abs(head.x - tail.x) <= 1 && Math.abs(head.y - tail.y) <= 1) {\r\n        return {x: 0, y: 0};\r\n    }\r\n    return {x: Math.sign(head.x - tail.x), y: Math.sign(head.y - tail.y)};\r\n}\r\n\r\ntype Instruction = {\r\n    direction: Coordinate;\r\n    steps: number;\r\n}\r\n\r\nconst parseInput = (lines: string[]): Instruction[] => {\r\n    const lookup: {[key: string]: Coordinate} = {\r\n        \"R\": directions.right,\r\n        \"L\": directions.left,\r\n        \"U\": directions.up,\r\n        \"D\": directions.down\r\n    };\r\n\r\n    return lines.map(line => {\r\n        const [rawDir, rawSteps] = line.split(\" \");\r\n        const steps = parseInt(rawSteps, 10);\r\n        const dir = lookup[rawDir];\r\n        return {\r\n            steps,\r\n            direction: dir\r\n        };\r\n    })\r\n}\r\n\r\nexport const ropeBridge = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        await resultOutputCallback(findVisits(2, lines));\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        await resultOutputCallback(findVisits(10, lines));\r\n    },\r\n    {\r\n        key: \"rope-bridge\",\r\n        title: \"Rope Bridge\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);\r\n\r\nfunction findVisits(howManyKnots: number, lines: string[]) {\r\n    const basePosition = { x: 0, y: 0 };\r\n    const knots: Coordinate[] = [];\r\n    for (let i = 0; i < howManyKnots; i++) {\r\n        knots.push({ ...basePosition });\r\n    }\r\n\r\n    const instructions = parseInput(lines);\r\n    const visited = new Set<string>();\r\n    visited.add(serialization.serialize(basePosition));\r\n    for (const instruction of instructions) {\r\n        for (let i = 0; i < instruction.steps; i++) {\r\n            for (let i = 0; i < howManyKnots; i++) {\r\n                const currentPosition = knots[i];\r\n                const direction = i === 0 ? instruction.direction : calculateStep(knots[i - 1], currentPosition);\r\n                const newPosition = sumCoordinate(direction, currentPosition);\r\n                knots[i] = newPosition;\r\n            }\r\n            visited.add(serialization.serialize(knots[howManyKnots - 1]));\r\n        }\r\n    }\r\n    const result = visited.size;\r\n    return result;\r\n}\r\n","import { buildGroups } from \"../../../../support/sequences\";\r\nimport { entryForFile } from \"../../../entry\";\r\n\r\nclass Sack implements Iterable<string> {\r\n    public readonly left: Set<string>;\r\n    public readonly right: Set<string>;\r\n\r\n    constructor(line: string) {\r\n        const length = line.length;\r\n        if (length % 2 !== 0) {\r\n            throw new Error(\"Invalid input: \" + line);\r\n        }\r\n        const left = line.slice(0, length / 2);\r\n        const right = line.slice(length / 2, length);\r\n        this.left = buildSet(left);\r\n        this.right = buildSet(right);\r\n    }\r\n\r\n    public has = (e: string): boolean => this.left.has(e) || this.right.has(e);\r\n\r\n    public *[Symbol.iterator](): Iterator<string, any, undefined> {\r\n        for (const item of this.left) {\r\n            yield item;\r\n        }\r\n        for (const item of this.right) {\r\n            yield item;\r\n        }\r\n    }\r\n}\r\n\r\nconst parseInput = (lines: string[]): Sack[] =>\r\n    lines.map((line) => new Sack(line));\r\n\r\n\r\nconst getPriority = (() => {\r\n    const lowerPart = \"a\".charCodeAt(0);\r\n    const higherPart = \"A\".charCodeAt(0);\r\n    return (s: string | undefined): number => {\r\n        if (s === undefined) {\r\n            throw new Error(\"Invalid\");\r\n        }\r\n        const code = s.charCodeAt(0);\r\n        return code + 1 + (code < lowerPart ? 26 - higherPart : -lowerPart);\r\n    };\r\n})();\r\n\r\nconst buildSet = (x: string): Set<string> =>\r\n    new Set<string>(x.split(\"\"));\r\n\r\nexport const rucksackReorganization = entryForFile(\r\n    async ({ lines, resultOutputCallback }) =>\r\n        await resultOutputCallback(\r\n            parseInput(lines).reduce(\r\n                (acc, next) => acc + getPriority([...next.left].find((x) => next.right.has(x))),\r\n                0\r\n            )\r\n        )\r\n    ,\r\n    async ({ lines, resultOutputCallback }) => {\r\n        const input = parseInput(lines);\r\n        let result = 0;\r\n        for (const group of buildGroups(input, 3, 3)) {\r\n            const [candidate] = group;\r\n            const rest = group.slice(1);\r\n            for (const x of candidate) {\r\n                if (rest.every((r) => r.has(x))) {\r\n                    result += getPriority(x);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        await resultOutputCallback(result);\r\n    },\r\n    {\r\n        key: \"rucksack-reorganization\",\r\n        title: \"Rucksack Reorganization\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);\r\n","import { buildGroupsFromSeparator, groupBy } from \"../../../../support/sequences\";\r\nimport { entryForFile } from \"../../../entry\";\r\n\r\ntype Stack = string[];\r\n\r\nconst tryParseCrate = (raw: string): string | null => {\r\n    if (raw.includes(\"[\")) {\r\n        return raw.slice(1, 2);\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nconst parseStacks = (rawStacks: string[]): Stack[] => {\r\n    const howMany = (rawStacks[0].length + 1) / 4;\r\n    const stacks:Stack[] = [];\r\n    for (let i = 0; i < howMany; i++) {\r\n        stacks.push([]);\r\n    }\r\n    for (const line of rawStacks) {\r\n        const groups = groupBy(line.split(\"\"), 4);\r\n        if (groups.length !== howMany) {\r\n            throw new Error(`Invalid input: ${howMany} !== ${groups.length}`);\r\n        }\r\n        for (let i = 0; i < groups.length; i++) {\r\n            const crate = tryParseCrate(groups[i].join(\"\"));\r\n            if (crate !== null) {\r\n                stacks[i].unshift(crate);\r\n            }\r\n        }\r\n    }\r\n    return stacks;\r\n}\r\n\r\ntype Instruction = {\r\n    from: number;\r\n    to: number;\r\n    howMany: number;\r\n}\r\n\r\nconst parseInstructions = (raw: string[]): Instruction[] => {\r\n    return raw.map(line => {\r\n        const tokens = line.split(\" \").map(e => parseInt(e, 10));\r\n        const howMany = tokens[1];\r\n        const from = tokens[3] - 1;\r\n        const to = tokens[5] - 1;\r\n        return {howMany, from, to}\r\n    })\r\n}\r\n\r\nexport const supplyStacks = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const { instructions, stacks } = parseInput(lines);\r\n        for (const instruction of instructions) {\r\n            for(let i = 0; i < instruction.howMany; i++) {\r\n                const e = stacks[instruction.from].pop();\r\n                if (e === undefined) {\r\n                    throw new Error(\"Empty stack\");\r\n                }\r\n                stacks[instruction.to].push(e);\r\n            }\r\n        }\r\n        const result = stacks.map(s => s.pop()).join(\"\");\r\n        await resultOutputCallback(result);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const { instructions, stacks } = parseInput(lines);\r\n        for (const instruction of instructions) {\r\n            const from = stacks[instruction.from];\r\n            const toMove = from.splice(from.length - instruction.howMany, instruction.howMany);\r\n            for(const item of toMove) {\r\n                stacks[instruction.to].push(item);\r\n            }\r\n        }\r\n        const result = stacks.map(s => s.pop()).join(\"\");\r\n        await resultOutputCallback(result);\r\n    },\r\n    {\r\n        key: \"supply-stacks\",\r\n        title: \"Supply Stacks\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);\r\n\r\nfunction parseInput(lines: string[]) {\r\n    const [rawStacks, rawInstructions] = buildGroupsFromSeparator(lines, e => e.trim().length === 0);\r\n    const stacks = parseStacks(rawStacks);\r\n    const instructions = parseInstructions(rawInstructions);\r\n    return { instructions, stacks };\r\n}\r\n","import { directions, isInBounds, sumCoordinate } from \"../../../../support/geometry\";\r\nimport { entryForFile } from \"../../../entry\";\r\n\r\ntype Tree = {\r\n    height: number;\r\n    visible: boolean;\r\n}\r\n\r\nexport const treetopTreeHouse = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const grid = lines.map(line => line.split(\"\").map(e => ({height: parseInt(e, 10), visible: false}) as Tree));\r\n        const size = {x: lines[0].length, y: lines.length}\r\n        const rows = [\r\n            {row: 0, dir: 1},\r\n            {row: lines.length-1, dir: -1}\r\n        ];\r\n        const cols = [\r\n            {col: 0, dir: 1},\r\n            {col: lines[0].length - 1, dir: -1}\r\n        ];\r\n\r\n        for (const interesting of rows) {\r\n            for (let col = 0; col < size.x; col++) {\r\n                let previous: number | null = null;\r\n                for (let row = interesting.row; row >= 0 && row < size.y; row += interesting.dir) {\r\n                    previous = innerLoop(grid, row, col, previous);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const interesting of cols) {\r\n            for (let row = 0; row < size.y; row++) {\r\n                let previous: number | null = null;\r\n                for (let col = interesting.col; col >= 0 && col < size.x; col += interesting.dir) {\r\n                    previous = innerLoop(grid, row, col, previous);\r\n                }\r\n            }\r\n        }\r\n\r\n        let result = 0;\r\n\r\n        for (let row = 0; row < size.y; row++) {\r\n            for (let col = 0; col < size.x; col++) {\r\n                if (grid[row][col].visible) {\r\n                    // console.log(row, col);\r\n                    result++;\r\n                }\r\n            }\r\n        }\r\n\r\n        await resultOutputCallback(result);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const grid = lines.map(line => line.split(\"\").map(e => ({height: parseInt(e, 10), visible: false}) as Tree));\r\n        const size = {x: lines[0].length, y: lines.length}\r\n\r\n        let bestScenic = 0;\r\n\r\n        for (let row = 0; row < size.y; row++) {\r\n            for (let col = 0; col < size.x; col++) {\r\n                const view: number[] = [];\r\n\r\n                const dirs = [\r\n                    directions.up,\r\n                    directions.down,\r\n                    directions.left,\r\n                    directions.right\r\n                ];\r\n\r\n                const tree = grid[row][col];\r\n\r\n                for (const direction of dirs) {\r\n                    let score = 0;\r\n                    let current = {x: col, y: row};\r\n                    while (true) {\r\n                        current = sumCoordinate(direction, current);\r\n                        if (!isInBounds(current, {topLeft: {x: 0, y: 0}, size})) {\r\n                            break;\r\n                        }\r\n                        score++;\r\n                        const value = grid[current.y][current.x];\r\n                        if (value.height >= tree.height) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    view.push(score);\r\n                }\r\n                const scenic = view.reduce((acc, next) => acc * next, 1);\r\n                if (scenic > bestScenic) {\r\n                    bestScenic = scenic;\r\n                }\r\n            }\r\n        }\r\n\r\n        await resultOutputCallback(bestScenic);\r\n    },\r\n    {\r\n        key: \"treetop-tree-house\",\r\n        title: \"Treetop Tree House\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);  \r\n\r\nfunction innerLoop(grid: Tree[][], row: number, col: number, previous: number | null) {\r\n    const tree = grid[row][col];\r\n    if (previous === null || previous < tree.height) {\r\n        tree.visible = true;\r\n    }\r\n    if (previous === null) {\r\n        previous = tree.height;\r\n    } else {\r\n        previous = Math.max(tree.height, previous);\r\n    }\r\n    return previous;\r\n}\r\n","import { entryForFile } from \"../../../entry\";\r\n\r\nconst findStartOfPacket = (line: string, length: number): number => {\r\n    const seen: string[] = [];\r\n    for (let i = 0; i < line.length; i++) {\r\n        if (seen.length === length) {\r\n            seen.shift();\r\n        }\r\n        seen.push(line[i]);\r\n        if (new Set<string>(seen).size === length) {\r\n            return i + 1;\r\n        }\r\n    }\r\n    throw new Error(\"Marker not found\");\r\n}\r\n\r\nexport const tuningTrouble = entryForFile(\r\n    async ({ lines, resultOutputCallback }) => {\r\n        const index = findStartOfPacket(lines[0], 4);\r\n        await resultOutputCallback(index);\r\n    },\r\n    async ({ lines, resultOutputCallback }) => {\r\n        const index = findStartOfPacket(lines[0], 14);\r\n        await resultOutputCallback(index);\r\n    },\r\n    {\r\n        key: \"tuning-trouble\",\r\n        title: \"Tuning Trouble\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        stars: 2\r\n    }\r\n);","import { DefaultDict, SerializableSet } from \"../../../../support/data-structure\";\r\nimport { UnknownSizeField } from \"../../../../support/field\";\r\nimport { CCoordinate, Coordinate, directions, getBoundaries, getFullSurrounding, serialization } from \"../../../../support/geometry\";\r\nimport { entryForFile } from \"../../../entry\";\r\n\r\nconst exampleInput =\r\n`....#..\r\n..###.#\r\n#...#.#\r\n.#...##\r\n#.###..\r\n##.#.##\r\n.#..#..`;\r\n\r\n// const exampleInput =\r\n// `.....\r\n// ..##.\r\n// ..#..\r\n// .....\r\n// ..##.\r\n// .....`;\r\n\r\ntype Rule = {\r\n    condition: CCoordinate[];\r\n    moveTo: CCoordinate;\r\n}\r\n\r\nexport const unstableDiffusion = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const rules: Rule[] = [\r\n            {\r\n                condition: getFullSurrounding({x:0,y:0}).filter(e => e.y === -1).map(e => new CCoordinate(e.x,e.y)),\r\n                moveTo: directions.up\r\n            },\r\n            {\r\n                condition: getFullSurrounding({x:0,y:0}).filter(e => e.y === 1).map(e => new CCoordinate(e.x,e.y)),\r\n                moveTo: directions.down\r\n            },\r\n            {\r\n                condition: getFullSurrounding({x:0,y:0}).filter(e => e.x === -1).map(e => new CCoordinate(e.x,e.y)),\r\n                moveTo: directions.left\r\n            },\r\n            {\r\n                condition: getFullSurrounding({x:0,y:0}).filter(e => e.x === 1).map(e => new CCoordinate(e.x,e.y)),\r\n                moveTo: directions.right\r\n            },\r\n        ];\r\n\r\n        let elves = new SerializableSet(serialization);\r\n        for (let x = 0; x < lines[0].length; x++) {\r\n            for (let y = 0; y < lines.length; y++) {\r\n                if (lines[y][x] === \"#\") {\r\n                    elves.add({x,y});\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < 10; i++) {\r\n            const startingElves = elves.size;\r\n            const proposals = new DefaultDict<Coordinate, Coordinate[]>(() => [], serialization);\r\n            for (const elf of elves.values()) {\r\n                const surrounding = getFullSurrounding(elf).filter(e => elves.has(e)).length;\r\n                if (surrounding === 0) {\r\n                    proposals.ensureAndGet(elf).push(elf);\r\n                    continue;\r\n                }\r\n                const [rule] = rules.filter(r => r.condition.every(offset => {\r\n                    const destination = offset.sum(elf);\r\n                    return !elves.has(destination);\r\n                }));\r\n                if (rule) {\r\n                    const destination = rule.moveTo.sum(elf);\r\n                    const d = proposals.ensureAndGet(destination);\r\n                    d.push(elf);\r\n                } else {\r\n                    proposals.ensureAndGet(elf).push(elf);\r\n                }\r\n            }\r\n            elves = new SerializableSet(serialization);\r\n            for (const key of proposals.keys) {\r\n                const elements = proposals.get(key);\r\n                if (elements.length === 1) {\r\n                    elves.add(key);\r\n                } else if (elements.length > 1) {\r\n                    elements.forEach(e => elves.add(e));\r\n                }\r\n            }\r\n            if (elves.size !== startingElves) {\r\n                throw new Error(\"Number of elves changed\");\r\n            }\r\n            const [removed] = rules.splice(0, 1);\r\n            rules.splice(rules.length, 0, removed);\r\n        }\r\n        const bounds = getBoundaries([...elves.values()]);\r\n        const size = bounds.size.x * bounds.size.y;\r\n        const empty = size - elves.size;\r\n        await resultOutputCallback(empty);\r\n    },\r\n    async ({ lines, pause, resultOutputCallback }) => {\r\n        const rules: Rule[] = [\r\n            {\r\n                condition: getFullSurrounding({x:0,y:0}).filter(e => e.y === -1).map(e => new CCoordinate(e.x,e.y)),\r\n                moveTo: directions.up\r\n            },\r\n            {\r\n                condition: getFullSurrounding({x:0,y:0}).filter(e => e.y === 1).map(e => new CCoordinate(e.x,e.y)),\r\n                moveTo: directions.down\r\n            },\r\n            {\r\n                condition: getFullSurrounding({x:0,y:0}).filter(e => e.x === -1).map(e => new CCoordinate(e.x,e.y)),\r\n                moveTo: directions.left\r\n            },\r\n            {\r\n                condition: getFullSurrounding({x:0,y:0}).filter(e => e.x === 1).map(e => new CCoordinate(e.x,e.y)),\r\n                moveTo: directions.right\r\n            },\r\n        ];\r\n\r\n        let elves = new SerializableSet(serialization);\r\n        for (let x = 0; x < lines[0].length; x++) {\r\n            for (let y = 0; y < lines.length; y++) {\r\n                if (lines[y][x] === \"#\") {\r\n                    elves.add({x,y});\r\n                }\r\n            }\r\n        }\r\n        let round = 0;\r\n        while (true) {\r\n            await pause();\r\n            round++;\r\n            const startingElves = elves.size;\r\n            const proposals = new DefaultDict<Coordinate, Coordinate[]>(() => [], serialization);\r\n            const movingElves = new SerializableSet(serialization);\r\n            for (const elf of elves.values()) {\r\n                const surrounding = getFullSurrounding(elf).filter(e => elves.has(e)).length;\r\n                if (surrounding === 0) {\r\n                    proposals.ensureAndGet(elf).push(elf);\r\n                    continue;\r\n                }\r\n                const [rule] = rules.filter(r => r.condition.every(offset => {\r\n                    const destination = offset.sum(elf);\r\n                    return !elves.has(destination);\r\n                }));\r\n                if (rule) {\r\n                    const destination = rule.moveTo.sum(elf);\r\n                    const d = proposals.ensureAndGet(destination);\r\n                    d.push(elf);\r\n                    movingElves.add(destination);\r\n                } else {\r\n                    proposals.ensureAndGet(elf).push(elf);\r\n                }\r\n            }\r\n            const resultingElves = new SerializableSet(serialization);\r\n            for (const key of proposals.keys) {\r\n                const elements = proposals.get(key);\r\n                if (elements.length === 1) {\r\n                    resultingElves.add(key);\r\n                } else if (elements.length > 1) {\r\n                    elements.forEach(e => resultingElves.add(e));\r\n                }\r\n            }\r\n            if (resultingElves.size !== startingElves) {\r\n                throw new Error(\"Number of elves changed\");\r\n            }\r\n\r\n            if (resultingElves.hasSameValuesAs(elves)) {\r\n                break;\r\n            }\r\n            elves = resultingElves;\r\n            \r\n            const [removed] = rules.splice(0, 1);\r\n            rules.splice(rules.length, 0, removed);\r\n        }\r\n        await resultOutputCallback(round);\r\n    },\r\n    {\r\n        key: \"unstable-diffusion\",\r\n        title: \"Unstable Diffusion\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        date: 23,\r\n        exampleInput,\r\n        stars: 2\r\n    }\r\n);\r\n\r\nfunction serializeElves(elves: SerializableSet<Coordinate>) {\r\n    const f = new UnknownSizeField<\"#\">();\r\n    for (const e of elves.values()) {\r\n        f.set(e, \"#\");\r\n    }\r\n    const s = f.toMatrix().toString(e => e || \".\");\r\n    return s;\r\n}\r\n","import { beaconExclusionZone } from \"./beacon-exclusion-zone\";\r\nimport { blizzardBasin } from \"./blizzard-basin\";\r\nimport { boilingBoulders } from \"./boiling-boulders\";\r\nimport { calorieCounting } from \"./calorie-counting\";\r\nimport { campCleanup } from \"./camp-cleanup\";\r\nimport { cathodeRayTube } from \"./cathode-ray-tube\";\r\nimport { distressSignal } from \"./distress-signal\";\r\nimport { fullOfHotAir } from \"./full-of-hot-air\";\r\nimport { grovePositioningSystem } from \"./grove-positioning-system\";\r\nimport { hillClimbingAlgorithm } from \"./hill-climbing-algorithm\";\r\nimport { monkeyInTheMiddle } from \"./monkey-in-the-middle\";\r\nimport { monkeyMap } from \"./monkey-map\";\r\nimport { monkeyMath } from \"./monkey-math\";\r\nimport { noSpaceLeftOnDevice } from \"./no-space-left-on-device\";\r\nimport { proboscideaVolcanium } from \"./proboscidea-volcanium\";\r\nimport { pyroclasticFlow } from \"./pyroclastic-flow\";\r\nimport { regolithReservoir } from \"./regolith-reservoir\";\r\nimport { rockPaperScissors } from \"./rock-paper-scissors\";\r\nimport { ropeBridge } from \"./rope-bridge\";\r\nimport { rucksackReorganization } from \"./rucksack-reorganization\";\r\nimport { supplyStacks } from \"./supply-stacks\";\r\nimport { treetopTreeHouse } from \"./treetop-tree-house\";\r\nimport { tuningTrouble } from \"./tuning-trouble\";\r\nimport { unstableDiffusion } from \"./unstable-diffusion\";\r\n\r\nexport const entries = [\r\n    calorieCounting,\r\n    rockPaperScissors,\r\n    rucksackReorganization,\r\n    campCleanup,\r\n    supplyStacks,\r\n    tuningTrouble,\r\n    noSpaceLeftOnDevice,\r\n    treetopTreeHouse,\r\n    ropeBridge,\r\n    cathodeRayTube,\r\n    monkeyInTheMiddle,\r\n    hillClimbingAlgorithm,\r\n    distressSignal,\r\n    regolithReservoir,\r\n    beaconExclusionZone,\r\n    proboscideaVolcanium,\r\n    pyroclasticFlow,\r\n    boilingBoulders,\r\n    grovePositioningSystem,\r\n    monkeyMath,\r\n    monkeyMap,\r\n    unstableDiffusion,\r\n    blizzardBasin,\r\n    fullOfHotAir\r\n];\r\n","import { MessageSender, Pause } from \"../../../entry\";\r\n\r\nexport interface ITrebuchetMessageSender {\r\n    setup(lines: string[], digitInfo: DigitInfo[][]): Promise<void>;\r\n    // activate(line: number): Promise<void>;\r\n}\r\n\r\ntype DigitInfo = {\r\n    key: string;\r\n    value: number;\r\n    index: number;\r\n}\r\nexport const buildCommunicator = (\r\n        messageSender: MessageSender | undefined,\r\n        pause: Pause\r\n    ): ITrebuchetMessageSender => {\r\n    if (!messageSender) {\r\n        return new DummyMessageSender();\r\n    } else {\r\n        return new RealMessageSender(messageSender, pause);\r\n    }\r\n};\r\n\r\n\r\ntype PrivateTrebuchetMessage = {\r\n    type: \"setup\",\r\n    lines: TokenInfo[][]\r\n} | {\r\n    type: \"activate\",\r\n    selected: number\r\n};\r\n\r\nexport type TrebuchetMessage = {kind: \"TrebuchetMessage\"} & PrivateTrebuchetMessage;\r\n\r\nconst buildMessage = (message: PrivateTrebuchetMessage): TrebuchetMessage => {\r\n    return {\r\n        ...message,\r\n        kind: \"TrebuchetMessage\"\r\n    };\r\n};\r\n\r\ntype TokenInfo = {\r\n    token: string;\r\n    isValid: boolean;\r\n    isSelected: boolean;\r\n}\r\n\r\nexport function isTrebuchetMessage(message: any): message is TrebuchetMessage {\r\n    return (message as TrebuchetMessage).kind === \"TrebuchetMessage\";\r\n}\r\n\r\nclass RealMessageSender implements ITrebuchetMessageSender {\r\n    constructor(private readonly messageSender: MessageSender, private readonly pause: Pause) { \r\n\r\n    }\r\n    async setup(lines: string[], digitInfo: DigitInfo[][]): Promise<void> {\r\n        console.log(lines);\r\n        await this.messageSender(buildMessage({\r\n            type: \"setup\",\r\n            lines: lines.map((line, index) => {\r\n                const tokens: TokenInfo[] = [];\r\n                const info = digitInfo[index];\r\n                if (!info) {\r\n                    throw new Error(\"Could not find info for line \" + index);\r\n                }\r\n                let i = 0;\r\n                // let currentToken = [];\r\n                while (i < line.length) {\r\n                    const [matchingDigit] = info.filter(d => d.index >= i);\r\n                    if (!matchingDigit) {\r\n                        tokens.push({token: line.slice(i), isValid: false, isSelected: false});\r\n                        i = line.length;\r\n                    } else {\r\n                        if (matchingDigit.index !== i) {\r\n                            tokens.push({token: line.slice(i, matchingDigit.index), isValid: false, isSelected: false});\r\n                        }\r\n                        tokens.push({token: matchingDigit.key, isValid: true, isSelected: false});\r\n                        i = matchingDigit.index + matchingDigit.key.length;\r\n                    }\r\n                }\r\n                console.log(tokens);\r\n                const validTokens = tokens.filter(t => t.isValid);\r\n                validTokens[0].isSelected = true;\r\n                validTokens[validTokens.length-1].isSelected = true;\r\n                return tokens;\r\n            })\r\n        }));\r\n\r\n        await this.pause();\r\n\r\n        for (let i = 0; i < lines.length; i++) {\r\n            await this.messageSender(buildMessage({\r\n                type: \"activate\",\r\n                selected: i\r\n            }));\r\n            await this.pause();\r\n        };\r\n    }\r\n    // async activate(line: number): Promise<void> {\r\n    //     await this.messageSender(buildMessage({\r\n    //         type: \"activate\",\r\n    //         selected: line\r\n    //     }));\r\n    //     await this.pause();\r\n    // }\r\n\r\n}\r\n\r\nclass DummyMessageSender implements ITrebuchetMessageSender {\r\n    async setup(lines: string[], digitInfo: DigitInfo[][]): Promise<void> { }\r\n    async activate(line: number): Promise<void> { }\r\n}","export const exampleInput = [\r\n    `1abc2\r\npqr3stu8vwx\r\na1b2c3d4e5f\r\ntreb7uchet`,\r\n        `two1nine\r\neightwothree\r\nabcone2threexyz\r\nxtwone3four\r\n4nineeightseven2\r\nzoneight234\r\n7pqrstsixteen`\r\n] as [string, string];","import { entryForFile } from \"../../../entry\";\r\nimport { buildCommunicator } from \"./communication\";\r\nimport { exampleInput } from \"./example\";\r\n\r\ntype Lookup = {[key: string]: number};\r\n\r\nconst numericalDigits: Lookup = {};\r\nfor (let i = 1; i < 10; i++) {\r\n    numericalDigits[i.toString()] = i;\r\n}\r\n\r\nconst findFirstAndLastDigits = (lookup: Lookup, line: string) => {\r\n    const digits = Object.keys(lookup).flatMap(key => \r\n        [{key, index: line.indexOf(key)}, {key, index: line.lastIndexOf(key)}]\r\n        .filter(e => e.index >= 0)\r\n        .map(e => ({...e, value: lookup[e.key]}))\r\n    ).sort((a, b) => a.index - b.index);\r\n    return {\r\n        line,\r\n        digits,\r\n        selected: [digits[0], digits[digits.length-1]]\r\n    };\r\n}\r\n\r\nconst calculateSum = (digitInfo: ReturnType<typeof findFirstAndLastDigits>[]): number => \r\n    digitInfo\r\n        .map(info => info.selected)\r\n        .reduce(\r\n            (acc, next) => acc + next.reduce(\r\n                (acc, next) => acc * 10 + next.value, \r\n            0), \r\n        0);\r\n\r\n\r\nexport const trebuchet = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback, sendMessage, pause }) => {\r\n        const digitInfo = lines.map(line => findFirstAndLastDigits(numericalDigits, line));\r\n        const communicator = buildCommunicator(sendMessage, pause);\r\n        await communicator.setup(lines, digitInfo.map(i => i.digits));\r\n        const result = calculateSum(digitInfo);\r\n        await resultOutputCallback(result);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback, sendMessage, pause }) => {\r\n        const validDigits: Lookup = {\r\n            ...numericalDigits,\r\n            \"one\": 1,\r\n            \"two\": 2,\r\n            \"three\": 3,\r\n            \"four\": 4,\r\n            \"five\": 5,\r\n            \"six\": 6,\r\n            \"seven\": 7,\r\n            \"eight\": 8,\r\n            \"nine\": 9\r\n        };\r\n        const digitInfo = lines.map(line => findFirstAndLastDigits(validDigits, line));\r\n        const result = calculateSum(digitInfo);\r\n\r\n        const communicator = buildCommunicator(sendMessage, pause);\r\n        await communicator.setup(lines, digitInfo.map(i => i.digits));\r\n\r\n        await resultOutputCallback(result);\r\n    },\r\n    {\r\n        key: \"trebuchet\",\r\n        title: \"Trebuchet\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        date: 1,\r\n        stars: 2,\r\n        exampleInput\r\n    }\r\n);","import { Cube } from '.';\r\nimport { oppositeCoordinate, scalarCoordinates, sumCoordinate } from '../../../../support/geometry';\r\nimport { Drawable, Pause, ScreenBuilder, ScreenPrinter } from '../../../entry';\r\n\r\nexport interface ICubeConundromVisualizer {\r\n    setBag(bag: BagContent): Promise<void>;\r\n    setup(): Promise<void>;\r\n    extractGems({cube, amount}: {cube: Cube, amount: number}): Promise<void>;\r\n    setRunOver(hasRunOver: boolean): Promise<void>;\r\n\r\n}\r\n\r\nexport type BagContent = Record<Cube, number>;\r\n\r\nexport const buildVisualizer = (screenBuilder: ScreenBuilder | undefined, pause: Pause) => {\r\n    if (screenBuilder) {\r\n        return new RealVisualizer(screenBuilder, pause);\r\n    } else {\r\n        return new DummyVisualizer();\r\n    }\r\n}\r\n\r\nconst constants = ((maxCubes: number) => {\r\n    const cubeSize = {x: 8, y: 8};\r\n    const borderSize = {x: 1, y: 1};\r\n    const cubeMargin = {x: 2, y: 2};\r\n    const bagSize = {\r\n        x: borderSize.x * 2 + cubeMargin.x + (cubeMargin.x + cubeSize.x) * 6,\r\n        y: borderSize.y * 2 + cubeMargin.y + (cubeMargin.y + cubeSize.y) * (Math.ceil(maxCubes/2))\r\n    };\r\n    const bagStart = borderSize;\r\n    const tableLine = {\r\n        c: {x: bagStart.x - 1, y: bagStart.y + bagSize.y },\r\n        size: {x: bagSize.x * 3, y: cubeMargin.y * 2}\r\n    };\r\n    const bagBottom = {\r\n        x: bagStart.x + borderSize.x + cubeMargin.x,\r\n        y: bagStart.y + bagSize.y - borderSize.y - cubeMargin.y - cubeSize.y\r\n    };\r\n    const screenSize = {\r\n        x: tableLine.size.x + cubeMargin.x,\r\n        y: tableLine.c.y + tableLine.size.y\r\n    };\r\n\r\n    const tablePositions = {\r\n        y: tableLine.c.y - cubeMargin.y - cubeSize.y,\r\n        x: {\r\n            \"red\": bagStart.x + bagSize.x + cubeMargin.x * 2,\r\n            \"green\": bagStart.x + bagSize.x + cubeMargin.x * 2 + (cubeSize.x + cubeMargin.x) *  2,\r\n            \"blue\": bagStart.x + bagSize.x + cubeMargin.x * 2 + (cubeSize.x + cubeMargin.x) * 4\r\n        } as Record<Cube, number>\r\n    };\r\n\r\n    const winSquareSize = {\r\n        x: 40,\r\n        y: 40\r\n    };\r\n    return {\r\n        cubeSize,\r\n        borderSize,\r\n        cubeMargin,\r\n        bagSize,\r\n        bagStart,\r\n        tableLine,\r\n        bagBottom,\r\n        screenSize,\r\n        tablePositions,\r\n        winSquareSize\r\n    };\r\n});\r\n\r\ntype CubeDrawable = Drawable & {type: \"rectangle\"};\r\n\r\nclass RealVisualizer implements ICubeConundromVisualizer {\r\n    private printer!: ScreenPrinter;\r\n    private size!: { x: number; y: number; };\r\n    private constants!: ReturnType<typeof constants>;\r\n\r\n    private mainBagItems: Record<Cube, CubeDrawable[]> = {\r\n        \"red\": [],\r\n        \"green\": [],\r\n        \"blue\": []\r\n    };\r\n\r\n    private tableItems: Record<Cube, CubeDrawable[]> = {\r\n        \"red\": [],\r\n        \"green\": [],\r\n        \"blue\": []\r\n    };\r\n\r\n    constructor(\r\n        private readonly screenBuilder: ScreenBuilder,\r\n        private readonly pause: Pause\r\n    ) { \r\n    }\r\n\r\n    public async setup() {\r\n        this.constants = constants(20);\r\n        this.size = this.constants.screenSize;\r\n        this.printer = await this.screenBuilder.requireScreen(this.size);\r\n        this.printer.add({\r\n            type: \"rectangle\",\r\n            color: \"black\",\r\n            c: this.constants.bagStart,\r\n            size: this.constants.bagSize,\r\n            id: \"main-bag-border\"\r\n        });\r\n        this.printer.add({\r\n            type: \"rectangle\",\r\n            color: \"navajowhite\",\r\n            c: sumCoordinate(this.constants.bagStart, this.constants.borderSize),\r\n            size: sumCoordinate(this.constants.bagSize, oppositeCoordinate(scalarCoordinates(this.constants.borderSize, 2))),\r\n            id: \"main-bag-background\"\r\n        });\r\n        this.printer.add({\r\n            type: \"rectangle\",\r\n            color: \"brown\",\r\n            c: this.constants.tableLine.c,\r\n            size: this.constants.tableLine.size,\r\n            id: \"table\"\r\n        });\r\n    }\r\n\r\n    public async setBag(bag: BagContent) {\r\n        for (const value of Object.values(this.mainBagItems)) {\r\n            for (const item of value) {\r\n                this.printer.remove(item.id);\r\n            }\r\n            value.length = 0;\r\n        }\r\n        for (const range of Object.values(this.tableItems)) {\r\n            for (const item of range) {\r\n                this.printer.remove(item.id);\r\n            }\r\n            range.length = 0;\r\n        }\r\n        const cubeSize = {x: 8, y: 8};\r\n        let {x,y} = this.constants.bagBottom;\r\n        let i = 0;\r\n        for (const key of Object.keys(bag) as Cube[]) {\r\n            const amount = bag[key];\r\n            for (let i = 0; i < amount; i++) {\r\n                const item = {\r\n                    type: \"rectangle\",\r\n                    color: key,\r\n                    c: {x, y },\r\n                    size: cubeSize,\r\n                    id: `${key}-main-${i}`\r\n                } as CubeDrawable;\r\n\r\n                this.mainBagItems[key].push(item)\r\n                this.printer.add(item);\r\n                y -= this.constants.cubeSize.y + this.constants.cubeMargin.y;\r\n                if (y <= this.constants.bagStart.y) {\r\n                    y = this.constants.bagBottom.y;\r\n                    x += this.constants.cubeMargin.x + this.constants.cubeSize.x;\r\n                }\r\n            }\r\n            i++;\r\n            y = this.constants.bagBottom.y;\r\n            x = this.constants.bagBottom.x + (this.constants.cubeMargin.x + this.constants.cubeSize.x) * (i * 2);\r\n        }\r\n    }\r\n\r\n    public async extractGems({cube, amount}: {cube: Cube, amount: number}) {\r\n        const tableItems = this.tableItems[cube];\r\n        let x = this.constants.tablePositions.x[cube];\r\n        for (let i = 0; i < amount; i++) {\r\n            const lastItem = this.mainBagItems[cube].pop();\r\n            if (lastItem) {\r\n                const baseY = this.constants.tablePositions.y;\r\n                const lastTableItem = tableItems[tableItems.length - 1];\r\n                const lastY = Math.min(baseY + this.constants.cubeSize.y + this.constants.cubeMargin.y, (lastTableItem && lastTableItem.c.y) || Number.POSITIVE_INFINITY);\r\n                let nextY = lastY - this.constants.cubeSize.y - this.constants.cubeMargin.y;\r\n                if (nextY <= this.constants.bagStart.y) {\r\n                    nextY = this.constants.tablePositions.y;\r\n                    x += this.constants.cubeMargin.x + this.constants.cubeSize.x;\r\n                }\r\n                lastItem.c = {x, y: nextY};\r\n                tableItems.push(lastItem);\r\n                await this.pause();\r\n            } else {\r\n            }\r\n        }\r\n    }\r\n\r\n    public async setRunOver(hasRunOver: boolean) {\r\n        const square: Drawable = {\r\n            type: \"rectangle\",\r\n            size: this.constants.winSquareSize,\r\n            color: hasRunOver ? \"red\" : \"green\",\r\n            c: {\r\n                x: this.size.x - this.constants.winSquareSize.x - this.constants.cubeMargin.x,\r\n                y: Math.floor(this.size.y / 2 - this.constants.winSquareSize.y / 2)\r\n            },\r\n            id: \"win-state\"\r\n        };\r\n        this.printer.add(square);\r\n        await this.pause(20);\r\n        this.printer.remove(square.id);\r\n    }\r\n}\r\n\r\nclass DummyVisualizer implements ICubeConundromVisualizer {\r\n    async extractGems({ cube, amount }: { cube: 'red' | 'green' | 'blue'; amount: number; }): Promise<void> { }\r\n    async setup(): Promise<void> {}\r\n    async setBag(bag: BagContent): Promise<void> { }\r\n    async setRunOver(hasRunOver: boolean): Promise<void> {}\r\n\r\n}","import { entryForFile } from \"../../../entry\";\r\nimport { Parser } from \"../../../../support/parser\";\r\nimport { buildVisualizer } from \"./visualizer\";\r\n\r\ntype Extraction = {\r\n    cube: Cube;\r\n    amount: number;\r\n}\r\n\r\n\r\nconst cubes = [\"red\", \"green\", \"blue\"] as const;\r\n\r\nexport type Cube = typeof cubes[number];\r\n\r\nexport const cubeConundrum = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback, screen, pause }) => {\r\n        const visualizer = await buildVisualizer(screen, pause);\r\n        await visualizer.setup();\r\n        const parsed = new Parser(lines)\r\n            .tokenize(\": \")\r\n            .startLabeling()\r\n            .label(game => game.n(), \"id\")\r\n            .label(rounds => \r\n                rounds.tokenize(\"; \").tokenize(\", \").mapTokens(\r\n                    extraction => extraction.tokenize(\" \").startLabeling()\r\n                        .label(amount => amount.n(), \"amount\")\r\n                        .label(cube => cube.s() as Cube, \"cube\"))\r\n            , \"rounds\")\r\n            .run();\r\n        const games = parsed;\r\n\r\n        const limits: Record<typeof cubes[number], number> = {\r\n            \"red\": 12,\r\n            \"green\": 13,\r\n            \"blue\": 14\r\n        };\r\n\r\n        let result = 0;\r\n        for (const game of games) {\r\n            await visualizer.setBag(limits);\r\n            let hasRunOver = false;\r\n            for (const round of game.rounds) {\r\n                const currentLimit = {...limits};\r\n                for (const extraction of round) {\r\n                    currentLimit[extraction.cube] -= extraction.amount;\r\n                    await visualizer.extractGems(extraction);\r\n                }\r\n                if (Object.values(currentLimit).some(e => e < 0)) {\r\n                    hasRunOver = true;\r\n                    break;\r\n                }\r\n            }\r\n            await visualizer.setRunOver(hasRunOver);\r\n            if (!hasRunOver) {\r\n                result += game.id;\r\n            }\r\n        }\r\n        await resultOutputCallback(result);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const games = new Parser(lines)\r\n            .tokenize(\": \")\r\n            .startLabeling()\r\n            .label(game => game.n(), \"id\")\r\n            .label(rounds =>\r\n                rounds\r\n                    .tokenize(\"; \")\r\n                    .tokenize(\", \")\r\n                    .mapTokens(tokens => \r\n                        tokens\r\n                            .tokenize(\" \")\r\n                            .startLabeling()\r\n                            .label(amount => amount.n(), \"amount\")\r\n                            .label(cube => cube.s(), \"cube\")\r\n                    )\r\n                , \"games\"\r\n            )\r\n            .run();\r\n        let result = 0;\r\n        let maxCubes = 0;\r\n        for (const game of games) {\r\n            const amount: {[key: string]: number} = {};\r\n            for (const round of game.games) {\r\n                const counter: {[key: string]: number} = {};\r\n                for (const extraction of round) {\r\n                    counter[extraction.cube] = (counter[extraction.cube] || 0) + extraction.amount;\r\n                }\r\n                for (const cube of cubes) {\r\n                    maxCubes = Math.max(maxCubes, (counter[cube] || 0));\r\n                    amount[cube] = Math.max(amount[cube] || 0, counter[cube] || 0);\r\n                }\r\n            }\r\n            const power = cubes.reduce((acc, next) => acc * (amount[next] || 0), 1);\r\n            result += power;\r\n        }\r\n        await outputCallback(maxCubes);\r\n        await resultOutputCallback(result);\r\n    },\r\n    {\r\n        key: \"cube-conundrum\",\r\n        title: \"Cube Conundrum\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        date: 2,\r\n        stars: 2,\r\n        suggestedDelay: 10,\r\n        exampleInput: `Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green\r\nGame 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue\r\nGame 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red\r\nGame 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red\r\nGame 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green`\r\n    }\r\n);","export const exampleInput = `467..114..\r\n...*......\r\n..35..633.\r\n......#...\r\n617*......\r\n.....+.58.\r\n..592.....\r\n......755.\r\n...$.*....\r\n.664.598..`;","import { entryForFile } from \"../../../entry\";\r\nimport { Parser } from \"../../../../support/parser\";\r\nimport { Coordinate, getFullSurrounding, serialization } from \"../../../../support/geometry\";\r\nimport { DefaultDict } from \"../../../../support/data-structure\";\r\nimport { exampleInput } from \"./example\";\r\nimport { FixedSizeMatrix } from \"../../../../support/matrix\";\r\n\r\nexport const gearRatios = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const matrix = new Parser(lines).matrixMixedNumbers();\r\n        let res = 0;\r\n        for (let y = 0; y < matrix.size.y; y++) {\r\n            for (let x = 0; x < matrix.size.x; x++) {\r\n                let number;\r\n                ({ x, number } = scanNumber({x, y}, matrix, undefined));\r\n                if (number !== undefined) {\r\n                    res += number;\r\n                }\r\n            }\r\n        }\r\n        await resultOutputCallback(res);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const matrix = new Parser(lines).matrixMixedNumbers();\r\n        const matchingMap = new DefaultDict<Coordinate, number[][]>(\r\n            () => [], \r\n            serialization,\r\n            {setOnGet: true}\r\n        );\r\n        for (let y = 0; y < matrix.size.y; y++) {\r\n            for (let x = 0; x < matrix.size.x; x++) {\r\n                ({ x } = scanNumber({x, y}, matrix, \"*\", matchingMap));\r\n            }\r\n        }\r\n        const pairs = [...matchingMap.values]\r\n            .filter(e => e.length === 2)\r\n            .map(e => e.map(n => \r\n                n.reduce((acc, next) => acc * 10 + next, 0)\r\n            ));\r\n        await resultOutputCallback(pairs.reduce((acc, next) => acc + (next[0] * next[1]), 0));\r\n    },\r\n    {\r\n        key: \"gear-ratios\",\r\n        title: \"Gear Ratios\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        date: 3,\r\n        stars: 2,\r\n        exampleInput\r\n    }\r\n);\r\n\r\nconst scanNumber = (\r\n    {x,y}: Coordinate, \r\n    matrix: FixedSizeMatrix<string | Number>, \r\n    matchingGear: string | undefined, \r\n    matchingMap?: DefaultDict<Coordinate, number[][]>\r\n) => {\r\n    let n = matrix.get({x,y});\r\n    if (Parser.isNumber(n)) {\r\n        const digits = [];\r\n        let delta = 0;\r\n        let isSurrounded = false;\r\n        let hasMatchedGear = false;\r\n        while (Parser.isNumber(n)) {\r\n            const surroundings = getFullSurrounding({ x: x + delta, y })\r\n                .map(e => ({coordinate: e, value: matrix.get(e)}))\r\n                .filter(e => e.value !== \".\")\r\n                .filter(e => e.value !== undefined)\r\n                .filter(e => !Parser.isNumber(e.value));\r\n            \r\n            isSurrounded = isSurrounded || surroundings.length > 0;\r\n            const [matchingGearItem] = surroundings.filter(e => e.value === matchingGear);\r\n            if (!hasMatchedGear && matchingMap && matchingGearItem) {\r\n                hasMatchedGear = true;\r\n                matchingMap.get(matchingGearItem.coordinate).push(digits);\r\n            }\r\n            digits.push(n);\r\n            delta++;\r\n            n = matrix.get({ y, x: x + delta })!;\r\n        }\r\n        x += delta;\r\n        const number = digits.reduce((acc, next) => acc * 10 + next, 0);\r\n        if (digits.length > 0 && isSurrounded) {\r\n            return {x, number};\r\n        }\r\n    }\r\n    return { \r\n        x, \r\n        number: undefined\r\n    };\r\n}","import { ScratchCard } from \".\";\r\nimport { MessageSender, Pause } from \"../../../entry\";\r\n\r\nexport interface IScratchCardsMessageSender {\r\n    setup(numberOfCards: number): Promise<void>;\r\n    setupCard(card: ScratchCard): Promise<void>;\r\n    sendMatches(matches: number[]): Promise<void>;\r\n}\r\nexport const buildCommunicator = (\r\n        messageSender: MessageSender | undefined,\r\n        pause: Pause\r\n    ): IScratchCardsMessageSender => {\r\n    if (!messageSender) {\r\n        return new DummyMessageSender();\r\n    } else {\r\n        return new RealMessageSender(messageSender, pause);\r\n    }\r\n};\r\n\r\ntype Cell = {\r\n    id: number;\r\n    value: number;\r\n}\r\n\r\nexport type CommunicatorScratchCard = {\r\n    id: number;\r\n    score: string;\r\n    win: Cell[];\r\n    mine: Cell[];\r\n}\r\n\r\ntype PrivateScratchCardsMessage = {\r\n    type: \"SendCard\",\r\n    card: CommunicatorScratchCard,\r\n    isSlow: boolean\r\n} | {\r\n    type: \"MoveSelector\",\r\n    id: number\r\n} | {\r\n    type: \"SelectWin\",\r\n    mineId: number,\r\n    winId: number\r\n} | {\r\n    type: \"SendScore\",\r\n    score: string\r\n};\r\n\r\nexport type ScratchCardsMessage = {kind: \"ScratchCardsMessage\"} & PrivateScratchCardsMessage;\r\n\r\nconst buildMessage = (message: PrivateScratchCardsMessage): ScratchCardsMessage => {\r\n    return {\r\n        ...message,\r\n        kind: \"ScratchCardsMessage\"\r\n    };\r\n};\r\n\r\nexport function isScratchCardsMessage(message: any): message is ScratchCardsMessage {\r\n    return (message as ScratchCardsMessage).kind === \"ScratchCardsMessage\";\r\n}\r\n\r\nconst slowCards = 5;\r\n\r\nclass RealMessageSender implements IScratchCardsMessageSender {\r\n    private card: ScratchCard | undefined;\r\n    private numberOfCards: number = 0;\r\n    private howManyCards = 0;\r\n    constructor(private readonly messageSender: MessageSender, private readonly pause: Pause) { }\r\n\r\n    async setup(numberOfCards: number): Promise<void> {\r\n        this.numberOfCards = numberOfCards;\r\n        this.howManyCards = 0;\r\n    }\r\n\r\n    async setupCard(card: ScratchCard): Promise<void> {\r\n        if (this.howManyCards < 10 || this.howManyCards > this.numberOfCards - 10) {\r\n\r\n        this.card = card;\r\n        await this.messageSender(buildMessage({\r\n            type: \"SendCard\",\r\n            card: {\r\n                id: card.id,\r\n                mine: card.mine.map((e, i) => ({\r\n                    id: i,\r\n                    value: e\r\n                })),\r\n                win: card.win.map((e, i) => ({\r\n                    id: i,\r\n                    value: e\r\n                })),\r\n                score: \"0\"\r\n            },\r\n            isSlow: this.isSlow()\r\n        }));\r\n        await this.pause();\r\n        } else {\r\n            this.card = undefined;\r\n        }\r\n        this.howManyCards++;\r\n    }\r\n\r\n    private isSlow() {\r\n        const isSlow = this.howManyCards < slowCards || (this.howManyCards > this.numberOfCards - slowCards);\r\n        return isSlow;\r\n    }\r\n    async sendMatches(matches: number[]): Promise<void> {\r\n        if (this.card === undefined) {\r\n            return;\r\n        }\r\n        let howManyMatches = 0;\r\n        for (let i = 0; i < this.card.mine.length; i++) {\r\n            const value = this.card.mine[i];\r\n            await this.messageSender(buildMessage({\r\n                type: \"MoveSelector\",\r\n                id: i\r\n            }));\r\n            if (matches.includes(value)) {\r\n                howManyMatches++;\r\n                const winId = this.card.win.indexOf(value);\r\n                await this.messageSender(buildMessage({\r\n                    type: \"SelectWin\",\r\n                    mineId: i,\r\n                    winId: winId\r\n                }));\r\n                const score = (2 ** (howManyMatches-1)).toString();\r\n                await this.messageSender(buildMessage({\r\n                    type: \"SendScore\",\r\n                    score\r\n                }));\r\n            }\r\n        }\r\n        if (this.isSlow()) {\r\n            await this.pause(5);\r\n        } else {\r\n            await this.pause();\r\n        }\r\n    }\r\n\r\n}\r\n\r\nclass DummyMessageSender implements IScratchCardsMessageSender {\r\n    async setupCard(card: ScratchCard): Promise<void> { }\r\n    async sendMatches(matches: number[]): Promise<void> { }\r\n    async setup(numberOfCards: number): Promise<void> {}\r\n}","import { entryForFile } from \"../../../entry\";\r\nimport { Parser } from \"../../../../support/parser\";\r\nimport { sum } from \"../../../../support/sequences\";\r\nimport { buildCommunicator } from \"./communicator\";\r\n\r\nexport type ScratchCard = {\r\n    id: number;\r\n    win: number[];\r\n    mine: number[];\r\n}\r\n\r\nexport const scratchCards = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback, sendMessage, pause }) => {\r\n        const ns = new Parser(lines)\r\n            .tokenize(/[|:]/)\r\n            .startLabeling()\r\n            .label(e => e.n(), \"id\")\r\n            .label(e => e.ns(), \"win\")\r\n            .label(e => e.ns(), \"mine\")\r\n            .run();\r\n\r\n        const communicator = buildCommunicator(sendMessage, pause);\r\n\r\n        await communicator.setup(ns.length);\r\n\r\n        let result = 0;\r\n        for (const card of ns) {\r\n            await communicator.setupCard(card);\r\n            const matches = card.mine.filter(n => card.win.includes(n));\r\n            await communicator.sendMatches(matches);\r\n            const value = matches.length === 0 ? 0 : 2 ** (matches.length - 1);\r\n            result += value;\r\n        }\r\n        await resultOutputCallback(result);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const ns = new Parser(lines)\r\n            .tokenize(/[|:]/)\r\n            .startLabeling()\r\n            .label(e => e.n(), \"id\")\r\n            .label(e => e.ns(), \"win\")\r\n            .label(e => e.ns(), \"mine\")\r\n            .run();\r\n\r\n        const amounts = ns.map(() => 1);\r\n        for (let i = 0; i < ns.length; i++) {\r\n            const card = ns[i];\r\n            const matches = card.mine.filter(n => card.win.includes(n));\r\n            for (let delta = 1; delta <= matches.length; delta++) {\r\n                amounts[i + delta] += amounts[i];\r\n            }\r\n        }\r\n        await resultOutputCallback(sum(amounts));\r\n    },\r\n    {\r\n        key: \"scratch-cards\",\r\n        title: \"Scratch Cards\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        date: 4,\r\n        stars: 2,\r\n        exampleInput: `Card 1: 41 48 83 86 17 | 83 86  6 31 17  9 48 53\r\nCard 2: 13 32 20 16 61 | 61 30 68 82 17 32 24 19\r\nCard 3:  1 21 53 59 44 | 69 82 63 72 16 21 14  1\r\nCard 4: 41 92 73 84 69 | 59 84 76 51 58  5 54 83\r\nCard 5: 87 83 26 28 32 | 88 30 70 12 93 22 82 36\r\nCard 6: 31 18 13 56 72 | 74 77 10 23 35 67 36 11`\r\n    }\r\n);","export const exampleInput = `seeds: 79 14 55 13\r\n\r\nseed-to-soil map:\r\n50 98 2\r\n52 50 48\r\n\r\nsoil-to-fertilizer map:\r\n0 15 37\r\n37 52 2\r\n39 0 15\r\n\r\nfertilizer-to-water map:\r\n49 53 8\r\n0 11 42\r\n42 0 7\r\n57 7 4\r\n\r\nwater-to-light map:\r\n88 18 7\r\n18 25 70\r\n\r\nlight-to-temperature map:\r\n45 77 23\r\n81 45 19\r\n68 64 13\r\n\r\ntemperature-to-humidity map:\r\n0 69 1\r\n1 0 69\r\n\r\nhumidity-to-location map:\r\n60 56 37\r\n56 93 4`;","import { entryForFile } from \"../../../entry\";\r\nimport { Parser } from \"../../../../support/parser\";\r\nimport { exampleInput } from \"./example\";\r\n\r\ntype Range = {\r\n    source: number;\r\n    length: number;\r\n}\r\n\r\nconst intersectRange = (a: Range, b: Range): Range | null => {\r\n    const leftRange = a.source <= b.source ? a : b;\r\n    const rightRange = leftRange === a ? b : a;\r\n    if (leftRange.source + leftRange.length <= rightRange.source) {\r\n        return null;\r\n    }\r\n    const start = rightRange.source;\r\n    const end = Math.min(rightRange.source + rightRange.length, leftRange.source + leftRange.length);\r\n    return {\r\n        source: start,\r\n        length: end - start\r\n    };\r\n}\r\n\r\nexport const ifYouGiveASeedAFertilizer = entryForFile(\r\n    async ({ lines, resultOutputCallback }) => {\r\n        const {seeds, mappings} = new Parser(lines)\r\n            .header(2, (header, rest) => {\r\n                const seeds = header\r\n                    .slice(0, 1)\r\n                    .stringParse(s => s\r\n                        .ns()\r\n                        .map(n => ({source: n, length: 1}))\r\n                    ).first();\r\n                const mappings = parseMappings(rest);\r\n                return { seeds, mappings };\r\n            })\r\n\r\n        const min = findMinLocation(seeds, mappings);\r\n\r\n        await resultOutputCallback(min);\r\n    },\r\n    async ({ lines, resultOutputCallback }) => {\r\n        const {seeds, mappings} = new Parser(lines)\r\n            .header(2, (header, rest) => {\r\n                const seeds = header\r\n                    .slice(0, 1)\r\n                    .stringParse(s => s\r\n                        .transform(/: (.*)/)\r\n                        .pns()\r\n                        .group(2)\r\n                        .startLabeling()\r\n                        .label(e => e, \"source\")\r\n                        .label(e => e, \"length\")\r\n                        .run()\r\n                    )\r\n                    .first();\r\n\r\n                const mappings = parseMappings(rest);\r\n                return { seeds, mappings };\r\n            })\r\n\r\n        let min = findMinLocation(seeds, mappings);\r\n\r\n        await resultOutputCallback(min);\r\n    },\r\n    {\r\n        key: \"if-you-give-a-seed-a-fertilizer\",\r\n        title: \"If You Give A Seed A Fertilizer\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        date: 5,\r\n        exampleInput,\r\n        stars: 2\r\n    }\r\n);\r\n\r\nconst parseMappings = (rest: Parser) =>\r\n    rest\r\n        .group(\"\")\r\n        .groupMap(group => group.header(1, (mappingHeader, mappingRest) => {\r\n            const destination = mappingHeader.transform(/.*-(\\w+) /).first();\r\n            const mapping = mappingRest\r\n                .extractAllNumbers()\r\n                .startLabeling()\r\n                .label(e => e, \"destination\")\r\n                .label(e => e, \"source\")\r\n                .label(e => e, \"length\")\r\n                .run();\r\n            return {\r\n                destination, mapping\r\n            };\r\n        })\r\n        )\r\n        .run();\r\n\r\nconst findMinLocation = (seeds: Range[], mappings: ReturnType<typeof parseMappings>) => {\r\n    let min = Number.POSITIVE_INFINITY;\r\n    for (const seedRange of seeds) {\r\n        let ranges = [\r\n            seedRange\r\n        ];\r\n        for (let i = 0; i < mappings.length; i++) {\r\n            const mapping = mappings[i];\r\n            const resultRanges: Range[] = [];\r\n            for (const seedRange of ranges) {\r\n                for (const range of mapping.mapping) {\r\n                    const intersection = intersectRange(seedRange, range);\r\n                    if (intersection !== null) {\r\n                        const delta = intersection.source - range.source;\r\n                        const newStart = range.destination + delta;\r\n                        resultRanges.push({\r\n                            source: newStart,\r\n                            length: intersection.length\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            ranges = resultRanges;\r\n        }\r\n        for (const range of ranges) {\r\n            min = Math.min(min, range.source);\r\n        }\r\n    }\r\n    return min;\r\n}\r\n\r\n","import { entryForFile } from \"../../../entry\";\r\nimport { Parser } from \"../../../../support/parser\";\r\n\r\ntype Race = {\r\n    time: number;\r\n    distance: number;\r\n}\r\n\r\nconst adjustSolution = (n: number, ceilOrFloor: (n: number) => number, adjustment: number): number => {\r\n    const truncated = ceilOrFloor(n);\r\n    if (n !== truncated) {\r\n        return truncated;\r\n    } else {\r\n        return truncated + adjustment;\r\n    }\r\n}\r\n\r\nconst findSolutions = (race: Race): [number, number] => {\r\n    const b = race.time;\r\n    const c = race.distance;\r\n\r\n    const delta = b*b -4*c;\r\n\r\n    const firstSolution = (race.time + Math.sqrt(delta))/2;\r\n    const secondSolution = (race.time - Math.sqrt(delta))/2;\r\n\r\n    const minSolution = adjustSolution(secondSolution, Math.ceil, 1);\r\n    const maxSolution = adjustSolution(firstSolution, Math.floor, -1);\r\n\r\n    return [minSolution, maxSolution];\r\n}\r\n\r\nconst findNumberOfSolutions = (race: Race): number => {\r\n    const [a, b] = findSolutions(race);\r\n    const delta = b - a + 1;\r\n    return delta;\r\n}\r\n\r\nexport const waitForIt = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const races = new Parser(lines)\r\n            .extractAllNumbers()\r\n            .pivot()\r\n            .startLabeling()\r\n            .label(e => e, \"time\")\r\n            .label(e => e, \"distance\")\r\n            .run();\r\n\r\n        const result = races.reduce((acc, next) => acc * findNumberOfSolutions(next), 1);\r\n\r\n        await resultOutputCallback(result);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const race = new Parser(lines)\r\n            .remove(\" \")\r\n            .extractAllNumbers()\r\n            .flat()\r\n            .startSimpleLabeling()\r\n            .label(e => e, \"time\")\r\n            .label(e => e, \"distance\")\r\n            .run();\r\n\r\n        const result = findNumberOfSolutions(race);\r\n\r\n        await resultOutputCallback(result);\r\n    },\r\n    {\r\n        key: \"wait-for-it\",\r\n        title: \"Wait For It\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        date: 6,\r\n        stars: 2,\r\n        exampleInput: `Time:      7  15   30\r\nDistance:  9  40  200`\r\n    }\r\n);","import { entryForFile } from \"../../../entry\";\r\nimport { Parser } from \"../../../../support/parser\";\r\n\r\n\r\nconst handOrder = [\r\n    \"Five\",\r\n    \"Four\",\r\n    \"FullHouse\",\r\n    \"Three\",\r\n    \"TwoPair\",\r\n    \"OnePair\",\r\n    \"High\"\r\n] as const;\r\n\r\ntype HandType = typeof handOrder[number];\r\n\r\nconst cardOrder = [ \"A\", \"K\", \"Q\", \"J\", \"T\", \"9\", \"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\" ];\r\n\r\ntype Card = typeof cardOrder[number];\r\n\r\nconst jokerCardOrder: Card[] = [ \"A\", \"K\", \"Q\", \"T\", \"9\", \"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\", \"J\" ];\r\n\r\n\r\ntype Hand = {\r\n    cards: Card[];\r\n    bid: number;\r\n}\r\n\r\nconst getHandType = (hand: Hand | Card[]): HandType => {\r\n    const cards = Array.isArray(hand) ? hand : hand.cards;\r\n    const counter = cards.reduce((acc, next) => {\r\n        acc[next] = (acc[next] || 0) + 1;\r\n        return acc;\r\n    }, {} as Record<string, number>)\r\n    const counts = Object.values(counter);\r\n    if (counts.some(c => c === 5)) {\r\n        return \"Five\";\r\n    } else if (counts.some(c => c === 4)) {\r\n        return \"Four\";\r\n    } else if (counts.some(c => c === 3) && counts.some(c => c === 2)) {\r\n        return \"FullHouse\";\r\n    } else if (counts.some(c => c === 3)) {\r\n        return \"Three\";\r\n    } else if (counts.filter(c => c === 2).length === 2) {\r\n        return \"TwoPair\";\r\n    } else if (counts.some(c => c === 2)) {\r\n        return \"OnePair\";\r\n    } else {\r\n        return \"High\";\r\n    }\r\n}\r\n\r\nconst getCardIndex = (card: Card, order: Card[]) => {\r\n    return order.indexOf(card);\r\n}\r\n\r\nconst getHandIndex = (hand: Hand | Card[]): number => \r\n    handOrder.indexOf(getHandType(hand));\r\n\r\nconst compareHands = (a: Hand, b: Hand): number => {\r\n    const typeComparison = getHandIndex(b) - getHandIndex(a);\r\n    if (typeComparison !== 0) {\r\n        return typeComparison;\r\n    }\r\n    for (let i = 0; i < a.cards.length; i++) {\r\n        const cardComparison = getCardIndex(b.cards[i], cardOrder) - getCardIndex(a.cards[i], cardOrder);\r\n        if (cardComparison !== 0) {\r\n            return cardComparison;\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n\r\nconst generateFromJokers = (hand: Hand): Card[][] => {\r\n    const cleanHand = hand.cards.filter(e => e !== \"J\");\r\n    const howManyJokers = hand.cards.filter(e => e === \"J\").length;\r\n    if (howManyJokers === 0) {\r\n        return [hand.cards];\r\n    } else {\r\n        let currentHands = [cleanHand];\r\n        for (let i = 0; i < howManyJokers; i++) {\r\n            const newHands = [];\r\n            for (const card of cardOrder) {\r\n                for (const hand of currentHands) {\r\n                    if (card !== \"J\") {\r\n                        newHands.push([...hand, card]);\r\n                    }\r\n                }\r\n            }\r\n            currentHands = newHands;\r\n        }\r\n        return currentHands;\r\n    }\r\n\r\n}\r\n\r\nconst getBestIndex = (a: Hand) => {\r\n    let bestA = Number.POSITIVE_INFINITY;\r\n    for (const candidateA of generateFromJokers(a)) {\r\n        bestA = Math.min(getHandIndex(candidateA), bestA);\r\n    }\r\n    return bestA;\r\n}\r\n\r\nconst compareHandsWithJoker = (a: Hand, b: Hand): number => {\r\n    const aIndex = getBestIndex(a);\r\n    const bIndex = getBestIndex(b);\r\n    const typeComparison = bIndex - aIndex;\r\n    if (typeComparison !== 0) {\r\n        return typeComparison;\r\n    }\r\n    for (let i = 0; i < a.cards.length; i++) {\r\n        const cardComparison = getCardIndex(b.cards[i], jokerCardOrder) - getCardIndex(a.cards[i], jokerCardOrder);\r\n        if (cardComparison !== 0) {\r\n            return cardComparison;\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n\r\n\r\nexport const camelCards = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const cards = parseInput(lines)\r\n            .sort((a, b) => compareHands(a, b));\r\n        const result = calculateScore(cards);\r\n        await resultOutputCallback(result);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const cards = parseInput(lines)\r\n            .sort((a, b) => compareHandsWithJoker(a, b));\r\n        const result = calculateScore(cards);\r\n        await resultOutputCallback(result);\r\n    },\r\n    {\r\n        key: \"camel-cards\",\r\n        title: \"Camel Cards\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        date: 7,\r\n        stars: 2,\r\n        exampleInput: `32T3K 765\r\nT55J5 684\r\nKK677 28\r\nKTJJT 220\r\nQQQJA 483`\r\n    }\r\n);\r\n\r\nconst parseInput = (lines: string[]) => {\r\n    return new Parser(lines)\r\n        .tokenize(\" \")\r\n        .startLabeling()\r\n        .label(e => e.tokenize(\"\").run() as Card[], \"cards\")\r\n        .label(e => e.n(), \"bid\")\r\n        .run();\r\n}\r\n\r\nconst calculateScore = (cards: ({ bid: number; } & { cards: string[]; })[]) => {\r\n    return cards.map((c, i) => ({ c, i })).reduce((acc, next) => {\r\n        return acc + next.c.bid * (next.i + 1);\r\n    }, 0);\r\n}\r\n\r\n","import { entryForFile } from \"../../../entry\";\r\nimport { Parser } from \"../../../../support/parser\";\r\nimport { lcm } from \"../../../../support/algebra\";\r\n\r\nexport const hauntedWasteland = entryForFile(\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const { nodeMap, directions } = parseInput(lines);\r\n\r\n        const start = \"AAA\";\r\n\r\n        let currentState = start;\r\n        const destination = \"ZZZ\";\r\n        let steps = 0;\r\n        while (currentState !== destination) {\r\n            currentState = mapCurrentState(nodeMap, currentState, directions, steps);\r\n            steps++;\r\n        }\r\n\r\n        await resultOutputCallback(steps);\r\n    },\r\n    async ({ lines, outputCallback, resultOutputCallback }) => {\r\n        const { nodeMap, directions } = parseInput(lines);\r\n\r\n        const nodes = [...nodeMap.keys()];\r\n        const startNodes = nodes.filter(e => e.endsWith(\"A\"));\r\n        const endNodes = nodes.filter(e => e.endsWith(\"Z\"));\r\n        if (startNodes.length !== endNodes.length) {\r\n            throw new Error(\"Invalid input\");\r\n        }\r\n\r\n        let currentStates: string[] = [...startNodes];\r\n\r\n        let steps = 0;\r\n\r\n        const cyclesAt = new Map<string, number>();\r\n        while (cyclesAt.size < startNodes.length) {\r\n            currentStates = currentStates.map((currentState, i) => {\r\n                if (!cyclesAt.has(startNodes[i])) {\r\n                    if (currentState.endsWith(\"Z\")) {\r\n                        cyclesAt.set(startNodes[i], steps);\r\n                    }\r\n                }\r\n                currentState = mapCurrentState(nodeMap, currentState, directions, steps);\r\n                return currentState;\r\n            })\r\n            steps++;\r\n        }\r\n\r\n\r\n        const result = lcm(...cyclesAt.values());\r\n\r\n        await resultOutputCallback(result);\r\n    },\r\n    {\r\n        key: \"haunted-wasteland\",\r\n        title: \"Haunted Wasteland\",\r\n        supportsQuickRunning: true,\r\n        embeddedData: true,\r\n        date: 8,\r\n        stars: 2,\r\n        exampleInput: [`LLR\r\n\r\nAAA = (BBB, BBB)\r\nBBB = (AAA, ZZZ)\r\nZZZ = (ZZZ, ZZZ)`, `LR\r\n\r\n11A = (11B, XXX)\r\n11B = (XXX, 11Z)\r\n11Z = (11B, XXX)\r\n22A = (22B, XXX)\r\n22B = (22C, 22C)\r\n22C = (22Z, 22Z)\r\n22Z = (22B, 22B)\r\nXXX = (XXX, XXX)`]\r\n    }\r\n);\r\n\r\nfunction mapCurrentState(nodeMap: Map<string, { left: string; right: string; }>, currentState: string, directions: string[], steps: number) {\r\n    const options = nodeMap.get(currentState);\r\n    if (!options) {\r\n        throw new Error(\"Didn't find mapping for \" + currentState);\r\n    }\r\n    const { left, right } = options;\r\n    if (directions[(steps % directions.length)] === \"L\") {\r\n        currentState = left;\r\n    } else {\r\n        currentState = right;\r\n    }\r\n    return currentState;\r\n}\r\n\r\nfunction parseInput(lines: string[]) {\r\n    const ns = new Parser(lines)\r\n        .group(\"\")\r\n        .startSimpleLabeling()\r\n        .label(e => e[0].split(\"\"), \"directions\")\r\n        .label(e => new Parser(e)\r\n            .tokenize(\" = \")\r\n            .startLabeling()\r\n            .label(left => left.run(), \"node\")\r\n            .label(right => right\r\n                .extractGroupRegex(\r\n                    /\\((\\w+), (\\w+)\\)/,\r\n                    e => e.run(),\r\n                    e => e.run()\r\n                )\r\n                .startSimpleLabeling()\r\n                .label(e => e, \"left\")\r\n                .label(e => e, \"right\")\r\n                .run(),\r\n                \"options\"\r\n            ).run(),\r\n            \"nodes\"\r\n        )\r\n        .run();\r\n\r\n    const nodeMap = new Map<string, { left: string; right: string; }>();\r\n\r\n    for (const node of ns.nodes) {\r\n        nodeMap.set(node.node, node.options);\r\n    }\r\n    return { nodeMap, directions: ns.directions };\r\n}\r\n","import { entryForFile } from \"../../../entry\";\nimport { Parser } from \"../../../../support/parser\";\n\nimport binomial from \"binomial\";\n\nconst generateCoefficients = (n: number, index: number): number[] => {\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(i === index ? 1 : 0);\n    }\n    return result;\n}\n\nconst substractCoefficients = (a: number[], b: number[]): number[] => {\n    return b.map((e, i) => a[i] - b[i]);\n}\n\nconst serializeCoefficients = (a: number[]) => {\n    return a.map(e => e.toString()).join(\",\");\n}\n\nconst serializeLine = (a: number[][]) => {\n    return a.map(serializeCoefficients);\n}\n\nconst generateLastCoefficients = (numbers: number[]): number[] => {\n    const nMax = numbers.length;\n        const expected = [];\n        for (let i = 0; i < nMax; i++) {\n            const res = [];\n            for (let j = 0; j < nMax; j++) {\n                const delta = j - (nMax - i - 1);\n                if (delta < 0) {\n                    res.push(0);\n                } else {\n                    const coeff = binomial.get(i, delta);\n                    const sign = j % 2 === (nMax-1)%2 ? 1 : -1;\n                    res.push(coeff * sign);\n                }\n            }\n            expected.push(res);\n        }\n        return expected.map((c) => c.reduce((acc, next, i) => acc + next * numbers[i], 0));\n}\n\nexport const mirageMaintenance = entryForFile(\n    async ({ lines, outputCallback, resultOutputCallback }) => {\n        const ns = new Parser(lines)\n            .extractAllNumbers(true)\n            .run();\n\n        // const n = 14;\n        // const binomialCoefficients = [];\n        // for (let i = 0; i <= n; i++) {\n        //     binomialCoefficients.push(binomial.get(n, i));\n        // }\n\n        const nMax = 15;\n\n        const n = nMax;\n\n            const coeff = [];\n            for (let i = 0; i < n; i++) {\n                coeff.push(generateCoefficients(n, i));\n            }\n            const res = [];\n            let coeffs = coeff;\n            const lastCoeffs = [coeffs[coeffs.length-1]];\n            // console.log(coeffs);\n            // console.log(substractCoefficients([1,0], [0,1]));\n            // console.log(\"-----\");\n            for (let i = 0; i < n; i++) {\n                // if (i === 0) {\n                //     for (let j = 1; j < n; j++) {\n                //         console.log(substractCoefficients(coeffs[j], coeffs[j-1]));\n                //     }\n                // }\n                coeffs = coeffs.slice(1).map((c, i) => substractCoefficients(coeffs[i+1], coeffs[i]));\n                // if (i === 0) {\n                //     console.log(coeffs);\n                // }\n                res.push(coeffs);\n                if (coeffs.length > 0) {\n                    lastCoeffs.push(coeffs[coeffs.length-1]);\n                }\n            }\n            console.log(lastCoeffs.filter(e => e));\n\n        const expected = [];\n        for (let i = 0; i < nMax; i++) {\n            const res = [];\n            for (let j = 0; j < nMax; j++) {\n                const delta = j - (nMax - i - 1);\n                if (delta < 0) {\n                    res.push(0);\n                } else {\n                    const coeff = binomial.get(i, delta);\n                    const sign = j % 2 === (nMax-1)%2 ? 1 : -1;\n                    res.push(coeff * sign);\n                }\n            }\n            expected.push(res);\n        }\n\n        console.log(\"-------\");\n\n        console.log(expected);\n\n        let result = 0;\n        for (const line of ns) {\n            let currentState = [...line];\n            const lastElements = [currentState[currentState.length-1]];\n            let newState = [];\n            while (currentState.length > 1 && currentState.some(e => e !== 0)) {\n                for (let i = 1; i < currentState.length; i++) {\n                    newState.push(currentState[i] - currentState[i-1]);\n                }\n                lastElements.push(newState[newState.length-1]);\n                currentState = newState;\n                newState = [];\n            }\n            const lastCoeffs = generateLastCoefficients(line);\n            console.log(lastElements);\n            console.log(lastCoeffs);\n            console.log(\"------\");\n            let extrapolation = 0;\n            for (let i = lastCoeffs.length-1; i--; i >= 0) {\n                extrapolation = lastCoeffs[i] + extrapolation;\n            }\n            result += extrapolation;\n        }\n        await resultOutputCallback(result);\n    },\n    async ({ lines, outputCallback, resultOutputCallback }) => {\n        const ns = new Parser(lines)\n            .extractAllNumbers(true)\n            .run();\n            let result = 0;\n        for (const line of ns) {\n            let currentState = [...line];\n            const firstElements = [currentState[0]];\n            let newState = [];\n            while (currentState.length > 1 && currentState.some(e => e !== 0)) {\n                for (let i = 1; i < currentState.length; i++) {\n                    newState.push(currentState[i] - currentState[i-1]);\n                }\n                firstElements.push(newState[0]);\n                currentState = newState;\n                newState = [];\n            }\n            let extrapolation = 0;\n            for (let i = firstElements.length-1; i--; i >= 0) {\n                extrapolation = firstElements[i] - extrapolation;\n            }\n            result += extrapolation;\n        }\n        await resultOutputCallback(result);\n    },\n    {\n        key: \"mirage-maintenance\",\n        title: \"Mirage Maintenance\",\n        supportsQuickRunning: true,\n        embeddedData: true,\n        date: 9,\n        stars: 2,\n        exampleInput: `0 3 6 9 12 15\n1 3 6 10 15 21\n10 13 16 21 30 45`\n    }\n);","import { entryForFile } from \"../../../entry\";\nimport { Parser } from \"../../../../support/parser\";\nimport { Queue } from \"../../../../support/data-structure\";\nimport { Coordinate, serialization, getSurrounding, manhattanDistance, directions, FullCoordinate, CCoordinate, scalarCoordinates, getFullSurrounding } from \"../../../../support/geometry\";\nimport { SerializableSet, SerializableDictionary } from \"../../../../support/data-structure\";\nimport { FixedSizeMatrix } from \"../../../../support/matrix\";\n\nconst isRightConnected = (s: string | undefined) => (s === \"S\" || s === \"F\" || s === \"-\" || s === \"L\");\nconst isLeftConnected = (s: string | undefined) => (s === \"S\" || s === \"J\" || s === \"-\" || s === \"7\");\nconst isUpConnected = (s: string | undefined) => (s === \"S\" || s === \"J\" || s === \"|\" || s === \"L\");\nconst isDownConnected = (s: string | undefined) => (s === \"S\" || s === \"7\" || s === \"|\" || s === \"F\");\n\nconst isConnected = (startC: Coordinate, startV: string, nC: Coordinate, nV: string) => {\n    const isNear = manhattanDistance(startC, nC);\n    if (isNear !== 1) {\n        return false;\n    }\n    if (startC.x < nC.x) {\n        return isRightConnected(startV) && isLeftConnected(nV);\n    } else if (startC.x > nC.x) {\n        return isLeftConnected(startV) && isRightConnected(nV);\n    } else if (startC.y < nC.y) {\n        return isDownConnected(startV) && isUpConnected(nV);\n    } else if (startC.y > nC.y) {\n        return isUpConnected(startV) && isDownConnected(nV);\n    } else {\n        throw new Error(\"Invalid\");\n    }\n}\n\nexport const pipeMaze = entryForFile(\n    async ({ lines, outputCallback, resultOutputCallback }) => {\n        const ns = new Parser(lines)\n            .matrix(e => e);\n        const start = ns.findOneWithCoordinate(e => e === \"S\");\n        if (!start) {\n            throw new Error(\"Could not find starting point\");\n        }\n        const distances = visitLoop(start, ns);\n        const maxDistance = Math.max(...distances.values());\n        await resultOutputCallback(maxDistance);\n    },\n    async ({ lines, outputCallback, resultOutputCallback }) => {\n        const ns = new Parser(lines)\n            .matrix(e => e);\n        const start = ns.findOneWithCoordinate(e => e === \"S\");\n        if (!start) {\n            throw new Error(\"Could not find starting point\");\n        }\n        const distances = visitLoop(start, ns);\n        const visited = new SerializableSet<Coordinate>(serialization, distances.keys());\n        clearNonMainPipes(ns, visited);\n        replaceStartingPoint(start, ns);\n        const enlarged = enlarge(ns);\n        const isExternal = new Set<string>();\n        const filled = new Set<string>();\n        fillEmptyParts(enlarged, filled, isExternal);\n        const reduced = reduce(enlarged);\n        let count = 0;\n        for (let x = 0; x < reduced.size.x; x++) {\n            for (let y = 0; y < reduced.size.y; y++){ \n                const value = reduced.get({x,y});\n                if (value && filled.has(value) && !isExternal.has(value)) {\n                    count++;\n                }\n            }\n        }\n        await resultOutputCallback(count);\n    },\n    {\n        key: \"pipe-maze\",\n        title: \"Pipe Maze\",\n        supportsQuickRunning: true,\n        embeddedData: true,\n        date: 10,\n        stars: 2,\n        exampleInput: [`7-F7-\n.FJ|7\nSJLL7\n|F--J\nLJ.LJ`, `FF7FSF7F7F7F7F7F---7\nL|LJ||||||||||||F--J\nFL-7LJLJ||||||LJL-77\nF--JF--7||LJLJ7F7FJ-\nL---JF-JLJ.||-FJLJJ7\n|F|F-JF---7F7-L7L|7|\n|FFJF7L7F-JF7|JL---7\n7-L-JL7||F7|L7F-7F7|\nL.L7LFJ|||||FJL7||LJ\nL7JLJL-JLJLJL--JLJ.L`]\n    }\n);\n\nconst reduce = (ns: FixedSizeMatrix<string>): FixedSizeMatrix<string> => {\n    const result = new FixedSizeMatrix<string>({x: ns.size.x/3, y: ns.size.y/3});\n    for (let x = 0; x < result.size.x; x++) {\n        for (let y = 0; y < result.size.y; y++) {\n            result.set({x,y}, ns.get({x: x * 3 + 1, y: y * 3 + 1}));\n        }\n    }\n    return result;\n};\n\nconst enlarge = (ns: FixedSizeMatrix<string>): FixedSizeMatrix<string> => {\n    const result = new FixedSizeMatrix<string>(scalarCoordinates(ns.size, 3));\n    for (let x = 0; x < ns.size.x; x++) {\n        for (let y = 0; y < ns.size.y; y++) {\n            const center = {x: x * 3 + 1, y: y * 3 + 1};\n            const centerV = ns.get({x,y});\n            result.set(center, centerV);\n            for (const neighbour of getFullSurrounding(center)) {\n                if (manhattanDistance(neighbour, center) > 1) {\n                    result.set(neighbour, \".\");\n                } else {\n                    let toSet: string = \".\";\n                    if (neighbour.x < center.x) {\n                        if (isLeftConnected(centerV)) {\n                            toSet = \"-\";\n                        }\n                    } else if (neighbour.x > center.x) {\n                        if (isRightConnected(centerV)) {\n                            toSet = \"-\";\n                        }\n                    } else if (neighbour.y < center.y) {\n                        if (isUpConnected(centerV)) {\n                            toSet = \"|\";\n                        }\n                    } else if (neighbour.y > center.y) {\n                        if (isDownConnected(centerV)) {\n                            toSet = \"|\";\n                        }\n                    }\n                    result.set(neighbour, toSet);\n                }\n            }\n        }\n    }\n    return result;\n}\n\nfunction clearNonMainPipes(ns: FixedSizeMatrix<string>, visited: SerializableSet<Coordinate>) {\n    for (let x = 0; x < ns.size.x; x++) {\n        for (let y = 0; y < ns.size.y; y++) {\n            if (!visited.has({ x, y })) {\n                ns.set({ x, y }, \".\");\n            }\n        }\n    }\n}\n\nfunction visitLoop(start: Coordinate, ns: FixedSizeMatrix<string>) {\n    const visited = new SerializableSet<Coordinate>(serialization);\n    const queue = new Queue<Coordinate>();\n    queue.add(start);\n    const distances = new SerializableDictionary<Coordinate, number>(serialization);\n    distances.set(start, 0);\n    while (!queue.isEmpty) {\n        const current = queue.get()!;\n        if (visited.has(current)) {\n            continue;\n        }\n        visited.add(current);\n        const currentDistance = distances.get(current);\n        if (currentDistance === undefined) {\n            throw new Error(\"Invalid distance\");\n        }\n        for (const neighbourC of getSurrounding(current)) {\n            if (visited.has(neighbourC)) {\n                continue;\n            }\n            const neighbour = ns.get(neighbourC);\n            if (!neighbour || neighbour === \".\") {\n                continue;\n            }\n            if (!isConnected(current, ns.get(current)!, neighbourC, neighbour)) {\n                continue;\n            }\n            distances.set(neighbourC, currentDistance + 1);\n            queue.add(neighbourC);\n        }\n    }\n    return distances;\n}\n\nfunction fillEmptyParts(enlarged: FixedSizeMatrix<string>, filled: Set<string>, isExternal: Set<string>) {\n    let nextToFill = 0;\n    while (true) {\n        const toFill = enlarged.findOneWithCoordinate(e => e === \".\");\n        if (!toFill) {\n            break;\n        }\n        const queue = new Queue<Coordinate>();\n        const visited = new SerializableSet<Coordinate>(serialization);\n        visited.add(toFill);\n        queue.add(toFill);\n        nextToFill++;\n        while (!queue.isEmpty) {\n            const current = queue.get()!;\n            enlarged.set(current, nextToFill.toString());\n            filled.add(nextToFill.toString());\n            for (const neighbour of getSurrounding(current)) {\n                const nV = enlarged.get(neighbour);\n                if (nV === undefined) {\n                    isExternal.add(nextToFill.toString());\n                }\n                if (nV !== \".\" || visited.has(neighbour)) {\n                    continue;\n                }\n                queue.add(neighbour);\n                visited.add(neighbour);\n            }\n        }\n    }\n}\n\nfunction replaceStartingPoint(start: Coordinate, ns: FixedSizeMatrix<string>) {\n    const options = [\"-\", \"7\", \"L\", \"J\", \"F\", \"|\"];\n    for (const option of options) {\n        const neighbours = getSurrounding(start);\n        const connections = neighbours.filter(e => isConnected(start, option, e, ns.get(e) || \".\"));\n        if (connections.length === 2) {\n            ns.set(start, option);\n            break;\n        }\n    }\n}\n","import { entryForFile } from \"../../../entry\";\nimport { Parser } from \"../../../../support/parser\";\nimport { FixedSizeMatrix } from \"../../../../support/matrix\";\nimport { sum } from \"../../../../support/sequences\";\n\nconst empty = (matrix: FixedSizeMatrix<string>): { columns: number[], rows: number[] } => {\n    const columns = [];\n    for (let y = 0; y < matrix.size.y; y++) {\n        let isEmpty = true;\n        for (let x = 0; x < matrix.size.x; x++) {\n            if (matrix.get({ x, y }) !== \".\") {\n                isEmpty = false;\n                break;\n            }\n        }\n        if (isEmpty) {\n            columns.push(y);\n        }\n    }\n    const rows = [];\n    for (let x = 0; x < matrix.size.x; x++) {\n        let isEmpty = true;\n        for (let y = 0; y < matrix.size.y; y++) {\n            if (matrix.get({ x, y }) !== \".\") {\n                isEmpty = false;\n                break;\n            }\n        }\n        if (isEmpty) {\n            rows.push(x);\n        }\n    }\n    return { columns, rows };\n}\n\nexport const cosmicExpansion = entryForFile(\n    async ({ lines, outputCallback, resultOutputCallback }) => {\n        const distances = calculateDistances(lines, 2);\n\n        await resultOutputCallback(sum(distances));\n    },\n    async ({ lines, outputCallback, resultOutputCallback }) => {\n        const distances = calculateDistances(lines, 1000000);\n\n        await resultOutputCallback(sum(distances));\n    },\n    {\n        key: \"cosmic-expansion\",\n        title: \"Cosmic Expansion\",\n        supportsQuickRunning: true,\n        embeddedData: true,\n        date: 11,\n        stars: 2,\n        exampleInput: `...#......\n.......#..\n#.........\n..........\n......#...\n.#........\n.........#\n..........\n.......#..\n#...#.....`\n    }\n);\n\nfunction calculateDistances(lines: string[], emptySize: number) {\n    const ns = new Parser(lines)\n        .matrix(e => e);\n    const { columns, rows } = empty(ns);\n    const galaxies = ns.filter(e => ns.get(e) !== \".\");\n    const distances: number[] = [];\n    for (let i = 0; i < galaxies.length; i++) {\n        for (let j = i + 1; j < galaxies.length; j++) {\n            let distance = 0;\n            const a = galaxies[i];\n            const b = galaxies[j];\n            for (let k = Math.min(a.x, b.x); k < Math.max(a.x, b.x); k++) {\n                if (rows.includes(k)) {\n                    distance += emptySize;\n                } else {\n                    distance++;\n                }\n            }\n            for (let k = Math.min(a.y, b.y); k < Math.max(a.y, b.y); k++) {\n                if (columns.includes(k)) {\n                    distance += emptySize;\n                } else {\n                    distance++;\n                }\n            }\n            distances.push(distance);\n        }\n    }\n    return distances;\n}\n","import { SerializableDictionary } from \"./data-structure\";\r\nimport { ISerializer } from \"./serialization\";\r\n\r\nexport const memoize = <T, U>(serialization: ISerializer<T>, f: (row: T) => U): (row: T) => U => {\r\n    const memoization = new SerializableDictionary<T, U>(serialization);\r\n    return (row: T) => {\r\n        if (memoization.has(row)) {\r\n            return memoization.get(row)!;\r\n        }\r\n        const res = f(row);\r\n        memoization.set(row, res);\r\n        return res;\r\n    }\r\n}\r\n\r\n\r\nexport const optimizeCycles = <TArg, TRes>(\r\n    baseArg: TArg,\r\n    howMany: number,\r\n    serializer: (arg: TArg) => string,\r\n    f: (arg: TArg) => [TArg, TRes]\r\n): TRes => {\r\n    const found = new Map<string, number>();\r\n    const indexResults = new Map<number, [TArg, TRes]>();\r\n    let arg = baseArg;\r\n    let lastRes: TRes | undefined = undefined;\r\n    for (let i = 0; i < howMany; i++) {\r\n        const serializedArg = serializer(arg);\r\n        if (found.has(serializedArg)) {\r\n            // console.log(\"Found a break\");\r\n            const cycleI = found.get(serializedArg)!;\r\n            const cycleLength = i - cycleI;\r\n            const cycleBase = cycleI;\r\n            const expectedPosition = (howMany - cycleBase -1 + cycleLength) % cycleLength + cycleBase;\r\n            // console.log({cycleI, i, cycleLength, cycleBase, expectedPosition, delta: howMany-cycleBase, simpleDelta: (howMany-cycleBase) % cycleLength});\r\n            const [cycleArg, cycleRes] = indexResults.get(expectedPosition)!;\r\n            return cycleRes;\r\n        }\r\n        const [newArg, res] = f(arg);\r\n        found.set(serializedArg, i);\r\n        indexResults.set(i, [arg, res]);\r\n        lastRes = res;\r\n        arg = newArg;\r\n    }\r\n    if (lastRes === undefined) {\r\n        throw new Error(\"Something went wrong\");\r\n    }\r\n    return lastRes;\r\n}\r\n","import { entryForFile } from \"../../../entry\";\nimport { Parser } from \"../../../../support/parser\";\nimport { areArraysEqual } from \"../../../../support/sequences\";\nimport { memoize } from \"../../../../support/optimization\";\n\nconst findContiguousGroups = (e: string): number[] => {\n    const contigous = [];\n    let delta = 0;\n    for (let i = 0; i < e.length; i++) {\n        if (e[i] === \".\") {\n            if (delta > 0) {\n                contigous.push(delta);\n            }\n            delta = 0;\n        } else {\n            delta++;\n        }\n    }\n    if (delta > 0) {\n        contigous.push(delta);\n    }\n    return contigous;\n}\n\nconst findArrangements = memoize({\n    serialize(e) {\n        return `${e.simple}_${e.contiguous.join(\",\")}`;\n    }, deserialize(e) {\n        const [simple, cont] = e.split(\"_\");\n        return { simple, contiguous: cont.split(\",\").map(e => parseInt(e, 10)) };\n    }\n},\n    (row: Row): number => {\n        const { simple, contiguous } = row;\n        if (simple.length === 0) {\n            if (contiguous.length === 0) {\n                return 1;\n            } else {\n                return 0;\n            }\n        } else if (simple.indexOf(\"?\") < 0) {\n            const groups = findContiguousGroups(simple);\n            if (!areArraysEqual(groups, contiguous, (a, b) => a === b)) {\n                return 0;\n            }\n            return 1;\n        } else if (simple[0] === \".\") {\n            return findArrangements({ simple: simple.slice(1), contiguous });\n        } else if (simple[0] === \"#\") {\n            if (contiguous.length === 0 || contiguous[0] < 1) {\n                return 0;\n            }\n            const [currentGroup] = contiguous;\n            for (let i = 0; i < currentGroup; i++) {\n                if (simple[i] !== \"#\" && simple[i] !== \"?\") {\n                    return 0;\n                }\n            }\n            if (simple[currentGroup] === \"#\") {\n                return 0;\n            }\n            let newMain = simple.slice(currentGroup);\n            if (newMain.length > 0 && newMain[0] === \"?\") {\n                newMain = \".\" + newMain.slice(1);\n            }\n            return findArrangements({ simple: newMain, contiguous: contiguous.slice(1) });\n        } else if (simple[0] === \"?\") {\n            let arrangements = findArrangements({ simple: \".\" + simple.slice(1), contiguous });\n            if (contiguous.length > 0 && contiguous[0] > 0) {\n                const other = findArrangements({ simple: \"#\" + simple.slice(1), contiguous });\n                arrangements += other;\n            }\n            return arrangements;\n        } else {\n            throw new Error(\"Invalid input\");\n        }\n    });\n\ntype Row = { simple: string; contiguous: number[] };\n\nconst unfold = (input: string, separator: string): string => {\n    const newSimple = new Array<string>(5);\n    newSimple.fill(input);\n    return newSimple.join(separator);\n}\n\nexport const hotSprings = entryForFile(\n    async ({ lines, outputCallback, resultOutputCallback }) => {\n        const ns = new Parser(lines)\n            .tokenize(\" \")\n            .startLabeling()\n            .label(e => e.run(), \"simple\")\n            .label(e => e.ns(), \"contiguous\")\n            .run();\n        let result = 0;\n        for (const line of ns) {\n            const arrangements = findArrangements(line);\n            result += arrangements;\n        }\n        await resultOutputCallback(result);\n    },\n    async ({ lines, outputCallback, resultOutputCallback }) => {\n        const ns = new Parser(lines)\n            .tokenize(\" \")\n            .startLabeling()\n            .label(e => unfold(e.run(), \"?\"), \"simple\")\n            .label(e => e.transform(e => unfold(e, \",\")).ns(), \"contiguous\")\n            .run();\n        let result = 0;\n        for (const line of ns) {\n            const arrangements = findArrangements(line);\n            result += arrangements;\n        }\n        await resultOutputCallback(result);\n    },\n    {\n        key: \"hot-springs\",\n        title: \"Hot Springs\",\n        supportsQuickRunning: true,\n        embeddedData: true,\n        date: 12,\n        stars: 2,\n        exampleInput: `???.### 1,1,3\n.??..??...?##. 1,1,3\n?#?#?#?#?#?#?#? 1,3,1,6\n????.#...#... 4,1,1\n????.######..#####. 1,6,5\n?###???????? 3,2,1`\n    }\n);","import { entryForFile } from \"../../../entry\";\nimport { Parser } from \"../../../../support/parser\";\nimport { areArraysEqual } from \"../../../../support/sequences\";\nimport { FixedSizeMatrix } from \"../../../../support/matrix\";\n\nconst findReflection = (sizeLimit: number, lineGetter: (n: number) => string[], skip?: number | null) => {\n    for (let candidate = 0; candidate < sizeLimit - 1; candidate++) {\n        if (candidate === skip) {\n            continue;\n        }\n        let foundDifferent = false;\n        let matches = 0;\n        for (let y = 0; y < sizeLimit; y++) {\n            const baseCol = candidate - y;\n            const otherCol = candidate + y + 1;\n            if ([baseCol, otherCol].every(e => e >= 0 && e < sizeLimit)) {\n                const a = lineGetter(baseCol);\n                const b = lineGetter(otherCol);\n                if (!areArraysEqual(a, b, (a, b) => a === b)) {\n                    foundDifferent = true;\n                    break;\n                } else {\n                    matches++;\n                }\n            } else {\n            }\n        }\n        if (matches > 0 && !foundDifferent) {\n            return candidate;\n        }\n    }\n    return null;\n}\n\nexport const pointOfIncidence = entryForFile(\n    async ({ lines, outputCallback, resultOutputCallback }) => {\n        const matrixes = new Parser(lines)\n            .group(\"\")\n            .groupMap(e => e.matrix(e => e))\n            .run();\n\n        let result = 0;\n\n        for (const ns of matrixes) {\n            const horizontalReflection = findReflection(ns.size.y, e => ns.getRow(e));\n            const verticalReflection = findReflection(ns.size.x, e => ns.getColumn(e));\n            if (horizontalReflection !== null) {\n                result += (horizontalReflection + 1) * 100;\n            } else if (verticalReflection !== null) {\n                result += (verticalReflection + 1);\n            }\n        }\n        await resultOutputCallback(result);\n    },\n    async ({ lines, outputCallback, resultOutputCallback }) => {\n        const matrixes = new Parser(lines)\n            .group(\"\")\n            .groupMap(e => e.matrix(e => e))\n            .run();\n\n        let result = 0;\n\n        let i = 0;\n        for (const ns of matrixes) {\n            result += findReflectionWithSmudge(ns, i++);\n            // break;\n        }\n        await resultOutputCallback(result);\n    },\n    {\n        key: \"point-of-incidence\",\n        title: \"Point of Incidence\",\n        supportsQuickRunning: true,\n        embeddedData: true,\n        date: 13,\n        stars: 2,\n        exampleInput: `#.##..##.\n..#.##.#.\n##......#\n##......#\n..#.##.#.\n..##..##.\n#.#.##.#.\n\n#...##..#\n#....#..#\n..##..###\n#####.##.\n#####.##.\n..##..###\n#....#..#`\n    }\n);\n\nfunction findReflectionWithSmudge(ns: FixedSizeMatrix<string>, i: number) {\n    const oldHorizontal = findReflection(ns.size.y, e => ns.getRow(e));\n    const oldVertical = findReflection(ns.size.x, e => ns.getColumn(e));\n    for (let x = 0; x < ns.size.x; x++) {\n        for (let y = 0; y < ns.size.y; y++) {\n            const current = ns.get({x,y})!;\n            const res = current === \".\" ? \"#\" : \".\";\n            ns.set({x,y}, res);\n            try {\n                const horizontalReflection = findReflection(ns.size.y, e => ns.getRow(e), oldHorizontal);\n                const verticalReflection = findReflection(ns.size.x, e => ns.getColumn(e), oldVertical);\n                if (horizontalReflection !== null) {\n                    return (horizontalReflection + 1) * 100;\n                } else if (verticalReflection !== null) {\n                    return (verticalReflection + 1);\n                }\n            } finally {\n                ns.set({x,y}, current);\n            }\n        }\n    }\n    throw new Error(\"Didn't find a reflection point\");\n}\n","import { entryForFile } from \"../../../entry\";\nimport { Parser } from \"../../../../support/parser\";\nimport { FixedSizeMatrix } from \"../../../../support/matrix\";\nimport { CCoordinate, Coordinate, directions, manhattanDistance } from \"../../../../support/geometry\";\nimport { optimizeCycles } from \"../../../../support/optimization\";\n\ntype Cell = \"O\" | \".\" | \"#\";\ntype Grid = FixedSizeMatrix<Cell>;\n\nconst findNewPosition = (grid: Grid, position: Coordinate, direction: CCoordinate): Coordinate => {\n    if (grid.get(position) !== \"O\") {\n        throw new Error(\"Cannot move: \" + position);\n    }\n    let newPosition = direction.sum(position);\n    while (grid.get(newPosition) === \".\") {\n        newPosition = direction.sum(newPosition);\n    }\n    return direction.opposite.sum(newPosition);\n}\n\nexport const parabolicReflectorDish = entryForFile(\n    async ({ lines, outputCallback, resultOutputCallback }) => {\n        const ns = new Parser(lines)\n            .matrix(e => e as Cell);\n        roll(ns, directions.up);\n        const load = calculateLoad(ns);\n        await resultOutputCallback(load);\n    },\n    async ({ lines, outputCallback, resultOutputCallback }) => {\n        const cycle = [\n            directions.up,\n            directions.left,\n            directions.down,\n            directions.right\n        ];\n        const ns = new Parser(lines)\n            .matrix(e => e as Cell);\n        const iterations = 1000000000;\n            const res = optimizeCycles(\n                ns,\n                iterations,\n                e => `${e.simpleSerialize()}`,\n                (ns) => {\n                    for (const direction of cycle) {\n                        roll(ns, direction);\n                    }\n                    return [ns, calculateLoad(ns)];\n                }\n            )\n        await resultOutputCallback(res);\n    },\n    {\n        key: \"parabolic-reflector-dish\",\n        title: \"Parabolic Reflector Dish\",\n        supportsQuickRunning: true,\n        embeddedData: true,\n        date: 14,\n        stars: 2,\n        exampleInput: `O....#....\nO.OO#....#\n.....##...\nOO.#O....O\n.O.....O#.\nO.#..O.#.#\n..O..#O..O\n.......O..\n#....###..\n#OO..#....`\n    }\n);\n\nfunction roll(ns: FixedSizeMatrix<Cell>, direction: CCoordinate): Grid {\n    if (manhattanDistance(directions.up, direction) === 0) {\n        for (let y = 0; y < ns.size.y; y++) {\n            for (let x = 0; x < ns.size.x; x++) {\n                updatePosition(x, y);\n            }\n        }\n    } else if (manhattanDistance(directions.down, direction) === 0) {\n        for (let y = ns.size.y-1; y >= 0; y--) {\n            for (let x = 0; x < ns.size.x; x++) {\n                updatePosition(x, y);\n            }\n        }\n    } else if (manhattanDistance(directions.left, direction) === 0) {\n        for (let x = 0; x < ns.size.x; x++) {\n            for (let y = 0; y < ns.size.y; y++) {\n                updatePosition(x, y);\n            }\n        }\n    } else if (manhattanDistance(directions.right, direction) === 0) {\n        for (let x = ns.size.x-1; x >= 0; x--) {\n            for (let y = 0; y < ns.size.y; y++) {\n                updatePosition(x, y);\n            }\n        }\n    }\n    return ns;\n\n    function updatePosition(x: number, y: number) {\n        if (ns.get({ x, y }) === \"O\") {\n            const newPosition = findNewPosition(ns, { x, y }, direction);\n            ns.set({ x, y }, \".\");\n            ns.set(newPosition, \"O\");\n        }\n    }\n}\n\nfunction calculateLoad(ns: FixedSizeMatrix<Cell>) {\n    return ns.reduce((acc, next) => {\n        const { cell, coordinate } = next;\n        if (cell === \"O\") {\n            return acc + ns.size.y - coordinate.y;\n        } else {\n            return acc;\n        }\n    }, 0);\n}\n","import { entryForFile } from \"../../../entry\";\nimport { Parser } from \"../../../../support/parser\";\n\nconst hash = (s: string) => {\n    let result = 0;\n    for (const c of s) {\n        const ascii = c.charCodeAt(0);\n        result += ascii;\n        result *= 17;\n        result %= 256;\n    }\n    return result;\n}\n\ntype Lens = {\n    label: string;\n    focus: number;\n}\n\ntype Instruction = {\n    label: string;\n} & ({\n    type: \"-\"\n} | { type: \"=\", focus: number })\n\nclass Boxes {\n    private readonly boxes: Map<string, number>[] = [];\n    constructor() {\n        for (let i = 0; i < 256; i++) {\n            this.boxes.push(new Map<string, number>());\n        }\n    }\n\n    public remove(label: string) {\n        const index = this.getIndex(label);\n        const map = this.boxes[index];\n        if (map.has(label)) {\n            map.delete(label);\n        }\n    }\n\n    public add(label: string, focus: number) {\n        const index = this.getIndex(label);\n        const map = this.boxes[index];\n        map.set(label, focus);\n    }\n\n    public getScore(): number {\n        let result = 0;\n        for (let i = 0; i < this.boxes.length; i++) {\n            let j = 1;\n            for (const [label, focus] of this.boxes[i]) {\n                if (j === 1) {\n                    console.log(\"Box \" + i);\n                }\n                console.log(`\\t${label} - ${focus}`);\n                result += (i + 1) * j * focus;\n                j++;\n            }\n        }\n        return result;\n    }\n\n    private getIndex(label: string) {\n        return hash(label);\n    }\n}\n\nconst boxes = [];\n\nexport const lensLibrary = entryForFile(\n    async ({ lines, outputCallback, resultOutputCallback }) => {\n        const ns = new Parser(lines)\n            .tokenize(\",\")\n            .run()[0];\n        let result = 0;\n        for (let i = 0; i < ns.length; i++) {\n            const x = hash(ns[i]);\n            result += x;\n        }\n        await resultOutputCallback(result);\n    },\n    async ({ lines, outputCallback, resultOutputCallback }) => {\n        const ns = new Parser(lines)\n            .tokenize(\",\")\n            .run()[0];\n        const boxes = new Boxes();\n\n        for (const instruction of ns) {\n            const match = /(\\w+)[-=](\\d*)/.exec(instruction);\n            if (!match) {\n                throw new Error(\"Invalid input: \" + instruction);\n            }\n            const [_, label, rawFocus] = match;\n            if (instruction.includes(\"-\")) {\n                boxes.remove(label);\n            } else if (instruction.includes(\"=\")) {\n                const focus = parseInt(rawFocus, 10);\n                if (Number.isNaN(focus)) {\n                    throw new Error(\"Invalid focus: \" + rawFocus);\n                }\n                boxes.add(label, focus);\n            } else {\n                throw new Error(\"Invalid instruction\");\n            }\n        }\n\n        await resultOutputCallback(boxes.getScore());\n    },\n    {\n        key: \"lens-library\",\n        title: \"Lens Library\",\n        supportsQuickRunning: true,\n        embeddedData: true,\n        date: 15,\n        stars: 2,\n        exampleInput: `rn=1,cm-,qp=3,cm=2,qp-,pc=4,ot=9,ab=5,pc-,pc=6,ot=7`\n    }\n);","import { OutputCallback, Pause, entryForFile } from \"../../../entry\";\nimport { Parser } from \"../../../../support/parser\";\nimport { FixedSizeMatrix } from \"../../../../support/matrix\";\nimport { CCoordinate, Coordinate, directions, rotate, serialization } from \"../../../../support/geometry\";\nimport { Lifo, Queue, SerializableSet } from \"../../../../support/data-structure\";\nimport { start } from \"repl\";\n\nconst validCells = [\"|\", \"\\\\\", \"/\", \"-\", \"-\", \".\"] as const;\n\ntype Cell = {\n    cell: typeof validCells[number]\n    directions: CCoordinate[];\n}\n\ntype Grid = FixedSizeMatrix<Cell>;\n\ntype Vector = {\n    position: Coordinate;\n    direction: CCoordinate;\n}\n\nconst visited = new SerializableSet<Coordinate>(serialization);\nconst vectorVisited = new SerializableSet<Vector>({\n    serialize(e) {\n    return `${serialization.serialize(e.position)}_${serialization.serialize(e.direction)}`;\n}, \ndeserialize(e) {\n    const [position, direction] = e.split(\"_\").map(e => serialization.deserialize(e));\n    return {position, direction: new CCoordinate(direction.x, direction.y)};\n}}\n);\n\nconst nextStep = (vector: Vector, grid: Grid) : Vector[] => {\n    const existingCell = grid.get(vector.position);\n    if (existingCell) {\n        if (existingCell.directions.some(d => d.is(vector.direction))) {\n            return [];\n        }\n        existingCell.directions.push(vector.direction);\n    }\n\n    const newPosition = vector.direction.sum(vector.position);\n    const cell = grid.get(newPosition);\n    if (!cell) {\n        return [];\n    }\n    const resultDirections: CCoordinate[] = [];\n    if (cell.cell === \"/\") {\n        const rotation = vector.direction.y !== 0 ? \"Clockwise\" : \"Counterclockwise\";\n        resultDirections.push(rotate(vector.direction, rotation));\n    } else if (cell.cell === \"\\\\\") {\n        const rotation = vector.direction.x !== 0 ? \"Clockwise\" : \"Counterclockwise\";\n        resultDirections.push(rotate(vector.direction, rotation));\n    } else if (cell.cell === \"|\" && vector.direction.x !== 0) {\n        resultDirections.push(directions.up);\n        resultDirections.push(directions.down);\n    } else if (cell.cell === \"-\" && vector.direction.y !== 0) {\n        resultDirections.push(directions.left);\n        resultDirections.push(directions.right);\n    } else {\n        resultDirections.push(vector.direction);\n    }\n    return resultDirections.map(d => ({\n        position: newPosition,\n        direction: d\n    }));\n}\n\nexport const theFloorWillBeLava = entryForFile(\n    async ({ lines, outputCallback, resultOutputCallback, pause }) => {\n        const ns = new Parser(lines)\n            .matrix(e => {\n                if (!(validCells as unknown as string[]).includes(e)) {\n                    throw new Error(\"Invalid cell\");\n                }\n                return {\n                    cell: e,\n                    directions: []\n                } as Cell;\n            });\n        const startingBeam: Vector = {\n            position: {x: -1, y: 0},\n            direction: directions.right\n        };\n        const energized = await calculateEnergized(startingBeam, outputCallback, ns, pause);\n        await resultOutputCallback(energized);\n\n    },\n    async ({ lines, outputCallback, resultOutputCallback, pause}) => {\n        const ns = new Parser(lines)\n            .matrix(e => {\n                if (!(validCells as unknown as string[]).includes(e)) {\n                    throw new Error(\"Invalid cell\");\n                }\n                return {\n                    cell: e,\n                    directions: []\n                } as Cell;\n            });\n        const startingBeams: Vector[] = [];\n        for (let x = 0; x < ns.size.x; x++) {\n            startingBeams.push({position: {x, y:-1}, direction: directions.down});\n            startingBeams.push({position: {x, y:ns.size.y}, direction: directions.up});\n        }\n        for (let y = 0; y < ns.size.y; y++) {\n            startingBeams.push({position: { x: -1, y }, direction: directions.right});\n            startingBeams.push({position: { x: ns.size.x, y }, direction: directions.left});\n        }\n        let best = 0;\n        for (const startingBeam of startingBeams) {\n            const energized = await calculateEnergized(startingBeam, async () => {}, ns, async () => {});\n            await pause(0);\n            best = Math.max(energized, best);\n        }\n        await resultOutputCallback(best);\n    },\n    {\n        key: \"the-floor-will-be-lava\",\n        title: \"The Floor Will Be Lava\",\n        supportsQuickRunning: true,\n        embeddedData: true,\n        date: 16,\n        stars: 2,\n        // customComponent: \"pause-and-run\",\n        exampleInput: \n`.|...\\\\....\n|.-.\\\\.....\n.....|-...\n........|.\n..........\n.........\\\\\n..../.\\\\\\\\..\n.-.-/..|..\n.|....-|.\\\\\n..//.|....`\n    }\n);\n\nasync function calculateEnergized(startingBeam: Vector, outputCallback: OutputCallback, ns: FixedSizeMatrix<Cell>, pause: Pause) {\n    let beams: Vector[] = [startingBeam];\n    while (beams.length > 0) {\n        await outputCallback(null, true);\n        await outputCallback(ns.toString(e => {\n            return e!.directions.length > 0 ? \"#\" : e!.cell;\n        }));\n        await pause();\n        const newBeams: Vector[] = [];\n        for (const beam of beams) {\n            const additionals = nextStep(beam, ns);\n            newBeams.push(...additionals);\n        }\n        beams = newBeams;\n    }\n    const energized = ns.getFlatData().filter(c => c.directions.length > 0).length;\n    ns.getFlatData().forEach(e => e.directions = []);\n    return energized;\n}\n","import { entryForFile } from \"../../../entry\";\nimport { Parser } from \"../../../../support/parser\";\nimport { CCoordinate, Coordinate, directions, manhattanDistance, rotate, serialization } from \"../../../../support/geometry\";\nimport { Heap, Lifo, Queuable, Queue, SerializableDictionary } from \"../../../../support/data-structure\";\nimport { sum } from \"../../../../support/sequences\";\nimport { start } from \"repl\";\nimport { FixedSizeMatrix } from \"../../../../support/matrix\";\n\ntype State = {\n    position: Coordinate;\n    direction: CCoordinate;\n    heatLoss: number;\n    // canStepFor: number;\n}\n\nexport const clumsyCrucible = entryForFile(\n    async ({ lines, outputCallback, resultOutputCallback }) => {\n        const ns = new Parser(lines)\n            .matrixNumbers(undefined);\n\n        const bestDestination = getBestDestination(ns, 3, 0);\n\n        await resultOutputCallback(bestDestination);\n        \n    },\n    async ({ lines, outputCallback, resultOutputCallback }) => {\n        const ns = new Parser(lines)\n            .matrixNumbers(undefined);\n\n        const bestDestination = getBestDestination(ns, 10, 3);\n\n        await resultOutputCallback(bestDestination);\n    },\n    {\n        key: \"clumsy-crucible\",\n        title: \"Clumsy Crucible\",\n        supportsQuickRunning: true,\n        embeddedData: true,\n        date: 17,\n        stars: 2,\n        exampleInput: `2413432311323\n3215453535623\n3255245654254\n3446585845452\n4546657867536\n1438598798454\n4457876987766\n3637877979653\n4654967986887\n4564679986453\n1224686865563\n2546548887735\n4322674655533`\n    }\n);\n\nfunction getBestDestination(ns: FixedSizeMatrix<number>, maxSteps: number, minSteps: number) {\n    const queue: Queuable<State> = new Heap<State>((a, b) => b.heatLoss - a.heatLoss);\n\n    queue.add({\n        position: { x: 0, y: 0 },\n        direction: directions.left,\n        heatLoss: 0,\n    });\n\n    queue.add({\n        position: { x: 0, y: 0 },\n        direction: directions.up,\n        heatLoss: 0,\n    });\n\n    const visited = new SerializableDictionary<State, number>(\n        {\n            serialize(e) {\n                return `${serialization.serialize(e.direction)}_${serialization.serialize(e.position)}`;\n            },\n            deserialize(e) {\n                throw new Error(\"Not implemented\");\n            }\n        }\n    );\n\n    const destination = { x: ns.size.x - 1, y: ns.size.y - 1 };\n    let bestDestination = undefined;\n    while (!queue.isEmpty) {\n        const current = queue.get()!;\n        if (bestDestination && current.heatLoss >= bestDestination) {\n            continue;\n        }\n        const existing = visited.get(current);\n        if (existing !== undefined && existing <= current.heatLoss) {\n            continue;\n        }\n        visited.set(current, current.heatLoss);\n        if (manhattanDistance(current.position, destination) === 0) {\n            if (bestDestination === undefined) {\n                bestDestination = current.heatLoss;\n            }\n            bestDestination = Math.min(current.heatLoss, bestDestination);\n            continue;\n        }\n        const turnDirections = [\n            rotate(current.direction, \"Clockwise\"),\n            rotate(current.direction, \"Counterclockwise\"),\n        ];\n        for (const direction of turnDirections) {\n            let newStart = { ...current, direction };\n            for (let i = 0; i < maxSteps; i++) {\n                newStart = { ...newStart, position: newStart.direction.sum(newStart.position) };\n                const newHeat = ns.get(newStart.position);\n                if (newHeat === undefined) {\n                    break;\n                }\n                newStart.heatLoss += newHeat;\n                if (i >= minSteps) {\n                    queue.add(newStart);\n                }\n            }\n        }\n    }\n    return bestDestination;\n}\n","import { trebuchet } from \"./trebuchet\";\nimport { cubeConundrum } from \"./cube-conundrum\";\nimport { gearRatios } from \"./gear-ratios\";\nimport { scratchCards } from \"./scratch-cards\";\nimport { ifYouGiveASeedAFertilizer } from \"./if-you-give-a-seed-a-fertilizer\";\nimport { waitForIt } from \"./wait-for-it\";\nimport { camelCards } from \"./camel-cards\";\nimport { hauntedWasteland } from \"./haunted-wasteland\";\nimport { mirageMaintenance } from \"./mirage-maintenance\";\nimport { pipeMaze } from \"./pipe-maze\";\nimport { cosmicExpansion } from \"./cosmic-expansion\";\nimport { hotSprings } from \"./hot-springs\";\nimport { pointOfIncidence } from \"./point-of-incidence\";\nimport { parabolicReflectorDish } from \"./parabolic-reflector-dish\";\nimport { lensLibrary } from \"./lens-library\";\nimport { theFloorWillBeLava } from \"./the-floor-will-be-lava\";\nimport { clumsyCrucible } from \"./clumsy-crucible\";\nexport const entries = [\n    trebuchet,\n    cubeConundrum,\n    gearRatios,\n    scratchCards,\n    ifYouGiveASeedAFertilizer,\n    waitForIt,\n    camelCards,\n    hauntedWasteland,\n    mirageMaintenance,\n    pipeMaze,\n    cosmicExpansion,\n    hotSprings,\n    pointOfIncidence,\n    parabolicReflectorDish,\n    lensLibrary,\n    theFloorWillBeLava,\n    clumsyCrucible,\n];","import { Entry } from \"./entry\";\r\n\r\nimport {entries as entries2015} from \"./single-entries/2015\";\r\nimport {entries as entries2016} from \"./single-entries/2016\";\r\nimport {entries as entries2017} from \"./single-entries/2017\";\r\nimport {entries as entries2018} from \"./single-entries/2018\";\r\nimport {entries as entries2019} from \"./single-entries/2019\";\r\nimport {entries as entries2020} from \"./single-entries/2020\";\r\nimport {entries as entries2021} from \"./single-entries/2021\";\r\nimport {entries as entries2022} from \"./single-entries/2022\";\r\nimport {entries as entries2023} from \"./single-entries/2023\";\r\n\r\nexport interface EntryRoute extends EntryRouteBase {\r\n    date: number;\r\n}\r\n\r\ninterface EntryRouteBase {\r\n    name: string;\r\n    title: string;\r\n    entry: Entry;\r\n    date?: number;\r\n    stars?: 1 | 2;\r\n}\r\n\r\nexport type EntryListYearElement = EntryRouteBase | Entry;\r\n\r\nconst isEntryRouteBase = (e: Entry | EntryRouteBase): e is EntryRouteBase => {\r\n    return (e as EntryRouteBase).name !== undefined;\r\n};\r\n\r\nfunction enrichList(entries: EntryListYearElement[]): EntryRoute[] {\r\n    let index = 0;\r\n    return entries.map((e) => {\r\n        index++;\r\n        if (isEntryRouteBase(e)) {\r\n            if (e.date !== undefined) {\r\n                index = e.date;\r\n            }\r\n            return { ...e, date: index };\r\n        } else {\r\n            const entry = e;\r\n            if (entry.metadata === undefined) {\r\n                throw new Error(\"Entry must have metadata if not specified in here\");\r\n            }\r\n            if (entry.metadata.date !== undefined) {\r\n                index = entry.metadata.date;\r\n            }\r\n            return {\r\n                name: entry.metadata.key,\r\n                title: entry.metadata.title,\r\n                stars: entry.metadata.stars,\r\n                date: index,\r\n                entry,\r\n            };\r\n        }\r\n    });\r\n}\r\n\r\n\r\nexport const entryList: { [key: string]: EntryRoute[] } = {\r\n    2015: enrichList(entries2015),\r\n    2016: enrichList(entries2016),\r\n    2017: enrichList(entries2017),\r\n    2018: enrichList(entries2018),\r\n    2019: enrichList(entries2019),\r\n    2020: enrichList(entries2020),\r\n    2021: enrichList(entries2021),\r\n    2022: enrichList(entries2022),\r\n    2023: enrichList(entries2023),\r\n};\r\n\r\n\r\n","\r\nimport Year from \"./components/Year.vue\";\r\nimport Navbar from \"./components/Navbar.vue\";\r\nimport { Component, Vue } from \"vue-property-decorator\";\r\nimport { entryList, EntryRoute } from \"./entries/entryList\";\r\nimport { baseState, updateYear } from \"./state/state\";\r\n@Component({\r\n    components: {\r\n        Navbar,\r\n    },\r\n})\r\nexport default class App extends Vue {\r\n    private entryByYears: { [key: string]: EntryRoute[] } | null = null;\r\n    public created() {\r\n        this.entryByYears = entryList;\r\n    }\r\n}\r\n","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--14-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/ts-loader/index.js??ref--14-3!../node_modules/cache-loader/dist/cjs.js??ref--1-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--14-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/ts-loader/index.js??ref--14-3!../node_modules/cache-loader/dist/cjs.js??ref--1-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=470e78e5&lang=pug\"\nimport script from \"./App.vue?vue&type=script&lang=ts\"\nexport * from \"./App.vue?vue&type=script&lang=ts\"\nimport style0 from \"./App.vue?vue&type=style&index=0&id=470e78e5&prod&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"home unselectable\"},[_vm._l((_vm.stars),function(star,index){return _c('div',{staticClass:\"falling-star\",style:({left: star.left+'%', animationDuration: star.duration+'s', animationDelay: -star.delay+'s'})},[_vm._m(0,true)])}),_c('div',{staticClass:\"title\"},[_vm._v(\"Solutions for the Advent of Code\")]),_c('div',{staticClass:\"year-tree\"},[_vm._m(1),_vm._l((this.yearsByRow),function(floorYears,index){return _c('div',{key:index,staticClass:\"tree-floor\"},_vm._l((floorYears),function(year,yearIndex){return _c('div',{key:yearIndex,staticClass:\"year\"},[(year)?_c('router-link',{attrs:{\"to\":{name: 'entries'}}},[_c('div',{staticClass:\"year-entry\",on:{\"click\":function($event){return _vm.selectYear(year)}}},[_vm._v(_vm._s(year))])]):_c('div',{staticClass:\"fake-year\"},[_vm._v(\"2020\")])],1)}),0)}),_c('div',{staticClass:\"tree-floor\"},[_c('div',{staticClass:\"year tree-trunk\"},[(_vm.years.length !== 7)?_c('div',[_vm._v(\"2020\")]):_c('router-link',{attrs:{\"to\":{name: 'entries'}}},[_c('div',{staticClass:\"year-entry\",on:{\"click\":function($event){return _vm.selectYear(_vm.years[0])}}},[_vm._v(_vm._s(_vm.years[0]))])])],1)])],2)],2)\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"rotating-star\"},[_c('div',{staticClass:\"animated-star\"})])\n},function (){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"tree-floor\"},[_c('div',{staticClass:\"star\"},[_vm._v(\"*\")])])\n}]\n\nexport { render, staticRenderFns }","\r\nimport Vue from \"vue\";\r\nimport { updateYear } from \"../state/state\";\r\nimport { randrange } from \"../support/random\";\r\nexport default Vue.extend({\r\n    props: {\r\n        years: Array as () => string[]\r\n    },\r\n    computed: {\r\n        stars(): Array<{left: number; duration: number; delay: number}> {\r\n            const result: Array<{left: number; duration: number; delay: number}> = [];\r\n            for (let i = 0; i < 50; i++) {\r\n                const left = randrange(0, 100);\r\n                const duration = randrange(10, 50);\r\n                const delay = randrange(0, duration);\r\n                result.push({left, duration, delay});\r\n            }\r\n            return result;\r\n        },\r\n        yearsByRow() {\r\n            const k = this.years.length;\r\n            const biggestFloor = Math.ceil((-1 + Math.sqrt(1 + 8 * k)) / 2);\r\n            const result: string[][] = [];\r\n            const current = {\r\n                floor: [] as string[],\r\n                size: 1\r\n            };\r\n            let years = [...this.years].reverse();\r\n            if (years.length === 7) {\r\n                years = years.slice(0, 6);\r\n            }\r\n            for (const year of years) {\r\n                current.floor.push(year);\r\n                if (current.floor.length === current.size) {\r\n                    result.push(current.floor.reverse());\r\n                    current.floor = [];\r\n                    current.size++;\r\n                }\r\n            }\r\n            if (current.floor.length > 0) {\r\n                let shouldPrepend = false;\r\n                while (current.floor.length < current.size) {\r\n                    if (shouldPrepend) {\r\n                        current.floor.unshift(\"\");\r\n                    } else {\r\n                        current.floor.push(\"\");\r\n                    }\r\n                    shouldPrepend = !shouldPrepend;\r\n                }\r\n                result.push(current.floor.reverse());\r\n            }\r\n            return result;\r\n\r\n        }\r\n    },\r\n    methods: {\r\n        selectYear(year: string) {\r\n            updateYear(year);\r\n        }\r\n    }\r\n\r\n});\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./Home.vue?vue&type=template&id=093ad348&scoped=true&lang=pug\"\nimport script from \"./Home.vue?vue&type=script&lang=ts\"\nexport * from \"./Home.vue?vue&type=script&lang=ts\"\nimport style0 from \"./Home.vue?vue&type=style&index=0&id=093ad348&prod&lang=scss&scoped=true\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"093ad348\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"entries-wrapper\"},[_c('ul',{staticClass:\"entries\"},_vm._l((_vm.entries),function(entry){return _c('li',{key:entry.name},[_c('CalendarEntry',{attrs:{\"title\":entry.title,\"date\":entry.date,\"name\":entry.name,\"stars\":entry.stars}})],1)}),0)])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('router-link',{staticClass:\"calendar-cell clickable\",attrs:{\"to\":{name: _vm.name}}},[_c('div',{staticClass:\"header\"},[_vm._v(\" \"+_vm._s(_vm.ordinalDate)),_c('div',{staticClass:\"icon right rotated-right\"},[_c('font-awesome-icon',{attrs:{\"icon\":\"gift\"}})],1)]),_c('div',{staticClass:\"title\"},[_vm._v(\" \"+_vm._s(_vm.title))]),_c('div',{staticClass:\"stars\"},_vm._l((_vm.starObjects),function(star){return _c('div',{key:star.key,staticClass:\"star\"},[_c('span',{style:({visibility: star.isFull ? 'visible' : 'hidden'})},[_vm._v(\"⭐\")])])}),0)])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","export function ordinalOf(i: number) {\r\n    const j = i % 10;\r\n    const k = i % 100;\r\n    if (j === 1 && k !== 11) {\r\n        return i + \"st\";\r\n    }\r\n    if (j === 2 && k !== 12) {\r\n        return i + \"nd\";\r\n    }\r\n    if (j === 3 && k !== 13) {\r\n        return i + \"rd\";\r\n    }\r\n    return i + \"th\";\r\n}\r\n","\r\nimport Vue from \"vue\";\r\nimport { baseState } from \"../state/state\";\r\nimport { ordinalOf } from \"../support/string\";\r\nexport default Vue.extend({\r\n    props: {\r\n        title: String,\r\n        date: Number,\r\n        name: String,\r\n        stars: Number,\r\n    },\r\n    data() {\r\n        return {\r\n            dates: baseState.dates\r\n        };\r\n    },\r\n    computed: {\r\n        ordinalDate(): string {\r\n            return ordinalOf(this.date);\r\n        },\r\n        starObjects(): Array<{key: number, isFull: boolean}> {\r\n            return [...Array(2).keys()].map((i) => ({\r\n                key: i,\r\n                isFull: i < this.stars\r\n            }));\r\n        }\r\n\r\n    }\r\n});\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CalendarEntry.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CalendarEntry.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./CalendarEntry.vue?vue&type=template&id=553c99e9&scoped=true&lang=pug\"\nimport script from \"./CalendarEntry.vue?vue&type=script&lang=ts\"\nexport * from \"./CalendarEntry.vue?vue&type=script&lang=ts\"\nimport style0 from \"./CalendarEntry.vue?vue&type=style&index=0&id=553c99e9&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"553c99e9\",\n  null\n  \n)\n\nexport default component.exports","\r\nimport { Component, Vue } from \"vue-property-decorator\";\r\n\r\nimport { entryList } from \"../entries/entryList\";\r\nimport { baseState } from \"../state/state\";\r\n\r\nimport CalendarEntry from \"../components/CalendarEntry.vue\";\r\n\r\ninterface Entry {\r\n    name: string;\r\n    title: string;\r\n}\r\n\r\n@Component({\r\n    components: { CalendarEntry }\r\n})\r\nexport default class Entries extends Vue {\r\n\r\n    private dates = baseState.dates;\r\n\r\n    public get entries(): Entry[] {\r\n        return entryList[this.dates.year + \"\"];\r\n    }\r\n    // public entries: Entry[] = [entryList[\"2018\"], entryList[\"2019\"]].flatMap(\r\n    //     e => e\r\n    // );\r\n}\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Entries.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Entries.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./Entries.vue?vue&type=template&id=1763c634&lang=pug\"\nimport script from \"./Entries.vue?vue&type=script&lang=ts\"\nexport * from \"./Entries.vue?vue&type=script&lang=ts\"\nimport style0 from \"./Entries.vue?vue&type=style&index=0&id=1763c634&prod&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('EntryTemplate',{attrs:{\"title\":_vm.title,\"id\":_vm.id,\"year\":_vm.year,\"disabled\":_vm.disabled,\"entryKey\":this.entry.metadata.key,\"isExample\":this.example,\"fixedInput\":this.hasFixedInput},on:{\"file-loaded\":_vm.readFile}},[(_vm.entry.metadata && _vm.entry.metadata.variants)?_c('div',{staticClass:\"variants\"},[_c('label',{staticStyle:{\"margin-right\":\"1em\"}},[_vm._v(\"Variants\")]),_c('label',[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.variantSelected),expression:\"variantSelected\"}],attrs:{\"type\":\"radio\",\"value\":\"\"},domProps:{\"checked\":_vm._q(_vm.variantSelected,\"\")},on:{\"change\":function($event){_vm.variantSelected=\"\"}}}),_vm._v(\"Normal\")]),_vm._l((_vm.entry.metadata.variants),function(variant){return _c('label',[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.variantSelected),expression:\"variantSelected\"}],attrs:{\"type\":\"radio\"},domProps:{\"value\":variant.metadata.key,\"checked\":_vm._q(_vm.variantSelected,variant.metadata.key)},on:{\"change\":function($event){_vm.variantSelected=variant.metadata.key}}}),_vm._v(_vm._s(variant.metadata.key))])})],2):_vm._e(),_c('div',{staticClass:\"options\"},[(_vm.supportsQuickRunning)?_c('div',{staticClass:\"quick-run unselectable\"},[_c('label',[_vm._v(\"Quick run\")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.quickRun),expression:\"quickRun\"}],attrs:{\"type\":\"checkbox\",\"disabled\":_vm.executing},domProps:{\"checked\":Array.isArray(_vm.quickRun)?_vm._i(_vm.quickRun,null)>-1:(_vm.quickRun)},on:{\"change\":function($event){var $$a=_vm.quickRun,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_vm._i($$a,$$v);if($$el.checked){$$i<0&&(_vm.quickRun=$$a.concat([$$v]))}else{$$i>-1&&(_vm.quickRun=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{_vm.quickRun=$$c}}}}),(_vm.time)?_c('label',[_vm._v(\"Time: \"+_vm._s(_vm.time))]):_vm._e()]):_vm._e(),(_vm.supportsExample)?_c('div',{staticClass:\"example unselectable\"},[_c('label',[_vm._v(\"Use example input\")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.example),expression:\"example\"}],attrs:{\"type\":\"checkbox\",\"disabled\":_vm.executing},domProps:{\"checked\":Array.isArray(_vm.example)?_vm._i(_vm.example,null)>-1:(_vm.example)},on:{\"change\":function($event){var $$a=_vm.example,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_vm._i($$a,$$v);if($$el.checked){$$i<0&&(_vm.example=$$a.concat([$$v]))}else{$$i>-1&&(_vm.example=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{_vm.example=$$c}}}})]):_vm._e()]),_c('div',{staticClass:\"output\"},[_c('EntrySimpleOutput',{key:_vm.$route.path,attrs:{\"lines\":_vm.output,\"backgroundColor\":_vm.canvasBackground},on:{\"print-factory\":_vm.readFactory}})],1),(_vm.showAdditionalInput)?_c('div',{staticClass:\"input unselectable\"},[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.inputLine),expression:\"inputLine\"}],attrs:{\"type\":\"text\",\"disabled\":!_vm.disabled},domProps:{\"value\":(_vm.inputLine)},on:{\"keyup\":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,\"enter\",13,$event.key,\"Enter\"))return null;return _vm.sendInput.apply(null, arguments)},\"input\":function($event){if($event.target.composing)return;_vm.inputLine=$event.target.value}}}),_c('button',{attrs:{\"disabled\":!_vm.disabled},on:{\"click\":_vm.sendInput}},[_vm._v(\"Send\")]),_c('button',{attrs:{\"disabled\":!_vm.disabled},on:{\"click\":_vm.sendClose}},[_vm._v(\"Close\")])]):_vm._e()])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"wrapper\"},[_c('EntryTitle',{attrs:{\"date\":_vm.id,\"name\":_vm.title,\"year\":_vm.year}}),_c('EntryInput',{key:_vm.$route.path,attrs:{\"disabled\":_vm.disabled,\"entryKey\":_vm.entryKey,\"year\":_vm.year,\"date\":_vm.id,\"isExample\":_vm.isExample,\"hasFixedInput\":_vm.hasFixedInput},on:{\"file-loaded\":_vm.fileLoaded}}),_vm._t(\"default\")],2)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"title\"},[_c('div',{staticClass:\"date\"},[_vm._v(_vm._s(_vm.fullDate)),_c('a',{staticClass:\"link small\",attrs:{\"href\":_vm.link,\"target\":\"_blank\"}},[_c('font-awesome-icon',{attrs:{\"icon\":\"link\"}})],1)]),_c('div',{staticClass:\"name\"},[_vm._v(_vm._s(_vm.name)),_c('a',{staticClass:\"link big\",attrs:{\"href\":_vm.link,\"target\":\"_blank\"}},[_c('font-awesome-icon',{attrs:{\"icon\":\"link\"}})],1)]),_c('hr')])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\r\nimport { Component, Vue, Prop } from \"vue-property-decorator\";\r\nimport { ordinalOf } from \"../support/string\";\r\n@Component({})\r\nexport default class EntryTitle extends Vue {\r\n    @Prop() private date!: number;\r\n    @Prop() private name!: string;\r\n    @Prop() private year!: string;\r\n    private get fullDate() {\r\n        return `December ${ordinalOf(this.date)}, ${this.year}`;\r\n    }\r\n\r\n    private get link() {\r\n        return `https://adventofcode.com/${this.year}/day/${this.date}`;\r\n    }\r\n}\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./EntryTitle.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./EntryTitle.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./EntryTitle.vue?vue&type=template&id=2d88f678&scoped=true&lang=pug\"\nimport script from \"./EntryTitle.vue?vue&type=script&lang=ts\"\nexport * from \"./EntryTitle.vue?vue&type=script&lang=ts\"\nimport style0 from \"./EntryTitle.vue?vue&type=style&index=0&id=2d88f678&prod&lang=scss&scoped=true\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"2d88f678\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"input unselectable\"},[(!_vm.noInput)?_c('div',[_c('EntryFileInput',{attrs:{\"readFile\":\"true\",\"disabled\":_vm.disabled,\"isUsingEmbedded\":_vm.forceEmbedded},on:{\"file-content\":_vm.readFileContent}}),(_vm.hasEmbedded)?_c('div',{staticClass:\"embedded\"},[(_vm.forceEmbedded)?_c('button',{attrs:{\"disabled\":\"\"}},[_vm._v(\"Using embedded data\")]):_c('button',{on:{\"click\":_vm.useEmbedded}},[_vm._v(\"Use embedded\")])]):_vm._e()],1):_c('div',{style:({marginBottom: '1em'})},[_vm._v(\"No input available: \"+_vm._s(_vm.reasonForNoInput))]),_c('div',{staticClass:\"choices\",class:{hidden: _vm.hideChoices}},[_c('EntryChoice',{key:this.$route.path,attrs:{\"disabled\":_vm.disabled,\"date\":_vm.date},on:{\"execute\":_vm.loadFile}})],1)])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"file-selection unselectable\"},[_c('button',{staticClass:\"selection-action\",attrs:{\"disabled\":_vm.disabled},on:{\"click\":_vm.clickSelectionAction}},[_vm._v(_vm._s(this.selectionLabel))]),_c('input',{ref:\"file-input\",attrs:{\"type\":\"file\"},on:{\"change\":_vm.filesUpdated}}),_c('label',{staticClass:\"selected-file\",class:{hidden: !this.isFileSelected}},[_vm._v(_vm._s(this.shownName))]),_c('hr',{class:{hidden: !this.isFileSelected}})])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import { error } from \"./log\";\r\n\r\nexport function readFileFromInput(file: File, onSuccess: ((content: string) => void)) {\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = () => {\r\n        onSuccess(fileReader.result as string);\r\n    };\r\n    fileReader.onerror = () => {\r\n        error(\"File read failure\");\r\n    };\r\n    fileReader.readAsText(file);\r\n}\r\n\r\nexport default (callback: (lines: string[]) => void) => {\r\n    const lines: string[] = [];\r\n    callback(lines);\r\n};\r\n","\r\nimport { Component, Vue, Prop, Watch } from \"vue-property-decorator\";\r\nimport { readFileFromInput } from \"../support/file-reader\";\r\n@Component({})\r\nexport default class EntryFileInput extends Vue {\r\n    @Prop({ default: false }) public disabled!: boolean;\r\n    @Prop({ default: false }) public readFile!: boolean;\r\n    @Prop({ default: false }) public isUsingEmbedded!: boolean;\r\n\r\n    public shownName: string = \"\";\r\n    public isFileSelected: boolean = false;\r\n\r\n    public clickSelectionAction() {\r\n        this.chooseFile();\r\n    }\r\n\r\n    @Watch(\"isUsingEmbedded\")\r\n    public watchIsUsingEmbedded(newValue: boolean) {\r\n        if (newValue) {\r\n            this.isFileSelected = false;\r\n        }\r\n    }\r\n\r\n    public filesUpdated(e: any) {\r\n        const fileName = this.getFileName();\r\n        if (fileName) {\r\n            this.isFileSelected = true;\r\n            this.shownName = fileName;\r\n            console.log(this.readFile);\r\n            if (this.readFile) {\r\n                const component = this;\r\n                readFileFromInput(this.input!.files![0], (content: string) => {\r\n                    const emitResult = component.$emit(\"file-content\", content);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    public get selectionLabel(): string {\r\n        if (this.isFileSelected) {\r\n            return \"Change input file\";\r\n        } else {\r\n            return \"Select input file\";\r\n        }\r\n    }\r\n\r\n    private get input() {\r\n        const input = this.$refs[\"file-input\"] as HTMLInputElement;\r\n        return input;\r\n    }\r\n\r\n    private getFileName() {\r\n        const input = this.input;\r\n        if (input && input.files) {\r\n            return input.files[0].name;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private resetInput() {\r\n        const input = this.input;\r\n        if (input) {\r\n            this.isFileSelected = false;\r\n            input.value = \"\";\r\n            this.shownName = \"\";\r\n        }\r\n    }\r\n\r\n    private chooseFile() {\r\n        const input = this.input;\r\n        if (input) {\r\n            input.click();\r\n        }\r\n    }\r\n}\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./EntryFileInput.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./EntryFileInput.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./EntryFileInput.vue?vue&type=template&id=6d4835c0&scoped=true&lang=pug\"\nimport script from \"./EntryFileInput.vue?vue&type=script&lang=ts\"\nexport * from \"./EntryFileInput.vue?vue&type=script&lang=ts\"\nimport style0 from \"./EntryFileInput.vue?vue&type=style&index=0&id=6d4835c0&prod&lang=scss&scoped=true\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"6d4835c0\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"entry-choice\",class:{hidden: _vm.hidden}},[_c('label',{staticClass:\"question\"},[_vm._v(_vm._s(_vm.label))]),(!_vm.isLast)?_c('div',{staticClass:\"choices\"},[_c('label',[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.choice),expression:\"choice\"}],attrs:{\"type\":\"radio\",\"value\":\"first\",\"disabled\":_vm.disabled},domProps:{\"checked\":_vm._q(_vm.choice,\"first\")},on:{\"change\":function($event){_vm.choice=\"first\"}}}),_vm._v(\"First\")]),_c('label',[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.choice),expression:\"choice\"}],attrs:{\"type\":\"radio\",\"value\":\"second\",\"disabled\":_vm.disabled},domProps:{\"checked\":_vm._q(_vm.choice,\"second\")},on:{\"change\":function($event){_vm.choice=\"second\"}}}),_vm._v(\"Second\")])]):_vm._e(),_c('button',{attrs:{\"disabled\":_vm.disabled},on:{\"click\":_vm.show}},[_vm._v(\"Execute\")])])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\r\nimport { Component, Vue, Prop } from \"vue-property-decorator\";\r\n@Component({})\r\nexport default class EntryChoice extends Vue {\r\n    @Prop({ default: false }) public hidden!: boolean;\r\n    @Prop({ default: false }) public disabled!: boolean;\r\n    @Prop({required: true}) public date!: number;\r\n    private choice: string = \"first\";\r\n    public get isLast() {\r\n        return this.date === 25;\r\n    }\r\n    public get label() {\r\n        return this.isLast ? \"\" : \"Which entry?\";\r\n    }\r\n    public show() {\r\n        const emitResult = this.$emit(\"execute\", this.choice);\r\n    }\r\n}\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./EntryChoice.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./EntryChoice.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./EntryChoice.vue?vue&type=template&id=307a2ea6&scoped=true&lang=pug\"\nimport script from \"./EntryChoice.vue?vue&type=script&lang=ts\"\nexport * from \"./EntryChoice.vue?vue&type=script&lang=ts\"\nimport style0 from \"./EntryChoice.vue?vue&type=style&index=0&id=307a2ea6&prod&lang=scss&scoped=true\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"307a2ea6\",\n  null\n  \n)\n\nexport default component.exports","import { entryList } from \"./entryList\";\r\n\r\nconst parse = (data: string): string[] => {\r\n    data = data.replaceAll(\"\\r\\n\", \"\\n\");\r\n    if (data.endsWith(\"\\n\")) {\r\n        data = data.slice(0, data.length-1);\r\n    }\r\n    return data.split(\"\\n\");\r\n};\r\n\r\nexport const disabledYear: string | undefined = \"2023\";\r\n\r\n\r\nexport const embeddedLines = Object.keys(entryList).flatMap((year) => entryList[year].map((entry) => {\r\n    return {\r\n        year,\r\n        entry\r\n    };\r\n})).filter((e) => e.entry.entry.metadata && e.entry.entry.metadata.embeddedData)\r\n.reduce((acc, next) => {\r\n    const metadata = next.entry.entry.metadata!;\r\n    acc[metadata.key] = async () => {\r\n        console.log(\"Loading \" + metadata.key);\r\n        const key = metadata.embeddedData === true ? metadata.key : metadata.embeddedData!;\r\n        const data = (await import(\r\n            /* webpackChunkName: \"[request]\" */\r\n            `../../data/${next.year}/${key}.txt`\r\n        )).default as string;\r\n        return parse(data);\r\n    };\r\n    return acc;\r\n}, {} as { [key: string]: () => Promise<string[]>});\r\n","\r\nimport EntryFileInput from \"@/components/EntryFileInput.vue\";\r\nimport EntryChoice from \"@/components/EntryChoice.vue\";\r\nimport { Component, Vue, Emit, Prop, Watch } from \"vue-property-decorator\";\r\nimport { Choice } from \"../constants/choice\";\r\nimport { EntryFileHandling } from \"../entries/entry\";\r\nimport { disabledYear, embeddedLines } from \"../entries/embeddedData\";\r\n\r\n@Component({\r\n    components: {\r\n        EntryFileInput,\r\n        EntryChoice\r\n    }\r\n})\r\nexport default class EntryInput extends Vue {\r\n    @Prop({ default: false }) public disabled!: boolean;\r\n    @Prop({required: true, default: \"\"}) public entryKey!: string;\r\n    @Prop({required: true}) public year!: string;\r\n    @Prop({required: true}) public date!: number;\r\n    @Prop({required: false, default: false}) public isExample!: boolean;\r\n    @Prop({default: false}) public hasFixedInput!: boolean;\r\n\r\n    private inputContent: string | null = null;\r\n    private forceEmbedded: boolean = false;\r\n\r\n    private get reasonForNoInput() {\r\n        if (this.isExample) {\r\n            return \"you are using the example input\";\r\n        }\r\n        else if (this.hasFixedInput) {\r\n            return \"this solution only works on my own input\";\r\n        } else {\r\n            return \"you cannot select your input for the current year in order to avoid cheating!\";\r\n        }\r\n    }\r\n\r\n    public get noInput(): boolean {\r\n        return (this.entryKey in embeddedLines && this.year === disabledYear) || this.isExample || this.hasFixedInput;\r\n    }\r\n\r\n    public get hasEmbedded(): boolean {\r\n        return this.entryKey in embeddedLines;\r\n    }\r\n\r\n    public get hideChoices(): boolean {\r\n        return this.inputContent === null && !(this.noInput || this.forceEmbedded);\r\n    }\r\n\r\n    public readFileContent(content: string) {\r\n        this.inputContent = content;\r\n        this.forceEmbedded = false;\r\n    }\r\n\r\n    public useEmbedded() {\r\n        this.forceEmbedded = true;\r\n        this.inputContent = null;\r\n    }\r\n\r\n    @Emit(\"file-loaded\")\r\n    public async loadFile(choice: Choice): Promise<EntryFileHandling> {\r\n        if (this.noInput || this.forceEmbedded) {\r\n            const content = await (embeddedLines[this.entryKey] || (async () => [] as string[]))();\r\n            const lastIndex = content.length - 1;\r\n            if (content.length > 0 && content[lastIndex].endsWith(\"\\n\")) {\r\n                content[lastIndex] = content[lastIndex].slice(0, content[lastIndex].length - 1);\r\n            }\r\n            return {choice, content };\r\n        }\r\n        if (!this.inputContent) {\r\n            throw Error(\"No file was read\");\r\n        }\r\n\r\n        let contentToSplit = this.inputContent;\r\n        if (contentToSplit.endsWith(\"\\n\")) {\r\n            contentToSplit = contentToSplit.slice(0, contentToSplit.length - 1);\r\n        }\r\n        const splitContent = contentToSplit.split(\"\\n\");\r\n\r\n        return {\r\n            choice,\r\n            content: splitContent\r\n        };\r\n    }\r\n}\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./EntryInput.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./EntryInput.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./EntryInput.vue?vue&type=template&id=dc221ab6&scoped=true&lang=pug\"\nimport script from \"./EntryInput.vue?vue&type=script&lang=ts\"\nexport * from \"./EntryInput.vue?vue&type=script&lang=ts\"\nimport style0 from \"./EntryInput.vue?vue&type=style&index=0&id=dc221ab6&prod&lang=scss&scoped=true\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"dc221ab6\",\n  null\n  \n)\n\nexport default component.exports","\r\nimport { Component, Vue, Prop, Emit } from \"vue-property-decorator\";\r\nimport EntryTitle from \"@/components/EntryTitle.vue\";\r\nimport EntryInput from \"@/components/EntryInput.vue\";\r\nimport { EntryFileHandling } from \"../entries/entry\";\r\nimport { updateYear } from \"../state/state\";\r\n@Component({\r\n    components: {\r\n        EntryTitle,\r\n        EntryInput\r\n    }\r\n})\r\nexport default class EntryTemplate extends Vue {\r\n    @Prop() public title!: string;\r\n    @Prop() public id!: number;\r\n    @Prop({ default: false }) public disabled!: boolean;\r\n    @Prop({ required: true }) public year!: string;\r\n    @Prop({required: false, default: false}) public noInput!: boolean;\r\n    @Prop({required: true}) public entryKey!: string;\r\n    @Prop({default: false}) public isExample!: boolean;\r\n    @Prop({default: false}) public hasFixedInput!: boolean;\r\n    @Emit(\"file-loaded\")\r\n    public fileLoaded(fileHandling: EntryFileHandling) {\r\n        return fileHandling;\r\n    }\r\n\r\n    public mounted() {\r\n        updateYear(this.year);\r\n    }\r\n\r\n    public updated() {\r\n        updateYear(this.year);\r\n    }\r\n}\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./EntryTemplate.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./EntryTemplate.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./EntryTemplate.vue?vue&type=template&id=44a3474c&scoped=true&lang=pug\"\nimport script from \"./EntryTemplate.vue?vue&type=script&lang=ts\"\nexport * from \"./EntryTemplate.vue?vue&type=script&lang=ts\"\nimport style0 from \"./EntryTemplate.vue?vue&type=style&index=0&id=44a3474c&prod&lang=scss&scoped=true\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"44a3474c\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"wrapper\"},[(_vm.canvasSize)?_c('div',{staticClass:\"screen-output\"},[_c('canvas',{ref:\"canvas\",style:(_vm.style),attrs:{\"width\":_vm.canvasSize.width,\"height\":_vm.canvasSize.height}})]):_vm._e(),_c('div',{ref:\"output\",staticClass:\"output\",class:{ hidden: _vm.hideOutput }},[_vm._v(_vm._s(_vm.text))])])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\r\nimport { Component, Vue, Prop, Watch } from \"vue-property-decorator\";\r\nimport { Drawable, ScreenPrinter } from \"../entries/entry\";\r\nimport {\r\n    Bounds,\r\n    boundsContain,\r\n    boundsIntersect,\r\n    Coordinate,\r\n    getBoundaries,\r\n    getTopLeftBottomRight,\r\n    joinBoundaries,\r\n    sumCoordinate,\r\n} from \"../support/geometry\";\r\n\r\ntype ScreenCallback = (\r\n    width: number,\r\n    height: number,\r\n    callback: (context: CanvasRenderingContext2D | null) => void\r\n) => void;\r\n\r\ntype InvalidateItem = {\r\n    bounds: Bounds;\r\n    isInvalid: boolean;\r\n    drawable: Drawable;\r\n};\r\n\r\n@Component({})\r\nexport default class EntrySimpleOutput extends Vue {\r\n    public get hideOutput(): boolean {\r\n        return this.lines.length <= 0;\r\n    }\r\n\r\n    public get text() {\r\n        return this.lines.join(\"\\n\");\r\n    }\r\n\r\n    public get style() {\r\n        const style: { [key: string]: string } = {};\r\n        if (this.backgroundColor) {\r\n            style[\"background-color\"] = this.backgroundColor;\r\n        }\r\n\r\n        return style;\r\n    }\r\n    @Prop({ default: [] }) public lines!: string[];\r\n\r\n    @Prop({ default: undefined }) public backgroundColor?: string;\r\n\r\n    public $refs!: {\r\n        output: HTMLDivElement;\r\n        canvas: HTMLCanvasElement;\r\n    };\r\n\r\n    private canvasSize: { width: number; height: number } | null = null;\r\n\r\n    private shouldStopRenderer: boolean = false;\r\n\r\n    private toDraw: Drawable[] = [];\r\n    private toDrawForeground: Drawable[] = [];\r\n    private ids: Set<string> = new Set<string>();\r\n\r\n    private context: CanvasRenderingContext2D | null = null;\r\n    private stop: boolean = false;\r\n\r\n    private pause: boolean = false;\r\n    private pauseFor?: number = undefined;\r\n\r\n    private manualRender: boolean = false;\r\n\r\n    private manualInvalidate: boolean = false;\r\n\r\n    private invalidateMap: {\r\n        [key: string]: InvalidateItem;\r\n    } = {};\r\n\r\n    public mounted() {\r\n        this.$emit(\"print-factory\", {\r\n            factory: async (size?: Coordinate): Promise<ScreenPrinter> => {\r\n                this.canvasSize = size\r\n                    ? { width: size.x, height: size.y }\r\n                    : { width: 300, height: 300 };\r\n                this.ids = new Set<string>();\r\n                this.toDraw = [];\r\n                this.toDrawForeground = [];\r\n                this.pause = false;\r\n                return {\r\n                    add: async (item) => {\r\n                        if (!this.ids.has(item.id)) {\r\n                            this.toDraw.push(item);\r\n                            this.internalAddItem(item);\r\n                        } else {\r\n                            console.error(\r\n                                \"Duplicate ID, not adding: \" + item.id\r\n                            );\r\n                        }\r\n                    },\r\n                    addForeground: async (item) => {\r\n                        if (!this.ids.has(item.id)) {\r\n                            this.toDrawForeground.push(item);\r\n                            this.internalAddItem(item);\r\n                        } else {\r\n                            console.error(\r\n                                \"Duplicate ID, not adding to foreground: \" +\r\n                                    item.id\r\n                            );\r\n                        }\r\n                    },\r\n                    remove: async (id) => {\r\n                        if (this.ids.has(id)) {\r\n                            const index = this.toDraw.findIndex(\r\n                                (e) => e.id === id\r\n                            );\r\n                            this.toDraw.splice(index, 1);\r\n                            this.ids.delete(id);\r\n                            delete this.invalidateMap[id];\r\n                        }\r\n                    },\r\n                    stop: async () => {\r\n                        this.renderIteration();\r\n                        this.context = null;\r\n                        console.log(\"Stopping render...\");\r\n                    },\r\n                    replace: async (items: Drawable[]) => {\r\n                        const newIds = new Set<string>(\r\n                            items.map((item) => item.id)\r\n                        );\r\n                        if (newIds.size !== items.length) {\r\n                            console.error(\r\n                                \"There are duplicated IDs, not replacing\"\r\n                            );\r\n                        }\r\n                        this.toDraw = [...items];\r\n                        this.ids = newIds;\r\n                        this.startRender();\r\n                    },\r\n                    pause: (times?: number) => {\r\n                        this.pauseFor = times;\r\n                        this.pause = true;\r\n                        return () => {\r\n                            this.pause = false;\r\n                        };\r\n                    },\r\n                    forceRender: () => {\r\n                        this.renderIteration();\r\n                    },\r\n                    changeColor: async (\r\n                        idOrIndex: string | number,\r\n                        color: string\r\n                    ) => {\r\n                        const index: number =\r\n                            typeof idOrIndex === \"string\"\r\n                                ? this.toDraw.findIndex(\r\n                                      (e) => e.id === idOrIndex\r\n                                  )\r\n                                : idOrIndex;\r\n                        if (index < 0 || index >= this.toDraw.length) {\r\n                            return;\r\n                        }\r\n                        this.toDraw[index].color = color;\r\n                    },\r\n                    setManualRender: () => {\r\n                        this.manualRender = true;\r\n                    },\r\n                    setManualInvalidate: () => {\r\n                        this.manualInvalidate = true;\r\n                    },\r\n                    invalidate: (key: string | Drawable) => {\r\n                        const item =\r\n                            this.invalidateMap[\r\n                                typeof key === \"string\" ? key : key.id\r\n                            ];\r\n                        if (!item) {\r\n                            console.error(\"Invalid key to invalidate: \" + key);\r\n                        }\r\n                        item.isInvalid = true;\r\n                        const newBounds = this.getBoundaries(item.drawable);\r\n                        item.bounds = joinBoundaries(item.bounds, newBounds);\r\n                    },\r\n                    getImage: (): Promise<Blob> => {\r\n                        return new Promise<Blob>((res, rej) => {\r\n                            this.$refs.canvas.toBlob((c) => {\r\n                                if (c === null) {\r\n                                    rej();\r\n                                } else {\r\n                                    res(c);\r\n                                }\r\n                            });\r\n                        });\r\n                    },\r\n                };\r\n            },\r\n            clear: () => (this.canvasSize = null),\r\n        });\r\n    }\r\n\r\n    @Watch(\"text\")\r\n    public onTextChanged(val: string[], oldVal: string[]) {\r\n        this.$refs.output.scrollTop = this.$refs.output.scrollHeight;\r\n    }\r\n\r\n    private getBoundaries(item: Drawable): Bounds {\r\n        if (item.type === \"rectangle\") {\r\n            return getBoundaries([item.c, sumCoordinate(item.c, item.size)]);\r\n        } else {\r\n            return getBoundaries(item.points);\r\n        }\r\n    }\r\n\r\n    private internalAddItem(item: Drawable) {\r\n        this.ids.add(item.id);\r\n        const bounds = this.getBoundaries(item);\r\n        this.invalidateMap[item.id] = {\r\n            bounds,\r\n            isInvalid: true,\r\n            drawable: item,\r\n        };\r\n        this.startRender();\r\n    }\r\n\r\n    private startRender() {\r\n        if (!this.stop && this.context === null) {\r\n            console.log(\"Starting render...\");\r\n            this.context = this.$refs.canvas.getContext(\"2d\");\r\n            if (this.context && this.canvasSize) {\r\n                this.context.clearRect(\r\n                    0,\r\n                    0,\r\n                    this.canvasSize.width,\r\n                    this.canvasSize.height\r\n                );\r\n            }\r\n            if (this.manualRender) {\r\n                console.log(\"Manual render\");\r\n                return;\r\n            }\r\n            const render = () => {\r\n                if (this.context !== null && this.canvasSize) {\r\n                    if (!this.pause) {\r\n                        this.renderIteration();\r\n                    }\r\n                    setTimeout(render, 1000 / 30);\r\n                } else {\r\n                    console.log(\"Render stopped\");\r\n                }\r\n            };\r\n            render();\r\n            // setTimeout(render, 1000/30);\r\n            console.log(\"Render started\");\r\n        } else {\r\n            if (this.stop) {\r\n                console.log(\"Component destroyed\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private renderIteration() {\r\n        const renderItem = (item: Drawable) => {\r\n            if (!this.context || !this.canvasSize) {\r\n                return;\r\n            }\r\n            this.context.beginPath();\r\n            if (item.type === \"rectangle\") {\r\n                this.context.rect(item.c.x, item.c.y, item.size.x, item.size.y);\r\n            } else if (item.type === \"points\") {\r\n                let isFirst = true;\r\n                for (const point of item.points) {\r\n                    if (isFirst) {\r\n                        this.context.moveTo(point.x, point.y);\r\n                        isFirst = false;\r\n                    } else {\r\n                        this.context.lineTo(point.x, point.y);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (item.shouldStroke) {\r\n                this.context.strokeStyle = item.color;\r\n                this.context.stroke();\r\n            } else {\r\n\r\n                this.context.fillStyle = item.color;\r\n                this.context.fill();\r\n            }\r\n        };\r\n\r\n        if (this.context && this.canvasSize) {\r\n            if (!this.manualInvalidate) {\r\n                this.context.clearRect(\r\n                    0,\r\n                    0,\r\n                    this.canvasSize.width,\r\n                    this.canvasSize.height\r\n                );\r\n                for (const item of this.toDraw) {\r\n                    renderItem(item);\r\n                }\r\n\r\n                for (const item of this.toDrawForeground) {\r\n                    renderItem(item);\r\n                }\r\n            } else {\r\n                const points = Object.values(this.invalidateMap)\r\n                    .filter((v) => v.isInvalid)\r\n                    .flatMap((e) => getTopLeftBottomRight(e.bounds));\r\n                let invalidateBounds = getBoundaries(points);\r\n                while (true) {\r\n                    const newPoints = Object.values(this.invalidateMap)\r\n                        .filter(\r\n                            (e) =>\r\n                                boundsIntersect(e.bounds, invalidateBounds) &&\r\n                                !boundsContain(invalidateBounds, e.bounds)\r\n                        )\r\n                        .flatMap((e) => getTopLeftBottomRight(e.bounds));\r\n                    if (newPoints.length === 0) {\r\n                        break;\r\n                    }\r\n                    invalidateBounds = getBoundaries([\r\n                        ...newPoints,\r\n                        ...getTopLeftBottomRight(invalidateBounds),\r\n                    ]);\r\n                }\r\n\r\n                invalidateBounds.topLeft.x -= 1;\r\n                invalidateBounds.topLeft.y -= 1;\r\n                invalidateBounds.size.x += 2;\r\n                invalidateBounds.size.y += 2;\r\n                // don't know why :(\r\n                this.context.clearRect(\r\n                    invalidateBounds.topLeft.x,\r\n                    invalidateBounds.topLeft.y,\r\n                    invalidateBounds.size.x,\r\n                    invalidateBounds.size.y\r\n                );\r\n                // this.context.rect(\r\n                //     invalidateBounds.topLeft.x,\r\n                //     invalidateBounds.topLeft.y,\r\n                //     invalidateBounds.size.x,\r\n                //     invalidateBounds.size.y\r\n                // );\r\n                // this.context.strokeStyle = \"red\";\r\n                // this.context.stroke();\r\n                for (const item of this.toDraw) {\r\n                    const invalidateInfo = this.invalidateMap[item.id];\r\n                    invalidateInfo.isInvalid = false;\r\n                    const bounds = invalidateInfo.bounds;\r\n                    if (boundsIntersect(bounds, invalidateBounds)) {\r\n                        renderItem(item);\r\n                    }\r\n                    invalidateInfo.bounds = this.getBoundaries(item);\r\n                }\r\n                for (const item of this.toDrawForeground) {\r\n                    const invalidateInfo = this.invalidateMap[item.id];\r\n                    invalidateInfo.isInvalid = false;\r\n                    const bounds = invalidateInfo.bounds;\r\n                    if (boundsIntersect(bounds, invalidateBounds)) {\r\n                        renderItem(item);\r\n                    }\r\n                    invalidateInfo.bounds = this.getBoundaries(item);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private destroyed() {\r\n        this.stop = true;\r\n        this.context = null;\r\n    }\r\n}\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./EntrySimpleOutput.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./EntrySimpleOutput.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./EntrySimpleOutput.vue?vue&type=template&id=0a6e4920&scoped=true&lang=pug\"\nimport script from \"./EntrySimpleOutput.vue?vue&type=script&lang=ts\"\nexport * from \"./EntrySimpleOutput.vue?vue&type=script&lang=ts\"\nimport style0 from \"./EntrySimpleOutput.vue?vue&type=style&index=0&id=0a6e4920&prod&lang=scss&scoped=true\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"0a6e4920\",\n  null\n  \n)\n\nexport default component.exports","export default {\r\n    isMobile() {\r\n        const ua = navigator.userAgent;\r\n        const isMobile = /Android|webOS|iPhone|iPad|iPod/i.test(ua);\r\n        return isMobile;\r\n    }\r\n};\r\n","import mq from \"./mediaQuery\";\r\n\r\nexport const mediaQuery = mq;\r\n","\r\nimport { Component, Vue, Prop, Watch } from \"vue-property-decorator\";\r\nimport EntryTemplate from \"@/components/EntryTemplate.vue\";\r\nimport EntrySimpleOutput from \"@/components/EntrySimpleOutput.vue\";\r\nimport {\r\n    Entry,\r\n    executeEntry,\r\n    EntryFileHandling,\r\n    simpleOutputCallbackFactory,\r\n    ScreenPrinter\r\n} from \"../../entries/entry\";\r\n\r\nimport {mediaQuery} from \"../../support/browser\";\r\nimport { Coordinate } from \"../../support/geometry\";\r\nimport { setTimeoutAsync } from \"../../support/async\";\r\nimport { Choice } from \"../../constants/choice\";\r\n@Component({\r\n    components: {\r\n        EntryTemplate,\r\n        EntrySimpleOutput\r\n    }\r\n})\r\nexport default class SimpleEntryTemplate extends Vue {\r\n    public get showAdditionalInput(): boolean {\r\n        const hasAdditionalInput = (this.selectedEntry.metadata !== undefined) &&\r\n            (this.selectedEntry.metadata.hasAdditionalInput === true);\r\n        return hasAdditionalInput && this.showInput;\r\n    }\r\n\r\n    private get timeout() {\r\n        if (this.selectedEntry.metadata && this.selectedEntry.metadata!.suggestedDelay) {\r\n            return this.selectedEntry.metadata!.suggestedDelay;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    public get supportsQuickRunning() {\r\n        return this.selectedEntry.metadata && this.selectedEntry.metadata.supportsQuickRunning;\r\n    }\r\n\r\n    public get supportsExample() {\r\n        return this.selectedEntry.metadata && this.selectedEntry.metadata.exampleInput;\r\n    }\r\n\r\n    public get hasFixedInput() {\r\n        return this.selectedEntry.metadata && this.selectedEntry.metadata.fixedInput;\r\n    }\r\n\r\n    private exampleInput(choice: Choice) {\r\n        if (!this.selectedEntry.metadata || !this.selectedEntry.metadata.exampleInput) {\r\n            throw new Error(\"Cannot find example input\");\r\n        }\r\n        const exampleInput = this.selectedEntry.metadata.exampleInput;\r\n        if (typeof exampleInput === \"string\") {\r\n            return exampleInput.split(\"\\n\");\r\n        } else {\r\n            const index = choice === \"first\" ? 0 : 1;\r\n            return exampleInput[index].split(\"\\n\");\r\n        }\r\n    }\r\n\r\n    private get selectedEntry(): Entry {\r\n        if (this.variantSelected.length === 0 || !this.entry.metadata || !this.entry.metadata.variants) {\r\n            return this.entry;\r\n        }\r\n\r\n        const [candidate] = this.entry.metadata.variants\r\n            .filter((v) => v.metadata && v.metadata.key === this.variantSelected);\r\n\r\n        if (candidate) {\r\n            return candidate;\r\n        }\r\n        return this.entry;\r\n    }\r\n\r\n    public get canvasBackground(): string | undefined {\r\n        if (this.selectedEntry && this.selectedEntry.metadata) {\r\n            return this.selectedEntry.metadata.canvasBackground;\r\n        }\r\n    }\r\n    @Prop() public title!: string;\r\n    @Prop() public id!: number;\r\n    @Prop() public entry!: Entry;\r\n    @Prop() public year!: string;\r\n\r\n    public output: string[] = [];\r\n\r\n    private example: boolean = false;\r\n\r\n    private variantSelected: string = \"\";\r\n    private clearScreen?: () => void;\r\n\r\n    private quickRun = false;\r\n\r\n    private inputLine: string = \"\";\r\n\r\n    private executing = false;\r\n\r\n    private buffer: Array<string | null> = [];\r\n    private resolver: ((s: string | null) => void) | null = null;\r\n\r\n    private showInput: boolean = false;\r\n    private disabled: boolean = false;\r\n\r\n    private destroying = false;\r\n\r\n    private time: string = \"\";\r\n\r\n    private requireScreen?: (size?: Coordinate) => Promise<ScreenPrinter>;\r\n\r\n    private stopper?: () => Promise<void>;\r\n\r\n    private isCancelled = false;\r\n\r\n    public sendInput() {\r\n        const line = this.inputLine;\r\n        this.inputLine = \"\";\r\n        this.sendLine(line);\r\n    }\r\n\r\n    public sendClose() {\r\n        this.sendLine(null);\r\n    }\r\n\r\n    @Watch(\"$route\")\r\n    public onRouteChanged() {\r\n        this.output = [];\r\n    }\r\n\r\n    public readFactory(args: {factory: (c?: Coordinate) => Promise<ScreenPrinter>, clear: () => void}) {\r\n        this.requireScreen = async (size?: Coordinate) => {\r\n            const result = await args.factory(size);\r\n            this.stopper = result.stop;\r\n            return result;\r\n        };\r\n        this.clearScreen = args.clear;\r\n    }\r\n\r\n    @Watch (\"selectedEntry\")\r\n    public onSelectedEntryChange() {\r\n        this.reset();\r\n        this.quickRun = false;\r\n    }\r\n\r\n    public beforeDestroy() {\r\n        this.reset();\r\n        this.destroying = true;\r\n        this.isCancelled = true;\r\n    }\r\n\r\n    public async readFile(fileHandling: EntryFileHandling) {\r\n        this.reset();\r\n        this.disabled = true;\r\n        this.showInput = true;\r\n        const additionalInputReader = this.showAdditionalInput ?\r\n            {\r\n                close: () => {\r\n                    this.showInput = false;\r\n                },\r\n                read: async () => {\r\n                    if (this.buffer.length > 0) {\r\n                        const res = this.buffer.shift()!;\r\n                        return res;\r\n                    }\r\n                    return await new Promise<string|null>((resolve, reject) => this.resolver = resolve);\r\n                }\r\n            } : undefined;\r\n        try {\r\n            this.executing = true;\r\n            const startTime = new Date().getTime();\r\n            await executeEntry({\r\n                entry: this.selectedEntry,\r\n                choice: fileHandling.choice,\r\n                lines: this.example ? this.exampleInput(fileHandling.choice) : fileHandling.content,\r\n                outputCallback: simpleOutputCallbackFactory(this.output, () => this.destroying),\r\n                additionalInputReader,\r\n                screen: this.requireScreen ? { requireScreen: this.requireScreen } : undefined,\r\n                isCancelled: () => this.isCancelled,\r\n                pause: this.createPause(),\r\n                isQuickRunning: this.quickRun,\r\n                stopTimer: () => this.time = `${new Date().getTime() - startTime}ms`,\r\n                mediaQuery,\r\n                isExample: this.example\r\n            });\r\n        } finally {\r\n            this.executing = false;\r\n            if (this.stopper) {\r\n                this.stopper();\r\n            }\r\n            this.disabled = false;\r\n        }\r\n    }\r\n\r\n    private createPause(): () => Promise<void> {\r\n        let lastPause = 0;\r\n        return async () => {\r\n            if (this.timeout === 0) {\r\n                const current = new Date().getTime();\r\n                if (current - lastPause < 200) {\r\n                    return;\r\n                } else {\r\n                    lastPause = current;\r\n                    await setTimeoutAsync(0);\r\n                }\r\n            } else {\r\n                await setTimeoutAsync(this.timeout);\r\n            }\r\n        };\r\n    }\r\n\r\n    private reset() {\r\n        if (this.clearScreen) {\r\n            this.clearScreen();\r\n        }\r\n        this.time = \"\";\r\n        this.executing = false;\r\n        this.output = [];\r\n    }\r\n\r\n    private sendLine(line: string | null) {\r\n        if (this.resolver !== null) {\r\n            const r = this.resolver;\r\n            this.resolver = null;\r\n            r(line);\r\n        } else {\r\n            this.buffer.push(line);\r\n        }\r\n    }\r\n\r\n}\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??ref--14-3!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SimpleEntryTemplate.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??ref--14-3!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SimpleEntryTemplate.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./SimpleEntryTemplate.vue?vue&type=template&id=e0fb7aa4&scoped=true&lang=pug\"\nimport script from \"./SimpleEntryTemplate.vue?vue&type=script&lang=ts\"\nexport * from \"./SimpleEntryTemplate.vue?vue&type=script&lang=ts\"\nimport style0 from \"./SimpleEntryTemplate.vue?vue&type=style&index=0&id=e0fb7aa4&prod&lang=scss&scoped=true\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"e0fb7aa4\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('BaseMessageTemplate',{attrs:{\"title\":_vm.title,\"id\":_vm.id,\"year\":_vm.year,\"entry\":_vm.entry,\"messageHandler\":_vm.messageHandler,\"additionalReset\":_vm.reset}},[(_vm.showTicket)?_c('div',{staticClass:\"ticket\"},[_c('div',{staticClass:\"title\"},[_vm._v(\"Train Ticket\")]),_vm._l((_vm.ticketData),function(ticket){return _c('div',{key:ticket.id,staticClass:\"ticket-field\"},[_c('label',{staticClass:\"label\"},[_vm._v(_vm._s(ticket.label))]),_c('label',{staticClass:\"value\",class:{'highlighted': ticket.label.startsWith('departure')}},[_vm._v(_vm._s(ticket.value))])])})],2):_vm._e()])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('EntryTemplate',{attrs:{\"title\":_vm.title,\"id\":_vm.id,\"disabled\":_vm.executing,\"year\":_vm.year,\"entryKey\":this.entry.metadata.key,\"isExample\":this.example},on:{\"file-loaded\":_vm.readFile}},[_c('div',{staticClass:\"options\"},[(_vm.supportsQuickRunning)?_c('div',{staticClass:\"quick-run unselectable\"},[_c('label',[_vm._v(\"Quick run\")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.quickRun),expression:\"quickRun\"}],attrs:{\"type\":\"checkbox\",\"disabled\":_vm.executing},domProps:{\"checked\":Array.isArray(_vm.quickRun)?_vm._i(_vm.quickRun,null)>-1:(_vm.quickRun)},on:{\"change\":function($event){var $$a=_vm.quickRun,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_vm._i($$a,$$v);if($$el.checked){$$i<0&&(_vm.quickRun=$$a.concat([$$v]))}else{$$i>-1&&(_vm.quickRun=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{_vm.quickRun=$$c}}}}),(_vm.time)?_c('label',[_vm._v(\"Time: \"+_vm._s(_vm.time))]):_vm._e()]):_vm._e(),(_vm.supportsExample)?_c('div',{staticClass:\"example unselectable\"},[_c('label',[_vm._v(\"Use example input\")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.example),expression:\"example\"}],attrs:{\"type\":\"checkbox\",\"disabled\":_vm.executing},domProps:{\"checked\":Array.isArray(_vm.example)?_vm._i(_vm.example,null)>-1:(_vm.example)},on:{\"change\":function($event){var $$a=_vm.example,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_vm._i($$a,$$v);if($$el.checked){$$i<0&&(_vm.example=$$a.concat([$$v]))}else{$$i>-1&&(_vm.example=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{_vm.example=$$c}}}})]):_vm._e()]),_c('div',{staticClass:\"output\"},[_c('EntrySimpleOutput',{key:_vm.$route.path,attrs:{\"lines\":_vm.output}})],1),_vm._t(\"default\")],2)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\r\nimport { Component, Vue, Prop, Watch } from \"vue-property-decorator\";\r\nimport {\r\n    Entry,\r\n    EntryFileHandling,\r\n    executeEntry,\r\n    MessageSender,\r\n    ScreenPrinter,\r\n    simpleOutputCallbackFactory\r\n} from \"../../../entries/entry\";\r\nimport EntryTemplate from \"@/components/EntryTemplate.vue\";\r\nimport EntrySimpleOutput from \"@/components/EntrySimpleOutput.vue\";\r\nimport { setTimeoutAsync } from \"../../../support/async\";\r\nimport { Coordinate } from \"../../../support/geometry\";\r\nimport { mediaQuery } from \"../../../support/browser\";\r\nimport { Choice } from \"../../../constants/choice\";\r\n\r\n@Component({\r\n    components: {\r\n        EntryTemplate,\r\n        EntrySimpleOutput\r\n    }\r\n})\r\nexport default class BaseMessageTemplate extends Vue {\r\n\r\n    public get supportsQuickRunning() {\r\n        return this.entry.metadata && this.entry.metadata.supportsQuickRunning;\r\n    }\r\n    @Prop() public title!: string;\r\n    @Prop() public id!: number;\r\n    @Prop() public entry!: Entry;\r\n    @Prop() public year!: number;\r\n    @Prop() public messageHandler: MessageSender | undefined;\r\n    @Prop({required: false}) public additionalReset?: () => void;\r\n\r\n    public get supportsExample() {\r\n        return this.entry.metadata && this.entry.metadata.exampleInput;\r\n    }\r\n\r\n    private example: boolean = false;\r\n\r\n    private executing: boolean = false;\r\n    private time: string = \"\";\r\n\r\n    private timeout = 50;\r\n\r\n    private output: string[] = [];\r\n\r\n    private destroying = false;\r\n    private quickRun = false;\r\n\r\n    private shouldStop = false;\r\n\r\n    private clearScreen?: () => void;\r\n\r\n    @Watch(\"entry\")\r\n    public onEntryChanged() {\r\n        this.reset();\r\n        this.quickRun = false;\r\n    }\r\n\r\n    public beforeDestroy() {\r\n        this.quickRun = false;\r\n        this.reset();\r\n        this.destroying = true;\r\n    }\r\n\r\n    private exampleInput(choice: Choice) {\r\n        if (!this.entry.metadata || !this.entry.metadata.exampleInput) {\r\n            throw new Error(\"Cannot find example input\");\r\n        }\r\n        const exampleInput = this.entry.metadata.exampleInput;\r\n        if (typeof exampleInput === \"string\") {\r\n            return exampleInput.split(\"\\n\");\r\n        } else {\r\n            const index = choice === \"first\" ? 0 : 1;\r\n            return exampleInput[index].split(\"\\n\");\r\n        }\r\n    }\r\n\r\n    public async readFile(fileHandling: EntryFileHandling) {\r\n        this.reset();\r\n        this.executing = true;\r\n        const that = this;\r\n        try {\r\n            const startTime = new Date().getTime();\r\n            await executeEntry({\r\n                entry: this.entry,\r\n                choice: fileHandling.choice,\r\n                lines: this.example ? this.exampleInput(fileHandling.choice) : fileHandling.content,\r\n                outputCallback: simpleOutputCallbackFactory(this.output, () => this.destroying),\r\n                isCancelled: () => that.shouldStop,\r\n                pause: this.createPause(),\r\n                isQuickRunning: this.quickRun,\r\n                stopTimer: () => this.time = `${new Date().getTime() - startTime}ms`,\r\n                sendMessage: this.quickRun ? undefined : this.messageHandler,\r\n                mediaQuery,\r\n                isExample: false\r\n            });\r\n        } catch (e) {\r\n            throw e;\r\n        } finally {\r\n            this.executing = false;\r\n        }\r\n    }\r\n\r\n    private createPause(): (() => Promise<void>) {\r\n        let lastPause = 0;\r\n        return () => {\r\n            const promise = new Promise<void>((resolve, reject) => {\r\n                if (this.timeout > 0) {\r\n                    setTimeout(resolve , this.timeout);\r\n                } else {\r\n                    const currentTime = new Date().getTime();\r\n                    if (currentTime - lastPause > 500) {\r\n                        lastPause = currentTime;\r\n                        setTimeout(resolve, 0);\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                }\r\n            });\r\n            return promise;\r\n        };\r\n\r\n    }\r\n\r\n    private reset() {\r\n        if (this.additionalReset) {\r\n            this.additionalReset();\r\n        }\r\n        if (this.clearScreen) {\r\n            this.clearScreen();\r\n        }\r\n        this.time = \"\";\r\n        this.destroying = false;\r\n        this.shouldStop = false;\r\n        this.executing = false;\r\n        this.output = [];\r\n        if (this.entry.metadata && this.entry.metadata.suggestedDelay !== undefined) {\r\n            this.timeout = this.entry.metadata.suggestedDelay;\r\n        }\r\n    }\r\n}\r\n","import mod from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/ts-loader/index.js??ref--14-3!../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BaseMessageTemplate.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/ts-loader/index.js??ref--14-3!../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BaseMessageTemplate.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./BaseMessageTemplate.vue?vue&type=template&id=3edaa91e&scoped=true&lang=pug\"\nimport script from \"./BaseMessageTemplate.vue?vue&type=script&lang=ts\"\nexport * from \"./BaseMessageTemplate.vue?vue&type=script&lang=ts\"\nimport style0 from \"./BaseMessageTemplate.vue?vue&type=style&index=0&id=3edaa91e&prod&lang=scss&scoped=true\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"3edaa91e\",\n  null\n  \n)\n\nexport default component.exports","\r\nimport { Component, Vue, Prop, Watch } from \"vue-property-decorator\";\r\nimport {\r\n    Entry, MessageSender,\r\n} from \"../../../../entries/entry\";\r\nimport BaseMessageTemplate from \"../BaseMessageTemplate.vue\";\r\nimport {isTicketTranslationMessage} from \"../../../../entries/single-entries/2020/ticket-translation/communication\";\r\n\r\ninterface TicketData {\r\n    id: number;\r\n    value: number;\r\n    label: string;\r\n}\r\n@Component({\r\n    components: {\r\n        BaseMessageTemplate\r\n    }\r\n})\r\nexport default class TicketTranslationView extends Vue {\r\n\r\n@Prop({required: false, default: undefined}) public messageHandlerSetter?: (sender: MessageSender) => void;\r\n    @Prop() public title!: string;\r\n    @Prop() public id!: number;\r\n    @Prop() public entry!: Entry;\r\n    @Prop() public year!: number;\r\n\r\n    private showTicket = false;\r\n    private ticketData: TicketData[] = [];\r\n\r\n\r\n    private reset() {\r\n        this.showTicket = false;\r\n        this.ticketData.length = 0;\r\n    }\r\n    private async messageHandler(message: any): Promise<void> {\r\n        if (!isTicketTranslationMessage(message)) {\r\n            throw new Error(\"Invalid message\");\r\n        }\r\n        this.showTicket = true;\r\n        switch (message.type) {\r\n            case \"setup\":\r\n                this.ticketData = message.ticket.map((n, i) => {\r\n                    return {\r\n                        id: i,\r\n                        value: n,\r\n                        label: \"\"\r\n                    };\r\n                });\r\n                break;\r\n            case \"label\":\r\n                this.ticketData[message.index].label = message.label;\r\n                break;\r\n        }\r\n    }\r\n\r\n}\r\n","import mod from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/ts-loader/index.js??ref--14-3!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TicketTranslationView.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/ts-loader/index.js??ref--14-3!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TicketTranslationView.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./TicketTranslationView.vue?vue&type=template&id=061a032b&lang=pug\"\nimport script from \"./TicketTranslationView.vue?vue&type=script&lang=ts\"\nexport * from \"./TicketTranslationView.vue?vue&type=script&lang=ts\"\nimport style0 from \"./TicketTranslationView.vue?vue&type=style&index=0&id=061a032b&prod&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('BaseMessageTemplate',{attrs:{\"title\":_vm.title,\"id\":_vm.id,\"year\":_vm.year,\"entry\":_vm.entry,\"messageHandler\":_vm.messageHandler,\"additionalReset\":_vm.reset}},[(_vm.showGrid)?_c('div',{staticClass:\"grid\"},[_c('div',{staticClass:\"header\"},[_c('div',{staticClass:\"slider\"},[_c('label',[_vm._v(\"Time\")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model.number\",value:(_vm.time),expression:\"time\",modifiers:{\"number\":true}}],attrs:{\"type\":\"range\",\"min\":_vm.minTime,\"max\":_vm.maxTime},domProps:{\"value\":(_vm.time)},on:{\"__r\":function($event){_vm.time=_vm._n($event.target.value)},\"blur\":function($event){return _vm.$forceUpdate()}}})]),_c('div',{staticClass:\"slider\"},[_c('label',[_vm._v(\"Depth\")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model.number\",value:(_vm.depth),expression:\"depth\",modifiers:{\"number\":true}}],attrs:{\"type\":\"range\",\"min\":_vm.minDepth,\"max\":_vm.maxDepth},domProps:{\"value\":(_vm.depth)},on:{\"__r\":function($event){_vm.depth=_vm._n($event.target.value)},\"blur\":function($event){return _vm.$forceUpdate()}}})]),(this.get4dData)?_c('div',{staticClass:\"slider\"},[_c('label',[_vm._v(\"Hyper\")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model.number\",value:(_vm.hyper),expression:\"hyper\",modifiers:{\"number\":true}}],attrs:{\"type\":\"range\",\"min\":_vm.minHyper,\"max\":_vm.maxHyper},domProps:{\"value\":(_vm.hyper)},on:{\"__r\":function($event){_vm.hyper=_vm._n($event.target.value)},\"blur\":function($event){return _vm.$forceUpdate()}}})]):_vm._e()]),_c('div',{staticClass:\"grid-output\"},_vm._l((this.getData()),function(line,index){return _c('div',{key:index,staticClass:\"grid-line\"},_vm._l((line),function(cell,index){return _c('div',{key:index,staticClass:\"grid-cell\"},[_vm._v(_vm._s(cell === \" \" ? \".\" : cell))])}),0)}),0)]):_vm._e()])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\r\nimport { Component, Vue, Prop, Watch } from \"vue-property-decorator\";\r\nimport {\r\n    Entry, MessageSender,\r\n} from \"../../../../entries/entry\";\r\nimport BaseMessageTemplate from \"../BaseMessageTemplate.vue\";\r\nimport {isConwayCubesMessage} from \"../../../../entries/single-entries/2020/conway-cubes/communication\";\r\nimport { NotImplementedError } from \"../../../../support/error\";\r\n\r\n@Component({\r\n    components: {\r\n        BaseMessageTemplate\r\n    }\r\n})\r\nexport default class ConwayCubesView extends Vue {\r\n\r\n@Prop({required: false, default: undefined}) public messageHandlerSetter?: (sender: MessageSender) => void;\r\n    @Prop() public title!: string;\r\n    @Prop() public id!: number;\r\n    @Prop() public entry!: Entry;\r\n    @Prop() public year!: number;\r\n\r\n    public showGrid = false;\r\n    public minDepth = 0;\r\n    public maxDepth = 0;\r\n\r\n    public minHyper = 0;\r\n    public maxHyper = 0;\r\n    public hyper = 0;\r\n\r\n    public minTime = 0;\r\n    public maxTime = 0;\r\n\r\n    private time = 0;\r\n    private depth = 0;\r\n\r\n    private get3dData?: (time: number, depth: number) => string[][];\r\n    private get4dData?: (time: number, depth: number, hyper: number) => string[][];\r\n    public getData(): string[][] {\r\n        if (!this.showGrid) {\r\n            return [];\r\n        }\r\n        if (this.get3dData) {\r\n            return this.get3dData(this.time, this.depth);\r\n        } else if (this.get4dData) {\r\n            return this.get4dData(this.time, this.depth, this.hyper);\r\n        }\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    private reset() {\r\n        this.showGrid = false;\r\n        this.minDepth = 0;\r\n        this.maxDepth = 0;\r\n        this.minHyper = 0;\r\n        this.maxHyper = 0;\r\n        this.minTime = 0;\r\n        this.maxTime = 0;\r\n        this.time = 0;\r\n        this.depth = 0;\r\n        this.hyper = 0;\r\n        this.get3dData = undefined;\r\n        this.get4dData = undefined;\r\n    }\r\n    private async messageHandler(message: any): Promise<void> {\r\n        if (!isConwayCubesMessage(message)) {\r\n            throw new Error(\"Invalid message\");\r\n        }\r\n        if (message.type === \"3d\") {\r\n            this.minDepth = message.minDepth;\r\n            this.maxDepth = message.maxDepth;\r\n            this.maxTime = message.maxTime;\r\n            this.time = Math.min(this.maxTime, this.time);\r\n            this.depth = Math.max(this.minDepth, Math.min(this.depth, this.maxDepth));\r\n            this.get3dData = message.data as ((time: number, depth: number) => string[][]);\r\n        } else if (message.type === \"4d\") {\r\n            this.minDepth = message.minDepth;\r\n            this.maxDepth = message.maxDepth;\r\n            this.minHyper = message.minHyper!;\r\n            this.maxHyper = message.maxHyper!;\r\n            this.maxTime = message.maxTime;\r\n            this.time = Math.min(this.maxTime, this.time);\r\n            this.depth = Math.max(this.minDepth, Math.min(this.depth, this.maxDepth));\r\n            this.hyper = Math.max(this.minHyper, Math.min(this.hyper, this.maxHyper));\r\n            this.get4dData = message.data as ((time: number, depth: number, hyper: number) => string[][]);\r\n        } else {\r\n            throw new NotImplementedError();\r\n        }\r\n        this.showGrid = true;\r\n    }\r\n\r\n}\r\n","import mod from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/ts-loader/index.js??ref--14-3!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ConwayCubesView.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/ts-loader/index.js??ref--14-3!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ConwayCubesView.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./ConwayCubesView.vue?vue&type=template&id=2d0c2e8a&scoped=true&lang=pug\"\nimport script from \"./ConwayCubesView.vue?vue&type=script&lang=ts\"\nexport * from \"./ConwayCubesView.vue?vue&type=script&lang=ts\"\nimport style0 from \"./ConwayCubesView.vue?vue&type=style&index=0&id=2d0c2e8a&prod&lang=scss&scoped=true\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"2d0c2e8a\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('BaseMessageTemplate',{attrs:{\"title\":_vm.title,\"id\":_vm.id,\"year\":_vm.year,\"entry\":_vm.entry,\"messageHandler\":_vm.messageHandler,\"additionalReset\":_vm.reset}},[_c('div',{ref:\"grid\",staticClass:\"grid\"})])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\r\nimport { Component, Vue, Prop, Watch } from \"vue-property-decorator\";\r\nimport {\r\n    Entry, MessageSender,\r\n} from \"../../../../entries/entry\";\r\nimport BaseMessageTemplate from \"../BaseMessageTemplate.vue\";\r\nimport { NotImplementedError } from \"../../../../support/error\";\r\n\r\nimport {defineGrid, extendHex } from \"honeycomb-grid\";\r\nimport { SVG } from \"@svgdotjs/svg.js\";\r\n\r\n\r\n@Component({\r\n    components: {\r\n        BaseMessageTemplate\r\n    }\r\n})\r\nexport default class ConwayCubesView extends Vue {\r\n\r\n@Prop({required: false, default: undefined}) public messageHandlerSetter?: (sender: MessageSender) => void;\r\n    @Prop() public title!: string;\r\n    @Prop() public id!: number;\r\n    @Prop() public entry!: Entry;\r\n    @Prop() public year!: number;\r\n\r\n    public mounted() {\r\n        const grid = this.$refs.grid as HTMLElement;\r\n        grid.innerHTML = \"\";\r\n        const draw = SVG();\r\n        const Hex = extendHex({ size: 5 });\r\n        const Grid = defineGrid(Hex);\r\n        // get the corners of a hex (they're the same for all hexes created with the same Hex factory)\r\n        const corners = Hex().corners();\r\n        // an SVG symbol can be reused\r\n        const hexSymbol = draw.symbol()\r\n            // map the corners' positions to a string and create a polygon\r\n            .polygon(corners.map(({ x, y }) => `${x},${y}`).join(\" \"))\r\n            .fill(\"none\")\r\n            .stroke({ width: 1, color: \"#999\" });\r\n\r\n        // render 10,000 hexes\r\n        Grid.rectangle({ width: 100, height: 100 }).forEach((hex) => {\r\n            const { x, y } = hex.toPoint();\r\n            // use hexSymbol and set its position for each hex\r\n            draw.use(hexSymbol).translate(x, y);\r\n        });\r\n        draw.addTo(grid);\r\n    }\r\n\r\n    private reset() {\r\n    }\r\n    private async messageHandler(message: any): Promise<void> {\r\n    }\r\n\r\n\r\n}\r\n","import mod from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/ts-loader/index.js??ref--14-3!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./LobbyLayout.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/ts-loader/index.js??ref--14-3!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./LobbyLayout.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./LobbyLayout.vue?vue&type=template&id=d2e217b2&scoped=true&lang=pug\"\nimport script from \"./LobbyLayout.vue?vue&type=script&lang=ts\"\nexport * from \"./LobbyLayout.vue?vue&type=script&lang=ts\"\nimport style0 from \"./LobbyLayout.vue?vue&type=style&index=0&id=d2e217b2&prod&lang=scss&scoped=true\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"d2e217b2\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('EntryTemplate',{attrs:{\"title\":_vm.title,\"id\":_vm.id,\"disabled\":_vm.executing,\"year\":_vm.year,\"entryKey\":this.entry.metadata.key},on:{\"file-loaded\":_vm.readFile}},[(_vm.supportsQuickRunning)?_c('div',{staticClass:\"quick-run unselectable\"},[_c('label',[_vm._v(\"Quick run\")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.quickRun),expression:\"quickRun\"}],attrs:{\"type\":\"checkbox\",\"disabled\":_vm.executing},domProps:{\"checked\":Array.isArray(_vm.quickRun)?_vm._i(_vm.quickRun,null)>-1:(_vm.quickRun)},on:{\"change\":function($event){var $$a=_vm.quickRun,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_vm._i($$a,$$v);if($$el.checked){$$i<0&&(_vm.quickRun=$$a.concat([$$v]))}else{$$i>-1&&(_vm.quickRun=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{_vm.quickRun=$$c}}}}),(_vm.time)?_c('label',[_vm._v(\"Time: \"+_vm._s(_vm.time))]):_vm._e()]):_vm._e(),_c('div',{staticClass:\"input unselectable\",class:{transparent:!_vm.executing || _vm.quickRun}},[_c('button',{class:{transparent: !_vm.executing || _vm.running},on:{\"click\":_vm.play}},[_vm._v(\"Play\")]),_c('button',{class:{transparent: !_vm.executing || _vm.running},on:{\"click\":_vm.nextState}},[_vm._v(\"Next\")]),_c('button',{class:{transparent: !_vm.executing},on:{\"click\":_vm.stop}},[_vm._v(\"Stop\")]),_c('button',{class:{transparent: !_vm.executing || _vm.running},on:{\"click\":_vm.run}},[_vm._v(\"Toggle Run\")]),_c('button',{class:{transparent: !_vm.executing || !_vm.running},on:{\"click\":_vm.run}},[_vm._v(\"Pause\")]),_c('div',{staticClass:\"speed\"},[_c('label',[_vm._v(\"Animation delay\")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.timeout),expression:\"timeout\"}],attrs:{\"type\":\"number\",\"min\":\"0\",\"step\":\"10\"},domProps:{\"value\":(_vm.timeout)},on:{\"input\":function($event){if($event.target.composing)return;_vm.timeout=$event.target.value}}})])]),_c('div',{staticClass:\"output\"},[_c('EntrySimpleOutput',{key:_vm.$route.path,attrs:{\"lines\":_vm.output,\"backgroundColor\":_vm.canvasBackground},on:{\"print-factory\":_vm.readFactory}})],1)])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\r\nimport { Component, Vue, Prop, Watch } from \"vue-property-decorator\";\r\nimport {\r\n    Entry,\r\n    EntryFileHandling,\r\n    executeEntry,\r\n    ScreenPrinter,\r\n    simpleOutputCallbackFactory\r\n} from \"../../entries/entry\";\r\nimport EntryTemplate from \"@/components/EntryTemplate.vue\";\r\nimport EntrySimpleOutput from \"@/components/EntrySimpleOutput.vue\";\r\nimport { setTimeoutAsync } from \"../../support/async\";\r\nimport { isTimeoutMessage } from \"../../entries/entryStatusMessages\";\r\nimport { Coordinate } from \"../../support/geometry\";\r\nimport {mediaQuery} from \"../../support/browser\";\r\n\r\n@Component({\r\n    components: {\r\n        EntryTemplate,\r\n        EntrySimpleOutput\r\n    }\r\n})\r\nexport default class EntryWithPauseAndRun extends Vue {\r\n\r\n    public get supportsQuickRunning() {\r\n        return this.entry.metadata && this.entry.metadata.supportsQuickRunning;\r\n    }\r\n    @Prop() public title!: string;\r\n    @Prop() public id!: number;\r\n    @Prop() public entry!: Entry;\r\n    @Prop() public year!: number;\r\n\r\n    private executing: boolean = false;\r\n    private resolver?: () => void;\r\n    private shouldStop: boolean = false;\r\n    private shouldRun: boolean = false;\r\n    private running: boolean = false;\r\n    private time: string = \"\";\r\n\r\n    private timeout = 50;\r\n\r\n    private output: string[] = [];\r\n\r\n    private requireScreen?: (size?: Coordinate) => Promise<ScreenPrinter>;\r\n    private screenPrinter?: ScreenPrinter;\r\n\r\n    private destroying = false;\r\n    private quickRun = false;\r\n\r\n    private clearScreen?: () => void;\r\n\r\n    @Watch(\"entry\")\r\n    public onEntryChanged() {\r\n        this.reset();\r\n        this.quickRun = false;\r\n    }\r\n\r\n    public readFactory(args: {factory: (c?: Coordinate) => Promise<ScreenPrinter>, clear: () => void}) {\r\n        this.clearScreen = args.clear;\r\n        this.requireScreen = async (size?: Coordinate) => {\r\n            const result = await args.factory(size);\r\n            this.screenPrinter = result;\r\n            return result;\r\n        };\r\n    }\r\n\r\n    public beforeDestroy() {\r\n        this.quickRun = false;\r\n        this.reset();\r\n        this.destroying = true;\r\n        if (this.screenPrinter) {\r\n            this.screenPrinter.stop();\r\n        }\r\n    }\r\n\r\n    public async readFile(fileHandling: EntryFileHandling) {\r\n        this.reset();\r\n        this.executing = true;\r\n        const that = this;\r\n        try {\r\n            const startTime = new Date().getTime();\r\n            await executeEntry({\r\n                entry: this.entry,\r\n                choice: fileHandling.choice,\r\n                lines: fileHandling.content,\r\n                outputCallback: simpleOutputCallbackFactory(this.output, () => this.destroying),\r\n                isCancelled: () => that.shouldStop,\r\n                pause: this.createPause(),\r\n                screen: this.requireScreen && !this.quickRun ? { requireScreen: this.requireScreen } : undefined,\r\n                isQuickRunning: this.quickRun,\r\n                stopTimer: () => this.time = `${new Date().getTime() - startTime}ms`,\r\n                mediaQuery,\r\n                isExample: false\r\n            });\r\n        } catch (e) {\r\n            throw e;\r\n        } finally {\r\n            this.executing = false;\r\n            if (this.screenPrinter) {\r\n                this.screenPrinter.stop();\r\n            }\r\n        }\r\n    }\r\n\r\n    public play() {\r\n        this.shouldRun = true;\r\n        this.nextState();\r\n    }\r\n\r\n    public stop() {\r\n        this.shouldStop = true;\r\n        this.running = false;\r\n        this.nextState();\r\n    }\r\n\r\n    public run() {\r\n        this.shouldRun = !this.shouldRun;\r\n    }\r\n    public nextState() {\r\n        if (this.resolver) {\r\n            const resolver = this.resolver;\r\n            this.resolver = undefined;\r\n            resolver();\r\n        }\r\n    }\r\n\r\n    private createPause(): (() => Promise<void>) {\r\n        let drawingPause: (() => void) | undefined;\r\n        let lastPause = 0;\r\n        return () => {\r\n            const promise = new Promise<void>((resolve, reject) => {\r\n                if (this.shouldRun) {\r\n                    this.running = true;\r\n                    const resolver = drawingPause ? () => {\r\n                        if (drawingPause) {\r\n                            drawingPause();\r\n                            drawingPause = undefined;\r\n                        }\r\n                        resolve();\r\n                    } : resolve;\r\n                    if (this.timeout > 0) {\r\n                        setTimeout(resolver , this.timeout);\r\n                    } else {\r\n                        const currentTime = new Date().getTime();\r\n                        if (currentTime - lastPause > 500) {\r\n                            lastPause = currentTime;\r\n                            setTimeout(resolver, 0);\r\n                        } else {\r\n                            resolver();\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.running = false;\r\n                    if (!drawingPause && this.screenPrinter) {\r\n                        drawingPause = this.screenPrinter.pause();\r\n                    }\r\n                    if (this.screenPrinter) {\r\n                        this.screenPrinter.forceRender();\r\n                    }\r\n                    this.resolver = resolve;\r\n                }\r\n            });\r\n            return promise;\r\n        };\r\n\r\n    }\r\n\r\n    public get canvasBackground(): string | undefined {\r\n        if (this.entry && this.entry.metadata) {\r\n            return this.entry.metadata.canvasBackground;\r\n        }\r\n    }\r\n\r\n    private reset() {\r\n        if (this.clearScreen) {\r\n            this.clearScreen();\r\n        }\r\n        if (this.running) {\r\n            this.stop();\r\n        }\r\n        this.time = \"\";\r\n        this.destroying = false;\r\n        this.running = false;\r\n        this.shouldRun = false;\r\n        this.shouldStop = false;\r\n        this.executing = false;\r\n        this.output = [];\r\n        if (this.entry.metadata && this.entry.metadata.suggestedDelay !== undefined) {\r\n            this.timeout = this.entry.metadata.suggestedDelay;\r\n        }\r\n    }\r\n}\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??ref--14-3!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./EntryWithPauseAndRun.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??ref--14-3!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./EntryWithPauseAndRun.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./EntryWithPauseAndRun.vue?vue&type=template&id=624cd62a&lang=pug\"\nimport script from \"./EntryWithPauseAndRun.vue?vue&type=script&lang=ts\"\nexport * from \"./EntryWithPauseAndRun.vue?vue&type=script&lang=ts\"\nimport style0 from \"./EntryWithPauseAndRun.vue?vue&type=style&index=0&id=624cd62a&prod&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('BaseMessageTemplate',{attrs:{\"title\":_vm.title,\"id\":_vm.id,\"year\":_vm.year,\"entry\":_vm.entry,\"messageHandler\":_vm.messageHandler,\"additionalReset\":_vm.reset}},[_c('Graph',{on:{\"setup\":function($event){return _vm.handleSetup($event)}}})],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"graph-wrapper\"},[(_vm.title)?_c('div',{staticClass:\"title\"},[_vm._v(_vm._s(_vm.title))]):_vm._e(),_c('div',{ref:\"graph\",staticClass:\"graph\",class:{ hidden: !_vm.edges }})])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\r\nimport { Component, Vue, Prop } from \"vue-property-decorator\";\r\n\r\nimport { isGraphCommunicatorMessage } from \"../entries/graphCommunication\";\r\n\r\nimport { MessageSender } from \"../entries/entry\";\r\n\r\nexport type GraphSetupEvent = {\r\n    messageSender: MessageSender;\r\n    reset: () => void;\r\n};\r\n\r\n@Component({})\r\nexport default class Graph extends Vue {\r\n    private title: string | null = null;\r\n\r\n    public mounted() {\r\n        this.$emit(\"setup\", {\r\n            messageSender: this.messageHandler,\r\n            reset: this.reset,\r\n        } as GraphSetupEvent);\r\n    }\r\n\r\n    private reset() {\r\n    }\r\n\r\n    private async messageHandler(message: any): Promise<void> {\r\n        if (!isGraphCommunicatorMessage(message)) {\r\n            return;\r\n        }\r\n        return;\r\n    }\r\n}\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Graph.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Graph.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./Graph.vue?vue&type=template&id=703df4aa&scoped=true&lang=pug\"\nimport script from \"./Graph.vue?vue&type=script&lang=ts\"\nexport * from \"./Graph.vue?vue&type=script&lang=ts\"\nimport style0 from \"./Graph.vue?vue&type=style&index=0&id=703df4aa&prod&lang=scss&scoped=true\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"703df4aa\",\n  null\n  \n)\n\nexport default component.exports","\r\nimport { Component, Vue, Prop } from \"vue-property-decorator\";\r\nimport { Entry, MessageSender } from \"../../entries/entry\";\r\n\r\nimport Graph, { GraphSetupEvent } from \"../../components/Graph.vue\";\r\n\r\nimport BaseMessageTemplate from \"./custom/BaseMessageTemplate.vue\";\r\n\r\n@Component({\r\n    components: {\r\n        Graph,\r\n        BaseMessageTemplate,\r\n    },\r\n})\r\nexport default class EntryWithGraph extends Vue {\r\n    @Prop() public title!: string;\r\n    @Prop() public id!: number;\r\n    @Prop() public entry!: Entry;\r\n    @Prop() public year!: number;\r\n\r\n    private reset: () => void = () => {};\r\n\r\n    private handleSetup(event: GraphSetupEvent) {\r\n        this.reset = event.reset;\r\n        this.messageHandler = event.messageSender;\r\n    }\r\n\r\n    private messageHandler: MessageSender = async () => {};\r\n}\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??ref--14-3!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./EntryWithGraph.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??ref--14-3!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./EntryWithGraph.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./EntryWithGraph.vue?vue&type=template&id=03256afc&lang=pug\"\nimport script from \"./EntryWithGraph.vue?vue&type=script&lang=ts\"\nexport * from \"./EntryWithGraph.vue?vue&type=script&lang=ts\"\nimport style0 from \"./EntryWithGraph.vue?vue&type=style&index=0&id=03256afc&prod&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('BaseMessageTemplate',{attrs:{\"title\":_vm.title,\"id\":_vm.id,\"year\":_vm.year,\"entry\":_vm.entry,\"messageHandler\":_vm.messageHandler,\"additionalReset\":_vm.reset}},[_c('div',{staticClass:\"graph\"},[_c('div',{staticClass:\"choices\"},[_c('div',{staticClass:\"title\"},[_c('b',[_vm._v(\"Warning\")]),_vm._v(\": a lot of flashes during the animation\")]),_c('div',{staticClass:\"c\"},[_c('label',[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.animate),expression:\"animate\"}],attrs:{\"type\":\"checkbox\"},domProps:{\"checked\":Array.isArray(_vm.animate)?_vm._i(_vm.animate,null)>-1:(_vm.animate)},on:{\"change\":function($event){var $$a=_vm.animate,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_vm._i($$a,$$v);if($$el.checked){$$i<0&&(_vm.animate=$$a.concat([$$v]))}else{$$i>-1&&(_vm.animate=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{_vm.animate=$$c}}}}),_vm._v(\"Animate\")])])]),_c('Graph',{on:{\"setup\":function($event){return _vm.handleSetup($event)}}})],1)])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\r\nimport { Component, Vue, Prop, Watch } from \"vue-property-decorator\";\r\nimport { Entry, MessageSender } from \"../../../../entries/entry\";\r\nimport BaseMessageTemplate from \"../BaseMessageTemplate.vue\";\r\n\r\nimport { isPassagePathingMessage } from \"../../../../entries/single-entries/2021/passage-pathing/communication\";\r\n\r\nimport {\r\n    GraphCommunicatorMessage,\r\n    PrivateGraphCommunicatorMessage,\r\n} from \"../../../../entries/graphCommunication\";\r\n\r\nimport Graph, { GraphSetupEvent } from \"../../../../components/Graph.vue\";\r\n\r\ninterface TicketData {\r\n    id: number;\r\n    value: number;\r\n    label: string;\r\n}\r\n@Component({\r\n    components: {\r\n        BaseMessageTemplate,\r\n        Graph,\r\n    },\r\n})\r\nexport default class PassagePathing extends Vue {\r\n    @Prop() public title!: string;\r\n    @Prop() public id!: number;\r\n    @Prop() public entry!: Entry;\r\n    @Prop() public year!: number;\r\n\r\n    private animate = false;\r\n\r\n    private graphMessageSender?: MessageSender;\r\n\r\n    private reset: () => void = () => {};\r\n\r\n    private handleSetup(event: GraphSetupEvent) {\r\n        this.reset = event.reset;\r\n        this.graphMessageSender = event.messageSender;\r\n    }\r\n\r\n    private sendMessage(message: PrivateGraphCommunicatorMessage) {\r\n        if (!this.graphMessageSender) {\r\n            throw new Error(\"Graph message sender not setup\");\r\n        }\r\n        this.graphMessageSender({\r\n            ...message,\r\n            kind: \"GraphCommunicatorMessage\",\r\n        } as GraphCommunicatorMessage);\r\n    }\r\n\r\n    private async messageHandler(message: any): Promise<void> {\r\n        if (!isPassagePathingMessage(message)) {\r\n            throw new Error(\"Invalid message\");\r\n        }\r\n        switch (message.type) {\r\n            case \"setup\":\r\n                // this.showGraph = true;\r\n                message.animateCallback(this.animate);\r\n                this.sendMessage({\r\n                    type: \"setup\",\r\n                    nodes: message.nodes.map((n) => ({\r\n                        ...n,\r\n                        color: \"white\",\r\n                    })),\r\n                    edges: message.edges.map((e, i) => ({\r\n                        ...e,\r\n                        id: i,\r\n                        color: \"white\",\r\n                    })),\r\n                });\r\n                break;\r\n            case \"current\":\r\n                this.changeColor(message.node, \"yellow\");\r\n                break;\r\n            case \"queue\":\r\n                this.changeColor(message.node, \"red\");\r\n                break;\r\n            case \"visited\":\r\n                this.changeColor(message.node, \"blue\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    private changeColor(id: number, color: string) {\r\n        this.sendMessage({\r\n            type: \"change-node-color\",\r\n            id,\r\n            color,\r\n        });\r\n    }\r\n}\r\n","import mod from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/ts-loader/index.js??ref--14-3!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PassagePathing.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/ts-loader/index.js??ref--14-3!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PassagePathing.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./PassagePathing.vue?vue&type=template&id=e39be4d4&lang=pug\"\nimport script from \"./PassagePathing.vue?vue&type=script&lang=ts\"\nexport * from \"./PassagePathing.vue?vue&type=script&lang=ts\"\nimport style0 from \"./PassagePathing.vue?vue&type=style&index=0&id=e39be4d4&prod&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('BaseMessageTemplate',{attrs:{\"title\":_vm.title,\"id\":_vm.id,\"year\":_vm.year,\"entry\":_vm.entry,\"messageHandler\":_vm.messageHandler,\"additionalReset\":_vm.reset}},[(_vm.showCalibrations)?_c('div',{staticClass:\"calibrations\"},_vm._l((_vm.visibleCalibrations),function(calibration){return _c('div',{key:calibration.id,staticClass:\"calibration\"},_vm._l((calibration.tokens),function(token){return _c('span',{key:token.id,staticClass:\"token\",class:{valid: token.isValid && token.isActive, selected: token.isSelected && token.isActive}},[_vm._v(_vm._s(token.value))])}),0)}),0):_vm._e()])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\r\nimport { Component, Vue, Prop, Watch } from \"vue-property-decorator\";\r\nimport {\r\n    Entry, MessageSender,\r\n} from \"../../../../entries/entry\";\r\nimport BaseMessageTemplate from \"../BaseMessageTemplate.vue\";\r\nimport { isTrebuchetMessage } from \"../../../../entries/single-entries/2023/trebuchet/communication\";\r\n\r\ninterface CalibrationData {\r\n    id: number;\r\n    tokens: TokenData[];\r\n}\r\n\r\ninterface TokenData {\r\n    id: number;\r\n    value: string;\r\n    isValid: boolean;\r\n    isSelected: boolean;\r\n    isActive: boolean;\r\n}\r\n\r\nconst windowSize = 10;\r\n@Component({\r\n    components: {\r\n        BaseMessageTemplate\r\n    }\r\n})\r\nexport default class TrebuchetView extends Vue {\r\n\r\n@Prop({required: false, default: undefined}) public messageHandlerSetter?: (sender: MessageSender) => void;\r\n    @Prop() public title!: string;\r\n    @Prop() public id!: number;\r\n    @Prop() public entry!: Entry;\r\n    @Prop() public year!: number;\r\n\r\n    private showCalibrations = false;\r\n    private calibrationData: CalibrationData[] = [];\r\n\r\n    private visibleCalibrations: CalibrationData[] = [];\r\n\r\n    private reset() {\r\n        this.showCalibrations = false;\r\n        this.calibrationData.length = 0;\r\n        this.visibleCalibrations.length = 0;\r\n    }\r\n    private async messageHandler(message: any): Promise<void> {\r\n        if (!isTrebuchetMessage(message)) {\r\n            throw new Error(\"Invalid message\");\r\n        }\r\n        this.showCalibrations = true;\r\n        switch (message.type) {\r\n            case \"setup\":\r\n                this.calibrationData = message.lines.map((n, i) => {\r\n                    return {\r\n                        id: i,\r\n                        tokens: n.map((t, j) => ({\r\n                            id: j,\r\n                            value: t.token,\r\n                            isValid: t.isValid,\r\n                            isActive: false,\r\n                            isSelected: t.isSelected\r\n                        }))\r\n                    };\r\n                });\r\n                break;\r\n            case \"activate\":\r\n                const line = message.selected;\r\n                this.calibrationData[line].tokens.forEach(t => t.isActive = true);\r\n                if (this.visibleCalibrations.length >= windowSize) {\r\n                    this.visibleCalibrations.shift();\r\n                }\r\n                this.visibleCalibrations.push(this.calibrationData[line]);\r\n                \r\n                break;\r\n        }\r\n        // this.showTicket = true;\r\n        // switch (message.type) {\r\n        //     case \"setup\":\r\n        //         this.ticketData = message.ticket.map((n, i) => {\r\n        //             return {\r\n        //                 id: i,\r\n        //                 value: n,\r\n        //                 label: \"\"\r\n        //             };\r\n        //         });\r\n        //         break;\r\n        //     case \"label\":\r\n        //         this.ticketData[message.index].label = message.label;\r\n        //         break;\r\n        // }\r\n    }\r\n\r\n}\r\n","import mod from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/ts-loader/index.js??ref--14-3!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Trebuchet.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/ts-loader/index.js??ref--14-3!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Trebuchet.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./Trebuchet.vue?vue&type=template&id=fe3c4f40&scoped=true&lang=pug\"\nimport script from \"./Trebuchet.vue?vue&type=script&lang=ts\"\nexport * from \"./Trebuchet.vue?vue&type=script&lang=ts\"\nimport style0 from \"./Trebuchet.vue?vue&type=style&index=0&id=fe3c4f40&prod&lang=scss&scoped=true\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"fe3c4f40\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('BaseMessageTemplate',{attrs:{\"title\":_vm.title,\"id\":_vm.id,\"year\":_vm.year,\"entry\":_vm.entry,\"messageHandler\":_vm.messageHandler,\"additionalReset\":_vm.reset}},[(_vm.card)?_c('div',{staticClass:\"scratch-card\"},[_c('div',{staticClass:\"header\"},[_c('div',{staticClass:\"card-id\"},[_vm._v(\"Card \"+_vm._s(_vm.card.id))]),_c('div',{staticClass:\"score\"},[_vm._v(_vm._s(_vm.card.score))])]),_c('div',{ref:\"left\",staticClass:\"left cell-wrapper\"},_vm._l((_vm.card.win),function(cell){return _c('div',{key:cell.id,staticClass:\"cell\"},[_c('span',[_vm._v(_vm._s(cell.value))])])}),0),_c('div',{ref:\"right\",staticClass:\"right cell-wrapper\"},[_c('div',{ref:\"selector\",staticClass:\"selector\"}),_vm._l((_vm.card.mine),function(cell){return _c('div',{key:cell.id,staticClass:\"cell\"},[_c('span',[_vm._v(_vm._s(cell.value))])])})],2)]):_vm._e()])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\r\nimport { Component, Vue, Prop, Watch } from \"vue-property-decorator\";\r\nimport {\r\n    Entry, MessageSender,\r\n} from \"../../../../entries/entry\";\r\nimport BaseMessageTemplate from \"../BaseMessageTemplate.vue\";\r\nimport { CommunicatorScratchCard, isScratchCardsMessage } from \"../../../../entries/single-entries/2023/scratch-cards/communicator\";\r\nimport { setTimeoutAsync } from \"../../../../support/async\";\r\n\r\nconst windowSize = 10;\r\n@Component({\r\n    components: {\r\n        BaseMessageTemplate\r\n    }\r\n})\r\nexport default class TrebuchetView extends Vue {\r\n\r\n@Prop({required: false, default: undefined}) public messageHandlerSetter?: (sender: MessageSender) => void;\r\n    @Prop() public title!: string;\r\n    @Prop() public id!: number;\r\n    @Prop() public entry!: Entry;\r\n    @Prop() public year!: number;\r\n\r\n    private card: CommunicatorScratchCard | null = null;\r\n    // {\r\n    //     id: 1,\r\n    //     score: \"123\",\r\n    //     win: \"5 37 16 3 56 11 23 72 7 8\".split(\" \").map((e, i) => ({\r\n    //         value: parseInt(e, 10),\r\n    //         id: i\r\n    //     })),\r\n    //     mine: \"3 79 35 45 72 69 15 14 48 88 96 37 11 75 83 56 23 7 16 50 21 91 32 97 17\"\r\n    //         .split(\" \").map((e, i) => ({\r\n    //             value: parseInt(e, 10),\r\n    //             id: i\r\n    //         }))\r\n    // };\r\n\r\n    private nextCell: number | undefined = undefined;\r\n\r\n    private cells: {\r\n        win: HTMLDivElement[],\r\n        mine: HTMLDivElement[]\r\n     } = {win: [], mine: []};\r\n\r\n    private reset() {\r\n        this.card = null;\r\n        return;\r\n        const selector = this.$refs[\"selector\"] as HTMLDivElement;\r\n        const right = this.$refs[\"right\"] as HTMLDivElement;\r\n        const cells = [...right.querySelectorAll(\".cell span\")] as HTMLDivElement[];\r\n        console.log(selector);\r\n        const sizes = cells.map(e => e.getBoundingClientRect());\r\n        const height = Math.max(...sizes.map(e => e.height));\r\n        const width = Math.max(...sizes.map(e => e.width));\r\n        selector.style.width = `${width}px`;\r\n        selector.style.height = `${height}px`;\r\n        selector.style.visibility = \"hidden\";\r\n        const {top: baseTop, left: baseLeft} = right.getBoundingClientRect();\r\n        const {top, left} = cells[0].getBoundingClientRect();\r\n        selector.style.top = `${top - baseTop}px`;\r\n        selector.style.left = `${left - baseLeft}px`;\r\n        this.nextCell = 0;\r\n        const iterate = () => {\r\n            if (this.nextCell === undefined) {\r\n                return;\r\n            }\r\n            if (this.nextCell < cells.length) {\r\n                const cell = cells[this.nextCell];\r\n                const {top: baseTop, left: baseLeft} = right.getBoundingClientRect();\r\n                const {top, left} = cell.getBoundingClientRect();\r\n                selector.style.top = `${top - baseTop}px`;\r\n                selector.style.left = `${left - baseLeft}px`;\r\n                selector.style.visibility = \"visible\";\r\n                this.nextCell++;\r\n                console.log(\"Updating to pos: \" + JSON.stringify({top, left}));\r\n                // setTimeout(iterate, 300);\r\n            } else {\r\n                this.nextCell = undefined;\r\n                selector.ontransitionend = null;\r\n            }\r\n        }\r\n        selector.ontransitionend = iterate;\r\n        // setTimeout(iterate, 0);\r\n        iterate();\r\n        \r\n    }\r\n\r\n    private async handleSendCard(card: CommunicatorScratchCard, isSlow: boolean) {\r\n        \r\n\r\n        // alert(JSON.stringify(card));\r\n        this.card = card;\r\n        await setTimeoutAsync(0);\r\n        this.selector().style.transition = isSlow ? \r\n            \"left 0.1s, top 0.1s\" :\r\n            \"left 0.01s, top 0.01s\" ;\r\n        const rightCells = this.right();\r\n        const leftCells = this.$refs[\"left\"] as HTMLDivElement;\r\n        this.cells = {\r\n            mine: [...rightCells.querySelectorAll(\".cell span\")] as HTMLDivElement[],\r\n            win: [...leftCells.querySelectorAll(\".cell span\")] as HTMLDivElement[],\r\n        };\r\n        [this.cells.mine, this.cells.win].flat().forEach(cell => {\r\n            cell.style.color = \"\";\r\n            cell.style.border = \"\";\r\n        });\r\n        const sizes = this.cells.mine.map(e => e.getBoundingClientRect());\r\n        const height = Math.max(...sizes.map(e => e.height));\r\n        const width = Math.max(...sizes.map(e => e.width));\r\n        const selector = this.$refs[\"selector\"] as HTMLDivElement;\r\n        selector.style.width = `${width}px`;\r\n        selector.style.height = `${height}px`;\r\n        selector.style.visibility = \"hidden\";\r\n        selector.style.top = \"0\";\r\n        selector.style.left = \"0\";\r\n    }\r\n\r\n    private right(): HTMLDivElement {\r\n        return this.$refs[\"right\"] as HTMLDivElement;\r\n    }\r\n\r\n    private selector(): HTMLDivElement {\r\n        return this.$refs[\"selector\"] as HTMLDivElement;\r\n    }\r\n\r\n    private async handleMoveSelector(id: number) {\r\n        const cell = this.cells.mine[id];\r\n        const {top: baseTop, left: baseLeft} = this.right().getBoundingClientRect();\r\n        const {top, left} = cell.getBoundingClientRect();\r\n        const selector = this.selector();\r\n        selector.style.top = `${top - baseTop}px`;\r\n        selector.style.left = `${left - baseLeft}px`;\r\n        selector.style.visibility = \"visible\";\r\n        await new Promise<void>((res) => selector.ontransitionend = () => res());\r\n        // console.log(\"Updating to pos: \" + JSON.stringify({top, left}));\r\n    }\r\n\r\n    public async handleSelectWin(mineId: number, winId: number) {\r\n        [this.cells.mine[mineId], this.cells.win[winId]].forEach(cell => {\r\n            cell.style.color = \"green\";\r\n        })\r\n        this.cells.mine[mineId].style.border = \"1px solid green\";\r\n        // this.cells.win[winId].style.color = \"green\";\r\n    }\r\n\r\n\r\n    private async messageHandler(message: any): Promise<void> {\r\n        if (!isScratchCardsMessage(message)) {\r\n            throw new Error(\"Invalid message\");\r\n        }\r\n        switch (message.type) {\r\n            case \"SendCard\":\r\n                await this.handleSendCard(message.card, message.isSlow);\r\n                break;\r\n            case \"MoveSelector\":\r\n                await this.handleMoveSelector(message.id);\r\n                break;\r\n            case \"SelectWin\":\r\n                await this.handleSelectWin(message.mineId, message.winId);\r\n                break;\r\n            case \"SendScore\":\r\n                this.card!.score = message.score;\r\n                break;\r\n        }\r\n    }\r\n\r\n}\r\n","import mod from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/ts-loader/index.js??ref--14-3!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ScratchCards.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/ts-loader/index.js??ref--14-3!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ScratchCards.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./ScratchCards.vue?vue&type=template&id=bdcc8d08&scoped=true&lang=pug\"\nimport script from \"./ScratchCards.vue?vue&type=script&lang=ts\"\nexport * from \"./ScratchCards.vue?vue&type=script&lang=ts\"\nimport style0 from \"./ScratchCards.vue?vue&type=style&index=0&id=bdcc8d08&prod&lang=scss&scoped=true\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"bdcc8d08\",\n  null\n  \n)\n\nexport default component.exports","import { VueConstructor } from \"vue\";\r\nimport { Vue } from \"vue-property-decorator\";\r\nimport { Entry } from \"./entry\";\r\n\r\nimport { ticketTranslation } from \"./single-entries/2020/ticket-translation\";\r\nimport TicketTranslationView from \"../views/entries/custom/2020/TicketTranslationView.vue\";\r\n\r\nimport { conwayCubes } from \"./single-entries/2020/conway-cubes\";\r\nimport ConwayCubesView from \"../views/entries/custom/2020/ConwayCubesView.vue\";\r\n\r\nimport { lobbyLayout } from \"./single-entries/2020/lobby-layout\";\r\nimport LobbyLayout from \"../views/entries/custom/2020/LobbyLayout.vue\";\r\n\r\nimport EntryWithPauseAndRun from \"@/views/entries/EntryWithPauseAndRun.vue\";\r\nimport EntryWithGraph from \"@/views/entries/EntryWithGraph.vue\";\r\n\r\nimport { entries as entries2015 } from \"./single-entries/2015\";\r\nimport { entries as entries2016 } from \"./single-entries/2016\";\r\nimport { entries as entries2017 } from \"./single-entries/2017\";\r\nimport { entries as entries2018 } from \"./single-entries/2018\";\r\nimport { entries as entries2019 } from \"./single-entries/2019\";\r\nimport { entries as entries2020 } from \"./single-entries/2020\";\r\nimport { entries as entries2021 } from \"./single-entries/2021\";\r\nimport { entries as entries2022 } from \"./single-entries/2022\";\r\nimport { entries as entries2023 } from \"./single-entries/2023\";\r\n\r\nimport { passagePathing } from \"./single-entries/2021/passage-pathing\";\r\nimport PassagePathing from \"@/views/entries/custom/2021/PassagePathing.vue\";\r\nimport { trebuchet } from \"./single-entries/2023/trebuchet\";\r\nimport TrebuchetView from \"../views/entries/custom/2023/Trebuchet.vue\";\r\nimport ScratchCardsView from \"../views/entries/custom/2023/ScratchCards.vue\";\r\nimport { scratchCards } from \"./single-entries/2023/scratch-cards\";\r\n\r\ninterface EntryMap { [key: string]: VueConstructor<Vue>; }\r\n\r\nconst keyMap: EntryMap = {\r\n    \"pause-and-run\": EntryWithPauseAndRun,\r\n    \"graph\": EntryWithGraph\r\n};\r\n\r\nconst buildMap = (tuples: Array<[Entry, VueConstructor<Vue>]>, entries: Entry[]): EntryMap => {\r\n    return entries.reduce((acc, next) => {\r\n        if (next.metadata && next.metadata.customComponent) {\r\n            const component = keyMap[next.metadata.customComponent];\r\n            acc[next.metadata.key] = component;\r\n        }\r\n        return acc;\r\n    },\r\n        tuples.reduce((acc, next) => {\r\n            acc[next[0].metadata!.key] = next[1];\r\n            return acc;\r\n        }, {} as EntryMap)\r\n    );\r\n};\r\n\r\nconst map2020: EntryMap = buildMap([\r\n    [ticketTranslation, TicketTranslationView],\r\n    [conwayCubes, ConwayCubesView],\r\n    [lobbyLayout, LobbyLayout]\r\n], entries2020);\r\n\r\nconst map2021: EntryMap = buildMap([\r\n    [passagePathing, PassagePathing]\r\n], entries2021);\r\n\r\nconst map2023: EntryMap = buildMap([\r\n    [trebuchet, TrebuchetView],\r\n    [scratchCards, ScratchCardsView]\r\n], entries2023);\r\n\r\nexport const map: { [key: string]: VueConstructor<Vue> } = [\r\n    buildMap([], entries2015),\r\n    buildMap([], entries2016),\r\n    buildMap([], entries2017),\r\n    buildMap([], entries2018),\r\n    buildMap([], entries2019),\r\n    map2020,\r\n    map2021,\r\n    buildMap([], entries2022),\r\n    map2023\r\n].reduce((acc, next) => {\r\n    for (const key in next) {\r\n        if (key in next) {\r\n            if (key in acc) {\r\n                alert(\"Duplicate key: \" + key);\r\n            }\r\n            acc[key] = next[key];\r\n        }\r\n    }\r\n    return acc;\r\n}, {});\r\n","import Vue, { VueConstructor } from \"vue\";\r\nimport Router, { RouteConfig } from \"vue-router\";\r\nimport Home from \"./views/Home.vue\";\r\nimport Entries from \"./views/Entries.vue\";\r\nimport SimpleEntryTemplate from \"./views/entries/SimpleEntryTemplate.vue\";\r\nimport TicketTranslationView from \"@/views/entries/custom/2020/TicketTranslationView.vue\";\r\n\r\nimport { entryList, EntryRoute } from \"./entries/entryList\";\r\nimport { map as entryComponentMap } from \"./entries/entryMap\";\r\n\r\nVue.use(Router);\r\n\r\nconst routes: RouteConfig[] = [\r\n  {\r\n    path: \"/\",\r\n    name: \"home\",\r\n    component: Home,\r\n    props: {\r\n      years: Object.keys(entryList)\r\n    }\r\n  },\r\n  {\r\n    path: \"/entry\",\r\n    name: \"entries\",\r\n    component: Entries\r\n  }\r\n];\r\n\r\nconst getTemplate = (entry: EntryRoute): VueConstructor<Vue> => {\r\n  if (entry.name in entryComponentMap) {\r\n    return entryComponentMap[entry.name];\r\n  }\r\n  // else if (entry.entry.metadata && entry.entry.metadata.customComponent) {\r\n  //   if (entry.entry.metadata.customComponent === \"pause-and-run\") {\r\n  //     return EntryWithPauseAndRun;\r\n  //   } else if (entry.entry.metadata.customComponent === \"ticket-translation\") {\r\n  //     return TicketTranslationView;\r\n  //   }\r\n  // }\r\n  return SimpleEntryTemplate;\r\n};\r\n\r\nconst flat = Object.keys(entryList)\r\n  .map((year) => entryList[year].map((entry, index) => ({ entry, year })))\r\n  .filter((k) => k);\r\nflat.flatMap((k) => k).forEach((k) => {\r\n  routes.push({\r\n    name: k.entry.name,\r\n    path: `/entry/${k.entry.name}`,\r\n    component: getTemplate(k.entry),\r\n    props: {\r\n      id: k.entry.date,\r\n      title: k.entry.title,\r\n      entry: k.entry.entry,\r\n      year: k.year,\r\n      stars: k.entry.stars || 0\r\n    }\r\n  });\r\n});\r\n\r\n\r\n\r\nexport default new Router({\r\n  mode: \"hash\",\r\n  base: process.env.BASE_URL,\r\n  routes\r\n});\r\n","import Vue from \"vue\";\r\nimport App from \"./App.vue\";\r\nimport router from \"./router\";\r\n\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport {\r\n  faSnowman,\r\n  faSnowflake,\r\n  faHollyBerry,\r\n  faGift,\r\n  faCandyCane,\r\n  faSleigh,\r\n  faLink\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/vue-fontawesome\";\r\n\r\nlibrary.add(\r\n  faSnowman,\r\n  faSnowflake,\r\n  faHollyBerry,\r\n  faGift,\r\n  faCandyCane,\r\n  faSleigh,\r\n  faLink\r\n);\r\n\r\nVue.component(\"font-awesome-icon\", FontAwesomeIcon);\r\n\r\nVue.config.productionTip = false;\r\n\r\n(BigInt.prototype as any).toJSON = function() {\r\n  return this.toString();\r\n};\r\n\r\nnew Vue({\r\n  router,\r\n  render: (h) => h(App),\r\n}).$mount(\"#app\");\r\n","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./EntryWithGraph.vue?vue&type=style&index=0&id=03256afc&prod&lang=scss\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Entries.vue?vue&type=style&index=0&id=1763c634&prod&lang=scss\"","export * from \"-!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../../../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Trebuchet.vue?vue&type=style&index=0&id=fe3c4f40&prod&lang=scss&scoped=true\""],"sourceRoot":""}