{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"EntryTemplate": {
		"prefix": "entry",
		"body": [
			"import { entryForFile } from \"../../../entry\";",
			"",
			"export const ${1:entry} = entryForFile(",
			"    async ({ lines, outputCallback, resultOutputCallback }) => {",
			"        const ns = lines.map(l => parseInt(l, 10));",
			"        let result: any = 0",
			"        for (const x of lines) { ",
			"        }",
			"        for (const x of ns) { ",
			"        }",
			"        await resultOutputCallback(result);",
			"    },",
			"    async ({ lines, outputCallback, resultOutputCallback }) => {",
			"        const ns = lines.map(l => parseInt(l, 10));",
			"        let result: any = 0",
			"        for (const x of lines) { ",
			"        }",
			"        for (const x of ns) { ",
			"        }",
			"        await resultOutputCallback(result);",
			"    },",
			"    {",
			"        key: \"${2:key}\",",
			"        title: \"${3:title}\",",
			"        supportsQuickRunning: true,",
			"        embeddedData: true",
			"    }",
			");"
		],
		"description": "Basic template for an entry",
		"scope": "typescript"
	},
	"CommunicatorTemplate": {
		"prefix": "communicator",
		"body": [
			"import { MessageSender, Pause } from \"../../../entry\";",
			"",
			"export interface I${1:Communicator}MessageSender {",
			"}",
			"export const buildCommunicator = (",
			"        messageSender: MessageSender | undefined,",
			"        pause: Pause",
			"    ): I${1}MessageSender => {",
			"    if (!messageSender) {",
			"        return new DummyMessageSender();",
			"    } else {",
			"        return new RealMessageSender(messageSender, pause);",
			"    }",
			"};",
			"",
			"",
			"type Private${1}Message = {",
			"};",
			"",
			"export type ${1}Message = {kind: \"${1}Message\"} & Private${1}Message;",
			"",
			"const buildMessage = (message: Private${1}Message): ${1}Message => {",
			"    return {",
			"        ...message,",
			"        kind: \"${1}Message\"",
			"    };",
			"};",
			"",
			"export function is${1}Message(message: any): message is ${1}Message {",
			"    return (message as ${1}Message).kind === \"${1}Message\";",
			"}",
			"",
			"class RealMessageSender implements I${1}MessageSender {",
			"    constructor(private readonly messageSender: MessageSender, private readonly pause: Pause) { }",
			"",
			"}",
			"",
			"class DummyMessageSender implements I${1}MessageSender {",
			"}",
		]
	},
	"VisualizerTemplate": {
		"prefix": "visualizer",
		"body": [
			"import { Pause, ScreenBuilder, ScreenPrinter } from '../../../entry';",
			"",
			"export interface I${1:Visualizer} {",
			"",
			"    setup(): Promise<void>;",
			"",
			"}",
			"",
			"export const buildVisualizer = (screenBuilder: ScreenBuilder | undefined, pause: Pause) => {",
			"    if (screenBuilder) {",
			"        return new RealVisualizer(screenBuilder, pause);",
			"    } else {",
			"        return new DummyVisualizer();",
			"    }",
			"}",
			"",
			"const constants = (() => {",
			"    const screenSize = {x: 100, y: 100};",
			"    return {",
			"        screenSize",
			"    };",
			"});",
			"",
			"class RealVisualizer implements I${1} {",
			"    private printer!: ScreenPrinter;",
			"    private constants!: ReturnType<typeof constants>;",
			"",
			"    constructor(",
			"        private readonly screenBuilder: ScreenBuilder,",
			"        private readonly pause: Pause",
			"    ) { ",
			"    }",
			"",
			"    public async setup() {",
			"        this.constants = constants();",
			"    }",
			"",
			"}",
			"",
			"class DummyVisualizer implements I${1} {",
			"    public async setup() {}",
			"}",
		],
		"description": "Basic template for an entry",
		"scope": "typescript"
	},
	"EntryListTemplate": {
		"prefix": "elist",
		"body": [
			"{",
			"    name: \"${1:name}\",",
			"    title: \"${2:title}\",",
			"    entry: ${3:entry}",
			"}"
		]
	}

}